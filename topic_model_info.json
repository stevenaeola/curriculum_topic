{"Topic":{"0":-1,"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18,"20":19,"21":20},"Count":{"0":116,"1":72,"2":71,"3":65,"4":65,"5":53,"6":49,"7":43,"8":41,"9":39,"10":35,"11":32,"12":30,"13":28,"14":26,"15":23,"16":21,"17":14,"18":13,"19":12,"20":12,"21":11},"Name":{"0":"-1_and_data_the_of","1":"0_algorithms_of_and_to","2":"1_systems_the_and_of","3":"2_security_to_and_of","4":"3_software_engineering_and_development","5":"4_programming_and_language_to","6":"5_description_games_game_3d","7":"6_ai_learning_and_of","8":"7_project_research_the_of","9":"8_interaction_mobile_design_hci","10":"9_description_module_this_purpose","11":"10_learning_machine_data_and","12":"11_image_vision_computer_of","13":"12_database_databases_data_relational","14":"13_text_language_processing_information","15":"14_and_in_data_of","16":"15_cdt_horizon_phd_research","17":"16_placement_year_the_industrial","18":"17_their_they_professional_defined","19":"18_professional_social_ethical_information","20":"19_data_science_and_the","21":"20_games_game_engine_design"},"Representation":{"0":["and","data","the","of","to","science","in","with","will","for"],"1":["algorithms","of","and","to","the","complexity","programming","structures","problems","functional"],"2":["systems","the","and","of","computer","operating","memory","networks","network","to"],"3":["security","to","and","of","quantum","the","cryptography","cyber","attacks","secure"],"4":["software","engineering","and","development","the","to","of","testing","in","team"],"5":["programming","and","language","to","the","of","languages","objectoriented","using","in"],"6":["description","games","game","3d","module","2d","students","this","to","skills"],"7":["ai","learning","and","of","the","intelligent","to","in","intelligence","artificial"],"8":["project","research","the","of","to","students","may","skills","and","in"],"9":["interaction","mobile","design","hci","and","user","of","humancomputer","to","the"],"10":["description","module","this","purpose","of","the","to","is","and","development"],"11":["learning","machine","data","and","of","to","the","methods","neural","as"],"12":["image","vision","computer","of","and","the","3d","to","geometry","in"],"13":["database","databases","data","relational","and","of","the","sql","to","systems"],"14":["text","language","processing","information","retrieval","the","models","and","recommender","for"],"15":["and","in","data","of","the","linear","to","calculus","methods","for"],"16":["cdt","horizon","phd","research","the","to","activities","module","students","engagement"],"17":["placement","year","the","industrial","of","to","in","abroad","study","students"],"18":["their","they","professional","defined","evidence","competencies","learning","participants","eportfolio","work"],"19":["professional","social","ethical","information","issues","the","of","and","digital","society"],"20":["data","science","and","the","in","of","to","from","lm","staff"],"21":["games","game","engine","design","development","to","and","industry","creation","the"]},"Representative_Docs":{"0":["Scaling up Data Science  \n \nThis block aims to introduce the concepts required to deliver data science projects at scale, tackling problems which cannot be solved on a single computer. Learners will understand how to do this from a practical point of view as well as understanding the limitations of such approaches.\n \n   \n \n \u201cBig Data\u201d involves data whose volume, diversity and complexity requires new technologies, algorithms and analyses to extract valuable knowledge, which go beyond the normal processing capabilities of a single computer. The field of Big Data has many different faces such as databases, security and privacy, visualisation, computational infrastructure or data analytics\/mining some of which you will already have learned.&nbsp; This teaching block is about scaling that up, and making use of multiple machines, possibly in the cloud, to produce data science solutions.  This module will provide the following concepts:  1.&nbsp; Introduction to Big data: introducing the main principles behind distributed\/parallel systems with data intensive applications, identifying key challenges: capture, store, search, analyse and visualise the data.  2. Big Data frameworks and how to deal with big data: this includes the MapReduce programming model, as well as an overview of recent technologies (Hadoop ecosystem, and Apache Spark). Then, you will learn how to interact with the latest APIs of Apache Spark (RDDs, DataFrames and Datasets) to create distributed programs capable of dealing with big datasets (using Python and\/or Scala) &nbsp;  3. Finally, we will dive into the data mining and machine learning part of the course, including data preprocessing approaches (to obtain quality data), distributed machine learning algorithms and data stream algorithms. To do so, you will use the Machine learning library of Apache Spark (MLlib) to understand how some machine learning algorithms (e.g. Decision Trees, Random Forests, k-means) can be deployed at a scale.  Learners should consider whether there are relevant problems in their workplace that require the use of high performance computing and techniques to address Big Data problems (joining up with the on-the-job acctivity). \n \n  Teaching Goal 1Understand the principles that allow the processing of big data sets.Teaching Goal 2Understand the limitations of big data technologies for distributed processing.Teaching Goal 3Demonstrate practical skills required to implement big-data solutions using modern large-scale data and compute infrastructures.Teaching Goal 4Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; &nbsp;S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. &nbsp;&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.","Synoptic Data Science Assessment 2  \n \n\n \n   \n \n This assessment is intended to help learners remember consolidated knowledge from their second year of learning.&nbsp; It will be delivered in two parts:  1)&nbsp;&nbsp; &nbsp;A multiple-choice knowledge test intended to mirror the knowledge test in the End Point Assessment 2)&nbsp;&nbsp; &nbsp;An open paper which poses higher level questions to data science learners which requires them to apply their first-year learning to problems from across the curriculum.&nbsp; This paper will include a section for the learner to review their progress against the KSBs.  While this assessment should be considered as \u201cAssessment of Learning,\u201d it is also intended as an instrument for learning to clearly signpost to learners that they are working towards an End Point Assessment, and that the knowledge, skills and behaviours should be developed in an integrated fashion, and that data science is not just a series of siloed domains.  The paper will include a reflective piece on the learner\u2019s progress towards the KSBs as part of a demonstration of their approach to their own professional development, and to foster an ongoing positive attitude to their development beyond their apprenticeship journey. \n \n  Understands how data science as a field and a community has developed and functions in relation to other disciplines.Understands the importance Ethics and Professionalism in relation to data science.Demonstrates progress towards achieving all the KSBs for the Data Scientist Apprenticeship KSB K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods. 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.","Work-Based Project (Assessment)  \n \n\n \n   \n \n This is the capstone project of the Data Science degree.&nbsp; It is a requirement that this is a work-based project which must be completed prior to the Gateway Review.&nbsp; The project will not include a dissertation, as a separate project report must be delivered by the learner as part of the End Point Assessment.&nbsp; Instead, the assessment will be based on a portfolio of project related artifacts.&nbsp; Learners should consult the relevant project brief each academic year, but an indicative set of deliverables is:   Outline Project Agreement  \u2013 An agreement between the learner, the university and employer which i) identifies clear organisational needs, ii) scopes the project and ensures that learner has access to necessary system, data, tools and computer services to complete the project and allows achievement of the necessary KSBs.&nbsp; &nbsp;   Ethical and Legal Assessment  \u2013 Following initial agreement for the project, undertake a review of any legal and ethical considerations, including consideration of local company regulations, and university ethics guidelines.   Initial Project Plan  \u2013 A suitable plan such as a Gantt Chart, or set of User Stories for delivery of the project.   Software Deliverable  \u2013 Evidence of a software that has been designed and delivered, with evidence of progress shown in a suitable software repository.   Reflective Log  \u2013 A weekly, electronic log documenting the progress of the project including design decisions made, problems encountered, reviews against plan and agreed changes to the scope.   Presentation  \u2013 A demonstration of the data science solution, and delivery of findings from the data analysed that meet organisational needs.   KSB Review  \u2013 An evaluation to clarify which KSBs have been met through the project completion.  There is an explicit requirement for learners to undertake a project within the workplace as part of their role (on-the-job and off-the-job) \n \n  Be able to plan and manage a significant work-based, data science project.Can identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data.Can apply knowledge of legal and ethical issues in relation to a data science problem including understanding the limitations of any techniques used.Can communicate effectively through written work and through effective presentation of results.Demonstrate a comprehensive understanding of current and developing data science approaches and apply them where appropriate. KSBs  Knowledge A Data Scientist must understand:K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data.  Skills A Data Scientist is able to:S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. Behaviours  &nbsp;A Data Scientist demonstrates:S1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.S2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.S3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.S4. Consideration of problems in the context of organisation goals.S5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.S6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community."],"1":["CS208 - Logic &amp; Algorithms To equip students with the tools to model and measure computation. To build on CS103 Machines, Languages and Computation and develop further understanding of the mathematical foundations of computation. To foster an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types. First Semester: Propositional Logic revisited: natural deduction systems; translation between real and formal domains; inference, proofs, axioms; equivalence of systems  Formal Systems and Interpreted Formal Systems: language, inference and interpretation, syntax and semantics, satisfaction, soundness, completeness  Predicate Logic: predicates, universal and existential quantification; generalisation, specialisation by symbolic substitution; awareness of free variables, bound variables, and alpha-equivalence  Relations: relations as predicates, relations as graphs; equivalence relations, preorders, partial orders; functions and partial functions as special cases of relations; simple logic (Prolog) programming as proof search  Models of Computation: simple abstract machines, Turing machines, expression evaluation, lambda-calculus reduction, imperative execution, correspondence between models of equivalent strength, the Church-Turing thesis Second Semester: Algorithms: algorithms and processes; iteration and recursion, studied comparatively; preconditions, postconditions, and invariants; specification as relation between inputs and outputs  Introduction to Algorithmic Complexity: basic algorithmic classification, with examples; the order notation (Big-oh); elementary complexity and estimation of run times; the tyranny of growth  Searching and Sorting: the complexity of a range of techniques, including the divide and conquer approach; the relative complexity of searching and sorting algorithms; the sorting algorithms covered will include bubble sort, insertion sort, merge sort and quick sort; searching, including sequential search and the binary chop; hashing  Binary Trees revisited: implementations by array and by nodes with pointers; expression trees; binary tree implementation of sorted list; algorithms covered include traversal, searching, balancing and deletion; awareness of ordering and balancing invariants and their implications for correctness and complexity  Graphs revisited: directed and undirected graphs; representations of graphs; basic graph algorithms; topological sorting; applications of graphs to real world problems (for example telecommunications, transportation systems, dependencies between objects)  Complexity Implications of ADT Implementation: e.g. for priority queues, graphs; access times  Fundamental Techniques: divide and conquer, greedy algorithms, dynamic programming, backtracking search  Additional Problems, Algorithms and Techniques: as selected by class lecturers  Practical Work: Further exploration of algorithms and abstract data types, empirical evaluation of performance, one or two larger scale exercises.  On completion of the class, a student should be able: to understand a mathematical basis for a simple natural deduction system and perform rigorous proof construction given a well-defined framework  to work confidently with propositional logic in a natural deduction setting and develop an understanding of predicate logic  to understand the concept of an interpreted formal system, along with the concepts of soundness and completeness in this context  to have a good understanding of the Church-Turing thesis and the general concept of computation, making correlations between different models of computation, e.g., lambda calculus, Turing machines, Hoare\u2019s IMP  to appreciate the concepts of logical invariant, precondition and postcondition, with respect to data structures and algorithms  to study a number of fundamental algorithms, including in particular the fundamental algorithms of searching and sorting, identifying the invariants on which they rely  to make a critical assessment of different implementations of algorithms and abstract data types  to carry out a number of empirical studies of the performance of algorithms and abstract data types  to appreciate a number of fundamental computational problems, and be aware of real world instances of those problems ","Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026) This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics. This course is an important foundation for all areas of Informatics.  \n \nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis.  \n \nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications). \n \nThe following is an indicative list of topics covered: \nAsymptotic notation and algorithmic analysis \nSequential data structures (lists, stacks, queues) \nBasic and more advanced sorting algorithms \nTree data structures, heaps and priority queues \nHashing and dictionaries \nGraphs and graph algorithms \nDynamic programming \nThe classes P and NP \n \nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples. On completion of this course, the student will be able to:\n     \n         explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms  describe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings  work with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)  describe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems  define informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance \n     ","Algorithms (COMP0005)   Aims:  \n\n The aim of this module is to provide students with an introduction to data structures and algorithms that are fundamental to programming and to understand computation. We will apply these techniques to computational problems, with the aim to develop problem-solving skills, to develop the ability to analyse the efficiency of algorithms, and to encourage a thoughtful approach to the analysis and design of computational problems.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand a variety of fundamental data structures and be able to use them effectively in the design and implementation of algorithms. \n\t Understand a variety of fundamental algorithmic problems and algorithms for solving them. \n\t Analyse the space and time efficiency of algorithms and understand how to design efficient algorithms. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Analysis of algorithms \n\t Abstract Data Types \n\t Sorting Algorithms \n\t Searching Algorithms \n\t Graphs Algorithms \n\t String-processing Algorithms \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n Students are expected to have basic experience of programming in Python. Resources for self-study and Programming Tutor support will be provided in advance of the module.   "],"2":["Advanced Systems Programming (H) COMPSCI4089   This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.     The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system.    &nbsp;   The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing  &nbsp;  systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.     By the end of this  &nbsp;course students will be able  &nbsp;to  :    \u25a0&nbsp;  Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust;   to   d  iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;    \u25a0&nbsp;  Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;    \u25a0&nbsp;  Discuss the advantages and disadvantages of integrating automatic memory management with the operating system\/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and\/or operating systems;     \u25a0&nbsp;  Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and    \u25a0&nbsp;  Construct and\/or analyse simple programming to demonstrate understanding of novel techniques for memory management and\/or concurrent programming, to understand the trade-offs and implementation decisions.  ","CS106 - Computer Systems &amp; Organisation  Semester 1:  to enable the student to develop an understanding and appreciation of a computer system\u2019s functional components \u2013 both hardware and software, their characteristics, their interactions, and their fundamental role in the manipulation of data. Semester 2:  to further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.  Semester 1:  Machines and Computation: Brief history of computers and the nature of computation, e.g. how arithmetic expressions are evaluated.  Introduction to Operating Systems: brief history, role and purpose, basic functionality and operation, the tradeoffs in operating systems design, the influences of different computer systems and environments, security and open source software on operating system design.  Introduction to Net-centric computing: brief history and the development of the Internet, the range of specialisations within net-centric computing, emerging technologies and their capabilities, limitations and near-term potential.  Introduction to a simple computer: CPU basics and organisation (registers, the ALU, the Control Unit and datapath); the bus; clocks; I\/O; memory; interrupts).  Basic Functional (Hardware) Components of Computer Systems: for example, CPU, memory, I\/O, networks.  Basic Functional (Software) Components of Computer Systems: for example, assemblers, compilers, and operating systems.  Elementary assembly language programming: simple computations involving loops, counters, and accumulation; awareness of bugs.  Representation of numeric data: unsigned binary, signed magnitude, and twos complement, floating point; twos complement arithmetic; range, precision, and errors in floating point arithmetic.  Representation of text, audio, and images; issues associated with compression and communication, e.g. how JPEG works and when it doesn\u2019t; Huffman coding.  Function of logic gates; sum of products expressions, Boolean algebra, combinatorial and sequential logic circuits, for example those for multiplexers, adders, registers, shift registers, counters, overflow detection; PLAs.  Semester 2:  Introduction to instruction set architecture, micro-architecture and system architecture.  Processor instruction set architecture: instruction types and formats, register sets, addressing modes.  Processor structures: memory-to-register architectures; load\/store architectures; overview of Flynn\u2019s classification of computer architectures.  The relationship between low-level and high-level programming languages.  Instruction sequencing, flow-of-control, subroutine call and return mechanisms.  Low-level architectural support for high-level languages.  Low-level architectural support for operating systems.  Low-level architectural support for concurrency.  Memory: types of memory, overview of the memory hierarchy.  Input\/Output: types of I\/O; overview of common I\/O devices and interfaces.  Networks: types of network; overview of common network standards, protocols, and interfaces.  Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments.  On completion of the first half of the class, a student should have developed an understanding of: The function and basic operation of the fundamental hardware components of computer systems.  The function and basic operation of the fundamental software components of computer systems.  The hierarchy of, and the interaction between, the components of a typical computer system.  The concept of a logical layer and the benefits of building abstract layers in hierarchical fashion.  The need for APIs and middleware and how computing resources are used by application software and managed by system software.  The evolution of early networks and the Internet and the structure of a typical, current, network architecture.  The concept of an instruction set architecture (ISA), and the nature of a machine-level instruction in terms of its functionality and use of resources (registers and memory).  The various classes of instruction: data movement, arithmetic, logical, and flow control; their use and abuse in simple programs.  The typical types of data\/number\/information representations and the implications of these for calculations and transformations.  Boolean functions and logic expressions and their implementation in digital logic gates, and combinational and sequential circuits. On completion of the second half of the class, a student should be able to: Demonstrate their knowledge of data\/number\/information representations and the limitations of such representations.  Appreciate how a CPU may be constructed from combinational and sequential logic circuits.  Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.  Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.  Appreciate how conditional operations are implemented at the machine level.  Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.  Appreciate how an ISA has an impact on high-level languages and the design of compilers.  Understand the basic principles of operation of the memory, I\/O and network subsystems of a typical computer.  Appreciate how future developments in computer systems may be influenced by current trends and technologies. ","Networks and Operating Systems Essentials 2 COMPSCI2024   The co  urse will introduce students to essential topics in computer networks and operating systems. It has a focus on the underlying concepts, design, and operation of the Internet, and on the   role,   basic features  ,  &nbsp;and principles of computer operating system  s  .  &nbsp;     To introduce students to essential topics in computer networks and operating systems.   &nbsp;   The course   aims to give  &nbsp;an overview of how the Internet works, and the difference between the Internet and the World-Wide Web. It introduces the basic principles of networked systems, the concept of a protocol, and the importance of layering in the design of the network. It discusses how systems are connected together to form a network; how networks are connected together to form an internet; and how data is reliably delivered across the Internet. The web protocols, and HTTP, are briefly introduced, as an example of the type of application that can run on the Internet.    &nbsp;   In addition, the course aims to present the abstractions that underlie traditional operating systems, and to sketch basic implementations for key components including process scheduling, memory management and file systems. Students should gain an awareness of implementation trade-offs and corresponding impacts on system behaviour.     By the end of this course students will be able to:    \u25a0&nbsp;  Understand the principles underlying networked systems, such as the Internet, including the importance of layering in protocol design  ;    \u25a0&nbsp;  Describe the key features of a local-area network technology, such as Ethernet  ;    \u25a0&nbsp;  Explain the concept of internetworking, and how the Internet is built as a network of networks; describe key features of the network layer  ;    \u25a0&nbsp;  Describe what is meant by a best-effort service, and explain why the Internet offers such a service; discuss how the transport layer can enable reliable connections on this substrate  ;    \u25a0&nbsp;  Understand the difference between the Web and the Internet, and be able to describe, in outline, the operation of HTTP  ;    \u25a0&nbsp;  Be familiar with issues around privacy and security of Internet traffic  ;    \u25a0&nbsp;  Use appropriate terminology in correctly explaining the functions of an operating system  ;    \u25a0&nbsp;  Contrast the low-level hardware facilities (e.g., physical memory frames) with the higher-level abstractions provided by an operating system (e.g., virtual memory pages).  ;    \u25a0&nbsp;  Evaluate the relative merits of a range of simple resource allocation algorithms (e.g., for process scheduling)  ;    \u25a0&nbsp;  Implement simple operating system components and basic algorithms (  e.g.,  &nbsp;scheduling, free space management)  ;    \u25a0&nbsp;  Knowledge and understanding of privacy and security issues of Internet traffic  ;    \u25a0&nbsp;  Recognise risk\/safety for safe operation of computing systems at the operating system level  .  "],"3":["CS423 - Cyber Security The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice. By the end of the module students should have developed a security mindset which allows them to consider key elements of cyber security as they apply to a range of computer systems.&nbsp; Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp; After completing this class participants will be able to:&nbsp; Identify and critically assess threats for a given context.&nbsp;  Evaluate an existing or proposed system in terms of potential vulnerabilities and argue appropriate mitigation techniques for a given context.&nbsp;  Design and implement an aspect of technical security which makes use of appropriate techniques.&nbsp;  Compare and contrast aspects of managing cyber security such as cyber security frameworks. ","Cyber Security  \n \nTo develop an understanding of the nature and scope of the cyber security and its relevance in protecting data confidentiality, integrity and availability across a range of devices, systems and networks. To understand the nature of attacks and vulnerabilities in principle and in existing systems. To develop core skills to select, apply and implement security controls necessary for the security of a system. To recognise and evaluate the organisational and human impacts of cyber security, and the related impacts of technology choices and decisions in these contexts.\n \n   \n \n Cyber security is an essential consideration for the protection of IT-based devices, systems, networks and data, providing safeguard and reassurance to the organisations and individuals that rely on them. We provide coverage of both technical and human\/organisational perspectives. Students gain an understanding the principles of cyber security, including attacks, vulnerabilities and secure designs. You will gain knowledge and practical experience across a range of key cyber security topics, including foundational concepts and principles, access control, device and system security, authentication, cryptographic mechanisms and applications, network and Internet security, security management, risk assessment, cyber-attacks and threat intelligence, intrusion detection and incident response, and human aspects. You will learn about the challenges and attacks that need to be considered when designing and implementing secure systems, along with associated approaches to ensure that security is addressed appropriately.&nbsp; \n \n  Knowledge and Understanding:Knowledge and understanding of the important security properties (Confidentiality, Integrity, Availability, Authenticity, Accountability, Non-Repudiation). Knowledge of security controls and protocols. Knowledge of practical attacks on real systems and an understanding of classes of attacks on generic systems. Knowing and understanding secure practices on a technical, human and organisational level.Intellectual Skills:To understand security controls and protocols on a fundamental level, and an ability to analyse novel controls and protocols. To identify the existence of attacks on insecure systems, and to propose the appropriate security controls to improve the security of the system. To analyse and reflect upon the effectiveness of security and protection decisions in practical contexts.&nbsp;Professional Skills:To design and implement cyber security solutions, taking appropriate account of the context and constraints. To recognise the professional issues involved in the design, development and deployment of cyber security solutions. &nbsp;Transferable Skills:To think independently while giving due weight to the arguments of others. To understand complex ideas and relate them to specific problems or questions. To communicate ideas effectively in writing to specific problems or questions. To communicate ideas effectively in writing.&nbsp;","Security (COMP0141)   Aims:  \n\n The module aims at giving students a foundation in computer security, cryptography and human aspects of security. After taking the module students should be able to identify risks and security sensitive aspects of systems, where a system can range from a small and simple solution for a specific task to a full organisation including IT infrastructure and users. They will be taught this from the experience of how systems have failed in the past and by analysing systems from an adversarial viewpoint. \n\n Students should also know core defensive techniques to prevent or mitigate attacks. They should be able to formulate a threat model for a system and reason about whether it is secure or insecure, Students should be able to deliver effective security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how to formulate a threat model including the assets to be protected, the capabilities of the adversary, and reason about whether the probability the adversary may succeed. \n\t Know core cryptographic methods to protect communication such as message authentication codes, digital signatures, encryption, and key exchange. Understand the security guarantees cryptographic tools provide and conversely how inappropriate use lead to vulnerabilities. \n\t Understand key principles and concepts related to computer and systems security. Understand the complexities of building flexile and correct access control and authentication systems, from a technical and HCI perspective. Recognize and exploit common security vulnerabilities on hosts and networks. \n\t Know that security involves people, processes and technology. Understand how security needs to fit with business goals and organisational processes to work effectively&nbsp;rather than disrupt, create friction, and drain resources. \n\t Know the basics of how to influence and manage security behaviours of a range of organisational stakeholders, employees, managers, developers, security specialists. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n The module gives students a foundation in computer security, cryptography and human aspects of security. Students will study attacks against system and analyse systems from an attacker\u2019s perspective. The module will also cover core defensive techniques and develop threat models that can be used to analyse the security of a system. The module studies specific cryptographic systems, core computer security, and security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   "],"4":["Introduction to Software Engineering  \n \nAn aim of this module is to provide a general understanding of Software Engineering; the typical phases of the software lifecycle with particular reference to practical Requirements and Specification, Software Design, and Implementation &amp; Testing techniques. It serves to prepare students for the various software development projects undertaken throughout their studies.\n \n   \n \n You'll be introduced to the concept of Software Engineering and will be taken through the software development process: deciding exactly what should be built (Requirements &amp; Specification), designing how it should be built (Software Architecture), development strategies (Implementation &amp; Testing), and maintaining change (Software Evolution and Maintenance). \n \n   Knowledge and Understanding:  The different approaches to managing the software engineering process. The practice of producing specifications from informal briefs. Intellectual Skills:  Understand how to determine formal software requirements. Understand how to create and deploy an effective plan for testing software systems. Professional Skills:  The ability to apply software engineering methodologies in practical scenarios. The ability to understand how good software is closely related to the needs of users. The ability to evaluate, select and deploy appropriate tools and techniques. Transferable Skills:  The ability to develop project plans. The ability to produce and critique possible solutions to a design problem.&nbsp;","CS308 - Building Software Systems To extend and deepen the students understanding of the analysis, design and implementation of software systems; to provide further experience in the activity of designing and implementing non-trivial systems; and to enable the student to demonstrate practical competence in a group environment.The goal for the student is the development in a group setting of significant systems from scratch aiming not just at  any  solution but a good solution, and to be introduced to more general Software Engineering topics. Further study of software engineering methods drawn from the following: requirements analysis and specification, establishing stakeholders\u2019 viewpoints, use-case modelling, systems analysis, specification, design (in particular the development of a detailed design for the construction phase, designing for re-use and future change, further design patterns, design metrics, implementation and testing of designs), implementation, defensive programming, verification and validation, and maintenance. Further study of software development tools, especially those that facilitate software development in a group context (e.g. version control and configuration management tools, xUnit etc.). Software engineering management: project management, team organization.The substantial practical activity will exercise skills from a selection of syllabus topics, and will incorporate group projects. This material thus provides a broader experience of the management and organisation of software processes for the production of large-scale software. On completion of the class, a student should be able to: understand the need for working effectively within a team environment, on practical software engineering problems, including planning and managing a group\u2019s workload  display a disciplined approach to good practices in the general area of software engineering, and to apply software engineering techniques to practical problems  appreciate the importance of organisation, management and professionalism in the development of large scale software  undertake a requirements analysis and to write a software requirements specification  determine, from an object-oriented analysis, a detailed design which incorporates the necessary technical infrastructure and which provides a basis for implementation  identify opportunities for re-use, including the use of design patterns  distinguish between designs in terms of their intrinsic quality and in terms of objective criteria such as flexibility, robustness to change etc.  implement, verify and validate a medium-sized software system  effectively employ a range of software development tools e.g. IDEs, version control, testing and issue tracking ","Software Engineering: Fundamentals and Professional Development   Summary module description:   \n  This module introduces students to the concepts, practice and management in software engineering and the professional development to support it. It addresses the lifecycle activities associated with developing software as part of a system as well as the management activities required to ensure that the software is developed on time, within budget and is fit for purpose. The module also incorporates case studies and examples to show the application of the concepts and principles to real-world systems.  \n \n A learning approach is adopted which reflects software engineering theory and practice. Students &nbsp;&nbsp;are given course material to read\/view prior to the lectures, and are required to produce a number of assessments in teams.  \n     Outline content:   \n  The module draws on the IEEE\u2019s articulation of knowledge on the subject, as presented in the Software Engineering Book of Knowledge v3 (SWEBOK).  \n \n  \n &nbsp;Introduction to Software Engineering (e.g. models, methods, processes, and management).  \n Human factors in Software Engineering  \n Software requirements fundamentals, processes, requirements elicitation techniques\/tools  \n Software design fundamentals, architecture, design techniques and modelling approaches  \n Software construction fundamentals, technologies\/tools, environments  \n Software validation methods, and testing techniques  \n Software maintenance and configuration management  \n Software quality requirements, measurement, and management  \n Software Engineering professional practices (e.g. professionalism, legal, ethical, economic impact of software, documentation, communication skills in written and presentation form)  \n Software Engineering in the modern computing era (e.g. DevOps transformation)  \n  \n     Assessable learning outcomes:  \n  By the end of the module, it is expected that the student will be able to:  \n \n  \n Understand the software engineering theory, and practice them in developing software applications in the wide domain context  \n Describe the software lifecycle and the activities associated with each phase of it (feasibility, requirements, design, implementation, testing, handover, maintenance, evolution, and decommissioning)  \n Create software application development project plans, and conduct risk analysis, configuration management and testing  \n Distinguish the difference between plan-based and agile-based approaches to software development  \n Appreciate the importance of software engineering to real-world projects  \n Work jointly with others in a group project as well as being able to work independently  \n Demonstrate innovative, creative, and critical thinking towardsa development of solution  \n Perform in communication and documentation  \n  \n  "],"5":["Advanced Programming (M) COMPSCI5002   The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.     The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.  It will also cover in brief the underlying Java run time system and techniques found in other languages.     By the end of the course students will be able to:    1.   Use the programming language concepts covered in the earlier Programming course: type checking, scoping, abstraction, data hiding and encapsulation; in an effective way;    2.   &nbsp;Describe the core concepts and issues involved in programming with polymorphic constructs, multiple threads of execution, and networking mechanisms in a general   way;    3.   Use these concepts in Java programs.  ","Principles of Programming (COMP0002)   Aims:  \n\n This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.   Learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Design, implement, and debug small programs using two different programming paradigms, given straightforward specifications. \n\t Develop straightforward algorithms to solve a range of common programming problems. \n\t Compare and contrast the different paradigms, understanding the relative advantages and disadvantages of each. \n\t Use common programming tools such as compilers, editors and debuggers. \n\t Gain a basic understanding of how programs use computer memory, memory management, and the binary representation of data values. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Core Programming Concepts: \n\n  What is programming? \n\t Programming languages. \n\t Programs and algorithms. \n\t Compilers and tools. \n\t Running and debugging programs. \n  Introduction to Imperative Programming: \n\n  Core imperative programming ideas: sequence, selection, iteration, recursion, assignment and variables. \n\t Types and type checking. \n\t Functions, parameters, scope and lifetime. \n\t Arrays and files. \n\t Pointers, memory allocation, and memory management. \n  Introduction to Functional Programming: \n\n  Core functional programming ideas. \n\t Recursion and recursive data structures such as lists. \n\t Lazy evaluation. \n\t Role of types. \n\t Higher order functions. \n\t List comprehension. \n\t Recursive functions. \n  Program design in the small: \n\n  Designing and implementing small programs. \n\t Implementing and using basic algorithms and data structures. \n\t Good programming and design practice. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.   ","Programming and Algorithms  \n \nTo teach the principles of design and analysis of programs, including fundamental programming concepts, algorithms, and data structures.To give significant experience in applying this knowledge to develop programs in a suitable language, and with appropriate software development tools.\n \n   \n \n \t The module introduces basic principles of programming and algorithms. \t It covers fundamental programming constructs, such as types and variables, expressions, control structures and functions. \t The module also teaches how to design and analyse simple algorithms and data structures that allow efficient storage and manipulation of data. \t Finally, it familiarises students with software development methodology, including documentation, testing, debugging, and the use of software development tools, such as integrated development environments (IDEs) and version control systems.   You will spend around 6 hours per week in lectures, computer classes and tutorials. \n \n   Knowledge and Understanding:  Understanding of the theory and practice of programming.  Intellectual Skills  Understand and logically evaluate program requirements and specifications; \t Understand the complex ideas of programming solutions and relate them to particular problems; \t The ability to design and analyse simple algorithms and data structures.  Professional Skills  The ability to read and write programs; \t The ability to apply appropriate software development methods and tools.  Transferrable Skills:  The ability to solve problems using programming; \t To schedule and present work, and to retrieve additional learning material. "],"6":["CSY1091 \u2013 3D Game Asset Production  Description:  This module introduces students to the technical 3D modelling skills and creative processes required to produce 3D digital assets within creative industry projects. The module will also introduce students to the study of professional developers and their product standards, to contextualise and understand current market trends and platform limitations.  ","CSY1081 \u2013 Programming for Game Engines  Description:  The purpose of this module is for students to explore 2D game engine functionality and develop skills to manage and work with 2D objects, worlds and spaces. Students will engage with the important technical skills required for programming 2D computer games within a game engine.  ","CSY1090 \u2013 2D Game Asset Production  Description:  The purpose of this module is to introduce students to the principles and technical skills used to create 2D digital graphics for video games and other creative industries, and to explore the creative processes required to produce their own digital assets to professional standards.  "],"7":["Artificial Intelligence (H) COMPSCI4004   Artificial Intelligence   (  H  )  &nbsp;is an introduction to Artificial Intelligence, giving the students an overview of intelligent agent design.     The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.    Students will gain practical experience in labs, programming various aspects of intelligent systems.     By the end of the course students will be able to:    1.   Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of  &nbsp;  the subject in its current form;    2.   Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems etc    3.   Discuss difficulties in computer perception;    4.   Discuss basic issues in planning;    5.   Explain and apply search-based problem-solving techniques;    6.   Formulate and apply Bayesian networks in modelling and planning;    7.   Explain and apply utility theory as a probabilistic framework for rational decision making;    8.   Explain and apply basic machine learning techniques to learn from rewards and observations  .  ","CS310 - Foundations of Artificial Intelligence To help the student to a broad appreciation of the scale and nature of the problems within Artificial Intelligence and to a detailed understanding of some of the fundamental techniques used to address those problems. The class will cover the first 12 chapters of the 3rd edition of AI: A Modern Approach by Russell and Norvig. The topics to be covered will include: Introduction: What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing.  Constraint satisfaction problems: defining CSPs, constraint propagation, backtracking search in CSPs, local search in CSPs, exploiting problem structure.  Logical agents: propositional logic for agent behaviour, propositional theorem proving, propositional model checking and SAT solving, agents based on propositional logic.  First-order logic: syntax and semantics, knowledge engineering in first-order logic.  Inference in first-order logic: unification and lifting, forward chaining, backward chaining, resolution.  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches.  Planning and acting in the real world: time, schedules and resources, hierarchical planning, planning and acting in non-deterministic domains, multi-agent planning.  Knowledge representation: ontological engineering, events, mental events and objects, reasoning with default information, an example application. The class will focus on the practicalities of using these techniques to build intelligent agents. Practical work will be set, including the programming of an intelligent agent for a specified task. On completion of the class, a student should be able: to understand the modern view of AI as the study of agents that receive percepts from the environment and perform actions  to demonstrate awareness of the major challenges facing AI and the complexity of typical problems within the field  to exhibit strong familiarity with a number of important AI techniques, including in particular search, knowledge representation, planning and constraint management  to assess critically the techniques presented and to apply them to real world problems ","CS6053 - Artificial Intelligence and Machine Learning (2023\/24)  \nThis module surveys essential principles, methods, and techniques in AI and machine learning. It covers a broad range of AI topics such as problem solving, knowledge representation, logical and probabilistic inference, and machine learning using methods of automata theory, logics, probability theory and statistics. It discusses examples of intelligent systems and studies how to develop applications that can learn from experience such as expert systems, automatic classifiers and autonomous systems planning their actions and communicating in natural language. Students will be offered lectures, which introduce key concepts, explain main principles and techniques in AI, and demonstrate how to apply them in areas such as image recognition and price forecasting. \n \nThe workshop will provide practical sessions to help students understand the content of the lectures and build the necessary skills to develop AI-applications using suitable problem descriptions and datasets.   \nThe main topics of the study will include: \n \n1. Introduction to Artificial Intelligence and Machine Learning. Rational reasoning and intelligent behaviour. Human and Artificial Intelligence. Examples of AI systems. (LO1) \n \n2. Rational Agents. Conceptual model of rational agents. Environment types and agents classification. (LO2, LO3) \n \n3. Problem Solving in State Space. Uninformed search and Heuristic Search. Comparison of the search algorithms. (LO2, LO3) \n \n4. Knowledge Representation and logics. Facts, heuristics, assumptions, conditions, and conclusions. Logical modelling and logical inference. Logical theories and ontologies. (LO2, LO3) \n \n5. Actions and Knowledge-based Planning. Linear, hierarchical and non-linear planning. Continuous planning and replanning. (LO2, LO3) \n \n6. Uncertainty and Probabilistic Reasoning. Decision making under uncertainty. Probabilistic space and degree of truth. Probabilistic distributions. Conditional, prior and posterior probability. Bayes Rule. (LO2, LO3) \n \n7. Learning Agents. Conceptual model. Supervised and unsupervised learning. Learning from observations. Decision tees, space of hypotheses and performance measurement. (LO2, LO3) \n \n8. Statistical Learning. Classification, approximation and prediction. Probabilistic inference. Parameters learning using Bayes nets. Linear regression. (LO2, LO3) \n \n9. Neural Networks. Computation in the brain and artificial neuron models. Linear neural networks, multi-layer networks. Backpropagation. Application to image processing. (LO2, LO3) \n \n10. Natural Language Processing. Communication and language. Language structure and linguistic data. Parsing and syntactic processing of written texts. Problems. (LO2, LO3) \n \n11. Legal, Social, Ethical and Professional Issues in AI. AI and explanation. AI and law. Ethics of AI and impact of AI on society. (LO4)   \nOn completing the module, the student will: \n \n- LO1: Understand the principles of rational reasoning and intelligent behaviour, the similarities and the differences between natural and human intelligence. \n \n- LO2: Know the most popular models, methods and algorithms for building and operation of rational and learning agents and processing information. \n \n- LO3: Be able to develop basic AI programs which demonstrate intelligent behaviour and rational thinking in typical environment using available data sets. \n \n- LO4: Understand the Legal, Ethical &amp; Professional Issues brought by AI and the impact of AI on individuals, organisations and the society as a whole. "],"8":["Enhanced MSc Dissertation in Cyber Physical Systems  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern cyber physical systems. To prepare students for future academic or industrial research-oriented careers in cyber physical systems. To develop students' research, planning, organisation, presentation and scientific writing skills. To train students in original research and to develop their innovative and creative skills.\n \n   \n \n Building on research carried out in then Enhanced MSc Research Project module, under the supervision of their project supervisors, students will further study the topic areas of their Enhanced MSc Research Project module, to gain a deeper understanding of the background, the theoretical underpinnings, the state of the art development, and the applications of the their research topic in that project module, with the objective of developing new theoretical insights, novel methods, innovative solutions, and better applications.&nbsp;  The results from further study and are to be distilled into a final MSc dissertation (which may incorporate main results of the Enhanced MSc Research Project module as appropriate). The major results of the dissertation will be condensed into a suitably formatted research paper, authored by the student. The dissertation and the paper form the assessed output of the module. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Creativity and innovative. Original thinking.&nbsp; &nbsp;","Enhanced MSc Research Project in Computer Science  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science. To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of computer science. The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking.","Enhanced MSc Research Project in Computer Science (Artificial Intelligence)  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science (artificial inteliigence). To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of artificial intelligence (e.g., automatic scheduling and optimization, intelligent modelling and analysis, intelligent human computer interaction, agents, machine learning, computer vision, data mining and related areas). The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding : Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking."],"9":["Mobile Human-Computer Interaction for MSc COMPSCI5112   Mobile Human-Computer Interaction for MSc gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods  &nbsp;and evaluation techniques  .    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (M) COMPSCI5015   Mobile Human-Computer Interaction (H) gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (H) COMPSCI4068   Mobile Human-Computer Interaction   (H)   gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  "],"10":["CSY3032 \u2013 Systems Development Approaches  Description:  This purpose of this module is to: develop further the concepts learned in the prerequisites level 5 module by placing analysis and design techniques and approaches into context; explore alternative approaches to requirements capture and specification, and to development models; give guidance on how to map these development models onto organisational situations; develop an understanding of the importance of 'softer' skills in systems development, and experience in applying them; develop the ability to select, apply and justify appropriate methods and tools that will make an effective contribution to information systems development.  ","CSY2061 \u2013 Mobile Application Development 1  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ","CSY2091 \u2013 Mobile Application Development  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  "],"11":["Machine Learning (H) COMPSCI4061   A practical introduction to the foundations of machine learning.     To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Explain the   typical   strengths and weaknesses of a selection of common algorithms    6.   Appreciate some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ","Machine Learning  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students the to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You'll spend around six hours each week in lectures and computer classes for this module. \n \n   Knowledge and Understanding:  Understanding the capabilities, strengths and limitations of machine learning paradigms(A3) \t an appreciation of learning systems and learning algorithms (A4)  Intellectual Skills:  The ability to understand complex ideas and relate them to specific situations (B4) \t The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)  Professional Skills  The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1) \t The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)  Transferable Skills:  The ability to address real problems and assess the value of their proposed solutions (D1) \t The ability to retrieve and analyse information from a variety of sources and produced detailed written reports on the result (D4) ","Machine Learning (20cr)  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You will also have the opportunity to work on real-world datasets and gain experience in technical paper writing in the format of conference publications. &nbsp;  You'll spend around six hours each week in lectures and computer classes for this module. \n \n  Knowledge and Understanding:&nbsp;Understanding the capabilities, strengths and limitations of machine learning paradigms(A3)&nbsp;an appreciation of learning systems and learning algorithms (A4)Intellectual Skills:&nbsp;The ability to understand complex ideas and relate them to specific situations (B4)&nbsp;The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)Professional Skills:The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1)&nbsp;The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)Transferable Skills:&nbsp;The ability to address real problems and assess the value of their proposed solutions (D1)&nbsp;The ability to describe the method, evaluation process and result analysis in technical expressions in the form of scientific papers (D4)"],"12":["LH Computer Vision and Imaging   Vision is one of the major senses that enables humans to act (and interact) in (ever)changing environments, and imaging is the means by which we record visual information in a form suitable for computational processing. Together, imaging and computer vision play an important role in a wide range of intelligent systems, from advanced microscopy techniques to autonomous vehicles. This module will focus on the fundamental computational principles that enable an array of picture elements, acquired by one of a multitude of imaging technologies, to be converted into structural and semantic entities necessary to understand the content of images and to accomplish various perceptual tasks. We will study the problems of image formation, low level image processing, object recognition, categorisation, segmentation, registration, stereo vision, motion analysis, tracking and active vision. The lectures will be accompanied by a series of  exercises in which these computational models will be designed, implemented and tested in real-world scenarios.","Computer Vision  \n \nTo provide a grounding in existing techniques and current research in computer vision.To give experience in implementing computer vision solutions to real world problems.\n \n   \n \n You'll examine current techniques for the extraction of useful information about a physical situation from individual and sets of images. You'll learn a range of methods and applications, with particular emphasis being placed on the detection and identification of objects, image segmentation, pose estimation, recovery of three-dimensional shape and analysis of motion. These problems will be approached with both traditional and modern Computer Vision approaches including Deep Learning. You will spend 5 hours per week in lectures, tutorials, and computer classes for this module. \n \n   Knowledge and Understanding  Understanding of current techniques in image analysis and computer vision and an awareness of their limitations. \t An appreciation of the underlying mathematical principles of computer vision. \t &nbsp;Experience in designing and implementing computer vision systems.  Intellectual Skills  Apply knowledge of computer vision techniques to particular tasks. \t Evaluate and compare competing approaches to vision tasks. \t Evaluate vision systems.  Professional Skills  Develop a working knowledge of computer vision\/image analysis algorithms and evaluate the applicability of various algorithms and operations to particular tasks.  Transferable Skills  Apply knowledge of the methods and approaches presented to different problem domains using the available resources (libraries, internet, etc.)&nbsp; ","Computer Vision Methods and Applications (H) COMPSCI4066     The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of  &nbsp;  building advanced image-based applications. Examples of potential vision-based applications include:   image understanding in   mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production  &nbsp;tools  , interactive gaming, augmented reality and visual biometrics  , forensic image analysis, security and surveillance,   and medical imaging.   The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:  &nbsp;face detection,  &nbsp;object recognition, tracking, segmentation and 3D imaging.     \u25a0&nbsp;  To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.    \u25a0&nbsp;  To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above  &nbsp;(section 13)  . Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines.     \u25a0&nbsp;  To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.     By the end of the course students   will   be able to:     1.   Analyse  &nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;    2.   Implement feature extraction and object recognition algorithms;    3.   Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D   surfaces from stereo-pair images, or motion fields from image sequences;    4.   Demonstrate the ability to apply the rudiments of information theory and basic image compression   &nbsp;                                     techniques to the design of image coding\/decoding algorithms;    5.   Demonstrate competence in the use of the   programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.  "],"13":["Databases and Interfaces  \n \nTo provide students with a general introduction to the theory and practice of database systems.To enable students to gain experience with a modern database system through the use of the SQL language.To give an understanding of the structure and workings of database systems and provide some insight into recent developments.To enable students to gain experience with design and implementation of GUI interfaces within a database environment.\n \n   \n \n Databases are everywhere and we interact with many different databases every day, using the web, using electronic calendars, diaries or timetables, making appointments, searching for contact details, shopping online, looking up directions, and many more things. These databases need to be both easy to use and fast. This module considers both the structure of databases, including how to make them fast, efficient and reliable, and the appropriate user interfaces which will make them easy to interact with for users. You will start by looking at how to design a database, gaining an understanding of the standard features that management systems provide and how you can best utilise them and then develop an interactive application to access your database. Throughout the lectures and computing sessions you will learn how to design and implement systems using a standard database management system, web technologies and GUI interfaces through practical programming\/system examples. You will spend around three hours per week in lectures and two hours per week in organised computer labs studying for this module, and will be expected to spend additional time practising and completing your coursework. \n \n   Knowledge and Understanding  Ability to understand and use SQL; \t An understanding of the ANSI\/SPARC and relational models of database systems.  Intellectual Skills  Basic knowledge of the mathematics underlying relational database systems; \t Ability to design and implement database systems; \t Ability to design and implement a simple Web GUI.  Professional Skills:  The use of SQL for database specification and manipulation; \t The use of web technologies and GUI interfaces for database front-end development.  Transferable Skills:  Understanding of the use and administration of database systems; \t Understanding the use of web technologies and GUI interfaces. ","CC5051 - Databases (2023\/24)  \nIntroduces techniques for analysing, designing and implementing database systems. An understanding of data modelling and design concepts is provided and database programming language skills are taught. The practical aspect of developing database systems is emphasised and use is made of a widely-used commercial database system (e.g. Oracle) for this purpose.&nbsp; \n \nThe module will enable students to give an introduction to the issues governing the design and implementation of database systems. Theoretical aspects of designing sound database systems, as well as the practical aspects of implementing such systems are presented. This therefore allows students to understand, and put into practice, the techniques available for analysing, designing and developing database systems.   \nThe main areas of the module syllabus include: \n \nDatabases and Database Management Systems: architectural framework, data independence. LO5 \nData analysis and modelling: conceptual data model notation, Entity-Relationship modelling, normalisation theory. LO1, LO2, LO3 \nDatabase models: historical background, hierarchical, network, relational models. LO3, LO5 \nRelational database theory: the model and its terminology, primary\/foreign keys, integrity constraints, logical schema transformation. LO2, LO3 \nRelational Database languages: querying, insertion, deletion, update, views and reporting with SQL. LO4, LO5 \nRelational Algebra: algebraic operations, reference to SQL. LO4, LO5 \nCase study: practical application of database design and implementation. LO1, LO2, LO3, LO4   \nOn successful completion of this module, the student will be able to: \nLO1: Produce an Entity-Relationship model from a realistic problem specification \nLO2: Use formal design techniques (e.g. normalisation) to produce a database schema \nLO3: Design and implement a database system from a conceptual data model \nLO4: Manipulate and extract data stored in a database using relational algebra and SQL \nLO5: Discuss the relative merits of the relational environment ","Databases, Interfaces and Software Design Principles  \n \nTo provide students with a general introduction to the theory and practice of database systems. To enable students to gain experience with a modern (relational) database system through the use of the SQL language. To give an understanding of the structure and workings of relational database systems and provide some insight into recent developments. To enable students to gain experience with design and implementation of database driven web interfaces. To give an understanding of the principles of software engineering design through determining user needs and requirements capture.\n \n   \n \n Databases are everywhere. Via a multitude of different user interfaces, we interact with many different databases every day, whether using the web, electronic calendars, diaries or timetables, searching for contact details, or looking for directions using a mobile phone. As such databases need to be both easy to use and fast. This module focusses on both the theory and practice of databases and interfaces to them. We examine the fundamentals of the relational database model, as well as implementations of the model in database management systems (DBMS) and languages to interact with them such as Structured Query Language (SQL). We explore relevant software design principles such as understanding user needs, requirements and software specifications and how this relates to database design and implementation. And because databases do not exist in isolation, we also examine how to design and build ways to interact with them, specifically via web development for which database access is key. \n \n  Knowledge and Understanding:An understanding of the relational models of database systems. Ability to understand and use SQL. Understanding of the principles of web development and software engineering design.Intellectual Skills:Basic knowledge of the theory underlying relational database systems. Ability to design and implement database systems. Ability to design user interfaces for a database.&nbsp;Professional Skills:The use of SQL for database specification and manipulation. The use of web technologies for database front-end development.&nbsp;Transferable&nbsp;Skills:Understanding the use and applications of database systems. Understanding the use of web technologies and user interfaces. Understanding the user needs when designing software \/ database prototypes.&nbsp;"],"14":["Text as Data - An Introduction to Document Analytics (H) COMPSCI4074   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches.  &nbsp;  The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka\/Spark Mlib).     This course aims to introduce students to   language modelling, geometric interpretations of documents, information theory, network models and in general the use of   stochastic thinking (including building on the probability theory learned during the   Data Fundamentals  &nbsp;c  ourse). This is  &nbsp;illustrated through   a number of  &nbsp;supervised and unsupervised text processing and analytics approaches  &nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics  .   &nbsp;  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka\/Spark   Mlib  ).     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the vector space, network graphs, language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.  ","Text as Data - An Introduction to Document Analytics (M) COMPSCI5096   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze   and critique   recent   developments   in  &nbsp;  natural language and   text processing   academic  &nbsp;literature  .     8.   Evaluate and explain the appropriate application of   recent   research   developments   to real-world problems.  ","Text as Data for MSc COMPSCI5106   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze and critique recent   developments   in  &nbsp;  natural language and   text processing   academic literature.     8.   Evaluate and explain the appropriate application of recent research developments to real-world problems.  "],"15":["Foundations in Maths for Data Science  \n \nTo provide a foundation of mathematical skills to equip apprentices with both confidence and competence in a range of fundamental elementary mathematical techniques and basis for advanced mathematical methods used in the study and analysis of data science problems.\n \n   \n \n This course provides a basic course in algebra and calculus, introducing key elements of definition, manipulation, graphical representation of functions, as well as quadratic equations, simultaneous linear equations, differentiation and integration. \n \n  Demonstrate algebraic facility with algebraic topics including linear, quadratic, exponential, logarithmic and trigonometric functions.Produce and interpret graphs of basic functions of these typesDemonstrate the skill of computation with real sequences and seriesCompute limits, derivatives and definite and indefinite integrals of basic functions of these typesUnderstand and be able to apply the basics of vector algebra KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; &nbsp; S1. Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; &nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;","CS259 - Quantitative Methods in Computer Science The class will teach the quantitative and numerical methods needed through practical examples. Teaching these methods through practical examples will both show the relevance of the methods being taught and strengthen the programming skills of the students in this important area.To teach the quantitative and numerical methods that underpin modern Computer Science, such as (but not restricted to) Artificial Intelligence and Data Analytics. The class will also provide students with the numerical methods needed to perform quantitative evaluations of algorithms and software.L Obj 1 : to understand and use linear algebra techniques as used in modern AI and data analytics: scalars, vectors, matrices, tensorsL Obj 2 : to understand multivariate calculus techniques as used in modern AI and data analytics: derivatives, gradients, integrals, convex optimisationL Obj 3 : to understand and apply probability theory as used in modern AI and data analytics: randomness, probability distributions, variance and expectation, expected valueL Obj 4 : understand and apply statistical techniques as used modern AI, data analytics and quantitative evaluation of software and algorithms: basic data analysis, significance tests, basic Bayesian statistics 1. Linear algebra notation is used in Machine Learning to describe the parameters and structure of different machine learning algorithms. This makes linear algebra a necessity to understand how neural networks are put together and how they are operating. This part of the course will cover: Scalars, Vectors, Matrices, Tensors  Matrix Norms  Special Matrices and Vectors  Eigenvalues and Eigenvectors 2. Multivariate calculus is used to supplement the learning part of machine learning. It is what is used to learn from examples, update the parameters of different models and improve the performance. This part of the course will cover: Derivatives  Integrals  Gradients  Differential Operators  Convex Optimization 3. Probability: probability used to make assumptions about the underlying data when we are designing these deep learning or AI algorithms. It is important for us to understand the key probability distributions, and we will cover it in depth in this course. This part of the course will cover: Elements of Probability  Random Variables  Distributions  Variance and Expectation  Special Random Variables 4. Statistics: statistical methods are used in AI to analyse data and quantify the performance of agents.&nbsp; &nbsp; Statistical concepts: mean, standard deviation, variance, confidence intervals.&nbsp; &nbsp; Statistical methods for data analytics&nbsp; &nbsp; Use of statistics in performance measurement&nbsp; &nbsp; Introduction to Bayesian methods L Out 1 : ability to apply basic data analysis to a range of problems in Computer Science and Software Engineering.L Out 2:L Out 3:L Out 4:","Probability Models and Time Series  \n \nThe purpose of this module is to provide a thorough grounding in a broad range of techniques required in the analysis of probabilistic and statistical models, and to provide an introduction to stochastic processes by studying techniques and concepts common in the analysis of discrete time Markov Chains. It will also deepen and broaden the students\u2019 knowledge and experience of statistics by studying the theory and methods used in time series and forecasting.\n \n   \n \n In this teaching block the ideas of probability introduced in the first year are extended to continuous random variables. It will provide an introduction to stochastic processes, (i.e. random processes that evolve with time) and time series analysis (i.e. series of observations evolving in time and observed at discrete points in time). There will be a particular focus on discrete-time Markov chains and forecasting methods which are fundamental to the wider study of techniques required in the analysis of probabilistic and statistical models.&nbsp; &nbsp; \n \n  Demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science. &nbsp;Identify and formulate problems in terms of probability and solve them to build up a simple stochastic model. &nbsp;Understand and apply basic properties of discrete-time Markov chains. &nbsp;Carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 9.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 10.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 11.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;"],"16":["Horizon CDT Outreach and exhibitions: public engagement (Horizon CDT)  \n \nThis module enables students to undertake and report on public engagement activities such as outreach or exhibitions. All students are expected to participate in and report on public engagement activities by their Year 3 annual review.During Year 1 up to six talks, from people involved in a range of public engagement activities, will be organised by the module convenor. Students are expected to attend these talks. The speakers will be a mixture of University staff and external partners. Students are expected to independently identify opportunities for public engagement and organize their own involvement. Students are not required to undertaken public engagement activities during Year 1, but they must have completed the module by the Year 3 annual review. This module allows students who have successfully undertaken public engagement to obtain 10 credits in recognition of this activity. In order to be awarded credits students must report their public engagement activities in ONE of two ways, EITHER:1) A report published on the student's online profile pageOR2) Participation in a student-led public engagement showcasePreparation for these activities will be supported by the Horizon CDT; students are also encouraged to take general university and graduate school modules that support the preparation of public engagement materials and activities.\n \n   \n \n This module enables students to undertake and report on public engagement activities such as outreach or exhibitions. All students are expected to participate in and report on public engagement activities by their Year 3 annual review.  During Year 1, up to six talks&nbsp;from people involved in a range of public engagement activities, will be organised by the module convenor. Students are expected to attend these talks. The speakers will be a mixture of University staff and external partners.  Students are expected to independently identify opportunities for public engagement and organize their own involvement. Students are not required to undertaken public engagement activities during Year 1, but they must have completed the module by the Year 3 annual review.  This module allows students who have successfully undertaken public engagement to obtain 10 credits in recognition of this activity.  In order to be awarded credits students must report their public engagement activities in ONE of two ways, EITHER:  1) A report published on the student's online profile page  OR  2) Participation in a student-led public engagement showcase   &nbsp; \n \n  Students will be able to:* communicate concepts related to digital identity and personal data to a general audience; * use digital tools to report on outcome and experience of public engagement activity.","Horizon CDT Optional Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of a second CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company\/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement. &nbsp;\u2022&nbsp;Be able to understand the relation between the work completed within their placement and the DE programme as a whole.\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career.","Horizon CDT Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of their CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company\/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement; outlining expectations, duties and outcomes.\u2022&nbsp;Communicate an awareness and understanding of their placement partner\u2019s specific concerns and how they re-oriented their existing skills and knowledge base to suit. Contextualise their placement experience in relation to their future PhD research activities. \u2022&nbsp;Demonstrate a developing understanding of the differing organisational structures and demands on team members across industry and academia.\u2022&nbsp;Be able to understand and communicate the relationship between the work completed within their placement and the DE programme as a whole (i.e. \u2018Creating our lives in data\u2019).\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement; and how they relate to both academia and industry.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career.\u2022&nbsp;Demonstrate the ability to respond to the needs of others and transfer skills across disciplines."],"17":["CS415 - Industrial Placement To enable the student to experience the application of aspects of their degree course in an industrial context and so to understand the complexities of commercial software development. The period of industrial placement lasts for approximately twelve months; students are expected during their fourth year to take an active part, in cooperation with the placement coordinators, in securing an appropriate placement. If, after displaying due diligence, students are unable to secure any form of suitable external placement then arrangements will be found within the University or, alternatively and probably more likely, transfer to the Honours degree in Computer Science can be arranged. The nature of the work undertaken will vary substantially; it is expected that the majority of the students (like those on industrial placement for related degrees) will find placements where they will be working close to the frontiers of what is presently achievable. It is also expected that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp;  to build on and consolidate material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to undertake independent writing and working  to display an appreciation of good practices in software engineering ","CS416 - Industrial Placement 1 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires. The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the MEng Computer Science degree, but if circumstances require it can be undertaken later in the course than the end of third year. The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the work reported will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp; \u2022 to build on material acquired in the first three years of the degree course \u2022 to work in industry as a member of an industrial team \u2022 to pull together ideas from one or more of the classes they have undertaken \u2022 to display a disciplined approach to good practices in the general area of the degree course \u2022 to undertake independent working &nbsp;","CS552 - Industrial Placement 2 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the Computer Science MEng degree, but if circumstances require it can be undertaken later in the course than the end of third year.The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. On completion of the class, a student should be able: to build on material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to pull together ideas from one or more of the classes they have undertaken  to display a disciplined approach to good practices in the general area of the degree course to undertake independent writing and working"],"18":["CS322 - DTSP Work Based Learning 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Participants will undertake the following.&nbsp; Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Produce personal development plans.&nbsp;  Maintain a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp; Produce evidence that they meet a set of competencies defined by a recognised professional body.  After completing this class participants will be able to:&nbsp; Demonstrate reflective work practices.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate their understanding and application of digital and technology solutions concepts within their work-place.&nbsp; ","CS357 - Integrated Project 3 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Apprentices will undertake the following.&nbsp; A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;  Work-based learning which includes:&nbsp;  Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Producing personal development plans&nbsp;  Writing weekly journal entries where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;  Producing evidence that they meet a set of competencies defined by a recognised professional body.&nbsp;    After completing this class participants will be able to:&nbsp; Demonstrate their understanding and application of good software development practices within their work place.&nbsp;  Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies. ","CS256 - Integrated Project 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Apprentices will undertake the following.&nbsp; A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;  Work-based learning which includes:&nbsp;  Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Producing personal development plans.&nbsp;  Maintaining a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;  Producing evidence that they meet a set of competencies defined by a recognised professional body.    After completing this class participants will be able to:&nbsp; Display an understanding and application of good software development practices within their work place.&nbsp;  Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies. "],"19":["CS255 - Professional Issues The aim of the class is to ensure that participants are aware of the legal, social, ethical and professional issues commensurate with the practice of Computer Science\/Software Development.  Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.&nbsp;  ICTs and society: the information society; impact of ICT on society; cyber crime; digital evidence.&nbsp;  General and Specific Statute Law including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.&nbsp;  After completing this class participants will be able to:&nbsp; Understand the legal and regulatory issues facing information and computing professionals.&nbsp;  Appreciate the characteristics of professionalism.&nbsp;  Understand how their organisation addresses the legal, ethical, social and professional issues that arise within the IT sector. ","Professional Skills and Issues (H) COMPSCI4038   This course introduces the social, ethical, legal, and professional issues involved in the widespread deployment of information technology. It stimulates students to develop their own, well-argued positions on many of these issues.     Graduates in Computing Science, Software Engineering, and related disciplines need to understand the   social, ethical, legal, and   professional   as well as technical   issues   inherent in the  &nbsp;widespread deployment of   information technology  &nbsp;(IT)  .    They  &nbsp;  ne  ed to develop the ability to ask serious questions about the social impact of   IT  &nbsp;and to evaluate proposed answers to those questions.   &nbsp;They need to know the   laws and   professional   codes of conduct relevant to the IT industry  &nbsp;(e.g.,   intellectual property, privacy  ,  &nbsp;  freedom of information,  &nbsp;computer  &nbsp;and Internet  &nbsp;misuse,   and professional responsibilities).    This course aims to:    stimulate thinking about the social and ethical implications of the widespread and sustainable use of IT  ;    develop students' awareness of the laws and professional codes of conduct governing the IT industry;    expose students t  o IT industry working practices, including the need for   continuing professional development  ;    devel  op information gathering skills;    encourage students to adopt principled, reasoned stances on important issues in the topic area;    develop   students'   verbal and written argumentation skills.     By the end of this course students will be able to:    1.   I  dentify the principal social, ethical, legal, and professional issues in information technology (IT);    2.   E  xplain the laws and codes of conduct relevant to the IT industry, and relate them to examples of IT in practice;    3.   U  se analytical tools to break down complex ethical issues in IT;    4.   D  evelop and present arguments on social, ethical, legal, and professional issues in IT;    5.   C  onstructively criticise the arguments of others.  ","CS5071 - Professional and Ethical Issues (2023\/24)  \nThis module focuses on professional, social, ethical issues within the context of social responsibility and covers relevant computer laws (LSEPI) underpinning the Computing discipline.&nbsp; The focus of the module is empowering student to take their place in society as socially responsible professionals and allowing the exploration of self-awareness, empathy, self-efficacy and engagement in students \n \nAssessment: Coursework (100%) \n \nThe aims of this module are to: \n\u2022 Expose students to a range of professional and ethical issues to prepare them to develop their own response to working with a professional outlook. \n\u2022 Prepare students for the world of work and equip them with the knowledge and appreciation of professional bodies, code of conducts and professional certifications. \n\u2022 Provide students with knowledge and understanding of the regulations governing the digital environment (e.g. Internet) and social, ethical and professional issues (LSEPI) underpinning the Computing discipline. \nIntroduce students to academic research and research ethics, and to academic writing.   \n\u2022 Professional Issues (LO1,LO2) \n\u2022 Regulating the digital environment \n\u2022 Professional bodies\u2019 Codes of Conduct \n\u2022 Electronic Information, risks, misuse and criminal activity \n\u2022 Social &amp; Ethical issues (LO1) \n\u2022 Current issues, AI, Big Data, Cyber Security etc \n\u2022 Professional ethics and responsibilities \n\u2022 Social and Environmental concerns \n\u2022 Legal Issues (LO3,LO4) \n\u2022 An understanding of current laws regulating computing (e.g. Computer Misuse act and others) \n\u2022 Digital content and intellectual property rights \n\u2022 Introduction to research (LO5) \n\u2022 Research ethics and the University code of conduct \n\u2022 Literature search and review, academic writing, referencing and avoiding plagiarism   \nLO1 Demonstrate an awareness of the importance of Legal, social, ethical and \nprofessional issues (LSEPI) underpinning the computing discipline, and present a piece of \ncritical analysis of their relevance to a topic of current importance. \nLO2 Appreciate and explain current regulations, and professional body guidelines (such \nas BCS Code of Conduct) governing the computing discipline. \nLO3 Provide evidence of personal reflection and evaluation on the importance of \nacademic, professional and technical skills, their relationship to employability and the \nneed to plan for improvement and continuing professional development. \nLO4 Demonstrate an awareness of the importance of ethical issues underpinning \nacademic research and professional accountability. \nLO5 Effectively research, plan, structure and deliver an academic report. "],"20":["LM Artificial Intelligence and Machine Learning Project This module enables the student to demonstrate professional competence in a substantial artificial intelligence or machine learning task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.  By the end of the module students should be able to:    Carry out a substantial individual data science task, including appropriate background research, demonstrating a professional approach.    Work independently, prioritising different components of the work and managing a large project effectively    Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes    ","LM Data Science Project This module enables the student to demonstrate professional competence in a substantial data science task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.  By the end of the module students should be able to:   Carry out a substantial individual data science task, including appropriate background research, demonstrating a professional approach.    Work independently, prioritising different components of the work and managing a large project effectively    Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes    ","Introduction to Data Science  \n \nTo provide learners with a high-level view of what data science is and where it came from. The teaching block will help learners to understand the goal of data science to provide answers and insight in relation to questions that impact on organisational goals. It will present the basic mathematical and computer science underpinnings and the concept of a data pipeline as a methodology to sourcing different types of data, processing it in appropriate ways and presenting it appropriately to different audiences. This will be done within context of a professional framework which must pervade all data scientist activity to ensure that legal, ethical and security concerns are continuously addressed.\n \n   \n \n Indicative content:&nbsp;  \t Attitude to learning&nbsp; \t Professionalism and Ethics&nbsp; \t The history and context of Data Science&nbsp; \t Data Processing Pipeline&nbsp; \t Introduction to Data&nbsp;  \n \n  Understanding of the context and history of data scienceUnderstanding of the purpose of data science and the professional data scientistAn understanding of the natre of data and the different types of dataA high-level understanding of ethics and proffesionalism especially with respect to the use of dataCan assess and make progress towards achieving the data scientist apprenticeship KSBs KSBs: K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community."],"21":["Further Games Theory and Implementation To further develop awareness of some of the key professional issues within a games development team To equip students with the knowledge and skills to design, build and evaluate multiplayer games To develop skills in design and planning documentation for games development  \n Professional issues in the games development industry\n \n Comparing industry standard game engines \n Recommending a game engine based on a given scenario   \n \n \n The principles of effective game and level design\n \n Multiplayer game design theory \n Balancing multiplayer games for cooperation and competition \n Potential issues and design of networked games \n Multiplayer level design concepts such as wayfinding, visualisation, and level flow \n The level design workflow and processes \n \n \n  \n Applied knowledge of multiplayer game development\n \n Utilising an industry standard game engine to implement a multiplayer game \n Supporting two or more players simultaneously \n Supporting different input methods, such as game controllers and a keyboard\/mouse. \n Further development of programming and game engine implementation skills   \n \n \n Design, testing and planning documentation\n \n Creating game design documents that focus on multiplayer games \n An introduction to games testing and processes \n Creating and utilising test plans \n Meeting milestones and deadlines \n \n \n  &nbsp; 1. Outline and explain more of the key professional issues in the computer games industry &nbsp; 2. Demonstrate an awareness of a variety of games platforms and related development issues  &nbsp; 3. Demonstrate proficiency in wayfinding and visualisation techniques within game environments &nbsp; 4. Provide evidence of applied knowledge in multiplayer game development &nbsp; 5. Understand the importance of games testing processes &nbsp; 6. Demonstrate proficiency in the development of design and planning documentation for games","Adv. Games Theory and Implementation To further develop understanding of key professional issues within the games industry To equip students with the knowledge and skills to design, build and evaluate single-player game levels To further develop skills and knowledge in the testing and iteration processes as part of the games development pipeline To equip students with the knowledge and skills to design and develop games for non-PC platforms. E.g. mobile, console and VR.  \n Further professional issues in the games development industry\n \n The free-to-play game business model \n The mobile game market and its nuances \n Different funding options for game studios \n Marketing techniques for traditional and mobile games   \n \n \n Further single player game design theory and development\n \n Mobile game design and its differences \n General mobile games design theory \n Free-to-play mobile game design techniques \n Identifying and selecting appropriate control methods for mobile games \n Developing games suitable for mobile devices in an industry standard game engine \n Further development of programming and game engine implementation skills \n Optimisations required for games running on mobile devices \n \n \n  \n Audio production for interactive digital environments\n \n Implementing audio in an industry standard game engine \n Optimising audio for mobile devices \n Acquiring and licensing audio for games. \n \n \n  \n Design and planning documentation\n \n Understanding pitch documents and their uses \n Creating a pitch document for a mobile single player game \n Pitching mobile game designs ideas to others for feedback \n \n \n  &nbsp; 1. Develop an understanding of, and critically evaluate, the key professional issues in the computer games industry &nbsp; 2. Critically review the key skills required to produce, source and implement audio for games &nbsp; 3. Provide evidence of applied knowledge in single-player game development &nbsp; 4. Analyse and evaluate a game utilising recognised games industry techniques &nbsp; 5. Demonstrate proficiency in the development of design and planning documentation for games","Introduction to Games Theory and Implementation  \n To introduce&nbsp;students to game design concepts and theories that&nbsp;enable them to design effective computer games \n To provide students with knolwedge of&nbsp;the tools and practical skills needed to implement and develop&nbsp;computer games in a game engine \n To equip students with the knowledge and skills to design and build interactive environments for computer games \n To give students an understanding of the various professional issues and conventions required as part of a games development team \n To enable students to develop research and communication skills \n To ensure the students understand the process of developing their skills both inside and outside formal workshops, and tackle formative work as well as assignments&nbsp;to develop a game portfolio piece. \n  1. Introduction to the games development industry  \n \n How games are funded, developed, distributed and sold to consumers \n How game studios and game development teams are structured&nbsp; \n Job roles that are available and found in the games industry \n Different game platforms and how they impact game design choices \n \n 2. Introduction to the principles of effective game design and documentation. \n \n Components and design choices that make up a computer game \n An introduction&nbsp;to common&nbsp;game design theories and techniques \n Balancing difficulty and progression in games \n The importance of the user experience and methods used to improve the players' experience \n Developing and maintaining industry standard documentation. E.g. Game design documents, level design documents, etc. \n \n 3. Introduction to digital interactive storytelling and world design \n \n Level design theory for single player games \n Designing and authoring digital environments and worlds \n Storytelling techniques that can be applied to interactive products \n \n 4. Introduction to game engines and development environments \n \n Developing a game using a&nbsp;modern game development engine \n Creating&nbsp;a game using a modern game programming language. \n How to structure a game development project \n Combining&nbsp;assets from multiple&nbsp;development environments into a single project \n \n 5. Evaluating and utilising information sources \n \n Researching topics through advanced google searches and journal databases \n How to search and utilise game engine documentation to aid game development \n Searching for solutions to problems and&nbsp;adapting information to meet the needs of a&nbsp;project \n   \n Examine game mechanics and principles applied to effective computer game&nbsp;design and development \n Demonstrate an understanding of the skills required to develop interactive environments and storytelling components \n Explain&nbsp;the differences&nbsp;of varying games development platforms and their impact on game design choices \n Demonstrate a range of practical skills using&nbsp;a modern game engine to develop a computer game \n Outline and explain the key professional issues in the computer games industry \n Describe the professional roles and teams involved in the games development industry \n "]}}