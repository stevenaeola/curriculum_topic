{
  "2023": {
    "Postgraduate Course: Advanced Robotics (INFR11213)": {
      "module_id": "Postgraduate Course: Advanced Robotics (INFR11213)",
      "title": "Postgraduate Course: Advanced Robotics (INFR11213)",
      "summary": "***This course replaces Robotics: Science and Systems (INFR11092)***<br>\n<br>\nRobotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, students will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot assembly in automobile and manufacturing. <br>\n<br>\nThe course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning. <br>\n<br>\nBuilding on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills.",
      "content": "This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning. <br>\n<br>\nThe aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code.<br>\n<br>\nLectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot.",
      "ilo": "Modern Robotics: Mechanics, Planning, and Control, Frank C. Park and Kevin M. Lynch <br>\nIntroduction to Robotics, Fourth Edition, J. J. Craig, Pearson, 2017<br>\nFranklin, Gene F., et al. Feedback control of dynamic systems. Vol. 3. Reading, MA: Addison-Wesley, 1994.",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Knowledge Graphs (INFR11215)": {
      "module_id": "Undergraduate Course: Knowledge Graphs (INFR11215)",
      "title": "Undergraduate Course: Knowledge Graphs (INFR11215)",
      "summary": "Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them.",
      "content": "In this course, we will cover topics such as:<br>\nKnowledge graph foundation and standards<br>\n - RDF (Resource Description Framework)<br>\n - OWL (Web Ontology Language)<br>\n - SPARQL (Query Language for RDF and OWL)<br>\nKnowledge graph construction, embeddings, and completion<br>\nKnowledge graph reasoning and querying<br>\n - Tableaux algorithm<br>\n - Tractable schema reasoning in EL<br>\n - Tractable query answering in DL-Lite<br>\n - Semantic parsing <br>\n<br>\nThe students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>construct and query over knowledge graphs by applying relevant knowledge graph standards such as RDF, OWL and SPARQL</li><li>complete knowledge graphs by applying and evaluating pros and cons of knowledge graph embeddings-based techniques</li><li>reason with knowledge graphs by applying and evaluating pros and cons of description logic reasoning algorithms</li><li>query over knowledge graphs by applying semantics parsing and query answering the techniques</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)": {
      "module_id": "Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)",
      "title": "Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)",
      "summary": "",
      "content": "Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply.<br>\n<br>\nThis course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes. <br>\n<br>\nThis level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area. <br>\n<br>\nThis course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development. <br>\n<br>\nIt is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation.",
      "ilo": "None",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "Student-Led Individually Created Course"
    },
    "Undergraduate Course: System Design Project (INFR09032)": {
      "module_id": "Undergraduate Course: System Design Project (INFR09032)",
      "title": "Undergraduate Course: System Design Project (INFR09032)",
      "summary": "The System Design Project is intended to give students practical experience of (a) building a large scale system (b) working as members of a team. The project involves applying and combining material from several courses to complete a complex design and implementation task. At the end of course each group demonstrates its implemented system and gives a formal presentation to an audience of the students, supervisors, and visitors from industry.",
      "content": "During this project students work in groups of about ten on the design and implementation of a complete system to solve some practical and useful problem. Each group can choose the specific task within the broad theme of 'assistive robotics',  i.e., the system should be envisioned as able to perform an autonomous task in the real world, and will develop a demonstrator (which may exist in simulation or hardware). Recent examples of projects include: a robot shopping trolley for the visually impaired; smart switches to convert any household switch to be remote controlled with an app; a robot chess opponent; robot rubbish collection and sorting; etc. <br>\n<br>\nThe aim is to produce a system that provides a convincing demonstration of a potential product, suitable for presentation to a client/investor. It should thus include significant development of supporting software, user interfaces, and either real or physical simulation mock-ups. These should be integrated into a complete working system, showing that core problems have been solved. There will be support for hardware construction as required, through a dedicated lab space with a wide range of equipment available, and/or through commissioning the technical support team, with a budget for equipment and support time available to each group. <br>\n<br>\nOnline workshops and dedicated office hours from domain experts will be available to advise and guide all aspects of the task, such as time and task management, hardware design, software libraries, interfaces, etc. Each group is assigned a mentor. The mentor's task is to advise and provide feedback on the progress of the group during the project but not to provide technical support. Groups meet with their mentors at least once a week. They also meet amongst themselves more frequently to plan and coordinate their activities. Specific demonstration points are timetabled regularly during the semester when progress will be assessed and feedback provided. <br>\n<br>\nTowards the end of the semester, a day is set aside for groups to demonstrate their implemented system and to give a formal presentation of it to an audience of the students, mentors, and visitors from industry. <br>\n<br>\nRelevant QAA Computing Curriculum Sections: Computer Based Systems, Systems Analysis and Design",
      "ilo": "None",
      "level": "SCQF Level 9 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Computational Cognitive Science (INFR10054)": {
      "module_id": "Undergraduate Course: Computational Cognitive Science (INFR10054)",
      "title": "Undergraduate Course: Computational Cognitive Science (INFR10054)",
      "summary": "This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data.<br>\n<br>\nThe course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models.",
      "content": "- An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation).<br>\n<br>\n- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?)<br>\n<br>\n- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects.<br>\n<br>\n- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects.<br>\n<br>\n- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information.<br>\n<br>\n- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested?<br>\n<br>\n- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models.<br>\n<br>\n- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>demonstrate knowledge of the basic concepts and methodologies of cognitive modelling, by being able to design simple cognitive models for sample problems</li><li>demonstrate understanding of the relationship between computational models and psychological theories, by being able to critically assess the psychological adequacy of a given model</li><li>qualitatively and quantitatively evaluate computational models of cognition using a range of techniques, when given a model and a set of experimental data that it is supposed to account for</li><li>demonstrate an awareness of the most important computational approaches to cognitive modelling, by being able to use these approaches to formalise theories that are couched in potentially vague and ambiguous terms (e.g., natural language)</li><li>implement and test cognitive models, including existing models from the literature and simple models they have designed themselves</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Informatics 1 - Introduction to Computation (INFR08025)": {
      "module_id": "Undergraduate Course: Informatics 1 - Introduction to Computation (INFR08025)",
      "title": "Undergraduate Course: Informatics 1 - Introduction to Computation (INFR08025)",
      "summary": "This course is only available to Informatics students and those on combined Informatics degrees with Maths and PPLS.<br>\n<br>\n**This 20 credit course replaces the two 10 credit courses - 'Informatics 1 - Functional Programming INFR08013' and 'Informatics 1 - Computation and Logic INFR08012' from 2018/19**.<br>\n<br>\nAn introduction to concepts of programming, using a functional programming language, and to concepts of computation and specification using finite-state systems and propositional logic. These provide examples of the logical ideas of syntax and semantics and the computational ideas of structure and behaviour. Students learn to specify, model and solve small-scale problems succinctly and at an abstract level.",
      "content": "An introduction to concepts of programming, using the Haskell functional programming language, and to concepts of computation and specification, using finite-state machines and propositional logic. The use of sets, functions and relations to describe models of logic and computation. Programming using functions and data structures, including lists and trees, equational reasoning, case analysis, recursion, higher-order functions, algebraic and abstract data types. Finite-state machines as a basic model of computation: deterministic and non-deterministic automata; regular expressions; acceptors; structured design of finite state machines. Propositional logic: truth tables; satisfiability; deduction. Applications from different areas will be used to illustrate and motivate the material.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>use sets, functions and relations to create a simple mathematical model of a real-world situation and use the syntax and semantics of propositional logic to express simple constraints</li><li>solve simple programming tasks and define appropriate data types. Choose appropriate decompositions of given problems and compose corresponding functional programs from suitable function definitions, including their types</li><li>read and write programs that use basic list processing functions, list comprehensions, case analysis, recursion, and higher-order functions. Understand algorithms for searching and sorting. Document, test and debug programs</li><li>formalise simple propositional reasoning using various methods, including truth tables</li><li>design finite state acceptors for particular languages. Use regular expressions to search for simple patterns. Understand the relationship between finite state acceptors and regular expressions</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 1 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Computational Neuroscience (INFR11209)": {
      "module_id": "Undergraduate Course: Computational Neuroscience (INFR11209)",
      "title": "Undergraduate Course: Computational Neuroscience (INFR11209)",
      "summary": "In this course we study computation in neural systems. We will consider problems such as: <br>\n <br>\nHow do neurons work and how do they communicate with one another? <br>\nHow do groups of neurons work together to form representations of the external world? <br>\nHow are memories stored and retrieved in the brain? <br>\n  <br>\nWe will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain.",
      "content": "This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations. <br>\n<br>\nCourse Content:<br>\n<br>\n1. Introduction to basic neuroscience concepts<br>\n2. Models of neurons<br>\n3. Neural encoding<br>\n4. Neural decoding<br>\n5. Information theory<br>\n6. Network Models<br>\n7. Plasticity/learning<br>\n<br>\nThe course will be delivered through lectures and computer labs.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe and critically analyse fundamental concepts and approaches to studying neuroscience and neural computation</li><li>abstract neuroscience experimental data into an appropriate computational model and critically evaluate such a model from a biological and/or computational perspective</li><li>given a neuroscientific problem, identify an appropriate modelling approach to that problem and compare the strengths and weaknesses of alternative modelling approaches.</li><li>apply probabilistic, information-theoretic, and machine learning techniques to model neural function and evaluate the neurobiological implications of such models</li><li>implement the models and methods learned in lectures and critically evaluate the results in the context of neural computation</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Compiling Techniques (INFR10065)": {
      "module_id": "Undergraduate Course: Compiling Techniques (INFR10065)",
      "title": "Undergraduate Course: Compiling Techniques (INFR10065)",
      "summary": "This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V. <br>\n<br>\nStudents will also learn about implementing a compiler pass in a real compiler framework.",
      "content": "* Introduction: structure of a compiler <br>\n* Lexical analysis: tokens, regular expressions, Lex <br>\n* Parsing: context-free grammars, predictive and LR parsing <br>\n* Abstract syntax: semantic actions, abstract parse trees <br>\n* Semantic analysis: symbol tables, bindings, type-checking <br>\n* Stack frames: representation and abstraction <br>\n* Intermediate code: representation trees, translation <br>\n* Basic blocks and traces: canonical trees and conditional branches <br>\n* Instruction selection: algorithms for selection, RISC and CISC <br>\n* Liveness analysis: solution of dataflow equations <br>\n* Register allocation: colouring by simplification, coalescing <br>\n* Real assembly language: ARM, MIPS, or RISC-V <br>\n* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>analyse compilation tasks and to apply standard compilation techniques</li><li>develop, implement and apply modifications to standard compilation techniques and algorithms wherever this is necessary</li><li>understand and implement design decisions in modern compilers</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Computer Architecture and Design (INFR10076)": {
      "module_id": "Undergraduate Course: Computer Architecture and Design (INFR10076)",
      "title": "Undergraduate Course: Computer Architecture and Design (INFR10076)",
      "summary": "In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance.",
      "content": "The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach.<br>\n<br>\nThe philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students.<br>\n<br>\nOutline Contents<br>\n<br>\nFundamentals<br>\nReview of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs.<br>\nRegister Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability.<br>\nQuantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design.<br>\n<br>\nProcessor Architecture<br>\nInstruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems.<br>\nPipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage.<br>\nOut-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance.<br>\n<br>\nComputer Arithmetic and ALU Design<br>\nIntroduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division.<br>\nAdvanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations.<br>\nFloating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures.<br>\n<br>\nMemory System Design<br>\nMemory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters.<br>\nCache coherence in multi-core architectures; protocols and implementation techniques.<br>\nMain memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols.<br>\nError detection and correction schemes; parity, Hamming codes, SECDED.<br>\n<br>\n***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.***",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe the structure and operating characteristics of a high-performance microprocessor, and explain the principles of: orthogonal instruction set design; pipeline hazards and interlocks; branch prediction (both static and dynamic); out-of-order execution</li><li>explain the design and operating principles of arithmetic units including: high-speed adders and multipliers; dividers; and floating-point units. And also demonstrate how selected fixed-point arithmetic functions can be implemented (in a laboratory setting)</li><li>design and implement both combinational and synchronous digital systems using state-of-the-art FPGA design tools and hardware description languages</li><li>describe the structure and operating characteristics of memory systems; demonstrate the ability to evaluate quantitatively the performance of a combined processor and memory system with respect to cycles-per-instruction (CPI) and memory bandwidth requirements; describe the operating principles of error detection and correction techniques applied to memory systems, and design a SECDED solution for a given memory system</li><li>reason about the ways in which memory hierarchies can be configured to exploit locality in order to reduce average memory access times, and quantitatively evaluate the impact of varying cache design parameters (e.g. capacity, associativity, block size, and write policies) on performance; understand the operating principles of cache coherency protocols, and be able to compare and contrast different implementation techniques</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Postgraduate Course: Extreme Computing (INFR11088)": {
      "module_id": "Postgraduate Course: Extreme Computing (INFR11088)",
      "title": "Postgraduate Course: Extreme Computing (INFR11088)",
      "summary": "Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming).",
      "content": "The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows:<br>\n <br>\n* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance.<br>\n <br>\n* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services.<br>\n <br>\n* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams.<br>\n<br>\nThe course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>demonstrate knowledge of the need for extreme computing by providing motivating examples of the scale of problems only computing at an extreme scale can solve (e.g., problems motivated by the use of large datasets and complex computation)</li><li>demonstrate knowledge of the problems associated with computing at an extreme scale, such as the need for multi-tier systems and programming models</li><li>demonstrate knowledge of the infrastructure necessary for computing at an extreme scale through enumerating different file system designs, virtualisation techniques, replication, fault-tolerance paradigms, and alternative system designs</li><li>demonstrate knowledge of data structures that can be used to efficiently process large datasets; and cluster-based algorithms for data processing, machine learning, and low latency processing through the use of distributed programming paradigms</li><li>demonstrate knowledge of large-scale distributed deep learning systems for the purposes of solving machine learning problems of extreme scale</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Computer Graphics: Geometry and Simulation (UG) (INFR11247)": {
      "module_id": "Undergraduate Course: Computer Graphics: Geometry and Simulation (UG) (INFR11247)",
      "title": "Undergraduate Course: Computer Graphics: Geometry and Simulation (UG) (INFR11247)",
      "summary": "This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead.",
      "content": "This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify and isolate geometric problems and produce an algorithm to fit</li><li>implement basic method in geometry and simulation which would be adequate for either further re-search or as an initial knowledge to find work in the relevant industry (example of advanced industry that uses this core knowledge: 3D printing, architectural design, medical imaging, weather simulations, robotics)</li><li>use software and tools (e.g., Python and C++) to implement geometric algorithms and test their results</li><li>identify, fix, and test for possible issues with geometric algorithms in a way that transcends just 'soft-ware bugs' but rather problems with a geometric context</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Usable Security and Privacy (UG) (INFR11230)": {
      "module_id": "Undergraduate Course: Usable Security and Privacy (UG) (INFR11230)",
      "title": "Undergraduate Course: Usable Security and Privacy (UG) (INFR11230)",
      "summary": "This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead.",
      "content": "This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>understand key topics in Security, Privacy, and Human-Computer Interaction</li><li>identify privacy and security concerns in different contexts</li><li>critically evaluate the literature to develop an academically-informed view of proposed security and privacy solutions from a human factors perspective</li><li>design studies to rigorously evaluate the usability of a security or privacy tool</li><li>apply techniques and design approaches to security and privacy problems to create usable solutions</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)": {
      "module_id": "Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)",
      "title": "Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130)",
      "summary": "Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods.<br>\n<br>\nThis is an advanced course. Students should not choose this class without the required background (see \"Other Requirements\" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211).",
      "content": "The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>\n<br>\n- Classification and Regression:<br>\n                  Linear Regression, logistic regression, Bayes classifiers<br>\n- Expanded feature representations: <br>\n                  Basis functions, neural networks, kernel methods<br>\n- Generalization, regularization and inference: <br>\n                  Penalised cost functions, Bayesian prediction, learning theory<br>\n- Model selection, pruning and combination: <br>\n                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods.<br>\n- Representation and metric learning: <br>\n                  Dimensionality reduction, clustering, feature learning<br>\n<br>\nTo support these topics we will also cover:<br>\n- Optimization and Inference algorithms: <br>\n                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required.<br>\n- Practical issues: <br>\n                   Formulating problems as machine learning, adapting methods to fit problems. <br>\n                   Numerical and programming issues important for machine learning.<br>\n                   Ethical issues, such as responsible application of methods and privacy concerns.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>frame an applied problem as a machine learning task, identifying appropriate methods</li><li>critically compare and contrast alternative machine learning methods for a given task</li><li>derive and motivate novel variants of machine learning methods</li><li>create accessible and useful explanations of the workings and failure modes of machine learning methods</li><li>check and refine implementations of learning algorithms, while applying them in practice</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222)": {
      "module_id": "Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222)",
      "title": "Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222)",
      "summary": "This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.",
      "content": "This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>Use the mathematical framework of quantum computation to predict outcomes of quantum circuits</li><li>Explain and analyse quantum algorithms described in quantum circuit and measurement-based quantum computing models</li><li>Discuss the difference of performance between classical and quantum computer for different computational tasks</li><li>Master notions of more advanced topics, such as error correction on algorithms for near-term architectures</li><li>Critically read and understand scientific literature on quantum computing</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219)": {
      "module_id": "Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219)",
      "title": "Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219)",
      "summary": "This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.",
      "content": "This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe the statistical framework used for automatic speech recognition</li><li>understand the weakness of the simplified speech recognition systems and demonstrate knowledge of more advanced methods to overcome these problems</li><li>describe speech recognition as an optimization problem in probabilistic terms</li><li>relate individual terms in the mathematical framework for speech recognition to particular modules of the system</li><li>build a large vocabulary continuous speech recognition system, using a standard software toolkit</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Software Testing (INFR10057)": {
      "module_id": "Undergraduate Course: Software Testing (INFR10057)",
      "title": "Undergraduate Course: Software Testing (INFR10057)",
      "summary": "This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus.",
      "content": "Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.  <br>\n<br>\nThe course includes the following topics:<br>\n<br>\nTesting techniques and principles: Defects vs. failures, equivalence classes, boundary testing.<br>\nTypes of defects.<br>\nBlack-box vs. Structural testing.<br>\nTesting strategies: Unit testing, integration testing, profiling, test driven development.<br>\nState based testing; configuration testing; compatibility testing; web site testing.<br>\nAlpha, beta, and acceptance testing.<br>\nCoverage criteria.<br>\nTest instrumentation and tools.<br>\nDeveloping test plans.<br>\nManaging the testing process: Development Lifecycles<br>\nProblem reporting, tracking, and analysis. <br>\nRelevant QAA Computing Curriculum Sections: Software Engineering<br>\n<br>\nClass members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.  <br>\n <br>\nClass members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project.<br>\n<br>\nEach class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three \"standard\" portfolio<br>\ndesigns but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.   <br>\n<br>\nEach week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>analyze requirements to determine appropriate testing strategies</li><li>design and implement comprehensive test plans with instrumented code</li><li>apply a wide variety of testing techniques and compute test coverage and yield according to a variety of criteria</li><li>evaluate the limitations of a given testing process, using statistical methods where appropriate, and summarise outcomes</li><li>conduct reviews and inspections and design and implement automated testing processes</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Introduction to Linear Algebra (MATH08057)": {
      "module_id": "Undergraduate Course: Introduction to Linear Algebra (MATH08057)",
      "title": "Undergraduate Course: Introduction to Linear Algebra (MATH08057)",
      "summary": "An introduction to linear algebra, mainly in R^n but concluding with an introduction to abstract vector spaces. <br>\n<br>\nThe principal topics are vectors, systems of linear equations, matrices, eigenvalues and eigenvectors and orthogonality. The important notions of linear independence, span and bases are introduced. <br>\n<br>\nThis course is both a preparation for the practical use of vectors, matrices and systems of equations and also lays the groundwork for a more abstract, pure-mathematical treatment of vector spaces.<br>\n<br>\nStudents will learn how to use a computer to calculate the results of some simple matrix operations and to visualise vectors.",
      "content": "This syllabus is for guidance purposes only:<br>\nThe course will have a range of student-focused activities equivalent to approximately three lecture-theatre-hours and a 90 minute Example Class per week. The course contents are given in the course textbook, Nicholson, predominantly Chapters 1 to Chapter 5, and the start of Chapter 8, with a selection (not all) of the applications covered and selected topics omitted.<br>\n- Vectors in R^n, and in general. Vectors and geometry<br>\n- Systems of linear equations, echelon form, Gaussian elimination, intro to span and linear independence.<br>\n- Matrices, multiplication, transpose, inverses, linear maps. Intro to subspaces and bases. Rank. <br>\n- Eigenvalues and eigenvectors. Determinants<br>\n- Orthogonality, Gram-Schmidt, orthogonal Diagonalization.<br>\n- Introduction to abstract vector spaces and subspaces. <br>\n- Selected applications (taught in sequence where appropriate) <br>\n<br>",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>Solve systems of linear equations and demonstrate an understanding of the nature of the solutions.</li><li>Perform accurate and efficient calculations with vectors, matrices, eigenvalues and eigenvectors in arbitrary dimensions.</li><li>Demonstrate a geometrical understanding of vectors and vector operations in 2 and 3 dimensions.</li><li>Demonstrate an understanding of orthogonality and projection in arbitrary dimensions.</li><li>Argue in a formal style (definition/theorem/proof or use examples) about statements in linear algebra, as the first step towards a more abstract, pure-mathematical treatment of vector spaces.</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 1 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Foundations of Natural Language Processing (INFR10078)": {
      "module_id": "Undergraduate Course: Foundations of Natural Language Processing (INFR10078)",
      "title": "Undergraduate Course: Foundations of Natural Language Processing (INFR10078)",
      "summary": "This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modelling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course.",
      "content": "An indicative list of topics to be covered include:<br>\n<br>\n1. Lexicon and lexical processing:<br>\n* morphology<br>\n* language modeling<br>\n* hidden Markov Models and associated algorithms<br>\n* part of speech tagging (e.g., for a language other than English) to illustrate HMMs<br>\n* smoothing<br>\n* text classification<br>\n<br>\n2. Syntax and syntactic processing:<br>\n* the Chomsky hierarchy<br>\n* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations<br>\n* context-free grammars <br>\n* lexicalized grammar formalisms (e.g., dependency grammar)<br>\n* chart parsing and dependency parsing (eg, shift-reduce parsing)<br>\n* treebanks: lexicalized grammars and corpus annotation <br>\n* statistical parsing<br>\n<br>\n3. Semantics and semantic processing:<br>\n* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found)<br>\n* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis.<br>\n* predicate argument structure<br>\n* word sense disambiguation<br>\n* semantic role labelling<br>\n* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations.<br>\n* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank). <br>\n<br>\n4. Data and evaluation (interspersed throughout other topics):<br>\n* cross-linguistic similarities and differences<br>\n* commonly used datasets <br>\n* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement)<br>\n* evaluation methods and issues (e.g., standard metrics, baselines)<br>\n* effects of biases in data",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify and analyse examples of ambiguity in natural language---ambiguity in part-of-speech, word sense, syntax, semantics and pragmatics. Explain how ambiguity presents a problem for computational analysis and NLP applications and some of the ways it can be addressed (see (2) to (5)).</li><li>describe and apply standard sequence models (e.g., HMMs), classification models (e.g., Na\u00efve Bayes, MaxEnt); parsing algorithms (e.g., statistical chart parsing and dependency parsing) for processing language at different levels (e.g. morphology, syntax and semantics), and simulate each algorithm on `toy linguistic examples step-by-step with pen and paper.</li><li>explain and provide examples of how sparse data can be a problem for machine learning in NLP; describe and apply methods for addressing the sparse data problem.</li><li>given an appropriate NLP problem, students should also be able to identify suitable evaluation measures for testing solutions to the problem, explain the role of annotated corpora in developing those solutions, and assess and justify which sequence of algorithms are most appropriate for solving the problem, based on an understanding of the algorithms in (2) and (3).</li><li>implement parts of the NLP pipeline with the help of appropriate support code and/or tools. Evaluate and interpret the results of implemented methods on natural language data sets.</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Modelling of Systems for Sustainability (INFR10088)": {
      "module_id": "Undergraduate Course: Modelling of Systems for Sustainability (INFR10088)",
      "title": "Undergraduate Course: Modelling of Systems for Sustainability (INFR10088)",
      "summary": "This course takes an interacting systems perspective on sustainability, using computational modelling and visualisation to gain understanding of system behaviours and interactions. Relevant complex systems key to sustainability arise from natural evolution (atmosphere, biosphere), social interactions (community, nation, economy), and engineering (energy, transport) - we look at computational models of such systems. Key concepts explored include emergent behaviour, stability and tipping points. Students from across the university will bring knowledge of the type of systems under study, or of computational methods - knowledge of both is not required.  Multidisciplinary group projects provide the opportunity to explore systems and gain experience working in interdisciplinary teams.",
      "content": "The fundamental aim of this course is for students from a variety of backgrounds, including Informatics, to get hands-on experience with specifying, implementing, exploring and presenting results from models of real-world systems that are key to planetary sustainability.  The range of such systems is vast, encompassing large parts of earth sciences, engineering, health sciences, social and political sciences.  Some key systems include the climate system, many ecosystems, agricultural systems, water systems, public health systems, social systems, international political systems, energy systems and transport systems. We will describe a subset of these systems, and there will be opportunity to develop deeper understanding in the project.<br>\n <br>\nMost of these are what are known as \"complex systems\", meaning: their behaviour and evolution often cannot be reduced to a few equations or paragraphs of description; they exhibit patterns of emergent global behaviour that are not explicitly encoded in any local interactions; they often exhibit multiple potential stable states, with not-easily-triggered \"tipping points\" to move to another stable state; stability is often exhibited as a dynamic pattern over time rather than as a fixed state. We will touch on the science of complex systems, focussing on those aspects that are of most relevance to the particular real-world systems we study.<br>\n <br>\nA ubiquitous challenge in sustainability is to appreciate how these individually complex systems interact with each other in the real world to produce unexpected outcomes.  The key methodology we will bring to the study of these systems and how they interact is computational modelling and visualisation.  We will study specific systems for which there are reasonably tractable computational models and visualisations.  For each, we will explore the underlying computational framework, be it a statistical model of observed data, a physical model of known physical / chemical / biological interactions, or an abstract model of ecological or social systems.  The modelling paradigms studied and used in practical work will include system dynamics and agent-based modelling, with brief mention of other paradigms such as discrete event and finite-step simulations.<br>\n<br>\nThe first half will consist of lecture material covering the key system concepts, the specific systems to be studied, and the computational modelling and visualisation methods used for each system.  These will be supplemented by hands-on lab sessions, to explore computational models and visualisations using tools such as NetLogo and Python; and small-group tutorial sessions aimed at multidisciplinary discussions of specific systems.  The second half of the semester will be devoted to a group project in which each 3/4-person group will have students from at least 2 and ideally 3 or 4 disciplines; the project will aim to construct and explore a model of one or two complex systems related to sustainability (e.g., energy, economic and political); and project supervision will be provided by staff and PhD students familiar with the project systems and models.<br>\n<br>\nAssessment will be by coursework, aimed at the material covered in the first half of the semester, (systems and modelling paradigms) and a group project report and presentation for the work in the second half of the semester.",
      "ilo": "1.\tRailsbeck and Grimm (2019), Agent-based and individual based modelling. 2nd Ed. Princetown University Press [Note that the library has a subscription to the 1st Ed, but getting a subscription to the 2nd Ed is proving problematic.]<br>\n1.\tPrinciples of Systems Science / George E. Mobus, Michael C. Kalton (2014).  Library has online subscription.<br>\n2.\tThinking in Systems : a primer / Donella H. Meadows ; edited by Diana Wright. (2008).  Library has a copy and online subscription.",
      "level": "SCQF Level 10 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229)": {
      "module_id": "Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229)",
      "title": "Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229)",
      "summary": "This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.",
      "content": "This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>duild basic search engines from scratch, and use IR tools for searching massive collections of text documents</li><li>duild feature extraction modules for text classification</li><li>implement evaluation scripts for IR and text classification</li><li>understand how web search engines (such as Google) work</li><li>work effectively in a team to produce working systems</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Elements of Programming Languages (INFR10061)": {
      "module_id": "Undergraduate Course: Elements of Programming Languages (INFR10061)",
      "title": "Undergraduate Course: Elements of Programming Languages (INFR10061)",
      "summary": "Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing.<br>\n<br>\nAlthough few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance. <br>\n<br>\nThis course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own.",
      "content": "* Abstract syntax and name-binding; Lexical vs. dynamic scope<br>\n* Modelling programming language features using inference rules<br>\n* Interpreters as a way of defining and exploring language features<br>\n* Domain specific languages, translators, and pragmatics of language processing<br>\n* A selection of topics illustrated by case studies from current or historically important language designs:<br>\n  - data structures: pairs/record types; variant/union types; recursion<br>\n  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism<br>\n  - control structures: goto, loops, case/switch, exceptions<br>\n  - abstracting control: procedure call/return; function types; continuations<br>\n  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state<br>\n  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance<br>\n* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses)",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>investigate the design and behaviour of programming languages by studying implementations in an interpreter</li><li>employ abstract syntax and inference rules to understand and compare programming language features</li><li>fesign and implement a domain-specific language capturing a problem domain</li><li>understand the design space of programming languages, including common elements of current languages and how they are combined to construct language designs</li><li>critically evaluate the programming languages in current use, acquire and use language features quickly, recognise problematic programming language features, and avoid their (mis)use.</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)": {
      "module_id": "Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)",
      "title": "Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059)",
      "summary": "This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can?<br>\n<br>\nThe course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline.",
      "content": "The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is \"no\", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS INFR08026). We then explore some different, but always equivalent, ways of defining \"a computer\". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of \"reduction\" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions.<br>\n<br>\nThe second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS INFR08026 analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are \"hardest\" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP.<br>\n<br>\nThe third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>explain (non-)deterministic finite and pushdown automata and use the pumping lemma to show languages non-regular</li><li>explain decidability, undecidability and the halting problem</li><li>use reductions to show (un)decidability</li><li>explain P and NP and use reductions to show (non)-membership of them</li><li>write short programs in lambda-calculus</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Speech Processing (Hons) (LASC10061)": {
      "module_id": "Undergraduate Course: Speech Processing (Hons) (LASC10061)",
      "title": "Undergraduate Course: Speech Processing (Hons) (LASC10061)",
      "summary": "A foundation course in speech processing for students of linguistics, informatics, and related subjects.<br>\n<br>\nEnrolments for students outwith Philosophy, Psychology and Language Sciences must be approved by the Course Organiser.",
      "content": "In this course, students investigate the fundamentals of speech signal processing, text-to-speech systems, and automatic speech recognition.  <br>\n<br>\nThis is a fast-paced course which draws on topics from linguistics, informatics, and engineering, including the following:<br>\n<br>\nFoundations in phonetics and signal processing: sound and waveforms, the connection between speech acoustics and speech articulation, time versus frequency representations of speech, the Discrete Fourier Transform and frequency spectrums, the source-filter model of speech.<br>\nText-to-speech synthesis: components of a concatenative text-to-speech synthesiser, introduction to automatic text analysis, waveform generation and speech modification methods.<br>\n<br>\nAutomatic Speech recognition: components of a typical speech recognition system, speech feature representations, measuring similarity in speech using probabilistic methods, Hidden Markov Models (HMMs) for ASR, training and testing probabilistic models with speech data.  <br>\n<br>\nThe course is delivered as a combination of lectures, an online forum, videos, readings, and practical exercises in the lab. The course work will be based on lab exercises where students investigate an existing text-to-speech system, and build a simple automatic speech recognition system. Students deciding whether to take this course should visit https://speech.zone/courses/speech-processing/ where much of the course material can be found.<br>",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>understand human speech production and perception, including the use of tools for visualising and manipulating speech</li><li>give an overview of the components of automatic speech recognition and speech synthesis systems and describe a simple version of each component</li><li>understand what the difficult problems are in automatic speech recognition and speech synthesis</li><li>perform experiments with speech technology systems and relate theory to practice</li><li>see how knowledge and skills from different areas come together in an interdisciplinary field</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Introduction to Databases (INFR10080)": {
      "module_id": "Undergraduate Course: Introduction to Databases (INFR10080)",
      "title": "Undergraduate Course: Introduction to Databases (INFR10080)",
      "summary": "Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems.<br>\n<br>\n*This course replaces \"Database Systems\" (INFR10070) from academic year 2020/21*",
      "content": "Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization. <br>\n<br>\nSyllabus (core topics)<br>\n- The relational model and rudiments of SQL<br>\n- Query languages: relational algebra and calculus<br>\n- Multisets, grouping and aggregation<br>\n- Database design: constraints and normal forms<br>\n- Advanced SQL: nested queries, triggers, null values<br>\n- Transaction management: concurrent schedules, conflict-serializability, locking<br>\n- Database access from applications: using SQL in a host programming language<br>\n- Basics of indexing, query evaluation and optimisation <br>\n<br>\nSyllabus (advanced topics, if time allows)<br>\n- Datalog and recursive queries<br>\n- Incomplete data and certain answers",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>compare strengths and weaknesses of different database designs</li><li>process and analyse data by means of SQL statements</li><li>formulate and manipulate queries in both declarative and procedural database languages</li><li>reason about the correctness of concurrent database interactions among multiple users</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)": {
      "module_id": "Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)",
      "title": "Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225)",
      "summary": "This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.",
      "content": "This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify and discuss the main linguistic, machine learning, and ethical challenges involved in the development and use of natural language processing systems</li><li>understand and describe state-of-the-art models and algorithms used to address challenges in natural language processing systems</li><li>design, implement, and apply modifications to state-of-the-art natural language processing systems</li><li>understand the computational and engineering challenges that arise in the use of different models for natural language processing, and discuss the pros and cons of different models for a given task</li><li>understand, design and justify approaches to evaluation and error analysis in natural language processing systems</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Informatics Large Practical (INFR09051)": {
      "module_id": "Undergraduate Course: Informatics Large Practical (INFR09051)",
      "title": "Undergraduate Course: Informatics Large Practical (INFR09051)",
      "summary": "**This course replaces AI Large Practical (INFR09043), Software Engineering Large Practical (INFR09045) and Computer Science Large Practical (INFR09044).**<br>\n<br>\nThe Informatics Large Practical exposes students to the problems that arise with the design and implementation of large-scale software systems, and to methods of coping with such problems.<br>\n<br>\nStudents will gain experience in how to:<br>\n- Schedule their work load<br>\n- Design clearly and coherently structured systems<br>\n- Discover and use relevant technical information<br>\n- Implement a large-scale software system<br>\n- Design and run experiments and tests<br>\n- Analyse and report results<br>\n- Present their work in a clear and concise way.",
      "content": "The Informatics Large Practical gives students experience in developing a non-trivial software system and reporting on the end product. In this way, the practical provides an introduction to the issues and requirements of the more demanding fourth-year project. In particular, the student gains practical experience of:<br>\n<br>\n- Reading technical material and identifying the important content<br>\n- Identifying and formalising project requirements<br>\n- Identifying computational problems and inventing algorithmic solutions<br>\n- Constructing a detailed design which does not over-commit to implementation detail<br>\n- Implementing and testing a software application which realises the design<br>\n- Experimenting with the implementation to explore the solutions to the computational problems<br>\n- Writing a report which documents the solutions and the implementation<br>\n- Managing a software project using a source-code repository.",
      "ilo": "None",
      "level": "SCQF Level 9 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)": {
      "module_id": "Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)",
      "title": "Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017)",
      "summary": "The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical.",
      "content": "* Background -- the development and scope of HCI. Practical goals. <br>\n* HCI relevant issues in human perception, memory and thinking processes. <br>\n* Approaches to designing information appliances -- software objects and physical things. <br>\n* Design methodologies and notations -- levels of interface design, evaluation methodologies. <br>\n* Techniques and technologies -- dialogue styles, information presentation. <br>\n* The design process -- user involvement, iterative design, prototyping.  <br>\n* Evaluation -- methodologies, formative and summative. Performance analysis. <br>\n* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy. <br>\n<br>\nRelevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>demonstrate, in writing, knowledge of the issues and problems in HCI , and an  understanding of human perception and behaviour in analysing their interactions with  technology in their every day lives</li><li>use established design principles and methodologies to solve HCI problems</li><li>acquire confidence in handling different disciplinary perspectives on HCI and the ability to  apply them to design problems</li><li>have the ability to devise, plan and execute task analysis and system evaluation studies from an  HCI perspective, and present findings in a clear and effective manner</li><li>demonstrate awareness of current areas of research by locating and summarising examples  of recent progress</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Computer Communications and Networks (INFR10074)": {
      "module_id": "Undergraduate Course: Computer Communications and Networks (INFR10074)",
      "title": "Undergraduate Course: Computer Communications and Networks (INFR10074)",
      "summary": "This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided. <br>\n<br>\nTopics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation. <br>\n<br>\nStudents taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures.",
      "content": "* Introduction to Computer Networking and the Internet<br>\n* Digital Communication Basics<br>\n* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications)<br>\n* The Transport Layer<br>\n* The Network Layer<br>\n* The Data Link Layer<br>\n* The Medium Access Control Sub-Layer<br>\n* The Physical Layer<br>\n* Software-defined networking (SDN)<br>\n* Network virtualisation and network function virtualisation (NFV)<br>\n* Network management<br>\n* Introduction to data centre and wireless networks<br>\n* Overview and selected aspects of network security",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>explain key networking concepts, principles, design issues and techniques at all protocol layers</li><li>contrast between different types of networks (e.g., wide area networks vs. local area networks, wired vs. wireless) in terms of their characteristics and protocols used</li><li>describe different types of networked applications and what underlying network protocols are needed to meet their diverse requirements</li><li>distinguish between control and data planes in computer networks, and their corresponding architectures in real-world networks (including the Internet)</li><li>understand reliable transport protocols and networked system architectures via implementation using Socket APIs, measurement and analysis</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)": {
      "module_id": "Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)",
      "title": "Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218)",
      "summary": "This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.",
      "content": "This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>understand various models of games, how they are related, and how they arise in various applications in computer science and elsewhere</li><li>understand linear programming and some of its broad applicability</li><li>understand how algorithms are used to \"solve\" such games and their efficiency</li><li>model various scenarios as strategic games, and devise algorithms to solve them</li><li>understand the aims of the current research frontier</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)": {
      "module_id": "Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)",
      "title": "Undergraduate Course: Types and Semantics for Programming Languages (INFR11114)",
      "summary": "Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics.",
      "content": "-\tInductive definitions and proof by induction<br>\n-\tProducts, sums, unit, empty, and implication.<br>\n-\tIntuitionistic and classical logic.<br>\n-\tUniversals and existentials.<br>\n-\tLists and higher-order types.<br>\n-\tSimply-typed lambda calculus. Variable binding.<br>\n-\tCall-by-value and call-by-name.<br>\n-\tSmall-step operational semantics.<br>\n-\tProgress and preservation.<br>\n-\tType inference.<br>\n-\tUntyped lambda calculus.<br>\n<br>\nRelevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>write inductive definitions and prove properties of them using induction</li><li>exploit the connection between logic and type systems, where propositions correspond to types and proofs correspond to programs; understand how conjunction corresponds to products, disjunction to sums, and implication to functions</li><li>read and understand the presentation of operational semantics and type systems via inference rules for lambda calculus, and be able to modify such a presentation to include a new language feature, such as exceptions</li><li>write a formal semantics for a programming language in the operational style, given a careful informal description of the language</li><li>state and prove the preservation and progress theorems that link operational semantics and type systems</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Computing in the Classroom (INFR10077)": {
      "module_id": "Undergraduate Course: Computing in the Classroom (INFR10077)",
      "title": "Undergraduate Course: Computing in the Classroom (INFR10077)",
      "summary": "This course will give fourth year students the opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting. <br>\n<br>\nThe course offers an in-depth, sustained experience in the classroom to students contemplating a career in education.",
      "content": "Students will contribute to the teaching of computer science and data science in primary / secondary / special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education.<br>\n <br>\nThe aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year.<br>\n <br>\nCourse topics include:<br>\n* Computer science in schools curricula in Scotland and other countries<br>\n* Good practice in computer science pedagogy research evidence<br>\n* Effective teaching techniques<br>\n* Giving and receiving feedback<br>\n* Lesson planning<br>\n* Child protection and appropriate measures for risk management (e.g. infection control)",
      "ilo": "Grover, S., &amp; Pea, R. (2013). Computational Thinking in K-12: A Review of the State of the Field. Educational Researcher, 42(1), 38-43. doi:10.3102/0013189X12463051 <br>\n<br>\nGrover, S., Cooper, S., &amp; Pea, R. (2014). Assessing computational learning in K-12. Proceedings of the 2014 Conference on Innovation &amp; Technology in Computer Science Education - ITiCSE 14, (June), 57-62. doi:10.1145/2591708.2591713 <br>\n<br>\nIsrael, M., Pearson, J. N., Tapia, T., Wherfel, Q. M., &amp; Reese, G. (2015). Supporting all learners in school-wide computational thinking: A cross-case qualitative analysis. Computers and Education, 82, 263-279. doi:10.1016/j.compedu.2014.11.022 <br>\n<br>\nThe Primary Teacher's Guide to Teaching Computer Science available at www.teachcs.scot",
      "level": "SCQF Level 10 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026)": {
      "module_id": "Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026)",
      "title": "Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026)",
      "summary": "This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics.",
      "content": "This course is an important foundation for all areas of Informatics. <br>\n<br>\nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis. <br>\n<br>\nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications).<br>\n<br>\nThe following is an indicative list of topics covered:<br>\nAsymptotic notation and algorithmic analysis<br>\nSequential data structures (lists, stacks, queues)<br>\nBasic and more advanced sorting algorithms<br>\nTree data structures, heaps and priority queues<br>\nHashing and dictionaries<br>\nGraphs and graph algorithms<br>\nDynamic programming<br>\nThe classes P and NP<br>\n<br>\nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms</li><li>describe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings</li><li>work with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)</li><li>describe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems</li><li>define informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221)": {
      "module_id": "Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221)",
      "title": "Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221)",
      "summary": "This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.",
      "content": "This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>apply basic number theory, group theory and discrete probability to analyse cryptographic algorithms</li><li>understand the notions of pseudorandom functions/generators and their connection with encryption schemes</li><li>develop the ability to model security problems and to write security proofs</li><li>understand fundamental cryptographic primitives including Key Exchange, Digital Signatures, Oblivious Transfer, Public-Key Encryption, Commitment, and critique or prove the security of candidate cryptographic schemes that are supposed to realize the above primitives</li><li>understand basic computational problems that are important for cryptography such as the factoring problem, the RSA problem, the discrete-logarithm problem, and develop the ability to reduce the security of cryptographic schemes to computational problems</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Modelling Concurrent Systems (Level 10) (INFR10089)": {
      "module_id": "Undergraduate Course: Modelling Concurrent Systems (Level 10) (INFR10089)",
      "title": "Undergraduate Course: Modelling Concurrent Systems (Level 10) (INFR10089)",
      "summary": "Concurrent and distributed systems are famously hard to analyse. This theoretical course presents state-of-the-art mathematical models and techniques that make understanding concurrency possible. In the process, we will touch on fundamental philosophical, mathematical and computational questions. What does 'concurrency' actually mean? How do we know our concurrent system behaves correctly? What does 'correctly' actually mean? This course is especially relevant to any student with an interest in a scientific career in programming languages, models, or distributed systems, and also to students looking to design or implement distributed systems in industry.",
      "content": "Beginning with simple examples and protocols, we will develop a theory to describe models of concur-rent systems of increasing complexity, based on process algebra. We will learn how to compare these models, and the key concepts that describe what it means for systems to be equivalent, such as bisimulation and trace equivalence. We will learn how to specify prove  properties of systems, and the assumptions we must make about the environment in which these systems operate, such as fairness. The course lectures will introduce concepts using standard examples, and students will apply what they have learned to new problems in homework questions delivered weekly. In tutorials, students can discuss solutions to their homework problems and get feedback on their work, developing their solutions into a summative homework portfolio that they submit for grading at two checkpoints throughout the semester.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>construct accurate models of concurrent systems, including protocols and other distributed communicating systems</li><li>analyse (models of) concurrent systems and show various notions of equivalence and refinement between them</li><li>evaluate the comparative benefits and drawbacks of various concurrency</li><li>articulate safety and liveness properties of concurrent systems using temporal logic and other tools</li><li>justify the correctness of concurrent systems under various assumptions about their executing context</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Formal Verification (INFR11129)": {
      "module_id": "Undergraduate Course: Formal Verification (INFR11129)",
      "title": "Undergraduate Course: Formal Verification (INFR11129)",
      "summary": "Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation.",
      "content": "In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry. <br>\n <br>\nThis course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively. <br>\n <br>\nTopics the course covers include the following: <br>\n*Formal verification in context, its current take-up in industry and challenges to its wider <br>\nadoption <br>\n*Syntax and semantics of CTL and LTL temporal logics <br>\n*CTL and LTL model checking techniques, including automata-based approaches and <br>\nbounded model checking with SAT solvers <br>\n*The BDD data-structure used at the heart of many model checkers <br>\n*Writing models for model checking and phrasing useful properties in CTL and LTL <br>\n*Operational semantics of a simple imperative programming language, weakest precondition <br>\noperators and verification condition generation <br>\n*The capabilities of SMT solvers for discharging verification conditions <br>\n*Assertion-based software verification <br>\n <br>\nOptional topics include: <br>\n*Industrial temporal logics such as PSL and SVA used in hardware verification <br>\n*Formal verification case studies <br>\n*Formal verification of hybrid systems, system with both discrete state changes and <br>\ncontinuous state changes governed by differential equations <br>\n*Combining formal and simulation-based verification methods <br>\n*Dual use of temporal logic properties and assertions in formal and simulation-based <br>\nverification of hardware and software  <br>\n*Software model checking, focusing on its use for finding concurrency bugs <br>\n*Pattern-based detection of concurrency bugs",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>deploy bounded and unbounded model checking techniques to formally verify temporal logic properties of digital hardware and other finite state systems and protocols</li><li>use an assertion-based software formal-verification tool to verify desired properties of computer programs</li><li>describe the basic mechanics of SAT/SMT solvers and explain how they can be applied to discharge verification queries</li><li>assess the pros and cons of using different automated formal verification approaches on a previously-unseen hardware or software system</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Computer Security (INFR10067)": {
      "module_id": "Undergraduate Course: Computer Security (INFR10067)",
      "title": "Undergraduate Course: Computer Security (INFR10067)",
      "summary": "Computer Security is concerned with the protection of computer systems and their data from threats which may compromise integrity, availability, or confidentiality; the focus is on threats of a malicious nature rather than accidental. This course aims to give a broad understanding of computer security. Topics include security risks, attacks, prevention and defence methods; techniques for writing secure programs; an overview of the foundations for cryptography, security protocols and access control models.<br>\n<br>\n ***This course replaces INFR10058 Computer Security (10 credits).***",
      "content": "The goal of this course is to introduce students to fundamental security concepts and offer them working knowledge of threats and counter-measures.<br>\n<br>\nThe topics covered in the course are:<br>\n-  Introduction:   fundamental  concepts,  access  control  models,  threat modelling. <br>\n-  Network security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection.<br>\n-  Usable  security:  basic  human  factors,  warning  design,  phishing,  authentication, device authentication.<br>\n-  Cryptography:   symmetric  ciphers,  asymmetric  ciphers,  MACs  and hash functions, digital signatures.<br>\n-  Cryptographic protocols:  identification, authentication and key agreement, SSL/TLS, anonymity protocols, TOR.<br>\n-  OS security:  OS concepts, memory and file system, access control, file permissions, memory safety, stack-based buffer overflows.<br>\n-  Malware:  viruses, trojan horses, worms, rootkits.<br>\n-  Web security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defences, server-side attacks, SQL injection, RFI, LFI.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe common security threats against computer systems, and identify appropriate mechanisms to address them.</li><li>explain techniques and design principles that underlie the common mechanisms for protecting the security, privacy, and trust of computer systems and networks.</li><li>complete a basic security analysis of computer systems or networks.</li><li>independently collect, filter out, and contextualise information about security vulnerabilities and their mitigations.</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Applied Cloud Programming (UG) (INFR11249)": {
      "module_id": "Undergraduate Course: Applied Cloud Programming (UG) (INFR11249)",
      "title": "Undergraduate Course: Applied Cloud Programming (UG) (INFR11249)",
      "summary": "This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead.",
      "content": "This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>implement the basic building blocks of cloud programming like containerization, micro-services, event-processing and cloud data storage using standard service offerings by the main cloud providers in combination with several communication protocols</li><li>compare / contrast the differences between architecture styles like IaaS, PaaS, CaaS, SaaS, etc</li><li>summarize cloud service offerings by the main providers and evaluate the differences</li><li>contrast different contemporary cloud runtime environments</li><li>differentiate the need and structure of Continuous Integration / Continuous deployment (CI/CD)-chains in cloud programming</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Computer Graphics: Rendering (INFR11246)": {
      "module_id": "Undergraduate Course: Computer Graphics: Rendering (INFR11246)",
      "title": "Undergraduate Course: Computer Graphics: Rendering (INFR11246)",
      "summary": "This course replaces Computer Graphics (Level 11) (INFR11021) from 2023-2024.<br>\n<br>\nThis introductory course in computer graphics comprises of three parts. The first part of the course presents a bird's-eye view of the current state-of-the-art in the field. The latter two parts cover rendering, which is one of the core topics in computer graphics, in detail. The second part of the course teaches central concepts in rendering, along with the relevant mathematics. Finally, the third part of the course focusses on applications of the theory taught in the second part.",
      "content": "SYLLABUS<br>\n<br>\nPart I<br>\n* Introduction [1]<br>\n* Radiometry and photometry [1]<br>\n* Modelling [1]<br>\n* Special effects I: relighting [1]<br>\n* Special effects II: compositing [1]<br>\n<br>\nPart II<br>\n* Raytracing [1]<br>\n* The rendering equation [2]<br>\n* Monte Carlo path tracing [2]<br>\n* Sampling [2]<br>\n* Camera effects [1]<br>\n<br>\nPart III<br>\n* Participating media [1]<br>\n* Acceleration structures [1]<br>\n* MCMC methods for light transport [1]<br>\n* Gradient domain path tracing [1]<br>\n* Overview of current research [1/2]<br>\n* Discussion of open problems in rendering [1/2]<br>\n* Conclusion [1]",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>define different sub-topics of Computer Graphics and to identify the focus of each of these areas. The student will also be able to describe the key open (and imminent) problems in each focus area</li><li>explain the difference between real-time rendering systems (used in the video game industry) and physically-based rendering (used in cinematic and medical applications)</li><li>predict performance and output of state-of-the-art rendering libraries and tools for different classes of input models</li><li>design and develop programs to solve specific rendering problems by exploiting features of state-of-the-art rendering libraries</li><li>interpret the results of standard algorithms on their respective failure cases, and suggest alternatives</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)": {
      "module_id": "Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)",
      "title": "Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010)",
      "summary": "This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains.",
      "content": "1.  Intelligent Agents: Introduction<br>\n* Nature of agents, performance measures and environments<br>\n* Wumpus World Problem : An example thread (Programming environment) setup <br>\n<br>\n2. Search based Planning<br>\n* Planning as a Search Problem: In deterministic, observable, static and known environments<br>\n* Smart Searching 1: Using constraints<br>\n* Smart Searching 2: Exploiting subproblems/Memoisation<br>\n* Informed Search and Exploration for agents <br>\n<br>\n3. Logical Representation and Planning<br>\n* Propositional Logic Revisited (Shortcomings)<br>\n* First Order Logic &amp; Encoding facts/rules in FOL<br>\n* Inference Rules for Propositional &amp; FOL Calculus<br>\n* Unification and Generalized Modus Ponens<br>\n* Resolution based Inference and directing search with it<br>\n* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example<br>\n* Situation Calculus: Representing time in plans <br>\n<br>\n4. Scaling Planning for Complex Tasks<br>\n* Representing States, Goals and Actions in STRIPS<br>\n* Partial Order Planning<br>\n* Planning and Acting in the Real World <br>\n<br>\n5. Acting in Uncertain (real world) Environments<br>\n* Representation with Bayes Net<br>\n* Probabilistic Reasoning in Bayes Net<br>\n* Planning under Uncertainity : Wumpus world revisited<br>\n* Probabilistic Reasoning over Time I: hidden markov models<br>\n* Probabilistic Reasoning over Time II: dynamic Bayesian networks<br>\n* Markov Decision Processes <br>\n<br>\nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>use task constraints to make search efficient</li><li>perform Inference with First Order Logic and appreciate the strengths and weaknesses of this and other logic representations (eg Propositional)</li><li>use PDDL to plan and execute actions using either Propositional or First Order Logic representations</li><li>create and reason with a representation of a Bayesian agent for handling a non-deterministic planning problem</li><li>constructively engage in both self-study and peer-learning</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Professional Issues (Level 10) (INFR10022)": {
      "module_id": "Undergraduate Course: Professional Issues (Level 10) (INFR10022)",
      "title": "Undergraduate Course: Professional Issues (Level 10) (INFR10022)",
      "summary": "The aim of the course is to highlight and allow students to develop understanding of key aspects of the wider context in which their practice as Informatics professionals will occur.&nbsp; Students will develop individual capabilities that complement the technical capacities developed elsewhere in Informatics programmes.&nbsp; These include communication, reflection, reasoning and analysis skills that consider the broader ethical and social implications of their work.",
      "content": "The course will be structured around professional and ethical behaviour, and the wider context in which technologies are developed and deployed. Beginning with the ACM Code of Ethics and Professional Conduct, the course will consider the wider context technologies are developed within and teach students to be considerate in their role as ICT professionals. <br>\n<br>\nA standard breakdown of the course can be expected to be:<br>\n- Introduction (week 1 - gives an overview of the course)<br>\n- Responsibility (2 weeks, ACM principles 1.1, 1.2, 1.4): this will cover the responsibility of computing professionals. It will explore the notion of harms in the context of complex, multi-stakeholder situations, where benefit and harm are contested.<br>\n- Personal Attributes (2 weeks, ACM principles 1.3, 1.5, 1.6 and 1.7): this will cover personal attributes and why these are important by covering a range of situations that challenge professional integrity and work out how to respond to such challenges.<br>\n- Society (3 weeks, ACM principles 3.1, 3.2, 3.6 and 3.7) this will cover the obligations of computing professionals to recognise broader social requirements on their actions, particularly in areas where decisions involve the creation of new infrastructures that will underpin the delivery of public services or they are likely to be incorporated into widely used privately-owned platforms.<br>\n- Leadership (2 weeks, ACM principles 3.3, 3.4 and 3.5) will cover leadership amongst computing professionals, the obligations on leaders to ensure their leadership is fair and benefits those who are being led. This section will include a reflection on how these materials are taught.<br>\n<br>\nThe course will use articles and research from the social sciences, alongside short case studies drawn from contemporary situations that illustrate how knowledge of the decision-making context influences professional conduct and decision-making. Students will develop analytical skills to identify the critical influences on professionals in a range of real-world situations.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify a range of professional and unprofessional behaviour in ICT- related contexts and recommend remedial action</li><li>identify broader social and ethical considerations influencing the work of ICT professionals and how their work might be mindful of these</li><li>identify legitimate interests of broader society in computing systems and suggest approaches incorporating these into development</li><li>identify potential harms and benefits of the interventions of computing professionals, considering different stakeholder viewpoints and frameworks</li><li>identify examples of good and poor leadership and suggest leadership approaches which themselves encourage and uphold professional conduct</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Discrete Mathematics and Probability (INFR08031)": {
      "module_id": "Undergraduate Course: Discrete Mathematics and Probability (INFR08031)",
      "title": "Undergraduate Course: Discrete Mathematics and Probability (INFR08031)",
      "summary": "The first part of this course covers fundamental topics in discrete mathematics that underlie many areas of computer science and presents standard mathematical reasoning and proof techniques such as proof by induction. The second part of this course covers discrete and continuous probability theory, including standard definitions and commonly used distributions and their applications.<br>\n<br>\n*This course replaces \"Discrete Mathematics and Mathematical Reasoning\" (INFR08023). from academic year 2020/21*",
      "content": "The course will cover roughly the following topics: <br>\n<br>\nBlock 1: Discrete Mathematics  <br>\n- Logical equivalences, conditional statements, predicates and quantifiers <br>\n- Methods of proof using properties of integers, rational numbers and divisibility  <br>\n- Set theory, properties of functions and relations, cardinality <br>\n- Sequences, sums and products, Induction and Recursion <br>\n- Modular arithmetic, primes, greatest common divisors and their applications <br>\n- Introductory graph topics  <br>\n<br>\nBlock 2: Probability Theory <br>\n- Counting techniques: product rule, permutations, combinations <br>\n- Axioms of probability, sample space, events, De Morgan's Law <br>\n- Joint and conditional probability, independence, chain rule, law of total probability, Bayes' Theorem <br>\n- Random variables, expectation, variance, covariance <br>\n- Common discrete and continuous distributions (e.g., Bernoulli, binomial, Poisson, uniform, exponential, normal) <br>\n- Central limit Theorem",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>use mathematical and logical notation to define and formally reason about mathematical concepts such as sets, relations, functions, and integers, and discrete structures, including proof by induction</li><li>use graph theoretic terminology and apply concepts from introductory graph theory to model and solve some basic problems in Informatics (e.g., network connectivity, etc.)</li><li>prove elementary arithmetic and algebraic properties of the integers, and modular arithmetic, explain some of their basic applications in Informatics, e.g., to cryptography</li><li>carry out practical computations with standard concepts from discrete and continuous probability, such as joint and conditional probabilities, expectations, variances, standardization</li><li>recognize and work with standard discrete and continuous probability distributions and apply them to model and solve concrete problems</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Entrepreneurship and Innovation Project (INFR09053)": {
      "module_id": "Undergraduate Course: Entrepreneurship and Innovation Project (INFR09053)",
      "title": "Undergraduate Course: Entrepreneurship and Innovation Project (INFR09053)",
      "summary": "The Entrepreneurship and Innovation Project course enables Informatics students to approach real life problems with an entrepreneurial perspective, through developing their ability to apply disciplinary knowledge, resources and academic skills. The teaching environment for the EIP course will be in-person, face-to-face, with a core teaching facilitator who organises the weekly lesson plans, the guest lecturers, and who serves as a facilitator and introducer of weekly learning. Teaching will be delivered in a way that enables students to build on their entrepreneurial knowledge each week through formal and informal interactions with the course organiser.",
      "content": "The Entrepreneurship and Innovation Project covers three levels of cognitive domains (Knowledge, Comprehension, and Application): it exposes the enrolled students to entrepreneurial knowledge, and then teaches them how to explain and represent their new knowledge through applying it to constructing a solution to a problem that they have identified. Students will be assessed on their ability to develop and execute a semester-long project and team management plan. On a weekly basis, each individual in the team will be required to reflect on/provide a personal perspective of the effectiveness of their teamwork. Like a real-life business with co-founders, the EIP course requires students face and address challenges as a team.<br>\n<br>\nStudent teams will be provided with formative assessment throughout the semester on the basis of their contributions to weekly reflective exercises, which evaluate their progress on collaboratively planning for and presenting a group business plan as their final project. All students will be required to attend weekly business planning workshops, which will guide students on how to research for and populate sections of their business plans that will be assessed as a summative portfolio of each team's collaborative learning journey throughout the semester. Weekly class attendance and effective team work are both essential in order for students to get a good grade for EIP.<br>\n<br>\nThe EIP course provides students with an opportunity to define and engage with an entrepreneurial project that they can continue pursue beyond the 1-semester of the EIP course delivery.<br>\n<br>\nThe course organiser of EIP will provide students with a guided learning pathway, which enables the teaching team (organiser and tutors) to get to know the individual teams 'intimately' through the semester, so as to offer them individualised/team-specific feedback within the context of the larger learning outcomes and with regard to the components of the business plan that are assessed for a final team and individual grade.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify appropriate market segments for their innovations and justify decision to choose one market over another</li><li>communicate the process through which they achieve their final product to stakeholders</li><li>differentiate and appraise the different aspects of business models, financial plans and customer channels</li><li>collaboratively construct a business plan and model associated financial statements (for their entrepreneurial idea)</li><li>work as a member of a team to demonstrate multidisciplinary application of their Informatics' knowledge and skills to delivering an entrepreneurial solution</li>\n    </ol>",
      "level": "SCQF Level 9 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238)": {
      "module_id": "Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238)",
      "title": "Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238)",
      "summary": "This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.",
      "content": "This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>explain and Analyze protocols and systems involving multiple participants and their security properties</li><li>demonstrate the ability to think critically about cybersecurity</li><li>program smart contracts as part of scalable information technology services</li><li>analyse and evaluate smart contract code utilizing basic cryptographic primitives such as digital signatures and hash functions</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Randomized Algorithms (INFR11201)": {
      "module_id": "Undergraduate Course: Randomized Algorithms (INFR11201)",
      "title": "Undergraduate Course: Randomized Algorithms (INFR11201)",
      "summary": "This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science.",
      "content": "1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs.<br>\n<br>\n2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem.<br>\n<br>\n3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications.<br>\n<br>\n4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability.<br>\n<br>\n5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs.<br>\n<br>\n6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm.<br>\n<br>\n7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>understand and apply fundamental tools in discrete probability (e.g. expectation, concentration inequalities, the probabilistic method, random walks) toward the design and analysis of randomized algorithms</li><li>understand randomized algorithms for selected combinatorial and graph problems</li><li>analyze expected running time and error probabilities of randomized algorithms</li><li>understand the fundamentals of Markov chains and their algorithmic applications</li><li>apply Monte Carlo methods such as MCMC to some discrete algorithmic problems</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Quantum Cyber Security (UG) (INFR11227)": {
      "module_id": "Undergraduate Course: Quantum Cyber Security (UG) (INFR11227)",
      "title": "Undergraduate Course: Quantum Cyber Security (UG) (INFR11227)",
      "summary": "This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.",
      "content": "This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead.",
      "ilo": "The lecture notes as main source and as supplementary reading:<br>\nQuantum Computation and Quantum Information by Nielsen and Chuang<br>\nQuantum Information by Stephen Barnett<br>\nPost-Quantum Cryptography Editors Daniel J. Bernstein, Johannes Buchmann and Erik Dahmen",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Postgraduate Course: Secure Programming (INFR11098)": {
      "module_id": "Postgraduate Course: Secure Programming (INFR11098)",
      "title": "Postgraduate Course: Secure Programming (INFR11098)",
      "summary": "This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies).",
      "content": "- Security maintainance of deployed software systems, including \"penetrate-and-patch\", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy).<br>\n- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards.<br>\n- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware.<br>\n- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples.<br>\n- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance.<br>\n- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI.<br>\n- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software.<br>\n- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools.<br>\n- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation.<br>\n- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>know how to respond to security alerts specifying CVE ID numbers which identify software issues</li><li>identify possible security programming errors when conducting code reviews in languages such as Java, C or Python</li><li>define a methodology for security testing and use appropriate tools in its implementation</li><li>apply new security-enhanced programming models and tools which help ensure security goals, e.g.,with access control, information flow tracking, protocol implementation, or atomicity enforcement</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Calculus and its Applications (MATH08058)": {
      "module_id": "Undergraduate Course: Calculus and its Applications (MATH08058)",
      "title": "Undergraduate Course: Calculus and its Applications (MATH08058)",
      "summary": "Calculus is one of the most fundamental tools in mathematics and its applications. This course presents an introduction to the two main branches of calculus: differential calculus and integral calculus. At the heart of both lies the notion of the limit of a function, sequence, or series. In addition to promoting a conceptual appreciation of these foundations of calculus, the course will develop calculational facility, both of which are essential for further mathematical study.<br>\n<br>\nA suggested syllabus for the course is as follows. Functions. Limits and continuity. Differentiation: techniques and applications. Inverse functions. Integration: techniques and applications. Fundamental theorem of calculus. Sequences and series. Taylor and Maclaurin series. Differential equations, moments, and exponential growth.",
      "content": "It is probably fair to say that calculus represents one of the biggest achievements in the history of human thought. It took mankind almost two millennia to go from Archimedes first attempts to estimate areas to the birth of the subject as we know it today with the work of Newton and Leibniz in the 1600s and even after that it took another two centuries before the foundations of the subject were firmly laid.<br>\nIn that sense, calculus marks the birth of modern mathematics: its influence on scientific and technological developments over the centuries since its inception cannot be overstated. This course provides a comprehensive introduction to calculus; the focus will be firmly on the two traditional branches: differential calculus and integral calculus. Roughly speaking, the former is concerned with rates of change (\"derivatives\"), while the latter studies accumulated quantities (\"integrals\"). The connection between the two is established by the fundamental theorem of calculus which lies at the heart of the subject, and which in turn relies on the notion of the limit of a function. <br>\nThe course will explore some of the implications of these and related notions, and will cover a variety of techniques and applications of both differentiation and integration; examples include the mean value theorem, curve sketching, and (unconstrained or constrained) optimisation, as well as areas and volumes, arc length, and improper integrals. The convergence of infinite sequences and series will be another focus in the course. Further applications may include (elementary) differential equations from physics, ecology, and engineering, moments from probability theory, and growth models from economics<br>\nDepending on the mode of delivery, lectures or screencasts on assigned reading will be augmented through (formal and informal) collaborative discussion, thus implementing a \"flipped classroom\" setting. Real-time workshops will involve group-based activities to cement concepts, and expand on applications introduced in lectures or screencasts. Opportunities for practice will be provided through worksheets, online quizzes, and biweekly written homework. <br>",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>Demonstrate an understanding of limits and continuous functions by evaluating and manipulating them.</li><li>Exhibit fluency in differentiation by identifying and applying standard techniques for evaluating derivatives.</li><li>Exhibit fluency in integration by identifying and applying standard techniques for evaluating integrals.</li><li>Apply calculus to a variety of mathematical applications that include curve sketching,optimisation problems and the calculation of rates of change, areas, and volumes.</li><li>Demonstrate a basic understanding of infinite sequences and series by describing their convergence properties.</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 1 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Software Design and Modelling (INFR10064)": {
      "module_id": "Undergraduate Course: Software Design and Modelling (INFR10064)",
      "title": "Undergraduate Course: Software Design and Modelling (INFR10064)",
      "summary": "This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice.",
      "content": "The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them.<br>\n<br>\nThe second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning.<br>\n <br>\nFinally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>design simple object-oriented systems</li><li>create, read and modify UML diagrams documenting designs, both on paper and in an appropriate tool</li><li>determine whether a UML model and a body of Java code are consistent; if they are inconsistent, identify the inconsistencies precisely and propose remedies</li><li>evaluate and evolve object-oriented software designs, making use of common design patterns if appropriate</li><li>discuss the use of modelling and model-driven development tools in software development, e.g. why and how models of software can have varying degrees of formality, capabilities and limitations of the tools</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239)": {
      "module_id": "Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239)",
      "title": "Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239)",
      "summary": "This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.",
      "content": "This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead.",
      "ilo": "None",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Machine Learning Practical (UG) (INFR11223)": {
      "module_id": "Undergraduate Course: Machine Learning Practical (UG) (INFR11223)",
      "title": "Undergraduate Course: Machine Learning Practical (UG) (INFR11223)",
      "summary": "This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.",
      "content": "This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead.",
      "ilo": "Ian Goodfellow, Yoshua Bengio, and Aaron Courville, Deep Learning, 2016, MIT Press<br>\nMichael Nielsen, Neural Networks and Deep Learning, 2016. Online at http://neuralnetworksanddeeplearning.com<br>\nChristopher M Bishop, Neural Networks for Pattern Recognition, 1995, Clarendon Press.",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Standards Compliant Software Development (UG) (INFR11253)": {
      "module_id": "Undergraduate Course: Standards Compliant Software Development (UG) (INFR11253)",
      "title": "Undergraduate Course: Standards Compliant Software Development (UG) (INFR11253)",
      "summary": "This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead.",
      "content": "This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe the structure of typical standards and regulation for a range of domains of application</li><li>explain and motivate the goals set by regulation and standards and how they influence the requirements for compliant systems</li><li>given an example system and standard or regulation, justify what evidence would be needed to comply with the regulation or standard</li><li>given an example system development process and standard or regulation, evaluate how effective the process can be in generating evidence of compliance to the standard or regulation</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Operating Systems (INFR10079)": {
      "module_id": "Undergraduate Course: Operating Systems (INFR10079)",
      "title": "Undergraduate Course: Operating Systems (INFR10079)",
      "summary": "This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework.",
      "content": "The OS Kernel<br>\n*Micro and Monolithic kernels<br>\n*Multi-tasking, multi-user<br>\n*Interrupt handling, system calls<br>\n<br>\nProcess Management<br>\n*The process concept<br>\n*The thread concept<br>\n*Inter-process communication<br>\n<br>\nTime Management<br>\n*CPU scheduling algorithms<br>\n<br>\nResource Management<br>\n*Synchronisation, mutual exclusion<br>\n*Semaphores, and monitors<br>\n*Deadlock prevention, avoidance, and detection<br>\n<br>\nMemory Management<br>\n*The problem of allocation, protection, and sharing<br>\n*Physical and virtual memory<br>\n*Paged virtual memory<br>\n<br>\nStorage Management<br>\n*Storage technologies<br>\n*File Systems<br>\n<br>\nVirtualization <br>\n*Virtual Machines<br>\n*Containers<br>\n<br>\nRelevant QAA Computing Curriculum Sections: Operating Systems",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe the structure and components of modern operating systems</li><li>explain the abstract concepts and concrete implementations of operating systems</li><li>compare and contrast the differing approaches taken by various operating systems</li><li>evaluate the suitability of differing approaches in different application domains</li><li>design OS components to address particular needs</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Honours Project (Informatics) (INFR10044)": {
      "module_id": "Undergraduate Course: Honours Project (Informatics) (INFR10044)",
      "title": "Undergraduate Course: Honours Project (Informatics) (INFR10044)",
      "summary": "This is a major project and is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. Typical areas of activity will be: gathering and understanding background information; solving conceptual problems; design; implementation; experimentation and evaluation; writing up.<br>\n<br>\nThe project is conducted individually by the student under the supervision of a member of teaching staff. The project specification is usually provided by a member of staff, but students are also free to specify their own project. All project specifications must be approved by the Project Coordinator.<br>\n<br>\nFor a single honours Informatics degree, the project will normally involve the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these. This requirement does not necessarily apply to combined honours degrees.",
      "content": "Project dependent",
      "ilo": "Project dependent",
      "level": "SCQF Level 10 (Year 4 Undergraduate)",
      "credits": "40"
    },
    "Undergraduate Course: Bioinformatics 1 (INFR11160)": {
      "module_id": "Undergraduate Course: Bioinformatics 1 (INFR11160)",
      "title": "Undergraduate Course: Bioinformatics 1 (INFR11160)",
      "summary": "This is an introductory course for the discipline of Bioinformatics for students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex because of significant technological developments and their application at scale in biological and biomedical application areas.<br>\n<br>\nIn this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong emphasis on practical applications of the taught methods.",
      "content": "In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) and the cell biological processes involved in the regulation and function of biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse these sequences using a range of databases, algorithms, and tools. You will undertake mini research projects using publicly available data to put your learning into practice. The course is taught using Python; students need to be comfortable with basic coding in Python as this is required to use the course notebooks each week and for the assessed coursework.<br>\n<br>\nTopics change slightly each year, but typically include:<br>\npairwise and multiple sequence alignment, biological databases, ontologies &amp; functional enrichment analysis, network analysis, multi-omics analysis (transcriptomics, proteomics, methylomics), and biomedical text analytics.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>communicate between biological and computational domains to facilitate effective inter-disciplinary working</li><li>use and / or implement Bioinformatics tools, services, and software in practical research</li><li>have sufficient background knowledge, skills and understanding to discover and apply additional bioinformatics techniques in future work</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Advanced Database Systems (UG) (INFR11217)": {
      "module_id": "Undergraduate Course: Advanced Database Systems (UG) (INFR11217)",
      "title": "Undergraduate Course: Advanced Database Systems (UG) (INFR11217)",
      "summary": "This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.",
      "content": "This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe how database management systems function internally. Interpret and comparatively criticise database systems architectures</li><li>implement major components of a database management system and analyse their performance</li><li>analyse and compare the fundamental query evaluation and concurrency control algorithms, identify strengths and weaknesses of query evaluation plans, and optimise query evaluation plans</li><li>identify trade-offs among database systems techniques and contrast distributed / parallel techniques for OLTP and OLAP workloads</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Security Engineering (UG) (INFR11228)": {
      "module_id": "Undergraduate Course: Security Engineering (UG) (INFR11228)",
      "title": "Undergraduate Course: Security Engineering (UG) (INFR11228)",
      "summary": "This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.",
      "content": "This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>identify ways of attacking a real-world system, leading to a threat model, a security policy, protection goals and assurance targets</li><li>use adversarial thinking to analyse the relationships between threats, hazards, actors and defence mechanisms</li><li>compare and synthesise the perspectives of different system stakeholders and threat actors, using economic and psychological viewpoints as well as technical ones</li><li>demonstrate critical thinking about unsolved problems, residual risk and emerging threats as systems scale or their environment changes</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Informatics 1 - Object Oriented Programming (INFR08029)": {
      "module_id": "Undergraduate Course: Informatics 1 - Object Oriented Programming (INFR08029)",
      "title": "Undergraduate Course: Informatics 1 - Object Oriented Programming (INFR08029)",
      "summary": "This course is available to Informatics students and those on combined Informatics degrees with Maths and PPLS.<br>\n<br>\nThis course presents a conceptual and practical introduction to object oriented programming and software engineering practices, exemplified by Java. As well as providing a grounding in the use of Java, the course will cover general principles of programming in imperative and object oriented frameworks. After completing the course successfully, students will be able to develop programs that support experimentation, simulation and exploration in other parts of the Informatics curriculum (e.g. the capacity to implement, test and observe a particular algorithm).",
      "content": "An introduction to the concepts of programming and software engineering using an object oriented programming language.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>implement components of an object-oriented program, given a specification, and demonstrate the use of an object-oriented approach to enable group development of larger applications</li><li>justify implementation decisions, compare implementations, and comment on their strengths and weaknesses</li><li>demonstrate an awareness of good software engineering practice, including the use of version control, testing and readable code</li><li>locate and use additional sources of information (to include discussion with peers where appropriate) to facilitate independent problem-solving, and reflect on ones own and others contribution to a collaborative learning environment</li><li>plan and organize time, working consistently to a goal</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 1 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Informatics 2 - Foundations of Data Science (INFR08030)": {
      "module_id": "Undergraduate Course: Informatics 2 - Foundations of Data Science (INFR08030)",
      "title": "Undergraduate Course: Informatics 2 - Foundations of Data Science (INFR08030)",
      "summary": "This course introduces students to a core set of knowledge, skills, and ways of thinking that are needed for data science. It brings together several strands: mathematical and computational techniques from statistics and machine learning; practical work with toolchains for data wrangling, analysis, and presentation; critical thinking and writing skills needed to evaluate and present claims; and case studies prompting discussion of the real world implications of data science.",
      "content": "The course will be delivered through a combination of lectures, workshops, and practical labs; students will be expected to complete both pencil-and-paper and programming-based exercises on their own time as well as during workshops and scheduled labs. Students will complete a data science project to assess their practical and writing skills. Technical topics in the course will be covered in three sections, with indicative topics listed below. Practical aspects of these will use a Python-based ecosystem. <br>\n<br>\n1. Data wrangling and exploratory data analysis <br>\n- Working with tabular data <br>\n- Descriptive statistics and visualisation <br>\n- Linear regression and correlation <br>\n- Clustering <br>\n  <br>\n2. Supervised machine learning <br>\n- Classification <br>\n- More on linear regression; logistic regression <br>\n- Generalization and regularization <br>\n<br>\n3. Statistical inference <br>\n- Randomness, simulation and sampling <br>\n- Confidence intervals, law of large numbers <br>\n- Randomized studies, hypothesis testing   <br>\n<br>\nInterleaved with these topics will be topics focusing on real-world implications (often using case studies), critical thinking, working and writing skills. These may be introduced in lecture but will often include a workshop discussion and/or peer review of written work. Indicative topics include: <br>\n<br>\nA. Implications: <br>\n- Where does data come from? (Sample bias, data licensing and privacy issues) <br>\n- Visualisation: misleading plots, accessible design <br>\n- Machine learning: algorithmic bias and discrimination <br>\n<br>\nB. Thinking, working, and writing: <br>\n- Claims and evidence: what can we conclude; analysis of errors <br>\n- Reproducibility; programming \"notebooks\" vs modular code <br>\n- Scientific communication; structure of a lab report <br>\n- Reading and critique of data science articles",
      "ilo": "None",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Machine Learning Theory (UG) (INFR11224)": {
      "module_id": "Undergraduate Course: Machine Learning Theory (UG) (INFR11224)",
      "title": "Undergraduate Course: Machine Learning Theory (UG) (INFR11224)",
      "summary": "This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.",
      "content": "This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>interpret and explain rigorous statements about properties of machine learning methods</li><li>evaluate properties of learning models through proofs and examples</li><li>relate, compare, and contrast the implications of various qualities of machine learning models covered in the course</li><li>formulate precise mathematical requirements corresponding to desired properties in real learning problems, and explain their decisions</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Natural Computing (INFR11161)": {
      "module_id": "Undergraduate Course: Natural Computing (INFR11161)",
      "title": "Undergraduate Course: Natural Computing (INFR11161)",
      "summary": "This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms.<br>\n<br>\nIn this module, students will learn about<br>\n<br>\n- The practicalities of natural computing methods: How to design algorithms for particular classes of problems.<br>\n<br>\n- Some of the underlying theory: How such algorithms work and what is provable about them. <br>\n<br>\n- Issues of experimental design: How to decide whether an metaheuristic algorithm works well. <br>\n<br>\n- Current commercial applications. <br>\n<br>\n- Current research directions.",
      "content": "The lectures will cover the following subjects:<br>\n<br>\n- Computational aspects of animal behaviour and of biological, chemical or physical systems<br>\n- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions<br>\n- Swarm intelligence, particle swarms, differential evolution, robot swarms<br>\n- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches<br>\n- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems<br>\n- Hybrid, hyperheuristic, and memetic algorithms<br>\n- Multi-objective optimisation<br>\n- Genetic programming<br>\n- Applications such as engineering optimisation; scheduling; data-mining; neural net design<br>\n- Experimental issues: Design and analysis of sets of experiments<br>\n<br>\nRelevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>understand natural computation techniques in theory and in their broad applicability to a range of hard problems in search, optimisation and machine learning</li><li>to know when a natural computing technique is applicable, which one to choose and how to evaluate the results</li><li>to know how to apply a natural computing technique to a real problem and how to choose the parameters for optimal performance</li><li>match techniques with problems, evaluating results, tuning parameters, creating (memetic) algorithms by evolution</li>\n    </ol>",
      "level": "SCQF Level 11 (Postgraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)": {
      "module_id": "Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)",
      "title": "Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226)",
      "summary": "This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.",
      "content": "This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe generic issues (as discussed in the syllabus) which must be addressed by any parallel programming system</li><li>explain, given a description of a previously unseen parallel application, where specific instances of the generic issues will arise</li><li>explain, in considerable detail, the ways in which the generic issues are addressed by the MPI and Pthreads programming models and their supporting infrastructure</li><li>apply their practical experience with MPI and Pthreads to write clean, adaptable and scalable parallel programs for simple applications</li><li>compare the approaches proposed by a range of more speculative programming models</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Machine Learning (INFR10086)": {
      "module_id": "Undergraduate Course: Machine Learning (INFR10086)",
      "title": "Undergraduate Course: Machine Learning (INFR10086)",
      "summary": "***This course is a replacement for Introductory Applied Machine Learning (INFR10069)***<br>\n<br>\nSince the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output \"teacher signal\".<br>\n<br>\nThe aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice.",
      "content": "The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable.<br>\n<br>\n-\t Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers <br>\n-\t Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods <br>\n-\t Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting <br>\n-\t Model selection and performance evaluation: Cross-validation, ROC and PR curves <br>\n-\t Ethics and machine learning: Fairness, accountability, transparency, privacy concerns <br>\n-\t Representation learning: Dimensionality reduction, clustering, feature learning <br>\n-\t More advanced methods<br>\n<br>\nTo support these topics we will also cover: <br>\n-\tOptimization and Stochastic gradient descent <br>\n-\tPractical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning.",
      "ilo": "Books that may be useful, but are not required:<br>\n<br>\n- Bayesian Reasoning and Machine Learning. David Barber (CUP, 2012)<br>\n- The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Trevor Hastie, Robert Tibshirani and Jerome Friedman (Springer, 2009)<br>\n- Pattern Recognition and Machine Learning, Christopher Bishop (Springer, 2007)<br>\n- Machine Learning: A Probabilistic Perspective. Kevin P Murphy (MIT Press, 2012)",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "20"
    },
    "Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235)": {
      "module_id": "Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235)",
      "title": "Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235)",
      "summary": "This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.",
      "content": "This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>define the joint distribution implied by directed and undirected probabilistic graphical models, convert between different graphical models, and carry out inference in graphical models from first principles by hand</li><li>demonstrate understanding of frequentist and Bayesian methods for parameter estimation by hand derivation of estimation equations for specific problems</li><li>critically discuss differences between various latent variable models for data and derive EM updates for various latent variable models. Demonstrate ability to implement approximate inference and learning methods</li><li>explain when and why the methods taught in the course are applicable and demonstrate experience gained from practically implementing them</li>\n    </ol>",
      "level": "SCQF Level 11 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Informatics 2 - Software Engineering and Professional Practice (INFR08032)": {
      "module_id": "Undergraduate Course: Informatics 2 - Software Engineering and Professional Practice (INFR08032)",
      "title": "Undergraduate Course: Informatics 2 - Software Engineering and Professional Practice (INFR08032)",
      "summary": "Software Engineering and Professional Practice teaches the practice of small team software development in modern society, equipping students to participate in a start-up, modern tech company or a software-dependent research team.<br>\n<br>\nStudents will gain experience developing a software system from scratch, using some of the key tools of the trade: analysing requirements, designing and implementing new features, testing, version control.<br>\n<br>\nProfessional aspects of Software Engineering - its legal, ethical and social environment, including issues of privacy, security, equality, democracy and intellectual property - will be approached through lectures and some practical work.",
      "content": "As students enter this course they team up in groups of two to develop a small-scale software system from scratch using an iterative waterfall process. Over the course of the semester, they consider an incomplete specification to derive and analyse requirements, design their solution from a static and dynamic perspective using UML diagrams, construct and test their solution in Java. There is room for interpretation, creativity, and some of the requirements change along the way. Moreover, there are technical, professional and ethical issues surrounding the problem at hand, on which students will need to reflect. <br>\n <br>\nIncluded in the experience will be use of industry standard tools for software development (integrated development environments, version control, issue tracking), and key elements of modern development practice, such as code review, peer review, and pair programming. <br>\n <br>\nAs students engage in this practical work, the course will contextualise it against the broader themes, both of large-scale software engineering and its academic literature, and of today's urgent professional issues: the legal, ethical and social context in which software and its authors exist. Guest lecturers will speak on technical topics, but also on topics such as privacy, security, equality, democracy and intellectual property - some of which will have a direct impact on students' practical work.",
      "ilo": "Sommerville 'Software Engineering'<br>\nSommerville 'Engineering Software Products' <br>\nACM code of ethics: https://www.acm.org/code-of-ethics <br>\nBCS code of conduct: https://www.bcs.org/membership/become-a-member/bcs-code-of-conduct/",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Introduction to Mobile Robotics (INFR10085)": {
      "module_id": "Undergraduate Course: Introduction to Mobile Robotics (INFR10085)",
      "title": "Undergraduate Course: Introduction to Mobile Robotics (INFR10085)",
      "summary": "A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behaviour strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course.<br>\n<br>\nAt the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car.",
      "content": "Delivery Method:<br>\n<br>\nThe course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum.<br>\n<br>\nContent/Syllabus:<br>\nThe exact set of methods and algorithms explored in the course will vary slightly from year to year,<br>\nbut will include many of the following topics:<br>\n<br>\n-\tIntroduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots.<br>\n-\tMath refresher: basic operations of matrix, algebra, probability theory, derivatives.<br>\n-\tRobot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics.<br>\n-\tSensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc.<br>\n-\tRecursive State Estimation: Kalman filters, EKF etc. <br>\n-\tLocalization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc.<br>\n-\tMapping: environment model, grid map.<br>\n-\tRobot Operating System: basic principles, use cases, and examples.<br>\n-\tSLAM: Framework &amp; systems, loop closing, pose graph optimization.<br>\n-\tPlanning and Navigation: Obstacle avoidance, Path planning, receding horizon control.<br>\n-\tSelf-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation.<br>\n-\tBasic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control.",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>recall and explain the essential facts, concepts, principles and potential ethi-cal concerns of mobile robotics and related concepts, demonstrated through written answers in exam-ination conditions</li><li>describe and evaluate the strengths and weaknesses of some specific sensor and motor hardware; and some specific software for sensory processing and perception, demonstrat-ed through written answers</li><li>employ useful software and tools (e.g. robot simulator, robotic operating sys-tem) to solve a core problem of mobile robots, and will show a working system via proof-of-concept simulation environments</li><li>in writing a joint report, identify problem criteria and context, discuss design and development, test, analyse and evaluate the behaviour of typical mobile robots they have developed in simulation</li>\n    </ol>",
      "level": "SCQF Level 10 (Year 3 Undergraduate)",
      "credits": "10"
    },
    "Undergraduate Course: Logic, Computability and Incompleteness (PHIL10133)": {
      "module_id": "Undergraduate Course: Logic, Computability and Incompleteness (PHIL10133)",
      "title": "Undergraduate Course: Logic, Computability and Incompleteness (PHIL10133)",
      "summary": "This course examines some fundamental topics relating to first-order Logic and the theory of computability, with particular emphasis on key limitative results.",
      "content": "This course will focus on key metatheoretical results linking computability and logic. In particular, Turing machines and their formalization in first-order logic, linking uncomputability and the halting problem to undecidability of first-order logic. We will then study recursive functions and their construction, followed by  first-order formalizations of arithmetic, particularly Robinson arithmetic and Peano arithmetic. We will then turn to the topic of the arithmetization of syntax and the diagonal lemma, before proceeding to prove some of the main limitative results concerning formal systems, in particular G?del's two incompleteness theorems, along with allied results employing the diagonal lemma, including Tarski's Theorem and Lob's Theorem.",
      "ilo": "Upon successful completion of the course, students will be able to demonstrate:<br>\n\u00bf\tfamiliarity with the general philosophical/mathematical project of Hilbert's program and    how this is impacted by the technical results explored in the course;<br>\n\u00bf\tthorough understanding of some key limitative results in logic and computability, including the halting problem, the undecidability of first-order logic, and the incompleteness of first-order arithmetic;<br>\n\u00bf\tability to employ abstract, analytical and problem solving skills;<br>\n\u00bf\tability to formulate clear and precise pieces of mathematical reasoning.<br>\nAlso, students will demonstrate the following transferable skills:<br>\n\u00bf\tevaluating abstract theoretical claims;<br>\n\u00bf\tgrasping and analysing complex metatheoretical concepts;<br>\n\u00bf\tdeploy rigorous formal methods.<br>",
      "level": "SCQF Level 10 (Year 4 Undergraduate)",
      "credits": "20"
    },
    "Undergraduate Course: Informatics 2C - Introduction to Computer Systems (INFR08027)": {
      "module_id": "Undergraduate Course: Informatics 2C - Introduction to Computer Systems (INFR08027)",
      "title": "Undergraduate Course: Informatics 2C - Introduction to Computer Systems (INFR08027)",
      "summary": "This course is concerned with the design, implementation and engineering of digital computer systems. It offers an introduction to the internal structure of digital computers.<br>\n<br>",
      "content": "The primary aim of the course is to convey an understanding of the internal structure and implementation of digital computers. To impart this knowledge, we first explain how the interface between hardware and software is typically constructed. This interface consists of several key components:<br>\n<br>\n* The binary representation and manipulation of atomic data.<br>\n* The structure of a typical instruction set.<br>\n* The environment in which a program executes, and the notion of processes and virtual memory.<br>\n<br>\nIn addition to explaining the interface between hardware and software, this course introduces the ideas behind the hardware implementation of a processor. This consists of several further components:<br>\n<br>\n* Combinational logic - how simple stateless building blocks such as adders, multiplexers and decoders can be constructed from logic elements.<br>\n* Sequential logic - how components with state, such as latches, registers, register files and memories can be constructed from logic elements.<br>\n* Processor structure - how a simple instruction set can be implemented using combinational and sequential logic components.<br>\n<br>\nThis course includes a brief introduction to the C programming language, which is widely used as a systems programming language.<br>\n<br>\n*** This course replaces Informatics 2C - Introduction to Computer Systems (INFR08018) (10 credit) course. ***",
      "ilo": "On completion of this course, the student will be able to:\n    <ol style=\"font-family:inherit;font-size:inherit;\">\n        <li>describe the trade-offs in different binary representation systems</li><li>explain the principles of: instruction set architecture, digital logic design, cache hierarchy, virtual memory, I/O devices, exceptions and processor management</li><li>demonstrate an understanding of how a high-level programming language (C) maps to the assembly code by converting a simple C program to MIPS assembly</li><li>sketch the design of a simple single- and multi-cycle processor and explain how it operates by combining the knowledge of the logic design basics with that of the MIPS instruction set architecture</li>\n    </ol>",
      "level": "SCQF Level 8 (Year 2 Undergraduate)",
      "credits": "20"
    }
  }
}