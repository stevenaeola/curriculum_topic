{
  "2023": {
    "Client Side Web Development": {
      "module_id": "Client Side Web Development",
      "title": "Client Side Web Development",
      "summary": "This module provides students with the technical foundation to enable them to develop applications which are executed within a web browser. The module covers HTML5, JavaScript frameworks and libraries and other appropriate technologies with implementations that allow client-side scripts to interact with the user, control the browser, communicate asynchronously and alter document content. In addition, widely applied patterns used for client-side web application development are covered.<br>While undertaking the module students develop applications that consume remote services using appropriate technologies and data formats within browser-based applications.",
      "content": "<p>HTML5 : <br>- Canvas, video and audio, forms and data, browser history, offline support and client-side storage elements, geolocation, 'draggables &amp; droppables'<br><br>JavaScript :<br>- Applying object-oriented principles in JavaScript<br>- Large-scale JavaScript application architecture and design issues, including architecture patterns, modularisation, script loading, routing/navigation/history, templating/binding, data access, event-driven messaging<br>- Libraries and frameworks which support development of large-scale JavaScript applications<br><br>JavaScript Patterns :<br> - Module, Revealing Module, Singleton, Constructor, Observer, Command, Facade, MVC, MV*<br><br>Working with services on the client :<br>- Consuming REST services, asynchronous requests and callbacks, XMLHttpRequest/AJAX<br>- Querying OData services<br><br>Real-time web communication<br>- Server push<br>- Publish-subscribe<br>- Peer-to-peer<br>- Techniques and technologies for real-time web communication, including: polling, long polling, WebSocket, HTML5 Server-Sent Events, WebRTC<br>- Frameworks which support development of real-time web applications<br><br>Testing and debugging :<br>- Unit testing in JavaScript<br>- Client-side test frameworks <br>- Use of tools for debugging JavaScript<br>- Use of tools for debugging HTTP requests/responses</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Demonstrate a detailed understanding of the architecture and design patterns commonly used in client-side web applications <br><br>2. Critically appraise and select libraries and frameworks which meet specific purposes within the architecture of client-side web applications<br><br>3. Evaluate the requirement for real-time functionality to enhance responsiveness within a client-side web application<br><br>4. Develop and test a rich, responsive and scalable client-side web application solution which can be executed within a modern web browser and interacts with remote services, making use of appropriate technologies, libraries and frameworks <br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Advanced Programming": {
      "module_id": "Advanced Programming",
      "title": "Advanced Programming",
      "summary": "This module aims to encourage students to become polyglot programmers. It will equip them with a broad understanding of the nature of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module also introduces a range of advanced programming techniques, such as asynchronous messaging, parallel computation and distributed programming. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Comparison of programming paradigms<br>-Object-oriented<br>-Functional<br>-Procedural<br>-Declarative<br>-Logic<br>-Classifying languages<br><br>Functional programming<br>-Lambda calculus<br>-First-class functions<br>-Higher -order functions<br>-Effect-free functions<br>-Recursive types<br>-Function closures<br>-Functional reactive programming<br>-Functional features of object-oriented languages<br><br>Declarative programming<br>-Markup languages<br>-Regular expressions<br>-Domain Specific Languages<br>-Rules engines<br><br>Scripting languages<br>-Static/Dynamic typing<br>-Interpreted languages <br>-Integrating scripts with compiled code<br><br>Managed vs. unmanaged languages<br>-Memory management &amp; pointers<br>-Static and dynamic libraries <br>-Integrating managed and unmanaged code<br><br>Advanced programming techniques<br>-Lazy evaluation and infinite streams<br>-Control abstractions: exception handling, continuations, monads<br>-Object-oriented abstractions: multiple inheritance, mixins, traits, multimethods<br>-Dynamic code evaluation (\"eval\")<br>-Asynchronous and parallel computation<br>-Remote procedure calls<br>-Messages and queues<br><br>Emerging trends in programming </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1 - Explain the nature and applicability of a range of programming paradigms, including object-oriented, functional, procedural, declarative, and the support provided for each in currently popular programming languages.<br><br>2 - Explain the nature and applicability of a range of programming language types with respect to whether they are compiled/dynamic, managed/unmanaged, concurrent or domain specific.<br><br>3 - Evaluate emerging trends in advanced programming languages and techniques.<br><br>4 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques available within that language.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Big Data": {
      "module_id": "Big Data",
      "title": "Big Data",
      "summary": "This module will provide an introduction to the challenges and possible solutions around big data. Big data is the common term for a collection of data sets so large and complex that it becomes difficult to process using commonly available relational database management systems, desktop statistics and visualization packages. The size and complexity of big data creates challenges in terms of storage, search, sharing, transfer, analysis and visualization. Students will be introduced to the problems of big data and technologies that help address these issues e.g. Hadoop. They will also gain an understanding of data mining and the different applications of data mining e.g. search systems, business intelligence, recommender systems etc. thereby gaining the practical and theoretical skills to make sense of large volumes of data.<br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment or equivalent activity for this module is 40%.",
      "content": "<p>Introduction to problems in big data<br>oCharacteristics<br>oTerminology and concepts<br>oEmerging trends<br>oCharacteristics<br>oIssues<br>oBenefits<br>oLimitations<br>Data warehousing<br>oDimensional approach<br>oNormalised approach<br>oBottom up approach<br>oTop down approach<br>Business intelligence<br>oOLAP<br>oForecasting<br>oPredictive modelling<br>oMetadata<br>oStructured vs. unstructured data<br>Data mining<br>oMap reduce<br>oDifferent technologies e.g. Hadoop, R, Weka etc. <br>oStatistical analysis<br>oMining data streams<br>oClustering<br>oLarge scale machine learning<br>Search systems<br>oLink analysis<br>oIndexing<br>oLanguage models<br>oGraph search<br>Recommender Systems<br>oNearest neighbour search<br>oCollaborative filtering<br>oContent based recommenders<br>oDimensionality reduction<br>Data visualisation<br>oAggregation<br>oDrill-down<br>oFilter<br>oRoll-up<br>oWhat-if analysis</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:<br><br>1 - Describe the basic principles of the relational data model and the issues of managing large data or big data using the relational data model<br>2 - Understand the role of data mining and different algorithms and approaches to address different data mining goals and the application of these algorithms to real-world problems for datasets of varying size.<br>3 - Have gained an appreciation of the strategic importance of business analytics and data and demonstrated an ability to extract, cleanse and manage it to derive business knowledge by using systems thinking and applying quantitative analytical techniques<br>4 - Apply their knowledge using various state of the art tools such as Hadoop, R etc.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Business Process Modelling": {
      "module_id": "Business Process Modelling",
      "title": "Business Process Modelling",
      "summary": "This module is concerned with the modelling of business processes. It starts with an overview of business process modelling history, standards, development lifecycle and deployment platforms. Comprehensive coverage of the standardised Business Process Modelling Notation (BPMN) is provided so that students are in a position to read and develop process models. Simulation of process models as well as model deployment, execution and approaches to process model analytics are covered. During the module students are expected to develop and work with a range of different types of business process model typical of a range of businesses.",
      "content": "<p>Overview of Business Process Modelling (BPM)<br>-History and purpose of BPM<br>-Modelling standards<br>-The BPM lifecycle<br>-Overview of available modelling and execution environments<br><br>Business Process Modelling Notation (BPMN)<br>-Overview of BPMN<br>-Pools and lanes<br>-Processes and activities<br>-BPMN tasks: manual, user, script, service, business rules, send and receive<br>-Events and gateways<br>-Message and sequence flow<br>-Data objects, messages and datastores<br>-Subprocesses<br>-Relationship to UML Use Case and Activity Diagrams and Business Process Execution Language (BPEL)<br>-Model creation using integrated development environments<br><br>Business Model Simulation <br>-Simulation overview<br>-Purpose served by simulation<br>-Simulating a business process model<br>-As-Is and To-Be models<br><br>Process Deployment and Execution<br>-Deployment platforms<br>-Executing a process model<br>-Integration with external business systems including legacy systems<br>-Service buses<br><br>Introduction to Process Model Analytics<br>-Purpose of analytics<br>-Monitoring options<br>-BPM Dashboards</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Demonstrate a comprehensive understanding of business process modelling history, associated standards, development lifecycle and deployment environments.<br>2. Demonstrate a comprehensive understanding of Business Process Modelling Notation (BPMN) capabilities such as activities, tasks, events, gateways, flows, stores and subprocesses.<br>3. Compare and contrast business process modelling development, simulation and execution environments as well as techniques used to integrate with external business systems including legacy systems.<br>4. Critically evaluate the role played by business process simulation and process model analytics.<br>5. Develop, simulate, execute and analyse a range of different types of business process models.<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Big Data and IoT": {
      "module_id": "Big Data and IoT",
      "title": "Big Data and IoT",
      "summary": "In this module students will build knowledge and practical skills required to design, implement and deploy computer systems that include geographically-distributed devices. These types of systems have the potential to generate large volumes of data, have heterogeneous data-sources, need rapid responsiveness or support human-interaction. The module focusses on applications of the Internet of Things (IoT) and the associated technologies that are required to support the challenges of building such systems in a scalable and secure manner. Some of these challenges require technology solutions that fall within the sphere of what has come to be known as \"Big Data\" systems that employ appropriate data-engineering techniques. <br>The module learning paths will be driven from the standpoint of case-studies for real-world problems and applications, with an exploration of the wide range of associated data. Students will explore secure IoT architectural patterns and industry-standard data-engineering techniques for realising such architectures. These techniques include appropriate aspects of data-analysis and human interaction. Students will gain experience in implement and deploying these techniques, by designing and building appropriate solutions, utilising industry-standard technologies.<br>On completion of this module, students will be able to select, justify, implement and deploy appropriate architectural solutions for a range of IoT applications that include a representative range of real-world data and interaction.",
      "content": "<p>-Real-world problems/applications as drivers for technology solutions. <br>-IoT reference architectures and specific industry-vendor solutions. <br>-IoT 'Security by Design' as a fundamental driver for IoT architectures. <br>-IoT Connectivity, communication and messaging. <br>-Understanding the heterogeneous nature of the data. <br>-Ingesting, pre-processing and storing data and understanding trade-offs such as: performance, reliability, scalability and cost. <br>-Analysing data: edge-processing, batch processing, real-time &amp; interactive systems. <br>-Cloud-based technologies and Cloud services to facilitate rapid-application building. <br>-Data pipelines and orchestration of workflows.<br>-Dashboards and visualisations. <br>-Human interactive systems. <br><br>Laboratory content will evolve as new technology opportunities become available. Examples of possible laboratory content are:<br>-Connecting and securing an IoT device to a representative Cloud architecture. <br>-IoT device sensing, control and human interaction. <br>-Messaging between Device and Cloud. <br>-Building Device applications and Cloud applications. <br>-Using Cloud services including database services. <br>-Implement analytics to detect patterns and anomalies or trigger actions based on rules. <br>-Building dashboards. <br>-Implementing human-interactive applications (such as voice-interactive). </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:<br><br>1. Demonstrate a detailed understanding of the architectures and techniques used to create IoT systems that include heterogeneous data sources.<br>2. Demonstrate an understanding of how to map representative IoT problems into secure IoT designs that utilise industry-standard technologies.<br>3. Select and justify appropriate processing/analysis methods that are relevant to a representative set of data sources.<br>4. Develop and test solutions that implement a representative range of IoT systems, using appropriate software and hardware technologies.<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Cloud Platform Development": {
      "module_id": "Cloud Platform Development",
      "title": "Cloud Platform Development",
      "summary": "This module provides analytical and practical coverage of cloud computing and web services. The module provides in-depth coverage of cloud computing technology exploring scalability, cloud architecture, platform and data virtualisation (relational and non-relational), delivery and deployment models and issues concerning cloud security. It also focuses on the technology, frameworks and associated standards which support and underpin web services, such as SOA and web service architectural styles. Students will also be introduced to Platform as a Service (PaaS) software development.",
      "content": "<p>Web Service Concepts<br><br>SOA and web service architectural styles, strong and loose coupling, separation of concerns<br>Common SOA patterns for web services<br>XML and JSON for web services (including XML namespaces and XML Schema)<br>SOAP, WSDL and WS-* profiles<br>REST, REST architectural constraints<br>Higher Level Services<br>Security in web services<br>Transactions<br>Cloud Computing Concepts<br>Definition of cloud computing<br>Key characteristics of cloud computing including scalability, availability and replication<br>Virtualization concepts<br>Service bus messaging and load balancing<br>Cloud storage including legacy relational and non-relational data<br>Common SOA patterns for cloud computing<br>Cloud Service Delivery and Deployment Models<br>Cloud service model architectures: IaaS, PaaS and SaaS <br>Cloud deployment models<br>Cloud Security<br>Cloud Security Alliance guidelines for secure cloud application development<br>Identity management and access control in cloud applications<br><br>PAAS Cloud Computing Platforms<br><br>Features of current industry cloud PAAS platforms e.g. Amazon Web Services , Microsoft Azure<br>Software development of multi-tier applications using a current industry standard cloud PAAS platform </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:-<br><br>Critically appraise web service technology, standards and services including SOA, web service architectural styles including SOAP and REST and higher level services such as transactions and security.<br>Critically appraise cloud system technology and architecture, cloud service delivery models such as IaaS, PaaS and SaaS, cloud deployment models and cloud security.<br>Discuss commonly used SOA patterns used in web-service and cloud-based applications.<br>Develop multi-tier web service applications hosted on an industry standard PaaS cloud platform.<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Big Data Platforms": {
      "module_id": "Big Data Platforms",
      "title": "Big Data Platforms",
      "summary": "This module covers the platforms that support data storage, processing and analytics in Big Data scenarios. It focuses on highly scalable platforms that provide operational capabilities for real-time, interactive processing and on platforms that provide analytical capabilities for retrospective, complex analysis. Students will gain an advanced understanding of the principles on which these platforms are based, and their strengths, weaknesses and applicability to different types of scenario. They will also gain advanced practical skills in the design and implementation of scalable Big Data platform solutions.",
      "content": "<p>Big Data challenges: Volume, Velocity, Variety<br>Big Data platform concepts<br>Distributed storage<br>Distributed processing<br>CAP Theorem and eventual consistency<br>Operational vs. Analytical workloads <br>Big Data and traditional enterprise data warehouses<br>Big Data architecture<br>Cloud deployment and Cloud Platform support<br>NoSQL data storage<br>General characteristics, strengths and weaknesses of NoSQL<br>NoSQL data store types and their applicability: including key-value, document, columnar, graph<br>NoSQL modeling and schema design<br>NoSQL querying<br>Big Data processing frameworks<br>MapReduce<br>Hadoop<br>Hadoop ecosystem: including Hive, Pig, Mahout<br>Apache Spark<br>Commercial implementations/services<br><br>Examples of tasks undertaken by students in practical sessions are:<br>Configuration of a database system and its associated software tools to allow implementation of a Big Data storage solution.<br>Design of a data model for a specific database system to meet the needs of a representative Big Data storage scenario.<br>Creation, deployment and test of a solution to a representative Big Data analytic processing scenario using an appropriate set of software tools.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>Demonstrate a detailed understanding of the requirements, concepts and principles of data storage, processing and analytics in Big Data scenarios.<br>Critically appraise the platform choices available for designing and implementing solutions for data storage, processing and analytics in Big Data scenarios.<br>Design a responsive, scalable and robust solution for a Big Data scenario, making use of appropriate platforms and practices.<br>Implement a prototype system to demonstrate and evaluate a representative design solution.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Application Architecture and Design Patterns": {
      "module_id": "Application Architecture and Design Patterns",
      "title": "Application Architecture and Design Patterns",
      "summary": "This module covers the architectural driven design of information systems and the role of proven good software development practices captured in the form of design patterns. A range of architectural patterns and detailed design patterns are explored using the Unified Modelling Language (UML) and program code examples where appropriate. The core learning theme is the iterative formation of a functional software architecture design description and its elaboration into detailed principal design components but one that is often significantly moderated by desired quality (non-functional) requirements. Domain-specific architectures are discussed in the context of Software Product Lines.",
      "content": "<p>ARCHITECTURAL DESIGN<br>Key Software Design Principles Different General Design Techniques An Iterative Architectural Design And Analysis Process Commonly Used Architecture. The role of the Software Architect.<br><br>ARCHITECTURAL PATTERNS<br>What is a Pattern Pattern Types Benefits Limitations Pattern Templates <br>Examples: Layered, N-Tier, MVC, Event-Driven Peer-to-Peer<br><br>DETAILED DESIGN PATTERNS<br>Design Principles Design Mechanisms Elaborating Architectural Design Patterns using Detailed Design Patterns Code examples for Detailed Design Patterns<br><br>ARCHITECTURAL ANALYSIS<br>Designing for Quality Scope of Architectural Analysis Analysis Techniques Quality Attributes Architectural Reviews <br><br>SOFTWARE PRODUCT LINES <br>Domain Engineering vs Application Engineering Domain Architectures Management of Variability Types Platforms</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1 - Describe the process of software architecture design<br>2 - Analyse and evaluate architectural designs from the perspective of a range of different quality attributes<br>3 - Locate and understand the contribution of different libraries of detailed design patterns<br>4 - Evaluate and apply detailed design patterns to the development of software systems.<br>5 - Appraise domain-specific architectures in the context of Software Product Lines<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Cloud Computing and Web Services": {
      "module_id": "Cloud Computing and Web Services",
      "title": "Cloud Computing and Web Services",
      "summary": "This module provides analytical and practical coverage of cloud computing and web services. It focuses on the technology, frameworks and associated standards: cloud models, cloud platforms and scalability. It also provides coverage of current web service technology and data transport representations, and integrated cloud and web service application development. Current examples from industry technology are used throughout",
      "content": "<p>Cloud Models<br>-Service Delivery Models (IaaS, PaaS and SaaS)<br>-Deployment Models (public, private, hybrid clouds)<br><br>Cloud infrastructure and Services<br>-Virtualization: hypervisors and containers<br>-Resource management and provisioning<br>-Cloud service management including lifecycle management and SLA management and enforcement<br><br>Cloud Scalability<br>-Reliability<br>-Distribution and replication<br>-Service-oriented principles for scalable architectures<br>-Cloud storage - blobs, queues and non-relational tables<br><br>Web Services and Data<br>-XML and JSON<br>-SOAP and REST<br><br>Security<br>-Security threats and best practice for critical areas of cloud computing<br>-Secure web service technologies<br><br>Technology Case Studies<br>-Web services e.g. Microsoft WCF, Microsoft Web API, Java JAX-WS and/or JAX-RS <br>-Cloud Computing e.g. Amazon Web Services (EC2, Elastic Beanstalk etc.), VMware vSphere and vFabric, Microsoft Azure, Google App Engine, OpenStack, IBM SoftLayer/BlueMix<br><br>Cloud Service Application Development<br>-PaaS cloud application development using multiple VM instances and cloud storage with software development tools and APIs currently used in industry<br><br>Examples of tasks undertaken by students in practical sessions are:<br>-Writing, building and running locally multi-tier cloud applications in an industry standard IDE e.g. Visual Studio with current SDKs, e.g. Microsoft Azure SDK.<br>-Deploying coursework applications on a real data-centre e.g. a Microsoft Cloud data-centre.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>Critically appraise cloud technologies, platforms, services and standards.<br>Critically appraise web service technology including data transport representations.<br>Develop integrated cloud and web service applications using a mainstream industry cloud platform and development technologies.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Artificial Intelligence and Machine Learning": {
      "module_id": "Artificial Intelligence and Machine Learning",
      "title": "Artificial Intelligence and Machine Learning",
      "summary": "This module covers the fundamental concepts, theory and techniques that enable artificial intelligence (AI). It focuses on the history, basic and advanced methods of AI and their practical uses in today's society and businesses. Students will learn the role of machine learning and deep learning in modern AI and will apply and implement traditional and modern AI methods based on real world examples. By the end of this module students will have gained an advanced understanding in the core concepts of AI and are able to determine whether a problem-solving approach using AI is appropriate, how to implement it and then evaluate it efficiently using local as well cloud-based tools.",
      "content": "<p>1.Introduction, history, and basic concepts in AI<br>2.Intelligent agents, problem solving, search methods<br>3.Machine learning: introduction, features, tasks, traditional and modern machine learning models<br>4.Types of machine learning (supervised, unsupervised, semi-supervised), generalization, transfer learning, active learning, ensembling<br>5.Tools, programming languages, libraries and hardware for AI and machine learning<br>6.Deep learning: loss functions, optimization, backpropagation, and neural networks<br>7.Training neural networks: activation functions, hyperparameters, training procedures, learning rates, augmentation<br>8.Reinforcement learning<br>9.Machine learning pipelines<br>10.Applications and modern examples or AI: machine vision, natural language processing, data mining, robotics)<br>11.Ethics and bias in AI</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module, the student should be able to:<br><br>1. Demonstrate in-depth knowledge of the concepts, requirements and principles of artifical intelligence and machine learning.<br>2. Develop approaches that apply AI principles, algorithms and models for problem solving.<br>3. Demonstrate proficiency in implementing AI solutions using relevant programming languages and tools.<br>4. Demonstate a detailed understanding of the classical and modern techniques of AI.<br>5. Demonstrate a detailed understanding of how AI applications can be used to add value to businesses and society.<br>6. Critically appraise the shortcomings and ethical issues of AI.</p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "15.0"
    },
    "Advanced Data Science": {
      "module_id": "Advanced Data Science",
      "title": "Advanced Data Science",
      "summary": "This module will cover advanced methods and techniques of Data Science. Students will learn how to extract useful information from large datasets using a variety of analytical techniques. Focus will be given to approaches such as Bayesian statistical analysis, specifically prior and posterior distribution construction, decision theory and model selection. Students will also be introduced to Markov chain Monte Carlo methods and how they can be used to implement Bayesian models. Ultimately, students will be able to utilise Bayesian statistical techniques to build complex models of data.",
      "content": "<p>Bayesian Theory - Subjective Probability - Bayesian Inference - Prior Distributions - Posterior Distributions - Normal Distribution Analysis - Binomial Distribution Analysis - Exponential Distribution Analysis - Poisson Distribution Analysis - Predictive Inference - Decision Theory - Point Estimation - Hypothesis Testing - Bayesian Modelling - Hierarchical Models - Bayesian Computation - Markov Chain Monte Carlo Methods - Gibbs Sampling - Graphical Models - Bayesian/MCMC Implementation</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module. student should be able to:<br><br>1. Prove and utilise Bayes theorem<br>2. Critically analyse data from various distributions (normal, binomial, exponential, poisson)<br>3. Understand the Bayesian approach to data analysis<br>4. Utilise Bayesian analysis to develop solutions to statistical problems<br>5. Understand and explain the Markov chain Monte Carlo (MCMC) approach to Bayesian implementation<br>6. Understand and explain Statistical Decision Theory<br>7. Implement Bayesian models using MCMC and appropriate software tools<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Big Data Landscape": {
      "module_id": "Big Data Landscape",
      "title": "Big Data Landscape",
      "summary": "This module covers the process of managing Big Data throughout its lifecycle, from requirements through retirement. The lifecycle crosses different application systems, databases and storage media. Students will gain an understanding of the full Big Data value chain. They will be able to analyze the challenges and opportunities associated with the different stages which Big Data passes through.",
      "content": "<p>Landscape Overview<br>Introduction<br>Applications<br>Infrastructure<br>Technologies<br>Types of Big Data: Graph, Social, Security, Telematics etc<br>Metadata<br><br>Big data lifecycle management<br>Data lineage, provenance and infrastructure<br>Data at rest and in motion<br>Data Warehousing, marts, lakes<br><br>Big data value chains: <br>From big data to intelligence/knowledge <br>From big data to decision making<br><br>The interface of artificial intelligence and Big Data<br>Data visualisation<br><br>Big data ecosystems<br>Big data reference architecture<br><br>Data integration<br>Data virtualization<br>Data federation<br>Linked open data: RDF, Semantics and Ontology<br><br>Big data applications<br>Big Data privacy, security, legal and governance<br><br>Examples of tasks undertaken by students in practical sessions are:<br>Configuring and using the Hadoop file system.<br>Implementing parallel, distributed algorithms on a cluster using MapReduce.<br>Creation, deployment and testing of an end-to-end information value-chain in a virtual environment.<br>Utilising NoSQL databases.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of the module the student should be able to:<br><br>Demonstrate a detailed understanding of the requirements, concepts and principles of Big Data systems.<br>Demonstrate a detailed understanding of Big Data storage, transmission, processing and analytics from an enterprise system perspective.<br>Critically appraise the data components of an enterprise system.<br>Analyse the role of enterprise system data components in the Big Data information value chain.<br>Critically appraise Big Data technologies, infrastructure, services and standards.</p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Applications Architecture and Design Patterns": {
      "module_id": "Applications Architecture and Design Patterns",
      "title": "Applications Architecture and Design Patterns",
      "summary": "This module covers proven good software development practices used in the creation of software systems. Traditional design patterns, architectural patterns and enterprise patterns are investigated using the Unified Modelling Language (UML) and program code examples where appropriate. This includes patterns used when integrating with legacy systems. The main focus of the module is the concept of improving design through the use of these widely applied patterns including their application to existing designs through refactoring. Detailed coverage is included of the traditional Gang of Four (GOF) patterns due to their continued importance and their influence on both current and emerging patterns.",
      "content": "<p>REVIEW OF OO DESIGN PRINCIPLES and THE UNIFIED MODELLING LANGUAGE (UML) <br>OO Design Principles: encapsulation, polymorphism, inheritance versus composition, strong typing, cohesion, coupling, implementation and interface inheritance <br>SOLID: Single responsibility, open-closed principle, Liskov substitution, interface segregation and dependency inversion <br>UML diagrams and techniques: class diagram, sequence diagram, activity diagram, state diagram<br><br>TRADITIONAL DESIGN PATTERNS and GANG OF FOUR (GOF) <br>- Patterns background: Definition of the term Pattern, How Patterns are identified, History of the Patterns movement <br>- Gang of Four (GOF) Behavioural Patterns Strategy, Command, Iterator and Observer <br>- GOF Creational Patterns Factory Method, Abstract Factory, Builder and Singleton <br>- GOF Structural Patterns Facade, Proxy, Adapter, Composite, Decorator <br>- Programing Idioms and Design Patterns<br>- Application of design patterns during development including the refactoring of existing systems<br><br>ARCHITECTURAL PATTERNS <br>- Software architecture: characteristics of good architecture, relationship with design and design patterns <br>- Traditional Architectural Patterns: MVC, Layers, Tier <br>- Introduction to Enterprise Design Patterns<br><br>ENTERPRISE DESIGN PATTERNS <br>- Integration Patterns: Data Accesss Object (DAO), Data Transfer Object (DTO), Asynchronous Resource Integrator, Web Service Broker <br>- Business Component Patterns: Persistent Domain Object (PDO),Session Fa<br>- Infrastucture Patterns: Interceptors, Service Starter, Singleton, Resource Binder, Dependency Injection Extender</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br>1. Demonstrate a comprehensive understanding of UML and OO design principles and the use of UML for design visualisation<br>2. Assess the use of patterns in the design of software systems<br>3. Develop UML models for design patterns using currently available software modelling tools<br>4. Evaluate and apply design patterns, architectural patterns and enterprise patterns to the development of software systems and the refactoring of existing systems.<br>5. Analyse legacy software components and system architecture, with review of the source code if available, to determine how integration with new and existing systems may be achieved</p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "3D Mathematics for Simulation and Visualisation": {
      "module_id": "3D Mathematics for Simulation and Visualisation",
      "title": "3D Mathematics for Simulation and Visualisation",
      "summary": "This module continues and enhances the foundation of mathematics for games technology. The module will cover the mathematical techniques needed by professionals in the simulation and visualization industries for the understanding and application of routines used in industry standard physics engines and graphics libraries.",
      "content": "<p>1 Trigonometry: review of sine, cosine, tangent and inter-relationships application to 3D geometry.<br>2 3D Coordinate systems: cartesian spherical cylindrical quaternions homogeneous coordinate systems relative coordinate systems yaw, pitch and roll.<br>3 3D Geometry: vectors as models of position, velocity, acceleration and force symmetry parametric representations of curves and surfaces polyhedrons light sources triangulations.<br>4 3D Transformations: translations, rotations, reflections, inversions and scaling.<br>5 Projections: perspective axonometric.<br>6 Kinematics: position, velocity and acceleration of a moving particle rigid body motion.<br>7 Classical mechanics of particles: force Newton's laws equations of motion potential and kinetic energy.<br>8 Mechanics of rigid body motion: introduction to multiple integration inertia, angular momentum, torque Euler's theorem on rigid body motion.<br>9 Numerical methods: Euler method and backwards Euler Methods Runge-Kutta methods stability convergence.<br>10 Further forces: equations of aerodynamic and hydrodynamic lift viscosity elasticity.<br>11Collisions: conservation of energy and momentum coefficient of restitution.<br>12 Differential equations: differentiation and partial differentiation solving first and second order constant coefficient differential equations.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successufl completion of this module, students should be able to:<br><br><br>1 Solve games related problems in 3D geometry.<br>2 Apply Newton's laws to modelling the motion of objects subject to a range of forces.<br>3 Demonstrate and apply standard projections of 3D space onto a surface.<br>4 Represent and manipulate objects with respect to different coordinate systems.<br>5 Compare and contrast numerical algorithms.<br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Data Ethics and Research Methods": {
      "module_id": "Data Ethics and Research Methods",
      "title": "Data Ethics and Research Methods",
      "summary": "This module seeks to develop understanding and practical skills in advanced research methods which are in line with industry regulations, standards and practices and are applicable to complex Data Science projects. Study is undertaken in an integrated fashion to ensure that the professional framework within which such projects are developed, deployed and managed are fully understood.",
      "content": "<p>-Ethical Considerations in research: Research involving human subjects, using minors and vulnerable people in research activities applicability of professional body codes of practice <br>-Ethical frameworks for the Data Science and AI professional: underlying ethical concepts and ethical theories<br>- Professionalism within Data Science and AI role of professional bodies codes of ethics/conducts responsibilities of a data professional and ethical decision making<br>- Societal issues of Data Science and AI, algorithm fairness, misinformation.<br>-Security of AI, privacy and data protection Data legislation and regulations, industry standards and practices<br>-Data governance, risk and compliance<br>-Research problem definition <br>- Critical analysis on state of the art <br>- Hypothesis and research questions<br>- Research issues<br>-Critical thinking<br>- Research evaluation<br>- Quantitative and qualitative methods<br>- Practical work based evaluation<br>- Evaluation scenarios<br><br>Examples of tasks undertaken by students in practical sessions are:<br>-Presentation and demonstration of practical work based evaluation<br>-Group discussion and argumentation for contemporary topics and case studies<br>-Critical reviews of reference and online resources</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>1. Critically evaluate the techniques of advanced research methods, applicable to complex Data Science projects.<br>2. Critically evaluate major legal, social and professional issues applicable to the development and use of Data Science and AI technologies and systems within society.<br>3. Demonstrate an in-depth understanding of the ethical responsibilities of a Data Science and AI professional.<br>4. Apply the key elements and techniques of an advanced research methodology appropriately in the development of a complex Data Science project.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "15.0"
    },
    "DevOps": {
      "module_id": "DevOps",
      "title": "DevOps",
      "summary": "This module is concerned with the software engineering Development and Operations (DevOps) approach used in the creation of software systems. The module covers the rationale for DevOps and the key concepts of Development, Configuration Management, Continuous Integration/Delivery (CI/CD) and Operations. In addition, the configuration and use of a DevOps CD pipeline is covered. <br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Development and Operations (DevOps) Overview<br>History of DevOps: Lifecycle Approaches, DevOps Origins in Agile, Benefits <br>DevOps Principles: Full Lifecycle Involvement, Systems Thinking, Definition of Done, Risk Reduction, Frequent Small Releases, Kaizen<br>Cultural Challenges: Dev and Ops Conflict, Team Composition and Distribution, Organisational Structure, Automation Confidence<br><br>Configuration Management<br>Version Control: Principles, Software Tools, Commit Everything, Mainline Work<br>Managing Configurations: App Configuration, Feature Toggles, Third Party Components <br><br>Continuous Integration <br>Principles and Practices: Overview, Frequent Commits, Automated Testing, <br>Prioritising Broken Build Fixing, Continuous Feedback<br>Quality Assurance: Development Standards, Static Analysis, Test Automation, Types of Tests, Managing Defects<br><br>Continuous Delivery<br>Principles and Practices: Overview, Repeatable Software Releasing, Automation,<br>Use of Version Control, Pain Points, All Responsible for Release, Continuous Improvement, Building Binaries, Identical Deployment Everywhere, Smoke Tests.<br>Deployment Pipelines: Commit and Automated Acceptance Stages, Manual and Non-functional Testing, Release Rollback, Pushing to Production, Orchestration <br><br>Operations<br>Infrastructure Management: Cloud, Virtualisation, Containers, Infrastructure as Code, Scaling, Monitoring, Continuity Planning<br>Database Management: Test Data, Managing Change, Reverting Data Changes<br>DevOps CD Pipeline Implementation: Planning, Building, Monitoring, Maintenance</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, the student should be able to:<br><br>1 - Explain the rationale for Development and Operations (DevOps) and its underlying principles and challenges<br>2 - Demonstrate a detailed understanding of Development, Configuration Management, Continuous Integration/Delivery (CI/CD) and Operations including currently used supporting software tools<br>3 - Develop and configure a DevOps CD pipeline and demonstrate its use in the release of a software component.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Dissertation": {
      "module_id": "Dissertation",
      "title": "Dissertation",
      "summary": "This module is concerned with the development and presentation of an MSc Dissertation on a topic relevant to the student's named programme. The dissertation project will be based on the proposal prepared by the student prior to the start of the MSc Dissertation project period. A series of facilitation sessions are provided to support students in developing their MSc Dissertation proposals, including guidance on how to clearly set out the Background, Objectives, Methods and Work-plan. The project is essentially an independent piece of development or research work, and the skills necessary to carry this through will derive from the programme's taught modules . Students will be provided with up to 2 hours guidance in the form of technical consultancy and with up to 6 hours guidance in the form of process consultancy.",
      "content": "<p>There is no defined syllabus per se, but the student will be expected to follow the project plan laid out in his/her proposal.<br>Normally the proposal will specify a number of milestones at the end of major stages, and the student will be expected to submit appropriate deliverables at that time and receive appropriate feedback on this work. The student will be expected to submit a draft of the complete final dissertation in sufficient time to receive and act upon feedback from a supervisor.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>Upon completion of this module, the student should be able to:<br><br>Manage a small development or research project in a timely manner.<br>Deliver the contracted results including intermediate (milestone) deliverables and the final Dissertation. <br>Prepare an appropriately formatted, documented and structured Dissertation reporting on the work carried out. <br>Correctly cite and reference all sources used in their dissertation report, consistently using one referencing convention e.g. Harvard.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "60.0"
    },
    "Data Structures and Algorithms": {
      "module_id": "Data Structures and Algorithms",
      "title": "Data Structures and Algorithms",
      "summary": "This module covers the concepts associated with data structures and algorithms including the design of algorithms considering factors such as efficiency and complexity. A range of widely employed data structures such as Arrays, Lists, Trees and Queues are investigated. Coverage of algorithms such as searching and sorting as well as those associated with graph data structures are also included. The topic is covered in the context of object-oriented development and enables students to develop an appropriate object-oriented software solution given a simple set of requirements where consideration has been given to the use of the most appropriate data-structures and algorithms. <br><br>The percentage of Work Based Learning for this module, as represented by the Independent Learning 'Activity Type', is 61%. The percentage of Work Based Assessment for this module is 0%.",
      "content": "<p>Data Structure and Algorithm Concepts:<br>- History<br>- Data Structure Definition: Relationship to OO, Container Classes, ADT<br>- Algorithm Definition: Representing algorithms, Flowcharts, UML, Pseudo Code<br>- Cost Estimation: Algorithm Analysis, Trade-Offs, Recursion, Algorithm Complexity, Big-O Notation<br><br>Data Structures and their Implementations: <br>- Arrays: one-dimensional, two-dimensional, n-dimensional, jagged<br>- Lists: Singly Linked, Doubly Linked, Circular, Array List<br>- Maps and Sets<br>- Collections and Generics<br>- Hashing: Hash Tables, Rehashing, Perfect, Universal<br><br>- Stacks and Queues<br>- Trees: Binary, Binary Search, Expression, Splay, B-Trees and Tries<br>- Graphs<br><br>Sorting and Searching: <br>- Bubble, Shell, Quicksort, Heap<br>- Red-Black and AVL trees<br>- Pattern matching and Regex expressions<br><br>Graph Algorithms:<br>- Shortest Path, Depth First/Breadth First, Maximum Flow, NP Complete<br><br>Algorithm Design Techniques:<br>- Divide and Conquer<br>- Big-O <br>- Compression (LZW, Huffman) <br>- Encryption <br>- Searching and Sorting <br>- Data Structures</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1 - Understand the concepts which underpin data structures and algorithms such as cost estimation and algorithm complexity.<br><br>2 - Understand the fundamental data structures and algorithms commonly used when developing software systems. <br><br>3 - Critically evaluate the data structures used with searching, sorting and graph algorithms.<br><br>4 - Develop an object-oriented solution which demonstrates the appropriate the use of a range of data structures and algorithms.<br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Database Development": {
      "module_id": "Database Development",
      "title": "Database Development",
      "summary": "This module will provide students with an understanding of the techniques used in the design and implementation of modern Relational Database Systems. It will cover the principles of Relational Data Modelling, data definition and querying using SQL, integration of databases with applications and security support. The module will also expose students to non-relational database technologies.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Relational Model<br>Principles of the relational model<br>Normalisation<br><br>Structure Query Language (SQL)<br>Table definition and constraints<br>Queries<br>Stored procedures<br>Security support<br><br>Application Integration<br>Database connectivity<br>Object Relational Impedance Mismatch<br><br>Non-relational database technologies<br>NoSQL databases</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1 - Demonstrate an understanding of Relational Data Modelling<br>2 - Use SQL to define database tables and queries<br>3 - Demonstrate an understanding of the integration of databases with applications including security implications<br>4 - Apply appropriate APIs to develop and query selected non-relational database technologies<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Data Visualisation": {
      "module_id": "Data Visualisation",
      "title": "Data Visualisation",
      "summary": "This course aims to equip students with knowledge and skills required for successful data visualisation. The goal of data visualisation is to expose the underlying structure of a dataset using visual representations which are targeted towards the human visual perceptual system. Students will gain experience in the theory, design, implementation and evaluation of data visualisation systems. Appropriate software tools will be utilised throughout the module to create effective visual representations to translate complex data into clear information, allowing the target audience to extract value from it. Students will learn how to use advanced visualisation techniques such as data storytelling and interactive visualisations to communicate information clearly. By the end of this module, students will be capable of analysing the appropriateness of a given visualisation in relation to a problem, select and implement appropriate data visualisation systems for a given dataset and evaluate the effectiveness of this system.",
      "content": "<p>-Fundamentals of data visualisation: data, information, visual representation, perception <br><br>-Understanding differences between data visualisation, infographics, scientific visualisation and information visualisation<br><br>-Types of data visualisations: graphs, statistical/temporal/multivariate data visualisation, hierarchies and networks<br><br>-Effective data visualisation: good/bad data visualisation design, evaluation of visualisation techniques <br><br>-Storytelling using data visualisations<br><br>-Interactive and immersive visualisation techniques<br><br>-Industry standard tools and technologies</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>1. Discuss the main methods and tools for data visualization, including the underlying fundamental concepts<br>2. Differentiate between different types of data and identify appropriate visualisation solution based on the data and task<br>3. Implement an appropriate data visualisation solution, justify its design in relation to a specific problem and evaluate its effectiveness<br>4. Develop advanced data visualisations such as data stories or interactive visualisations<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "15.0"
    },
    "Fundamentals of Computer Systems": {
      "module_id": "Fundamentals of Computer Systems",
      "title": "Fundamentals of Computer Systems",
      "summary": "This module introduces students to the fundamental aspects of computer systems: architectures applications and data. The content will include an examination of computer systems from the very small (bits and bytes), through data representation (binary), to instruction sets, the fetch and execute cycle and computer memory organisation. The module will also include working with an operating system using a command line, and controlling a computer using assembly language. Additional hardware topics such as peripherals and embedded systems will be introduced. Students will gain practical experience in the investigation of computer systems and architecture through a programme of laboratory work and tutorial study.",
      "content": "<p>Data representation and manipulation binary, hexadecimal, floating point number representation and negative numbers<br>The architectural building blocks of a simple CPU including registers, ALU, control unit and data-paths. <br>The fundamentals of instruction fetch, interpretation and execution. <br>Introduction to assembly language: vs machine language, derivation of control steps for assembly instructions<br>How a program works and how it is stored on hard disc, high level languages, compiling a program, bootstrap process. <br>Operating systems, software and applications: Linux, command line and basic scripting. <br>File systems and directories: Mapping files onto disc blocks, file structures and their advantages and disadvantages. <br>Systems organization including distributed-systems, parallel and multi-core techniques. <br>Organisation and performance of the memory/storage hierarchy. This overview ranges from CPU-based memory technology through to network-attached storage technologies.<br>Overview of hardware elements: embedded systems, peripherals <br>Client/Server architectures, N-Tier architectures</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, the student should be able to:<br><br>1 - Describe the key components of computer system hardware, operating system and software architectures used to provide computer system functionality<br>2 - Explain how data is represented and manipulated by a CPU instruction set within a computer system.<br>3 - Explain low level control of hardware by assembly language <br>4 - Demonstrate the use of command line input to an operating system and create a short script.<br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "10.0"
    },
    "Front-End Web Development": {
      "module_id": "Front-End Web Development",
      "title": "Front-End Web Development",
      "summary": "This module provides students with the technical foundation to enable them to develop applications which are executed within a web browser. The module covers HTML5, JavaScript frameworks and libraries and other appropriate technologies with implementations that allow client-side scripts to interact with the user, control the browser, communicate asynchronously and alter document content. In addition, widely applied patterns used for client-side web application development are covered.<br><br>While undertaking the module students develop applications that consume remote services using appropriate technologies and data formats within browser-based applications.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Advantages and disadvantages of large-scale browser-based JavaScript applications<br><br>HTML/CSS : <br>-HTML 5 capabilities, ie.g. canvas, video and audio, <br>-new and emerging features e.g. offline support and client-side storage elements,<br>-CSS pre-processing, for example LESS, SASS<br><br>JavaScript : <br>-current programming techniques and practices in JavaScript including DOM scripting techniques and applying object-oriented principles in JavaScript<br>-design patterns relevant to web applications e.g. Module, Revealing Module, Singleton, Constructor MVC, MV*<br><br>Creating large-scale browser-based JavaScript applications :<br>-architecture and design issues, including architecture patterns, modularisation and dependencies, routing/navigation/history, templating/binding, data access, event-driven messaging <br>-libraries and frameworks which support development of large-scale JavaScript applications, for example e.g. jQuery, Bootstrap, AngularJS <br>-application building and deployment<br>-security: preventing cross-site scripting, Content Security Policy<br><br>Working with services : <br>-REST services<br>-asynchronous requests and callbacks<br>-XMLHttpRequest/AJAX<br>-cross-origin requests<br>-authentication<br><br>Real-time web communication : <br>-server push <br>-publish-subscribe <br>-peer-to-peer <br>-techniques and technologies for real-time web communication, including: polling, long polling, WebSocket, HTML5 Server-Sent Events, WebRTC <br>-frameworks which support development of real-time web applications <br><br>Testing and debugging : <br>-unit testing in JavaScript <br>-client-side test frameworks <br>-use of tools for debugging JavaScript <br>-use of tools for debugging HTTP requests/responses<br><br>Alternatives to JavaScript, for example WebAssembly, TypeScript</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1 - Determine an appropriate distribution of functionality between the front end (client) and back end (server) tiers of a web application<br>2 - Demonstrate an understanding of the architectures and design patterns commonly used to create front-end web applications. <br>3 - Critically appraise and select frameworks and libraries which meet specific purposes within the architecture of front-end web applications.<br>4 - Evaluate the requirement for real-time functionality to enhance responsiveness within a web application.<br>5 - Develop and test a rich, responsive, secure and scalable front-end web application which can be executed within a modern web browser and interacts with remote services, making use of appropriate technologies, libraries and frameworks.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Data Protection and Ethics": {
      "module_id": "Data Protection and Ethics",
      "title": "Data Protection and Ethics",
      "summary": "This module will provide students with essential knowledge and understanding in the field of data protection and ethics in the context of data science. Students will develop an awareness of the complications that come with user data, what privacy means and how data protection relates to the developer and user. This module will utilise case studies to demonstrate the consequences of when data protection is not upheld. It will also introduce techniques to deal with private data such as anonymising big? data sets and the various laws that enforce data protection. Students will learn about the fundamental principles of data ethics, a branch of ethics that evaluates moral issues related to data. This involves thinking about transparency, accountability, fairness, privacy, the law, moral dilemmas, and the risks involved in creating data-driven technology from the outset. Students will be trained to consider the ethical implications of their own data-based work.. Focus will be given to the ethics of using data science, data protection and privacy, and algorithmic governance. Students will be able to provide advice on ethical decision making based on modern corporate values. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Data definitions and concepts Contextualisation of Data Data Protection and Privacy in utilisation, storage, sharing, purging and archiving Data laws/legislation and their implications Data collection and consent Data anonymization and usage Data Security and Distribution Algorithmic fairness and types of bias Ethical Machine Learning Research in Ethics. Accountability and governance?</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:-<br><br>1. Understand the requirement for data protection<br>2. Understand the various concepts of ethics and privacy<br>3. Understand the ethical implications of using data<br>4. Understand the laws surrounding data protection<br>5. Demonstrate an awareness of sources of, and effects of, bias or discrimination in terms of data utilisation<br>6. Implement data anonymization practices<br>7. Conduct ethics/privacy assessments for data-driven projects<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Cloud Virtualisation Security": {
      "module_id": "Cloud Virtualisation Security",
      "title": "Cloud Virtualisation Security",
      "summary": "This module provides a systematic study of the techniques and practices of protecting systems level security in cloud computing, i.e., virtualisation, which, in the event of being compromised, would cause catastrophic consequences for cloud infrastructures and service customers. The module will focus on the security issues arising from the use of virtualised infrastructures and will investigate the vulnerabilities and security techniques of hypervisors or virtual machine monitors (VMM) together with containers. The module will emphasise current industry strength techniques of achieving cloud virtualisation security. The module will equip students with hands-on skills and experience through targeted lab work.",
      "content": "<p>- Security threats and risks of virtualised infrastructures, including hypervisors and containers<br>- Mitigation and protection techniques for cloud virtualisation<br>ovulnerability assessment methods<br>oadvanced persistent threats (APT)<br><br>- Security in container, Linux and Windows<br>- Compulsory and discretionary access control for cloud virtualisation<br>- Virtual Machine Introspection (VMI)<br>- IDS/IPS for cloud virtualisation<br>- Malware analysis for cloud virtualisation<br>- Security monitoring of cloud virtualisation environments<br>osecurity information and event management (SIEM) for cloud virtualisation<br>oin-box vs. out of box, interception of hypercalls<br>osecurity analytics and machine learning techniques<br><br>Examples of tasks undertaken by students in practical sessions are:<br><br>Installation, configuration and test of the following toolkits:<br>oOpen-source cloud platforms, e.g., VirtualBox and Kernel-based Virtual Machine (KVM), and licensed enterprise could platforms, e.g., Microsoft Azure<br>oOpen-source toolkits for capturing traffic and logs, and IDS, e.g., Wireshark, netsniff-ng, snort.<br>oOpen-source toolkits for security analytics, e.g., Apache Hadoop, Apache Storm and Cassandra, R.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module the student should be able to:<br><br>Demonstrate a critical and systematic understanding of vulnerabilities and their assessment methods at the virtualisation level of cloud computing.<br>Critically evaluate the design and the implementation of state-of-the-art security monitoring and analytics techniques for cloud computing.<br>Demonstrate practical skills in the analysis and management of cyber security for cloud computing.<br>Apply techniques for systems isolation and disaster recovery management in cloud computing environments.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Fundamentals of Network and Cloud Computing": {
      "module_id": "Fundamentals of Network and Cloud Computing",
      "title": "Fundamentals of Network and Cloud Computing",
      "summary": "This module introduces students to the fundamental aspects of networks of computer systems, including systems that provide services in the cloud. The content covers the architecture, structure, functions, components and models used by the internet and other computer networks. The OSI and TCP/IP layered models are covered, including the protocols involved and the devices and services present in each layer. The module also covers the architecture of the cloud service models available on the internet when compared to those available on a local system or network, together with the fundamental capabilities of the major platforms that support provisioning of these services.<br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 72%. The percentage of Work Based Assessment for this module is 0%.",
      "content": "<p>Principles of communications and how networks and cloud computing have changed our lives<br><br>Network computing:<br>Introduction to the concepts of networks, data, local area networks (LANs), wide area networks (WANs), internetworks.<br>-The OSI and TCP/IP layered models of networks and the process of data encapsulation<br>-Network layers and their associated protocols and standards, protocol data units, hardware and software, including (OSI layers listed, but also refer to TCP/IP equivalents):<br>oApplication layer: protocols such as HTTP(S), DNS, FTP<br>oTransport layer: TCP, UDP<br>oNetwork layer: IP, network addressing, packets, path determination, NAT<br>oData link layer: LLC, MAC, frames, Ethernet<br>oPhysical layer: LAN media and standards<br><br>Cloud computing:<br>-Virtualisation<br>-Cloud architecture and cloud service models: IaaS, PaaS, SaaS<br>-Cloud services, such as computation, storage, security, applications and data <br>-Services provided by cloud platforms such as Amazon Web Services, Microsoft Azure, Google Cloud, IBM Cloud </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1 - Demonstrate an understanding of computer networks, network communication and the importance of standards and protocols in computer networks. <br>2 - Explain how the internet and the cloud are used to support business activities.<br>3 - Make use of appropriate cloud services in the solution to a problem.<br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "10.0"
    },
    "Information Security": {
      "module_id": "Information Security",
      "title": "Information Security",
      "summary": "As more and more personal and professional information is moving online, the attacks that target that information are growing in both number and sophistication. Keeping information secure online is increasingly important. Understanding the basic principles of information security will give students the knowledge required to tackle emerging threats.",
      "content": "<p>Pre-Requisite Knowledge: Programming 2, Database Systems Development, Fundamentals Software Engineering or equivalent.<br>Defining Information Security Identification and Authentication Authorization and Access Controls Auditing and Accountability Cryptography Data protection, Compliance, Laws, and Regulations Operations Security Human Element Security Physical Security Network Security Operating System Security Mobile, Embedded, and Internet of Things Security Application Security Assessing Security.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1. Explain and discuss information security principals<br>2. Explain and critically evaluate the technologies that underpin information security. <br>3. Critically analyse information security systems<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Internet of Things": {
      "module_id": "Internet of Things",
      "title": "Internet of Things",
      "summary": "This module provides fundamental and practical coverage of the set of converging technologies known as the Internet of Things (IoT). It focuses on representative IoT applications, technologies, frameworks and associated standards that support and underpin IoT applications, such as sensor networks, messaging protocols, security, data storage, analytics, services and human interaction. The module provides in-depth practical coverage of representative IoT implementation frameworks including cloud-based service delivery models.",
      "content": "<p>IoT application domains and related business-awareness. Societal impact. Historical perspective related to machine-to-machine (M2M) systems. Technology evolution and convergence of consumer, business and industrial Internet. IoT architectural models. Enabling technologies. Overview of Wireless Sensor Networks. Reliable and secure messaging for IoT. Service-oriented architectures and cloud-based computing for IoT. Data collection, management and analysis. Complex event processing. High velocity data processing. Privacy, security and governance. The role of standardisation. Critically appraisal of current IoT platforms such as IBM Bluemix and Microsoft Azure IoT. Implementation of end-to-end solutions using industry-standard technology frameworks, including cloud-based computing with web-services. Challenges for IoT industry applications. IoT case studies in representative areas such as smart cities, transportation, health and smart buildings. IoT strategic research directions. Knowledge of international affairs.<br><br>Examples of tasks undertaken by students in practical sessions are:<br>Configuring and applying a wireless-sensor-network.<br>Using messaging protocols to connect to cloud-based IoT services.<br>Implementing cloud-based analytics for IoT.<br>Generating actions based on data-analytics.<br>Implementing an end-to-end solution for IoT.<br>Building human-interfaces for IoT systems.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>Demonstrate in-depth knowledge of the requirements and implementation strategies for a representative range of IoT applications.<br>Demonstrate a detailed understanding of how IoT applications can add value to business, industry and society.<br>Critically appraise IoT technology, standards and services including cloud system technology, architecture and deployment models.<br>Demonstrate the ability to analyse and solve representative problems in the IoT domain.<br>Develop IoT applications that generate/process data-streams, provide cloud-based storage, provide/consume analytical services and feature appropriate human interfaces.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Introduction to Data Science": {
      "module_id": "Introduction to Data Science",
      "title": "Introduction to Data Science",
      "summary": "This module will introduce the development of software programming skills used for data science using an appropriate programming language. The module will give the student the opportunity to explore software development methods for the key aspects of data science such as data capture, wrangling, analysis, <br>processing and data visualisation. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Data Science basics - Matrix and Vector Representations<br>Python Data Science Software Ecosystem: Numpy - SciPy - SciKitLearn - Matplotlib - Pandas <br>Exploratory Data Analysis Basic Statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance. Hypothesis testing, Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value<br>Data Manipulation: Software implementation using Pandas<br>Data Visualization: Software implementation using Matplotlib<br>Data Science Applications - Statistical Models - Analysis Techniques - Line Fitting - Prediction - Applying Algorithms - Forecasting<br>Introduction to Machine Learning - Classification and Regression </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1. Demonstrate familiarity with the problems and issues surrounding real world data sources<br>2. Apply filtering, cleaning and transformation techniques to data<br>3. Understand how probability theory and statistical methods are applied to data<br>4. Detail how the output of statistical models are interpreted to form an insight into data<br>5. Understand the basics of Machine Learning including Classification and Regression<br>6. Implement Data Science methods in an appropriate software programming language<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Group Project": {
      "module_id": "Group Project",
      "title": "Group Project",
      "summary": "The module offers students the opportunity of working through technologies and organisational issues to design and prototype a professionally viable solution to a real-world problem relevant to the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current and previous levels of study in producing an appropriate solution. The emphasis of this module is on innovation relevant to the student's chosen study pathway. The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into their intended career pathway within a professional working environment, and develop their competence to operate successfully. <br>It is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. Project groups are normally formed to be multidisciplinary and to be able to blend different professional working practices. Project groups are expected to be able to conceptualise and deliver innovative solutions to the problem challenge and apply appropriate professional practices. Students are expected to demonstrate significant exploration in planning, selection of technologies and (within set guidelines) defining the deliverables that demonstrate their concept and evaluate its viability. Project groups are expected to exercise self-governance, developing their own code of conduct that members will follow, and to document the working practices they have followed in support of evidencing the group's professionalism. <br>As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also undertake peer assessment with regards to the group work. The primary assessable outcome of the project will be an artefact appropriate to the problem set, delivered through professionally coordinated practical work, together with supporting documentation and demonstration. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.",
      "content": "<p>Innovation<br>Innovation and creativity theory and practice <br>Ethical and societal issues in the age of information <br>Project management <br>Project lifecycle <br>Project planning <br>Agile Technologies<br>Risk management <br>Teamwork <br>Effective team working <br>Team working in projects and organisations <br>Communication and collaboration </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module, student should be able to:<br><br>1. Use a selection of advanced skills and practices, some of which may be at the forefront of the Programme of Study. <br>2. Manage a targeted project of information technologies and define and implement the goals and milestones, critical evaluations of project outcomes and deliverables. <br>3. Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a real-world problem relevant to the Programme of Study. <br>4. Demonstrate a critical understanding of the innovation processes involved in creating and providing products/services and the innovative impacts functioned by information technologies in sustaining economic growth and societal prosperity. <br>5. Evidence career societal readiness and professionalism. <br>6. Demonstrate the ability of teamwork and professionalism required in workplace and society.</p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Fundamentals of Software Engineering": {
      "module_id": "Fundamentals of Software Engineering",
      "title": "Fundamentals of Software Engineering",
      "summary": "This module will provide students with an introduction to the fundamental concepts, processes and practices in software engineering. This includes business analysis, requirements engineering, the software lifecycle and the software development process, developing secure systems, testing software systems, software documentation, as well as the challenges of dealing with legacy systems. It will also provide the student with an introduction to key professional practices in relation to the initial analysis and modelling of the development of commercial computer-based software systems.",
      "content": "<p>Systems and Software Engineering Processes and Activities:<br>The systems development process:<br>Basic stages in the systems development lifecycle: project initiation and definition, user and system requirements definition, analysis and design, implementation and testing, deployment (including user documentation and training) and<br>maintenance, developing secure systems<br>Conceptual foundations of OO systems modelling: use case model, design model, deployment model, implementation model, test model<br>The role of ethics and professional issues in software engineering processes<br>The role of DevOps in the Software Lifecycle<br>Software testing concepts: testing stages, acceptance and system testing principles: functional testing, usability testing, reliability testing, security testing, performance testing<br>Software maintenance and evolution: the nature of software maintenance, maintenance activities and managing the maintenance process, the software re-engineering process and common approaches such as business analysis and as-is process model creation legacy system maintenance<br>Software Life Cycles:<br>Principles that characterise successful software development practice<br>Traditional (waterfall) lifecycle model verses Agile approaches<br>Agile life cycles: principles and concepts agile process models, e.g. DSDM, SCRUM,FDD<br>Agile methods and practices, e.g. extreme programming/XP<br>Requirements Engineering:<br>The role of the requirements engineer<br>The requirements engineering process<br>System stakeholders<br>Requirements elicitation<br>Requirements classification: functional non-functional requirements classification frameworks, e.g. FURPS+<br>Requirements modelling: the use of use case analysis to capture and document requirements<br>Use case descriptions, specifying test criteria in use cases <br>Initial domain modelling</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:<br><br>1.Understand the nature of the key systems and software engineering processes and activities necessary for the development and deployment of successful commercial computer systems including the need for security<br>2.Compare the characteristics of the range of modern software lifecycle models and approaches in relation to the suitability of each for different types of computer system development<br>3.Understand the basic processes involved in software maintenance and evolution (including for legacy systems)<br>4.Apply basic requirements engineering techniques to the development and documenting of the specification and high-level modelling of functional and non-functional computer system requirements<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "IT Project Management 1": {
      "module_id": "IT Project Management 1",
      "title": "IT Project Management 1",
      "summary": "This module provides a solid foundation in Project Management within the context of IT Systems development and deployment. It provides coverage of basic project management concepts and principles (including project planning, scheduling, control and configuration management and techniques for cost estimation, quality and risk). The module will also include coverage of the human aspects of information security and client data protection as well as key related software project management standards, such as PRINCE2, the software development process (ISO 12207), and software project quality (SEI CMMI model).",
      "content": "<p>PROJECT MANAGEMENT AND IT CONTEXT <br>Project characteristics <br>Triple constraint <br>Project stakeholders <br>Project success definition <br>Project manager skills/role <br>Systems view - systems approach - systems philosophy, systems analysis and systems management. <br>3 sphere model for systems management (business, organisation, technology) <br>Stakeholder management and top management role in project success. <br>Systems life cycle v project life cycle and software development process (ISO 12207). <br>Diverse nature of IT projects, including the implications of using open source software <br>Stage gates, delivering a project in incremental iterations <br>Organisational structure - Functional, Project, Matrix - and implications for project management. <br>Standards in software project management, PRINCE2: 5 project management process groups-project initiation, project planning, project execution, project monitoring and controlling, project closing<br><br>PROJECT PLANNING AND PROJECT SELECTION <br>Financial analysis of competing projects - Average gross annual rate of return, NPV, ROI, Payback, IRR <br>Project Scope Management: WBS, work package specifications, Gantt charts.<br>Project Time Management: Network activity diagrams, critical path(s), float table, milestones. Using the critical path to shorten a schedule - crashing, fast tracking, project buffers, PERT <br>Project Cost Management: Monitoring and Controlling the cost of a project - Earned value analysis. <br>Considerations for terminating a project, i.e. 'pulling the plug' on a project.<br><br>QUALITY MANAGEMENT <br>- Quality Management Frameworks <br>- Quality Planning <br>- Importance of quality management, quality planning, quality assurance, quality control, including techniques, e.g. SEI CMMI model. <br><br>RISK MANAGEMENT <br>- Risk Identification and Analysis <br>- Risk Management Strategies <br><br>Importance of risk management, positive and negative risks, response strategies for negative risk (risk avoidance, risk mitigation, risk transference, risk acceptance), risk register, probability/impact risk analysis, risk response strategies for positive risks (risk exploitation, risk sharing, risk enhancement, risk acceptance). <br>Information security including client data protection.<br>The risk of using externally developed software, including open source software and free software<br><br>CHANGE CONTROL <br>Controls <br>Configuration Management <br>Change control system, baseline, configuration item, version control, configuration diagram, advantages and disadvantages of using configuration management, CCB, authorised changes.<br><br>PROFESSIONAL ISSUES in IT PROJECTS <br>- Professional Competence, Codes of Conduct, Codes of Practice <br>- Relevant Statute law, e.g. Computer Misuse Act, Data Protection Act, Regulation of Investigatory Powers (RIP) Act, Software Licenses<br>- Social and Ethical Issues</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1 - Compare and apply techniques and tools for estimating, scheduling and monitoring a software project<br>2 - Appraise the role of Quality Management within the management of IT projects<br>3 - Examine the role of verification in ensuring that IT Project requirements specifications comply with organisational business requirements<br>4 - Analyse Change Management and Risk Management principles and techniques<br>5 - Examine the professional framework within which IT Projects operate</p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Honours Project": {
      "module_id": "Honours Project",
      "title": "Honours Project",
      "summary": "This is a substantial individual piece of work with a significant research dimension based on an appropriate topic from within the student's programme of study and which reflects the student's own interests. This work will be concerned with a specific problem from the student's programme of study and will include as appropriate, a systematic investigation, a survey of literature relevant to the problem, an analysis of appropriate approaches, a detailed planning activity and an implementation of the selected approach. The project will also involve a reflective evaluation of the project outcomes and approach taken and a verbal presentation of the work. At this programme level the student is expected to be significantly autonomous and demonstrate a high degree of initiative in the conduct of the project.",
      "content": "<p>The procedures for allocating and undertaking this module and details of its individual assessment components will be given in the guidance material issued to students in preparation for undertaking this module</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1). Demonstrate the ability to plan and carry out an in-depth research or practice-based capstone project as appropriate to the area of study and to work independently (Students on software engineering suite programmes are required to undertake a practice-based capstone project).<br>2). Demonstrate a clear understanding, as appropriate to the problem, of techniques, technologies and tools for the chosen area of work.<br>3). Demonstrate literature review, analysis, synthesis and critical evaluation skills appropriate to an Honours level award.<br>4). Evaluate the success of the project work and the corresponding project process.<br>5). Analyse the professional and ethical issues which apply within the context of the project.<br>6). Demonstrate the ability to communicate all aspects of the project in a written, visual and oral form.</p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "40.0"
    },
    "Integrated Project 1": {
      "module_id": "Integrated Project 1",
      "title": "Integrated Project 1",
      "summary": "The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current level of study in producing an appropriate solution. <br>The emphasis of this module is on: understanding the contribution which digital technologies and skills relevant to the student's area of study are making to current global business and society, and how these are changing and developing understanding the development lifecycle practiced by professionals in their area of study (e.g. the software application development lifecycle and its constituent parts the game development process) gaining an insight into the organisational structures and business functions within which the modern professional associated with their intended career pathway are likely to operate, and their possible roles. Students are also introduced to behaviours and issues associated with the contemporary, local and global workplace, the changing nature of work and working practices, and how individuals function either as part of an organisational workforce, or as self employed professionals.<br>The balance of activities will depend on the specific objectives of the project and problem set. The focus for most activities is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. At this programme level the group are expected to follow a given project plan and its constituent processes and activities under direct supervision from a module tutor and work in a self motivated way within defined schedules. Students are expected to develop confidence in their ability to work with others on analysing and creatively solving problems, and evaluating their work within the context of the original project requirement. This module will ground students in team building and team working skills, and the use of reflective practices to support personal and professional development. <br>The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation.",
      "content": "<p>The Individual at Work<br>Team working<br>Time management<br>Independent working and self-reliance<br>Communication skills<br>Presentation skills<br>Personal reflection and review<br><br>Work and the Workplace<br>The 21st Century Workplace<br>Professional practices and life cycles<br>Enterprise and organisational types and structures<br>Business functions<br>Corporate values and responsibilities<br>Diversity at work and mobility considerations<br><br>Digital Technologies and Society<br>Digital Enterprise, Digital Culture and Digital Society<br>Case Studies<br>Trends and Developments<br><br>Introduction to Careers and Employability<br>Careers profiles and pathways<br>Graduate Attributes and Enhancing Employability<br>Careers information sources and resources<br>Guest external speakers and Guru seminars from industry practitioners and employers </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1. Use relevant defining technical and enabling soft skills to follow a project plan and appropriate lifecycle process within a team based environment to solve a problem relevant to the programme of study.<br>2. Develop an understanding of the structure, function and operation of the modern workplace, the opportunities and roles available to graduates of their programme of study, and technical and transferable skills required for success.<br>3. Demonstrate an awareness of how digital technologies and know how relevant to the student's programme of study interact with business, society, and culture.<br>4. Utilise reflective practices to support personal and professional development and demonstrate the ability to effectively communicate in both written and oral form.<br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Integrated Project 3": {
      "module_id": "Integrated Project 3",
      "title": "Integrated Project 3",
      "summary": "The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current and previous levels of study in producing an appropriate solution. The emphasis of this module is on innovation relevant to the student's chosen study pathway. <br>The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into their intended career pathway within a simulated working environment, and develop their competence to operate successfully.<br>It is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. Project groups are normally expected to be multidisciplinary and to be able to integrate different professional working practices. At this programme level the group are also expected to be able to develop innovative solutions to a problem challenge and apply appropriate professional practices. Students are expected to demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. By prior agreement with module tutors, students on certain pathways may be permitted to work individually on responses to external competition briefs but will still be expected to engage in peer assessment and critiquing activities.<br>Groups are expected to develop their own code of conduct that members will follow and choose their own documentation and management standards, and to document the working practices they have followed in support of evidencing the group's professionalism. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also undertake peer reflection and evaluation.<br>The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work. <br>The cumulative engagement of students on the ITMB and SDfB e-skills accredited pathways with external e-skills events will be assessed as part of the Individual Reflective Report.<br><br>The percentage of Work Based Learning for this module, as represented by the Independent Learning 'Activity Type', is 82%. The percentage of Work Based Assessment for this module is 100%.",
      "content": "<p>Innovation and Entrepreneurship<br>Innovation and creativity theory and practice, including disruptive innovation through digital technologies<br>{generation and evaluation: sources of information, market characterisation, sales volume prediction financial evaluation (e.g. ROI) technical evaluation practicality of a concept from the viewpoint of functionality<br><br>Careers and Employability<br>Students will have access to specialist materials on key aspects of career development and employability. </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1 - Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a realistic problem relevant to the domain of the student's programme of study.<br>2 - Demonstrate a critical understanding of the entrepreneurial and innovation processes involved in creating and providing products and professional services and the important role played by digital technologies in sustaining economic growth across a range of organisations and sectors.<br>3 - Develop a business case and project plan.<br>4 - Evidence career readiness.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Integrated Project 2": {
      "module_id": "Integrated Project 2",
      "title": "Integrated Project 2",
      "summary": "The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current level of study in producing an appropriate solution<br><br>The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study (e.g. the software application development lifecycle and its constituent parts the game development process) to frame and follow a project plan that leads to a solution for a given project specification/design brief relevant to the student's chosen study pathway.<br><br>The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. It is a group-based project and the work completed within this module by an individual student will require the student to work as part of a team within the workplace.. Project specifications/design briefs are expected to be derived from the student's workplace. At this programme level the group are expected to develop and follow a project plan framed around a relevant development process for a well-defined problem area as a group with the assistance of, and under the supervision of, a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.<br><br>Students require working in a self-motivated, coordinated way within collectively defined schedules and further developing confidence in their ability to work with others on analysing and creatively solving problems.<br>As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also participate in peer reflection and evaluation, and reflect upon relevant professional and ethical issues introduced.<br><br>The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work. <br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 100%.",
      "content": "<p>The Individual at Work<br>Team dynamics, personalities and traits<br>Meeting participation skills<br>Listening, questioning skills<br>Negotiation and assertiveness skills<br>Critical thinking and decision making<br>Giving and receiving feedback<br>Coping with pressure<br>Working with different cultures<br>Stakeholder relationship management<br>Landscape of legislative frameworks governing work and enterprise in the digital economy. <br><br>Project Lifecycle Management<br>Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities<br>Mapping lifecycles to plans<br>Project lifecycle management resources and tools relevant to the programme of study (e.g. software engineering tools to support verification, testing, configuration and release management, deployment and maintenance).<br><br>Careers and Employability<br>Recruitment and selection processes<br>Career planning<br>Professional profile, digital Identity and the role of social media<br>Professional bodies and societies<br>Business and workplace ethics and professional issues - differentiating between good and bad employers and employees<br>Internships and Placements<br>Guest external speakers and Guru seminars</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1 - Develop a project plan that applies an appropriate development lifecycle process (e.g. the software application development lifecycle and its constituent parts; the game development process) and supporting developmental resources and tools (e.g. testing, versioning) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study. <br>2 - Develop and demonstrate appropriate competence in, and an understanding of, the roles and transferable skills required in the project's development, and the constraints under which work is undertaken. <br>3 - Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making.<br>4 - Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.<br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "IT Professional Issues and Project Methods": {
      "module_id": "IT Professional Issues and Project Methods",
      "title": "IT Professional Issues and Project Methods",
      "summary": "This module seeks to develop understanding and practical skills in advanced project research methods which are in line with industry regulations, standards and practices and are applicable to complex IT projects. Study is undertaken in an integrated fashion to ensure that the professional framework within which such projects are developed, deployed and managed are fully understood.",
      "content": "<p>IT Professional Issues:<br>-Ethical Considerations in research projects and activities: Research involving human subjects, using minors and vulnerable people in research activities applicability of professional body codes of practice <br>-Ethical frameworks for the computing professional: underlying ethical concepts and ethical theories<br>- Professionalism within computing role of professional bodies codes of ethics/conducts responsibilities of a computing professional and ethical decision making.<br>-Cyber crimes privacy and data protection IT legislation and regulations, industry standards and practices, e.g., PCI DSS, HIPAA, GLBA, SoX, etc.<br>-IT governance, risk, auditing and compliance<br>-Research methods <br>- Critical analysis <br>- Problem formulation<br>- Research evaluation<br>-Project definition<br>-Critical thinking<br>-Technical justification<br>-Project management methodologies e.g. PRINCE2, RUP, PMI, Agile.<br>-Quality management<br>- Configuration management <br>- Risk management<br><br><br>Examples of tasks undertaken by students in practical sessions are:<br>-Presentation and demonstration of technical work.<br>-Group discussion and argumentation for key subject topics.<br>-Critical reviews of seminars.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module a student should be able to:<br><br>Critically evaluate the techniques of advanced research and project methods, applicable to complex IT projects.<br>Critically evaluate major legal, social and professional issues applicable to the development and use of computer technologies and systems within society.<br>Demonstrate an in-depth understanding of the ethical responsibilities of an IT professional.<br>Apply the key elements and techniques of an advanced research methodology appropriately in the development of a complex IT project.<br></p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "20.0"
    },
    "Industrial Placement": {
      "module_id": "Industrial Placement",
      "title": "Industrial Placement",
      "summary": "This module aims to enable the student to experience the Information Systems work environment of an organisation and understand its structure, function and operation. It will also enable students to undertake and demonstrate suitable professional practise within this domain. The student will undertake specific tasks to enhance the work based learning experience.",
      "content": "<p>The students will undertake a series of lectures and tutorials prior to the placement year. The lectures will focus on a variety of issues relevant to the Information Systems Engingineering workplace and profession. They will also be introduced to the concept of work based learning and the workings of learning contracts.<br><br>Typical lecture topics:<br>Health and safety issues affecting a moderning Information technology based workplace.<br>The role and application of Quality Standards in an Information Systems Engineering workplace.<br>Organisational structure and function of the modern organisation.<br>Professional practice within the workplace environment.<br>Recruitment practices and skills: Interviewing techniques, Interpersonal and Communication skills </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module the student should be able to:<br><br>1. Demonstrate familiarity with the application and operation of the Information Systems Engineering discipline within an Information Systems based workplace environment. <br>2. Recognise the contribution good professional practice can make to a workplace situation within an Information Systems based workplace environment. <br>3. Display personal and professional skills consistent with those of an Information Systems Engineering Professional at a level appropriate to their work place environment. <br>4. Understand the need for self-development in a professional situation.<br>5. Demonstrate the ability to work collectively with others within an Information Systems Engineering workplace environment.<br>6. Demonstrate the ability to solve work-based problems and to use appropriate methods in solving such problems.<br>7. Communicate effectively both verbally and in writing at a personal and technical level.<br>8. Demonstrate professional report writing skills.<br>9. Evaluate his/her own strengths and weaknesses.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "60.0"
    },
    "Object Oriented Analysis and Design": {
      "module_id": "Object Oriented Analysis and Design",
      "title": "Object Oriented Analysis and Design",
      "summary": "This module provides a detailed coverage of object-oriented analysis and design of software systems. It provides coverage of the Unified Modelling Language (UML) notation and the practical application of UML in the development of information systems using currently available software modelling tools. It will also provide coverage of the use of Analysis and Design Models",
      "content": "<p>Object Oriented Analysis And Design.<br>An overview of the conceptual foundations of Object Oriented Analysis and Design.<br><br>Class Diagrams<br>Objects, classes, attributes, operations, inheritance, aggregation, association, and generalisation.<br>The development of class diagrams.<br>The role of 'class diagrams' in analysis and design models.<br><br>Component Diagrams<br>Components, component interfaces.<br>Modelling system components using component diagrams.<br><br>Interaction Diagrams<br>Modelling object interaction using interaction diagrams (sequence diagrams, communication diagrams, interaction overview diagrams and timing diagrams).<br><br>Activity Diagrams<br>Activities, actions, edges, decision nodes, merge nodes, partitions, fork nodes, join nodes, objects in activities<br>The development of Activity Diagrams during business analysis to model workflow and business processes<br><br>Dynamic Modelling<br>States, transitions, actions and events<br><br>Traceability <br>from Requirements through to Implementation</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Understand and apply object oriented techniques to the analysis and design of software systems<br>2. Develop object oriented specifications using the Unified Modelling Language (UML)<br>3. Develop UML models using currently available software modelling tools<br>4. Understand the integration between the design models and implementation <br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Machine Learning": {
      "module_id": "Machine Learning",
      "title": "Machine Learning",
      "summary": "This module will provide the fundamental techniques used in Machine Learning and how they can be applied to Data Analysis. It will introduce the basic building blocks of modern Machine learning including Perceptrons and Fully Connected/Convolutional Neural Networks. The Student will be given an introduction into Deep Learning methods to perform such tasks as image classification, image segmentation and natural language processing. After this module <br>students will have sufficient knowledge to be able to format data to be suitable for Machine Learning and be able to successfully train their own AI models with focus on solving relevant real world data science problems.",
      "content": "<p>PRE-REQUISITE KNOWLEDGE: Introduction to Data Science, Probability and Statistics, <br>Decision Trees - K-Nearest Neighbour - K-means - Support Vector Machines - Training - Evaluation - Testing - Performance Evaluation - Perceptrons - Multi-layer Perceptrons - Fully Connected Neural Networks - Convolutional Neural Networks - Back-Propagation - Stochastic Gradient Descent - Activation Functions - Momentum - Learning Rates - Dropout - Overfitting - Hyperparameter Optimisation - Image Classification - Object Detection - Image Segmentation - Text Analysis - Natural Language Processing </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:<br><br>1. Understand the principles and goals of Machine Learning <br><br>2. Understand the basic techniques used in ML algorithms <br><br>3. Be able to select appropriate ML approaches to a given problem <br><br>4. Be able to evaluate the effectiveness of an ML algorithm <br><br>5. Understand how to train ML algorithms and how to prepare data for training <br><br>6. Implement and test ML algorithms in a suitable programming language <br><br><br><br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "IT Project Management 2": {
      "module_id": "IT Project Management 2",
      "title": "IT Project Management 2",
      "summary": "This module covers advanced Project Management techniques. The processes, principles and themes of the industry standard PRINCE2 Project Management Methodology are covered in detail. The module also provides coverage of frameworks for the management of enterprise-wide IT Service Management Delivery, such as ITIL.<br><br>The percentage of Work Basded Learning for this module, as represented by the Independent Learning 'Activity Type' and on-line lectures, is 73%. The percentage of Work Based Assessment or equivalent activity for this module is 40%.",
      "content": "<p>IT Service Management (ITSM) Framework and IT Infrastructure Library (ITIL):<br><br>Overview of ITSM &amp; ITIL<br>Supporting the users of IT Services<br>Service desk<br>Incident Management <br>Problem Management<br>Control processes<br>Configuration, change and release management<br>Service risks and compliance<br>Service Delivery building blocks<br>Availability management<br>Capacity management<br>Service Level Management and Services Financial Management<br>Protecting Business and IT Services<br>Service Level Management<br>IT Service Continuity Management<br> <br><br>ADVANCED PROJECT MANAGEMENT METHODOLOGY:<br>Use of PRINCE2 project management methodology to implement ITSM framework in key areas of service support and service delivery<br>Approaches for managing projects in an IT environment<br>Overview of key elements of PRINCE2<br>PRINCE2 best practice approach for projects<br>PRINCE2 principles, processes and themes<br>PRINCE2 scalability &amp; tailoring (size, complexity and skills)<br>Management by exception<br>PRINCE2 Business Case<br>Benefits of using PRINCE2 project management methodology<br>Controlled start, progress and closure to the PRINCE2 project<br>PRINCE2 Issue and Change Control<br>PRINCE2 Plans<br>PRINCE2 Quality, Risk, Communications and Configuration Management Strategies </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module the student should be able to:<br><br>1 - Examine the key ITSM processes, roles and responsibilities and the interfaces between them<br>2 - Evaluate the philosophy and structure of PRINCE2 and understand the benefits that can accrue from the implementation of a structured project management method such as PRINCE2 <br>3 - Critically evaluate PRINCE2 as a methodology in ITSM in key areas of service support and service delivery <br>4 - Apply PRINCE2 principles, processes and themes in the construction of a PRINCE2 Project Plan <br>4 - Evaluate the PRINCE2 Quality Management, Configuration Management and Risk Management themes.<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Mobile Platform Development": {
      "module_id": "Mobile Platform Development",
      "title": "Mobile Platform Development",
      "summary": "This module introduces students to the specific requirements of developing an application which runs on a mobile platform such as Android, iOS, Windows Phone, Blackberry. Students will make use of an appropriate programming language and programming tools to develop a working application for a mobile device. Students investigate the HCI issues that are specific to a mobile application and utilise appropriate communication technologies to transfer data between mobile devices when appropriate.",
      "content": "<p>The ubiquitous landscape<br> Tabs, Pads and Boards<br>Utilise design specifications and design notations<br> UML Notation<br> Storyboards<br>Investigate basic design issues in Mobile Computing<br> Screen size/Resolution<br> Screen Navigation<br> Menu utilisation<br>Threading on Mobile devices<br> UI Thread<br> Background Thread<br> Communication between threads <br>Utilise communication technologies<br> Wi-Fi<br> Bluetooth <br>Utilise appropriate design patterns<br> Model/View/Controller<br>Utilise pre built graphical components<br> Labels/Edit Boxes/Spinners/Radio Buttons/Check Boxes<br>Animation Techniques<br> Frame Animation/Tweened Animation<br>Develop components for mobile applications<br> Graphical components<br> Model Components<br>Testing mobile applications<br> Testing techniques<br> Testing environments<br>Debugging Applications<br> Utilise Debug environments<br>Device Storage<br> Reading/Writing to removable memory<br>Structured Data <br> Data Structures and Collections<br> Database Storage<br>Internet of Things<br>Sensors and Sensor Networks<br>Wearable Technology</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Develop mobile applications using a suitable programming language and programming environment<br>2. Discuss and apply appropriate testing procedures to mobile applications<br>3. Compare and contrast alternative connection and communication technologies for mobile platforms.<br>4. Understand and critically evaluate the usability concerns and design heuristics that application development on mobile platforms<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Programming 0": {
      "module_id": "Programming 0",
      "title": "Programming 0",
      "summary": "The purpose of this module is to introduce students to core programming concepts and tools. A core language will facilitate the understanding of coding techniques common to all high-level languages. The aim is to equip students with the knowledge and skills to help them develop (and organise) code effectively. Basic programming structures, use of variables, statements and expressions, will be an early focus. As code becomes more complex,<br>programming principles e.g., modularity, the use of functions and classes are introduced to support skills in code organisation. The importance of using libraries will be featured throughout the course, as will the use of real-word data sets.",
      "content": "<p>Software and the machine, parallel vs serial execution. <br>High-level programming language comparisons (such as Python, Java, C#, C, C++). <br>Development environments (command-line, Desktop and Cloud IDEs, Notebooks). <br><br>Numerical / non-numerical data types. <br>Variables, operators (logical and arithmetic), statements and expressions <br>Conditional structures <br>Iteration <br><br>Processing real-word data: files and data formats (CSV, JSON, XML, HTML) <br>Object-Orientated <br>Programming Program crashes, bugs and debugging <br>Simple 2D graphics</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, the student should be able to:<br><br>1. Demonstrate an understanding of data types and control structures<br>2. Develop code, and exploit the software ecosystem, to solve problems<br>3. Demonstrate an understanding of basic modular approaches to code organisation<br>4. Understand that real-word data can be read, processed and exploited creatively<br>5. Understand the role of software and different forms of execution</p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Probability and Statistics": {
      "module_id": "Probability and Statistics",
      "title": "Probability and Statistics",
      "summary": "This module aims to provide students with a solid foundation in Probability and Statistics which are used<br><br>extensively in Data Science. Students will be introduced to an appropriate statistical software package such as R.<br><br>This module will provide students with the understanding of probability theory and how to apply statistics to real<br><br>world examples. It will cover a range of topics and methods such as probability distributions, Bayes theorem,<br><br>hypothesis testing and statistical inference, linear and multivariate regression analysis. Students will be able to<br><br>apply statistical methodologies and techniques to solve Data Science problems.",
      "content": "<p>Probability<br><br>- Axioms basic laws of probability, Bayes theorem.<br><br>Probability Distributions<br><br>- properties discrete and continuous distributions central limit theorem.<br><br>Exploratory Data Analysis<br><br>- numerical and graphical summaries - measures of location, robust statistics, expectation confidence intervals.<br><br>Hypothesis testing<br><br>- Experimental design, null and alternative hypothesis, type I and II errors p-values anova, t-tests, A/B testing.<br><br>Regression and correlation<br><br>- Correlation, linear regression, multivariate regression<br><br>Software implementation<br><br>- Statistical software packages</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:-<br><br>1. Understand basic probability theory and its application<br><br>2. Understand joint and conditional distributions<br><br>3. Apply exploratory data analysis techniques<br><br>4. Understand hypothesis testing and statistical inference<br><br>5. Utilise linear and multivariate regression on datasets</p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Mathematics and Statistics of Experimentation": {
      "module_id": "Mathematics and Statistics of Experimentation",
      "title": "Mathematics and Statistics of Experimentation",
      "summary": "This first year module is designed to provide a basic introduction to the theory and application of mathematical and statistical methods within the chemical sciences. Practical statistical work will be carried out using an appropriate statistical package.",
      "content": "<p>Mathematics:<br><br>Algebra: Linear equations in one and two unknowns. Quadratic equations. Changing the subject of a formula. Indices. Logarithms. Exponential and logarithmic functions, and their application. <br><br>Statistics:<br><br>Descriptive statistics: Types of variable. The frequency distribution and its diagrammatic representations. Measures of location and dispersion. The shape of distributions. The Normal distribution. Analysing data from simple experiments.<br><br>Probability: Definition and simple examples. Tables of the Standard Normal Distribution.<br><br>Sampling theory: Definitions (random samples, population). Sampling distribution of the sample mean. The standard error of the sample mean.<br><br>Estimation and confidence intervals: Estimating the mean of a Normal population, with a confidence interval. Estimating the difference between the means of two Normal populations, with a confidence interval, for independent and paired samples.<br><br>Hypothesis testing: One- and two-sample tests of means, for independent and paired samples.<br><br>Regression and correlation: Descriptive methods. The method of least squares. Coefficient of determination. Correlation coeficient.<br><br>Introduction to calculus: Basic differentiation, basic integration with application to elementary rates of change problems.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1.graph mathematical functions, manipulate mathematical expressions, and apply mathematical models to practical problems; <br>2.collate experimental data and present them graphically, and calculate appropriate summary statistics;<br>3.use tables of the Standard Normal Distribution to calculate probabilities. <br>4.use statistical methods to analyse and interpret data arising from simple experiments;<br>5.apply simple linear regression analysis;<br>6.use a statistical package to aid the analysis, interpretation and presentation of experimental data.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Programming 1": {
      "module_id": "Programming 1",
      "title": "Programming 1",
      "summary": "This module will provide an introduction to the principles and practice of object-oriented programming. It will also introduce the process of developing programs using an appropriate high level managed object-oriented programming language such as Java or C#. It will enable students to develop and test a software solution given a simple set of program requirements. The student will be introduced to the fundamental concepts of object-oriented programming, the basic practical knowledge and skills required to implement programs and a range of program development and testing techniques and practices.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Object-oriented programming concepts<br>- Classes and Objects<br>- Object interaction<br>- Fields<br>- Constructors<br>- Encapsulation<br>- Methods, parameters and messages<br>- Scope and access modifiers<br>- Static methods and variables<br>- Class hierarchies and inheritance<br>- Interfaces and abstract classes<br>- Polymorphism<br><br>Program Implementation <br>- Data types<br>- Variables, operators and expressions<br>- Selection and Iteration<br>- Constants<br>- Arrays<br>- Casting and type Conversion<br>- Simple exception handling<br>- Formatting I/O<br>- Building graphical user interfaces<br><br>Program Development Techniques<br>- Problem solving and algorithm design<br>- Implementing a conceptual model<br>- Updating existing software<br>- Program testing and debugging<br>- Unit testing<br>- Documenting classes<br>- Finding appropriate library classes from documentation<br>- Using appropriate library classes in own programs<br>- Command line compilation and running<br>- Use of an Integrated Development Environment</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1 - Describe the fundamental principles of object-oriented programming.<br><br>2 - Demonstrate an understanding of simple data types, control structures and the object-oriented features provided by modern object-oriented languages.<br><br>3 - Demonstrate the ability to develop and test a simple object-oriented application making use of standard class libraries.<br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Machine Learning and Data Analytics": {
      "module_id": "Machine Learning and Data Analytics",
      "title": "Machine Learning and Data Analytics",
      "summary": "This module will introduce the challenges and possible solutions around manipulating and analysing various datasets of different shapes and formats. The module is designed to help students learn to build and apply tools that are required to derive business value from data. The tools will range from data preprocessing, analysis to visualization tools.",
      "content": "<p>Overview<br><br>Introduction to Artificial Intelligence (AI) and Machine Learning<br>Introduction to supervised learning<br>Introduction to unsupervised learning <br>Introduction to other types of learning (reinforcement, transfer, etc)<br>Business intelligence<br><br><br><br>Basic Data Analytic and Machine Learning Techniques<br><br>Loading/importing data for analysis from various sources<br>Data preparation and pre-processing<br>Exploratory Data Analysis (EDA)<br>Feature engineering<br>Linear Regression<br>Logistic Regression<br>Decision Trees<br>Association Rules<br>Cluster Analysis<br><br>Advanced Data Analytic and Machine Learning Techniques<br><br>Support Vector Machines<br>Bayesian Network Classifiers<br>Ensemble methods (bootstrapping, bagging, boosting).<br>Parameter optimization<br>Neural Networks<br>Text Analysis<br>Deep Learning<br><br>Model Evaluation, and Comparison and Deployment<br><br>Quantify model performance (e.g. accuracy, precision, lift curves, ROC curves, etc.)<br>APIs for model deployment e.g. REST API, pickle, etc.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of the module the student should be able to:<br><br>1 - Demonstrate an understanding of the scope and methodology of artificial intelligence (AI) by applying it to different types and sizes of data<br>2 - Build or apply existing state of the art tools to prepare data for analysis or visualization<br>3 - Demonstrate an understanding of the role of machine learning and different algorithms and approaches to address different data analysis goals and the application of these algorithms to real-world problems to datasets of varying size.<br>4 - Critically appraise the strategic importance of data and analytics in a business sense<br><br><br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Mathematics for Computer Games": {
      "module_id": "Mathematics for Computer Games",
      "title": "Mathematics for Computer Games",
      "summary": "This module provides an introduction to the mathematics underpinning the computing engines and graphics libraries used in games technology. Students will be able to formulate and solve simple one and two dimensional problems of the type arising in games programming environments.",
      "content": "<p>Solving equations: linear systems quadratics.<br>Sets: definition operations representations of objects.<br>Vectors: definition operations, mechanics dynamics.<br>Basic geometry: angle trigonometry Pythagoras distance symmetry.<br>2D coordinate systems: Polar and Euclidean Galilean transformations.<br>Matrices: definition operations inversion of a 2x2 matrix representing transformations investigation of the isometries of the plane (translation, rotations and reflections) Composing transformations.<br>Wire frame models: point matrix adjacency matrix applying transformations.<br>Differential equations: differentiation and partial differentiation Newton's second law Solving first and second order constant coefficient differential equations.<br>Modelling applications Integration: definition simple examples numerical approximation methods The Euler method and Backwards Euler Methods comparison Time evolution in a games environment.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Formulate and solve linear and quadratic equations.<br>2. Formulate and solve mechanics problems in 2D.<br>3. Construct and manipulate 2D planar wire frame models.<br>4. Construct algorithms incorporating time stepping procedures.<br>5. Perform transformations between 2D coordinate systems.<br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Mathematics for Data Science": {
      "module_id": "Mathematics for Data Science",
      "title": "Mathematics for Data Science",
      "summary": "This module aims to study the following mathematical topics which are fundamental to the application of mathematics in an engineering context. Basic algebraic manipulation, basic concepts of vectors and matrices, functions, complex numbers with applications, calculus with applications, numerical methods and an introduction to Python.",
      "content": "<p>Algebra: Partial fractions, Inequalities, Binomial expansion, Vector algebra-vectors and scalars, Cartesian components, scalar and vector products and their applications.<br>Trigonometry: Angles, radian measure, trigonometric identities, solutions of trigonometric equations, trigonometric functions, engineering waves, angular frequency, amplitude, period and frequency, adding waves of the same frequency, phase angle, phase-shift of a wave, Asin ( x+a ) form and the oscilloscope trace.<br>Complex Numbers: Rectangle form, addition, subtraction, multiplication, division of complex numbers, graphical representation (the Argand diagram), polar form (multiplication and division), De Moivre's theorem, roots, exponential forms, phasors.<br>Matrices &amp; Determinants: Basic operations of matrices, determinants, inverse of a matrix, solving simultaneous linear equations using Cramer's rule and inverse technique.<br>Co-ordinate Geometry: Equations of straight lines and circles, equations of tangents and normal, determination of points of intersection, polar form.<br>Differentiation: Derivatives of standard functions Product, quotient and chain rules equations of tangents and normal to a curve maximum, minimum and points of inflection curve sketching using the second derivative optimisation problems. Partial differentiation of 2 variables functions, Del operator. implicit functions and logarithmic differentiation, Tangent and normal, velocity, acceleration, turning points, maxima and minima.<br>Integrations: Standard integrals involving algebraic, trigonometric, exponential and logarithmic functions integration by substitution, integration using partial fractions, integration by parts, definite integrals, the link with integration as area, integration as the limit of a sum.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module the student should be able to:-<br><br>1. understand, manipulate and apply algebraic functions to data problems<br><br>2. describe and manipulate complex numbers in Cartesian and polar forms, phasors<br><br>3. describe and manipulate matrices, determinant of matrices, inverse of matrices<br><br>4. understand and apply differential calculus change and use it to solve selected optimisation problems<br><br>5. describe and use integral calculus analytically and numerically and apply it to physical expressions</p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Mathematics for Computing": {
      "module_id": "Mathematics for Computing",
      "title": "Mathematics for Computing",
      "summary": "This module introduces elements of discrete mathematics underpinning the study of both hardware and software systems. The techniques developed in this module will be practically based with an emphasis on problem solving. The material will be accessible to students with a limited mathematical background.",
      "content": "<p>Solving equations: <br>- systems of linear equation <br>- quadratics<br>- applying logarithms<br>- the standard functions<br>- the graphical method for finding roots<br>- interpreting equations as mathematical models.<br><br>Matrices and Vectors:<br>-Definitions, addition, multiplication, matrix inversion<br>-Modelling: error detection, Hill ciphers, network connectivity.<br>Logic:<br>-Sets: union, intersection, complement, Cartesian products, Venn diagrams<br>-Relations: order relations, introduction to equivalence relations, composition, inversion functions.<br>- logic operators: and, or, not, implication and equivalence <br>- truth tables<br>- examples of proof<br>- introduction to Formal System Specification<br><br>Graphs:<br>-Definition, Diagrams, Adjacency and Incidence Matrix, vertex degree, degree sequence, Handshaking Lemma<br>-Types: Bipartite, Cubic, Complete, Petersen etc.<br>-Paths, Cycles (including Euler and Hamilton cycles), Connectedness<br>-Applications: Petri Nets Gray's codes, Compatibility graphs<br><br>Trees and Digraphs:<br>- Trees: Definition, Binary, Breadth first search, Depth first search, Stacks<br>- Directed graphs: Definition, Representations, acyclic and weighted (networks)<br>- In-degree, Out-degree, Handshaking Lemma, Cycles<br>- weighted digraphs (Networks)<br>- Applications: tournaments, max-flow min-cut.<br><br>Finite State Automata:<br>- definition<br>- modelling states and transitions using a digraph<br>- pattern recognition.<br><br>Number<br>Modular Arithmetic: the concept and basic operations, applications to cryptography.<br>Number systems: binary, decimal, hexadecimal and changing between bases<br>Bitwise logical operations on binary numbers</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>Use graphs and digraphs to model and solve problems;<br>Apply simple finite state machines and simple algorithms, including recursion;<br>Solve simple equations and carry out basic algebraic operations on matrices and vectors, simple mathematical transformations as used in elementary Cryptography;<br>Calculate in a range of number systems associated with computer applications;<br>Represent statements using logical operators and use them in deductive arguments and work with finite relations. <br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    },
    "Web Application Development 1": {
      "module_id": "Web Application Development 1",
      "title": "Web Application Development 1",
      "summary": "This module will provide students with the knowledge, understanding and skills required to develop Web Platform applications. A range of standards associated with Web development will be covered as well as the client server architecture specific to Web development.",
      "content": "<p>Fundamental principles and concepts of the World Wide Web (Client Server architecture, browsers, HTTP protocol).<br>Web Standard Technologies (such as, HTML5, CSS3)<br>Website Content <br>Website Styling <br>Website Usability and Responsive Design<br>Document Object Model (DOM)<br>Client-side programming (JavaScript and JavaScript Libraries)<br>Overview of Web Templates<br>Web Application Security, Testing and Debugging<br>Understanding of Data Formats (e.g. text, CSV, XML and JSON)<br>Use of 3rd Party APIs (e.g Facebook, Google, Twitter)</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, student should be able to:<br><br>1. Demonstrate a broad understanding of standard web technologies and protocols<br>2. Demonstrate an understanding of web application security, vulnerabilities and mitigations<br>3. Apply current and emerging web standards to the creation of a website<br>4. Apply client-side scripting in the development of interactive web pages<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Programming 3": {
      "module_id": "Programming 3",
      "title": "Programming 3",
      "summary": "This module develops an understanding of common ways of structuring data to suit the needs of an application.<br><br>Standard algorithms are investigated and a range of functional programming ideas are utilised. An introduction to simple cipher algorithms is included.<br><br>The module aims to develop students as programmers who can select appropriate data structures, algorithms and techniques to best meet the requirements of a specific programming problem.<br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Data Structures: lists stacks queues sets maps trees graphs design patterns <br>Algorithms: searching sorting hashing traversal shortest path recursive compression Big O ciphers: e.g. substitution and transposition types <br>Design patterns: singleton builder factory adapter iterator locator comparator decorator template method Comparison of programming paradigms: Object-oriented Functional Procedural Declarative Logic Classifying languages <br>Functional programming: Lambda expressions first-class functions higher-order functions closures folding pattern matching Algebraic Data Types</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Demonstrate an understanding of fundamental data structures<br>2. Demonstrate an understanding of algorithms commonly used when developing software systems<br>3. Develop and test an application which uses appropriate algorithms and data structures and applies suitable design patterns to implement specified requirements<br>4. Develop and test an application which uses a range of functional programming techniques to implement specified requirements</p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Software Development for Data Science": {
      "module_id": "Software Development for Data Science",
      "title": "Software Development for Data Science",
      "summary": "This module will focus on the development of software programming skills used for data science using an appropriate programming language such as Python or R. Implementation methods for the foundation topics in data science such as data capture, wrangling, analysis, processing, visualisation and reproducible reports will be covered. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.",
      "content": "<p>Data Science Ecosystem<br>Introduction to the software development libraries available for data science<br>vectors, matrices and data representations.<br>Fundamentals of Data Science Software Development<br>Sequence, selection and iteration in a suitable programming language for data science.<br>Data Preparation<br>Data collection, pre-processing, cleaning, wrangling, transformation and integration.<br>Exploratory Data Analysis<br>Basic statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance.<br>Hypothesis testing<br>Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value, Bayes factor, test for the mean, comparing two means (dependent and independent samples).<br>Linear Regression<br>Simple linear regression, multiple regression, forecasting, classification and clustering.<br>Data Visualisation<br>Visualisation of large and small data sets using open source software libraries.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of the module, students should be able to:<br><br>1. Demonstrate a detailed understanding of the available tools within the data science software ecosystem.<br>2. Demonstrate a detailed understanding of software development processes for data science.<br>3. Analyse and evaluate data analysis modelling methods.<br>4. Develop software applications to conduct data analysis and visualisation.<br>5. Critically interpret and evaluate the outputs generated by analysis techniques.</p> <div style=\"clear:both;\"></div>",
      "level": "M",
      "credits": "15.0"
    },
    "Research Skills and Professional Issues (COM)": {
      "module_id": "Research Skills and Professional Issues (COM)",
      "title": "Research Skills and Professional Issues (COM)",
      "summary": "This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.",
      "content": "<p>The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module the student should be able to:<br><br>1. Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools.<br>2. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study.<br>3. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies.<br>4. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives.<br>5. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study.<br>6. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Research Skills and Professional Issues (CSN)": {
      "module_id": "Research Skills and Professional Issues (CSN)",
      "title": "Research Skills and Professional Issues (CSN)",
      "summary": "This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.",
      "content": "<p>The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1. Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools.<br>2. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study.<br>3. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies.<br>4. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives.<br>5. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study.<br>6. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Programming 2": {
      "module_id": "Programming 2",
      "title": "Programming 2",
      "summary": "This module builds on the object-oriented concepts and programming language features covered in the 'Programming 1' module and provides a solid grounding in the principles and practice of object-oriented programming, and the use of the Unified Modelling Language (UML) for code visualisation. Students will learn to use a range of capabilities provided by a modern object-oriented programming language, along with techniques and practices for the development of robust and secure code. On completion of this module students will be able to develop and test complex object-oriented applications. The percentage of Work Based Learning for this module represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.",
      "content": "<p>Fundamental Principles:<br>-Encapsulation and modularity<br>-Coupling and cohesion<br><br>Class Relationships:<br>-Association, dependency, composition, aggregation, inheritance<br>-Visualisation using UML<br>-Implementation in program code<br><br>Using Object-oriented Programming Language Features:<br>-Packages/namespaces and access modifiers<br>-Interfaces<br>-Enumerations<br>-Collections<br><br>Writing robust and secure programs:<br>-Testing: unit testing, system testing, refactoring <br>-Assertions<br>-Exception handling<br>-Logging<br>-Using security APIs for tasks such as: cryptography, digital signing, authentication, access control, identity management<br> <br>Persistence:<br>-File I/O<br>-Connecting to databases<br>-Software patterns such as Repository, Data Access Object (DAO)<br>- Object-Relational Mapping</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1 - Demonstrate an understanding of the fundamental principles of object-oriented programming and class relationships.<br>2 - Apply a range of object-oriented principles and programming language features to the development of applications. <br>3 - Apply techniques and practices for writing robust and secure code to the development of applications. <br>4 - Develop and test a complex object-oriented application that uses appropriate software patterns and persistent storage.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Software Processes and Practice": {
      "module_id": "Software Processes and Practice",
      "title": "Software Processes and Practice",
      "summary": "The relevant knowledge and understanding addressed by this module being a detailed coverage of the processes and practices used in the development and evolution of software systems. Coverage includes modern approaches to the software process such as Agile development. The importance of configuration management, source code control and the automation tools used to provide continuous integration is also covered along with the key role played by software testing in the creation of quality software systems. The module also covers software quality and process improvement issues.",
      "content": "<p>The Practice of Software Development and Software Processes<br>- The need for process and the history of software development processes<br>- Principles that characterise successful software development practice<br>- Factors that affect the choice of appropriate Quality Assurance methods that suit the organisation and the relevant projects<br>- Hardware and software evolution cycles in the context of software often being an integral part of Engineering applications<br><br>Configuration Management and Source Code Control<br>- The role of configuration management<br>- Defect Tracking, Management and supporting tools<br><br>Software Testing<br>- Testing techniques and practices <br>- Automated testing and test frameworks <br>- Integration of testing with automated build and defect tracking systems <br>- Software security testing tools and techniques Process Improvement Approaches and Quality Schemes <br>- Software Process Improvement concepts and frameworks - Software Quality, Quality Assurance, Assessing System Quality and the relationship to testing</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module the student should be able to:<br><br>1. Evaluate the processes and practices that are applied in the development and evolution of software systems<br>2. Examine the role of configuration management, continuous integration and the use of automation tools<br>3. Assess the importance of software testing in the development of quality systems<br>4. Analyse the concepts underlying software quality schemes and process improvement<br></p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Secure Software Development": {
      "module_id": "Secure Software Development",
      "title": "Secure Software Development",
      "summary": "Poor software design is at the core of many software vulnerabilities. This module equips students with deep knowledge and understanding of the risk to information security and the principles and skills of building secure software systems. Security is considered throughout the software development life cycle. Students examine the technologies that underpin software security and develop advanced skills in testing software for vulnerabilities and applying secure programming techniques.",
      "content": "<p>Security objectives including authentication, authorization, access control, data integrity and non-repudiation.<br><br>Fundamentals of cryptography: symmetrical and asymmetrical encryption, e.g. Diffie-Hellman, Station-to-Station, Needham-Schroeder, Kerberos key exchange protocols, public key infrastructure (PKI) systems, digital signatures, Transport Layer Security, secure hash algorithms.<br><br>Secure Software Development Lifecycle: secure software requirements, secure software design, secure programming principles, security testing and secure deployment.<br><br>Secure Software Design Principles: securing the weakest link, defence in depth, diversity in defence, failing securely, least privilege, economy of mechanism, complete mediation, open design, separation of privilege, least common mechanism, psychological acceptability, fail-safe defaults.<br><br>Secure Programming Practices: input validation, output encoding, authentication and password management, session management, access control, cryptographic practices, error handling and logging, data protection, communication security, system configuration, database security, file management, memory management.<br><br>The use of off-the-shelf tools to analyse and secure software. <br><br>Trends in software security.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1. Explain and discuss security objectives.<br><br>2. Explain and critically evaluate the technologies that underpin software security.<br><br>3. Critically analyse the software development life cycle and explain and discuss how security assurance can be incorporated into the software development life cycle. <br><br>4. Critically analyse security design principles.<br><br>5. Critically analyse the security of software systems and apply secure programming practices.<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Research Skills and Professional Issues": {
      "module_id": "Research Skills and Professional Issues",
      "title": "Research Skills and Professional Issues",
      "summary": "This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.",
      "content": "<p>The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module the student should be able to:<br><br>Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools.<br>Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study.<br>Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies.<br>Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives.<br>Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study.<br>Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Systems Programming": {
      "module_id": "Systems Programming",
      "title": "Systems Programming",
      "summary": "This module investigates the knowledge and skills necessary to program multi-module application and systems programs using operating system and API libraries. The syllabus covers Linux shell script programming, programming operating system features using standard libraries and basic network programming. The material is supported by systems programming exercises including the coding of operating systems utilities and the use of sockets programming to code a client-server application.",
      "content": "<p>Operating System Commands and Shell Script Programming<br><br>Overview of mainstream operating system commands available from a command shell on Linux. Commands to access system documentation, administer file systems, administer processes, administer users and groups and search for data in files and a file-system.<br>Programming with a mainstream operating system command shell to write system management utilities e.g. Bash. Constructs including wildcards, redirection, piping, signals, variables, command line variables, control structures<br><br>Low-Level Programming in C<br><br>Pointers and memory management <br>Unmanaged data-structures <br>Use of GNU C standard library <br>GNU C compiler options including linking API libraries <br><br>Operating Systems Programming<br><br>files and directory management<br>inter-process communication<br>process and thread management<br><br>Network Programming<br>TCP synchronous sockets for a client-server architecture<br>Approaches to the message boundary problem</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:-<br><br>Use and program with an industry standard shell script language to automate system administration tasks and tasks related to software development. <br>Develop programs using an appropriate un-managed low-level compiled programming language. <br>Program features associated with modern operating systems i.e. files and directories, inter-process communication, processes and threads and network programming.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Programming Paradigms": {
      "module_id": "Programming Paradigms",
      "title": "Programming Paradigms",
      "summary": "Programming paradigms provide a way to classify programming languages based on their features. This module is concerned with the nature of programming languages and the appropriate uses of a range of languages, including their use in concurrent applications. It will equip students with a broad understanding of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module will focus in greater depth on the principles and techniques of functional programming, and on low-level programming using the capabilities available in an appropriate compiled language. The module also introduces a range of concurrent programming techniques and the support provided for these at operating system level and in high level languages. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.",
      "content": "<p>Comparison of programming languages<br>Type systems<br>Parameter passing<br>Paradigms: Imperative, Object-oriented, Procedural, Declarative, Functional, Logic, Concurrent <br>Code translation: Compilation, Interpreters<br>Execution: Native code, Virtual machine<br>Memory management: Manual, Automatic<br>Constructs and core data structures<br><br>Functional programming<br>Functional principles: Immutability, Pure functions<br>Recursion and tail-recursive calls<br>Functions: First-class functions, Lambda, expressions, Higher-order functions, Composition, Partial application, Closures, Currying, Folding, Streams and lazy evaluation<br>Types Algebraic Data Types including option types and lists, Pattern-matching, Functors, Monads<br><br>Low level programming <br>Pointers and memory management<br>Unmanaged data structures<br>Using Operating System Libraries and functions: programming with standard libraries, calling from high-level code<br>Network socket programming<br><br>Concurrent programming<br>Processes and threads<br>Controlling access to shared resources using mechanisms such as synchronized methods, mutexes and semaphores <br>Inter-process communication using shard memory and message passing.<br>Concurrent programming models, e.g. futures/promises, actor model<br><br>Emerging trends in programming</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>1 - Explain the nature and applicability of a range of programming paradigms (including object-oriented, functional, procedural, declarative, concurrent) and programming language features (including type systems, constructs, compilation, execution, memory management)<br><br>2 - Demonstrate an understanding of the principles of functional programming and the use of techniques associated with these<br><br>3 - Demonstrate an understanding of the use of low level programming techniques in an appropriate compiled programming language.<br><br>4 - Demonstrate an understanding of the issues involved in concurrent programming including access to shared resources and message passing.<br><br>5 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques covered in this module<br></p> <div style=\"clear:both;\"></div>",
      "level": "H",
      "credits": "20.0"
    },
    "Web Design Technologies": {
      "module_id": "Web Design Technologies",
      "title": "Web Design Technologies",
      "summary": "The module builds on the concepts introduced in Web Design Fundamentals to provide students with the technical and software skills required to support the development of interactive data driven systems using a combination of server side and client side technologies.",
      "content": "<p>Overview of Web services.<br>Purpose and definition of Web services ( REST, SOAP)<br>Consuming Web Services<br><br>Ajax<br>Javascript, CSS and DOM <br>Asynchronous requests and callbacks<br>Working with XML and JSON<br>Server-side scripting.<br>.<br>Data binding <br>Connecting, building and accessing data sources / formats / services:<br>ODBC/JDBC <br>SQL &amp; XML technologies <br>JavaScript Object Notation (JSON) <br><br>Overview of techniques and technologies required to integrate and display data:<br>advanced CSS features<br>media queries and alternate style sheets<br>use of proprietary widgets <br>use of code libraries e.g. jQuery, Dojo, Twitter Bootstrap<br><br>Web application architectures<br>2/3 tier architectures<br>MVC<br><br>Overview of Web frameworks and templates<br>purpose of Web development frameworks <br>critical comparison of current frameworks<br>purpose of Web templates<br>critical comparison of current templates <br>design issues in working with framework and templates<br><br>Fundamentals of Security e.g.<br>Client-side and Server-side programming based security (e.g. data validation / encryption) Database security inc. authentication and authorization</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>Critically compare a range of technologies for implementing data driven web sites<br><br>Apply appropriate client and server side tools and technologies to develop an interactive website which incorporates information from external source<br><br>Compare and contrast contemporary web development frameworks and Web templates<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Web Platform Development 2": {
      "module_id": "Web Platform Development 2",
      "title": "Web Platform Development 2",
      "summary": "This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.",
      "content": "<p>Web platform architectures<br>-n-tier-architectures<br>-scalable/distributed architectures<br>-RESTful architectures<br><br>Design patterns relevant to web applications,<br>-Model-View-Controller<br>-Dependency Injection <br><br>Server-side application design:<br>-Business logic<br>-Routing and URL design<br>-Handling requests<br>-Using MVC frameworks: models, views and templates, controllers<br>-REST APIs: using request methods and headers, content negotiation including serialisation and de-serialisation, formatting responses<br><br>Client-side application design<br>-Review of HTML, CSS, JavaScript and JavaScript libraries, DOM and event handling<br>-View generation<br><br>Interfacing with external data sources and services<br>-Database interfaces<br>-Data in JSON format<br>-Data from web services<br><br>The use of third party services, e.g. for authentication.<br><br>Testing, debugging and error handling. The use of test frameworks.<br><br>Web platform frameworks.<br><br><br>Session management, including distributed session management.<br><br><br>Performance management.<br>-DNS management<br>-Scaling<br>-http cache specification<br>-memcached (distributed in-memory cache)<br>-edgecaching/CDN<br><br>Tool chains in the context of web application development.<br><br><br>Web application specific security vulnerabilities and their prevention.<br>-Injection (SQL, JavaScript)<br>-Cross-site scripting<br>-Cross-site request forgery<br>-Broken authentication and session management<br><br>Deployment and hosting.<br><br>Architectural comparison of large scale web application such as YouTube, Facebook or Twitter.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br><br>Critically appraise different web platforms.<br><br>Critically appraise different web architectures. <br>Critically appraise design patterns relevant to web applications and their components.<br>Design, develop and deploy a web application with a web browser client, application logic implemented using the capabilities of a scalable web server platform and a database-driven backend leveraging external services such as authentication using appropriate tools and frameworks.<br>Analyse web application security vulnerabilities and their prevention.<br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Web Platform Development 1": {
      "module_id": "Web Platform Development 1",
      "title": "Web Platform Development 1",
      "summary": "",
      "content": "",
      "ilo": "",
      "level": "1",
      "credits": "20.0"
    },
    "Work Based Project 2": {
      "module_id": "Work Based Project 2",
      "title": "Work Based Project 2",
      "summary": "The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution<br><br>The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study to frame and follow a project plan that leads to a solution for a given project specification/design brief relevant to the student's chosen study pathway.<br><br>The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. The project will be undertaken on an individual basis, however, the work completed within the module is likely to require the GA to work with groups of individuals within the organisation. Therefore, the GA can assume the role of a project leader or significant project member carrying out a role of responsibility on the project. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project.<br>Project specifications/design briefs are expected to be derived from the student's workplace. At this programme level the GA is expected to contribute significantly to the development and conduct of a project plan framed around a relevant development process for a well-defined problem area under direct supervision of a work based supervisor and a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.<br><br>The GA requires to work in a self-motivated way, coordinated with colleagues and within collectively defined schedules ,further developing confidence in their ability to work with others on analysing and creatively solving problems. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), GAs will also reflect upon strengths and weakness of the team and relevant professional and ethical issues introduced.<br><br>The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work. <br><br>The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 62%. The percentage of Work Based Assessment for this module is 100%.",
      "content": "<p>The Individual at Work<br>Team dynamics, personalities and traits<br>Meeting participation skills<br>Listening, questioning skills<br>Negotiation and assertiveness skills<br>Critical thinking and decision making<br>Giving and receiving feedback<br>Coping with pressure<br>Working with different cultures<br>Stakeholder relationship management<br>Landscape of legislative frameworks governing work and enterprise in the digital economy. <br><br>Project Lifecycle Management<br>Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities<br>Configuration Management and Source Code Control: the role of configuration management defect Tracking, Management and supporting tools <br>Software Testing:testing techniques and practices automated testing and test frameworks integration of testing with automated build and defect tracking systems software security testing tools and techniques<br>Process Improvement Approaches and Quality Schemes Software Process Improvement concepts and frameworks Software Quality, Quality Assurance, Assessing System Quality and the relationship to testing<br><br>Careers and Employability<br>Recruitment and selection processes<br>Career planning<br>Professional profile, digital Identity and the role of social media<br>Professional bodies and societies<br>Business and workplace ethics and professional issues - differentiating between good and bad employers and employees<br>Internships and Placements</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1. Develop a project plan that applies an appropriate development lifecycle process and practices, and supporting developmental resources and tools (e.g. testing, versioning, configuration management, continuous integration and automation) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study.<br><br>2. Analyse the concepts underlying software quality schemes and process improvement. <br><br>3. Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making.<br><br>4. Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.</p> <div style=\"clear:both;\"></div>",
      "level": "2",
      "credits": "20.0"
    },
    "Web Design Fundamentals": {
      "module_id": "Web Design Fundamentals",
      "title": "Web Design Fundamentals",
      "summary": "The aim of this module is to provide students coming from a digital design background with the knowledge, understanding and skills required to design interactive web sites and to implement these sites with respect to current publishing standards.",
      "content": "<p>User needs analysis techniques: identifying target audience user centred web design concepts. Web design planning and documentation: site structure diagrams, wireframes. Technical fundamentals: HTML syntax CSS purpose and syntax including the box model, styling, layout and positioning of elements. Client / Server architecture Forms and form processing, basic server side scripting. Principles of good web authoring: separation of content from presentational attributes progressive enhancement authoring for accessibility, responsive design. <br>Design for interactivity Introduction to javascript syntax data types logic Document Object Model (DOM). The W3 DOM. Accessing, traversing and modifying documents via the DOM. CSS and event handling. Changing the presentation layer Changing the document's behaviour with event handling. Using 3rd party code libraries. Using libraries, such as jQuery, Dojo. Critical Review of current and emerging Web standards e.g. markup html 4.0, xhtml, html 5 styles CSS 2, CSS3 data interchange formats xml, json Contextual Issues: e.g. legal and copyright restrictions data protection accessibility Design Issues: graphic design techniques for web navigation models choice of file formats. Web authoring: using both simple text editors and industry standard authoring tools. Use of appropriate tools to support development and debugging. </p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On completion of this module, students should be able to:<br> <br>1. Conduct a user needs analysis to inform the design of an appropriate solution to a project brief. <br>2. Construct a website using standard mark-up, which displays well across a range of devices. <br>3. Apply client side sampling to the development of interactivity. <br>4. Demonstrate an understanding of the systems technologies used to develop contemporary websites. <br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Web Application Development 2": {
      "module_id": "Web Application Development 2",
      "title": "Web Application Development 2",
      "summary": "This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.",
      "content": "<p>Web platform architectures and architectural styles:<br>- n-tier-architectures<br>- communication over HTTP<br>- front-end and back-end functionality<br>- REST<br>- cloud functions<br><br>Web application architecture, including Model-View-Controller<br><br>Server-side web application design issues:<br>- server-side scripts<br>- request handling<br>- business logic<br>- validation<br>- using MVC frameworks: models, views, controllers, routing and URL design, dependency injection <br>- session management<br>- error handling and logging <br><br>Interfacing with data sources <br><br>Implementing web APIs <br><br>Web application security:<br>- authentication and authorisation in web applications <br>- web application specific security vulnerabilities and their prevention, including injection (SQL, JavaScript), cross-site scripting, cross-site request forgery<br><br>Testing and debugging web applications<br><br>Deployment and hosting</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module, students should be able to:<br><br>1 - Demonstrate an understanding of web application architectures, frameworks and design<br>2 - Demonstrate an understanding of web application security vulnerabilities and their prevention<br>3 - Critically evaluate the use of the Model View Controller architecture in the development of web applications <br>4 - Design, develop, test and deploy a robust data driven web application utilising appropriate tools and frameworks<br>5 - Implement authentication to secure a web application using appropriate schemes and services<br><br><br></p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Work Based Project 3": {
      "module_id": "Work Based Project 3",
      "title": "Work Based Project 3",
      "summary": "The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the programme and appropriate to the level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace current and previous levels of study in producing an appropriate solution. <br><br>The emphasis of this module is on the development of an innovative, commercially viable solution to a design challenge that is ethically and sustainably sound. GAs are expected to demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. They are expected to follow relevant professional, organisational and industry standards, follow their own organisation's guidelines in the development of documentation and management standards as well as demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. GA's require to work in a self-motivated way within collectively defined schedules and developing a confidence in their ability to work with others on analysing and creatively solving problems. They are expected to document working practices they have followed in support of evidencing their professionalism. The project will be undertaken on an individual basis, however, the work completed within the module may require the GA to work with groups of individuals within the organisation. Therefore, the GA can assume the role of a project leader or significant project member carrying out a role responsibility on the project. The GA on submission of a project specification and approval the project specification prior to the module commencing is expected to develop and follow a project plan with supervision from a work based supervisor and the guidance of a module tutor <br><br>The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 68%. The percentage of Work Based Assessment for this module is 100%.",
      "content": "<p>Innovation and Entrepreneurship<br>Innovation and creativity theory and practice, including disruptive innovation through digital technologies Idea generation and evaluation: sources of information, market characterisation, sales volume prediction financial evaluation (e.g. ROI) technical evaluation practicality of a concept from the viewpoint of functionality.<br>Careers and Employability<br>Students will have access to specialist materials on key aspects of career development and employability.</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>On successful completion of this module students should be able to:<br><br>1. Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a realistic problem relevant to the domain of the student's programme of study.<br><br>2. Demonstrate a critical understanding of the entrepreneurial and innovation processes involved in creating and providing products and professional services and the important role played by digital technologies in sustaining economic growth across a range of organisations and sectors.<br><br>3. Develop a business case and project plan.<br><br>4. Evidence career readiness.</p> <div style=\"clear:both;\"></div>",
      "level": "3",
      "credits": "20.0"
    },
    "Work Based Project 1": {
      "module_id": "Work Based Project 1",
      "title": "Work Based Project 1",
      "summary": "The module is concerned with the development of a solution to a realistic work based problem relevant to the Graduate Apprentice (GA) role within the workplace and level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution to a work based problem.<br><br>The emphasis of this module is on: understanding the contribution which digital technologies and skills relevant to the GA's area of study are making to current global business and society, and how these are changing and developing understanding the development lifecycle practiced by professionals in their area of study gaining an insight into the organisational structures and business functions within which the modern professional associated with their current role operates and their current role. GA's should also consider the behaviours and issues which occur within their workplace and working practices, and how they as individuals function as part of their workplace environment.<br><br>The project will normally be undertaken on an individual basis, however, the work completed within the module may require the GA to work with a group of individuals within the organisation. The GA will most likely assume the role of a project member taking into account their relative experience at this stage in their role. They should, however, have a role of responsibility on the project or may also work on a small individual project / piece of work. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project.<br><br>The GA, on submission of a project specification and approval of the specification prior to the module commencing, is expected to develop and follow a project plan and its constituent processes and activities under direct supervision of a work based supervisor and guidance of the module tutor as well as and work in a self-motivated way within defined schedules, working towards well defined deliverables that meet the project aims and objectives. GA's are expected to develop confidence in their ability to work with others on analysing and creatively solving problems, and evaluating their work within the context of the original project requirement. This module will ground students in project management, problem solving, team working skills, and the use of reflective practices to support personal and professional development.<br><br>The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation.<br><br>The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 68%. The percentage of Work Based Assessment for this module is 100%.",
      "content": "<p>The Individual at Work<br>Team working<br>Time management<br>Independent working and self-reliance<br>Communication skills<br>Presentation skills<br>Personal reflection and review<br><br>Work and the Workplace<br>The 21st Century Workplace<br>Professional practices and life cycles<br>Enterprise and organisational types and structures<br>Business functions<br>Corporate values and responsibilities<br>Diversity at work and mobility considerations<br><br>Digital Technologies and Society<br>Digital Enterprise, Digital Culture and Digital Society<br>Case Studies<br>Trends and Developments<br><br>Introduction to Careers and Employability<br>Careers profiles and pathways<br>Graduate Attributes and Enhancing Employability<br>Careers information sources and resources<br>Guest external speakers and Guru seminars from industry practitioners and employers</p> <div style=\"clear:both;\"></div>",
      "ilo": "<p>Upon successful completion of this module, students should be able to:<br><br>1. Use relevant defining technical and enabling soft skills to follow a project plan and appropriate lifecycle process within a work based environment to solve a problem relevant to the programme of study.<br>2. Develop an understanding of the structure, function and operation of the modern workplace, the opportunities and roles and technical and transferable skills required for success.<br>3. Demonstrate an awareness of how digital technologies and know how relevant to the GA's programme of study interact with business, society, and culture.<br>4. Utilise reflective practices to support personal and professional development and demonstrate the ability to effectively communicate in both written and oral form.<br><br></p> <div style=\"clear:both;\"></div>",
      "level": "1",
      "credits": "20.0"
    }
  }
}