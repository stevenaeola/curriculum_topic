{
  "2023": {
    "CS352 - Software Engineering 3": {
      "module_id": "CS352 - Software Engineering 3",
      "title": "CS352 - Software Engineering 3",
      "summary": "The aim of the class is to equip participants with the knowledge and understanding of how to manage and execute a collaborative software project.",
      "content": "<li>Collaborative working&nbsp;</li><li>Project management approaches and methodologies&nbsp;</li><li>Project planning&nbsp;</li><li>Project execution&nbsp;</li><li>Risk assessment and management</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Be familiar with project management techniques and processes.&nbsp;</li><li>Understand how to conduct risk assessment and mitigate against those risks.&nbsp;</li><li>Know and understand configuration management processes and tools.&nbsp;</li><li>Be aware of a range of software development tools that can be deployed when developing a medium sized software application.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS260 - Functional Thinking": {
      "module_id": "CS260 - Functional Thinking",
      "title": "CS260 - Functional Thinking",
      "summary": "To introduce the core concepts and methods of modern functional programming, serving as an introduction to our third year class on this topic.Learning Obj 1 : to understand basic functional programming concepts: inductive datatypes, pattern matching, structural recursionLearning Obj 2 : to understand how to transform and interpret languages of expressionsLearning Obj 3 : to understand functional data structures, e.g. search treesLearning Obj 4 : to understand abstraction of type parameters and common interfaces",
      "content": "- functions and types; functional composition- inductive datatypes, pattern matching, structural recursion- transforming and interpreting languages of expressions- functional data structures, e.g., search trees- representation of simple computational effects, e.g. failure by Maybe and choice by lists- abstraction of type parameters (parametric polymorphism)- abstraction of common interfaces, e.g., Eq, Ord, Monoid",
      "ilo": "",
      "level": "2",
      "credits": "10"
    },
    "CS423 - Cyber Security": {
      "module_id": "CS423 - Cyber Security",
      "title": "CS423 - Cyber Security",
      "summary": "The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice. By the end of the module students should have developed a security mindset which allows them to consider key elements of cyber security as they apply to a range of computer systems.&nbsp;",
      "content": "Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp;",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Identify and critically assess threats for a given context.&nbsp;</li><li>Evaluate an existing or proposed system in terms of potential vulnerabilities and argue appropriate mitigation techniques for a given context.&nbsp;</li><li>Design and implement an aspect of technical security which makes use of appropriate techniques.&nbsp;</li><li>Compare and contrast aspects of managing cyber security such as cyber security frameworks.</li>",
      "level": "4",
      "credits": "10"
    },
    "CS312 - Web Applications Development": {
      "module_id": "CS312 - Web Applications Development",
      "title": "CS312 - Web Applications Development",
      "summary": "To help the student gain an understanding of the technologies used in the development of N-tier Internet-based applications.",
      "content": "Web application design with reference to alternative architectures;Client-side technologies:<li>Page mark-up and visual styling (HTML5 and CSS)</li><li>Form verification and checking (JavaScript)</li><li>Simple image handling (JavaScript, HTML5, DOM, CSS)</li><li>Asynchronous communication with the server-side (AJAX)</li>Server-side technologies:<li>Dynamic page generation (CGI, PHP)</li><li>Handling client-side submissions (PHP)</li><li>Database integration (MySQL, PHP)</li>Integration of client and server-side applications that exploit databases;Developing realistic web applications that combine a range of client-side technologies and server-side programming with database management, taking account of:<li>software engineering practices (design and maintenance issues, team-based development)</li><li>web interface design issues (for example, the separation of content from functionality, cross-platform considerations);</li><li>human-computer interaction / usability considerations</li><li>accessibility guidelines (ability to deliver information in a clear and concise fashion; consideration of special needs and internationalisation);</li><li>web security, privacy and legal aspects (common privacy and security attacks (e.g. cookies; injection attacks))</li>Awareness of the role of Web development platforms and content management systems (e.g. Drupel, WordPress and Angular)",
      "ilo": "On completion of the class, a student should be able design and develop realistic web-based applications that include client-side programming and server-side functionality with database components.In particular, the student should learn:<li>to understand the typical topology of internet applications</li><li>to develop accessible and secure internet-based applications that make use of:<ul><li>client-side technologies</li><li>server-side technologies</li><li>back-end technologies for storing server-side data</li><li>distributed web applications</li></ul></li>",
      "level": "3",
      "credits": "20"
    },
    "CS273 - Introduction to Databases": {
      "module_id": "CS273 - Introduction to Databases",
      "title": "CS273 - Introduction to Databases",
      "summary": "The aim of the class is to provide participants with a conceptual and practical understanding of data modelling, database design and database technology. The class then builds on a basic understanding of the relational database approach, covering more complex SQL query design and efficient execution.",
      "content": "1. Introduction to the Database Environment: functions of a database management system;<br>2. Entity Relationship modelling.<br>3. The Relational Data Model, relational algebra, integrity constraints.<br>4. Relational query languages.<br>5. Normalisation.<br>6. JDBC<br>6. NoSQL",
      "ilo": "On completion of this class, participants should be able to:<li>show an appreciation of the facilities and services which should be provided by a fully featured database management system.</li><li>demonstrate knowledge of commonly occurring data models.</li><li>display knowledge of the process of designing a database system, starting from an informal specification.</li><li>display skill in formulating database queries using SQL.</li><li>demonstrate ability to utilise triggers / stored procedures, and understand the importance of indexing.</li><li>display knowledge of potential future developments in database technology.</li>",
      "level": "2",
      "credits": "15"
    },
    "CS310 - Foundations of Artificial Intelligence": {
      "module_id": "CS310 - Foundations of Artificial Intelligence",
      "title": "CS310 - Foundations of Artificial Intelligence",
      "summary": "To help the student to a broad appreciation of the scale and nature of the problems within Artificial Intelligence and to a detailed understanding of some of the fundamental techniques used to address those problems.",
      "content": "The class will cover the first 12 chapters of the 3rd edition of AI: A Modern Approach by Russell and Norvig. The topics to be covered will include:<li>Introduction: What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.</li><li>Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).</li><li>Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.</li><li>Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.</li><li>Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing.</li><li>Constraint satisfaction problems: defining CSPs, constraint propagation, backtracking search in CSPs, local search in CSPs, exploiting problem structure.</li><li>Logical agents: propositional logic for agent behaviour, propositional theorem proving, propositional model checking and SAT solving, agents based on propositional logic.</li><li>First-order logic: syntax and semantics, knowledge engineering in first-order logic.</li><li>Inference in first-order logic: unification and lifting, forward chaining, backward chaining, resolution.</li><li>Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches.</li><li>Planning and acting in the real world: time, schedules and resources, hierarchical planning, planning and acting in non-deterministic domains, multi-agent planning.</li><li>Knowledge representation: ontological engineering, events, mental events and objects, reasoning with default information, an example application.</li>The class will focus on the practicalities of using these techniques to build intelligent agents. Practical work will be set, including the programming of an intelligent agent for a specified task.",
      "ilo": "On completion of the class, a student should be able:<li>to understand the modern view of AI as the study of agents that receive percepts from the environment and perform actions</li><li>to demonstrate awareness of the major challenges facing AI and the complexity of typical problems within the field</li><li>to exhibit strong familiarity with a number of important AI techniques, including in particular search, knowledge representation, planning and constraint management</li><li>to assess critically the techniques presented and to apply them to real world problems</li>",
      "level": "3",
      "credits": "20"
    },
    "CS113 - Information and Data 1": {
      "module_id": "CS113 - Information and Data 1",
      "title": "CS113 - Information and Data 1",
      "summary": "The aim of the class is to give participants a practical high-level understanding of web systems and the languages and tools that can be used for their creation.&nbsp;",
      "content": "The course will provide a brief introduction to databases, the Web, security and usability:&nbsp;<li>Web Systems 1&nbsp;<ul><li>Data, information and knowledge, the Web, web-based systems, web-based architectures (front-/back-end, data stores), Web-based development (languages, framework, CMS)&nbsp;</li><li>Introduction to HTML5 and CSS&nbsp;</li></ul></li><li>Data management &amp; databases&nbsp;<ul><li>Different types of data, managing data with files and databases, relational databases&nbsp;</li><li>SQL queries&nbsp;</li><li>Database access with php&nbsp;</li></ul></li><li>Usability &amp; human factors&nbsp;<ul><li>Usability, accessibility, understanding user needs &amp; limitations, usability design, usability assessment&nbsp;</li><li>Screen mocking and navigation design&nbsp;</li></ul></li><li>Web Systems 2&nbsp;<ul><li>Introduction to Javascript, input validation, responsive design&nbsp;</li><li>Website management, web analytics, and web logs&nbsp;</li></ul></li><li>Security&nbsp;<ul><li>CIA, Threats, Access control, User authentication (passwords and PINS), Security policies, computer hygiene, role of encryption and hashing&nbsp;</li><li>Web site security, user authentication, protecting user data&nbsp;</li></ul></li><li>Presentation&nbsp;<ul><li>Good presentation design, data visualisation principles&nbsp;</li><li>Collecting (user surveys), analysing (summary statistics), generating reports and presenting data (graphs)&nbsp;</li></ul></li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>describe the components of a web system.&nbsp;</li><li>understand how to store and access data.&nbsp;</li><li>understand how to make web systems usable and accessible.&nbsp;</li><li>understand and describe security threats and how to mitigate these.&nbsp;</li><li>construct a create a simple web system with a back-end database.&nbsp;</li>",
      "level": "1",
      "credits": "20"
    },
    "CS120 - Introduction to Software Engineering": {
      "module_id": "CS120 - Introduction to Software Engineering",
      "title": "CS120 - Introduction to Software Engineering",
      "summary": "The aim of this class is to provide a high-level overview of the software engineering lifecycle, software development processes, anatomy of software systems, testing principles and practices, maintenance and evolution.",
      "content": "<li>High level overview of the software lifecycle from initial product conception through to retiral.&nbsp;</li><li>Software development processes (waterfall to agile to DevOps etc. and including project management).&nbsp;</li><li>Anatomy of a software system. High-level overview of a system (classes, modules, test cases, data files, etc.) and how these relate to each other and are managed (configuration/version control, e.g. Git) and built into a system (build tools like maven etc.).&nbsp;</li><li>Testing Principles. Role and purpose of testing. Testing levels (acceptance, system, integration etc.). Principles of designing tests.&nbsp;</li><li>Testing Practices. Running tests, testing tools, and handling test results. Filing bug reports.&nbsp;</li><li>Maintenance and Evolution. Concept of software maintenance. Filing and responding to feature requests. Regression testing. Making and committing changes. Continuous integration.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>understand the software development lifecycle and the role that software development plays in their organisation.&nbsp;</li><li>understand the activities involved in and the differences between the major software development paradigms.&nbsp;</li><li>demonstrate an appreciation of the main components of a software system and the tools and techniques used to manage these.&nbsp;</li><li>understand the role and purpose of testing and the basic principles of test design.&nbsp;</li><li>understand the concepts and components of the continuous integration/continuous delivery (CI/CD) pipeline and how these are implemented in their organisation.</li>",
      "level": "1",
      "credits": "10"
    },
    "CS366 - Data Analytics": {
      "module_id": "CS366 - Data Analytics",
      "title": "CS366 - Data Analytics",
      "summary": "The aim of this class is to provide participants with: an understanding of the challenges posed by the advent of big data (e.g. its modelling, storage, and access); an understanding of the key algorithms and techniques which are embodied in data analytics solutions; an understanding of the principles of Machine Learning and a range of popular approaches, along with the knowledge of how and when to apply the techniques.",
      "content": "<li>Data Analytics: Quantitative methods for data analysis and knowledge extraction including classification, clustering, association rules, Bayesian approaches, decision trees.</li><li>Machine learning basics: Overview of the machine learning process; Classifiers and classification measures; Training models; Support Vector Machines; Decision trees; Ensemble Learning; Dimensionality Reduction (Principal Components Analysis).</li>",
      "ilo": "On completion of this class, participants should be able to:<li>understand how to use Python to enable the use of various big data technologies.</li><li>understand how classical statistical techniques are applied in modern data analysis.</li><li>understand the potential application of data analysis tools for various problems and appreciate their limitations.</li><li>understand the aims and fundamental principles of Machine Learning.</li><li>understand a range of the essential core algorithms and approaches to Machine Learning.</li>",
      "level": "3",
      "credits": "20"
    },
    "CS217 - Agile Software Engineering in Practice": {
      "module_id": "CS217 - Agile Software Engineering in Practice",
      "title": "CS217 - Agile Software Engineering in Practice",
      "summary": "The class will enable students to gain practical experience of agile software delivery and developing for the cloud. Students will learn how great teams work together and how robust dynamic software is created in practice.&nbsp; It will provide them with valuable insights into these important areas, knowledge of cutting-edge development processes, and the opportunity to enhance their software development skills.",
      "content": "Topics covered will include the following.<li>Introduction to agile development techniques and planning.</li><li>Test-Driven Development and group dynamics.</li><li>Developer tools and the software development lifecycle.</li><li>Continuous integration and continuous deployment: concepts, benefits, tools.</li><li>Cloud introduction</li><li>Financial trading: what it means for software developers.</li><li>Cloud Security: cloud for enterprise.</li>",
      "ilo": "On completion of the class, a student should:<li>Gain knowledge and understanding of agile software development.</li><li>Gain an understanding of developing software for the cloud.</li><li>Be able to design, implement and test a software application.</li><li>Be able to reflect on the suitability of agile development practices for modern software development environments.</li><li>Be able to critically assess the suitability of software engineering practices for&nbsp; complex, large scale problem domains.</li><li>Demonstrate an enhanced and broadened programming knowledge and ability.</li><li>Demonstrate the ability to engage in development practices used within industry.</li><li>Present and communicate effectively on work carried out to team members and others.</li><li>Work effectively as a member of a team to build a software-based solution to a problem.</li>",
      "level": "2",
      "credits": "10"
    },
    "CS313 - Computer Systems and Concurrency": {
      "module_id": "CS313 - Computer Systems and Concurrency",
      "title": "CS313 - Computer Systems and Concurrency",
      "summary": "To enable the student to develop a deeper understanding of highly concurrent hardware and software systems. The class will also further the student\u2019s knowledge of the need for, and the design and implementation of, those other vital hardware and software components of a concurrent system, namely multiprocessors and their interconnections, operating systems and networks. The interactions between many of these components will be investigated by means of significant practical work that consolidates the lecture content in the context of: (i) multiprocessor architectures, (ii) concurrency, (iii) protection and security and (iv) networked and concurrent applications. Software developed in appropriate programming languages will form the basis of much of the practical work thus enabling the student to enhance their software design and implementation skills in this domain.",
      "content": "<li>Multiprocessing: shared memory multiprocessors; message-passing multiprocessors; hardware multithreading; graphics processing units; multiprocessor network topologies; multiprocessor benchmarking and performance models.</li><li>OS process management: process and thread models; inter-process communication; CPU scheduling; scheduling of multiprocessor systems, process synchronisation (critical sections, semaphores, monitors, atomic transactions); deadlocks.</li><li>System protection (access control, capability- and language-based protection)</li><li>Security: threats; cryptography and data encryption; authentication and user authentication; non-repudiation; certification authorities; security defences; email privacy; network security (IP security, wireless network security); web security</li><li>Client/Server communication (sockets)</li><li>Building object-oriented concurrent applications</li>",
      "ilo": "<li>To understand the concepts of software and hardware design for multiprocessing, OS process and thread models, process and thread scheduling, and inter-process communication</li><li>To appreciate the issues that affect the design, implementation and performance of multiprocessor systems and to understand current approaches to ameliorate these</li><li>To appreciate the problems of process and thread synchronisation and understand concurrency mechanisms</li><li>To demonstrate an understanding of OS protection and security mechanisms, and network security techniques</li><li>To display practical skills necessary to develop networked, and thread safe concurrent applications</li>",
      "level": "3",
      "credits": "20"
    },
    "CS322 - DTSP Work Based Learning 2": {
      "module_id": "CS322 - DTSP Work Based Learning 2",
      "title": "CS322 - DTSP Work Based Learning 2",
      "summary": "This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies.",
      "content": "Participants will undertake the following.&nbsp;<li>Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;</li><li>Produce personal development plans.&nbsp;</li><li>Maintain a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;<br>Produce evidence that they meet a set of competencies defined by a recognised professional body.</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate reflective work practices.&nbsp;</li><li>Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;</li><li>Identify areas and strategies for self-improvement within a professional context.&nbsp;</li><li>Demonstrate their understanding and application of digital and technology solutions concepts within their work-place.&nbsp;</li>",
      "level": "3",
      "credits": "20"
    },
    "CS210 - Computer Systems and Architecture": {
      "module_id": "CS210 - Computer Systems and Architecture",
      "title": "CS210 - Computer Systems and Architecture",
      "summary": "To enable the student to:<li>understand and program in the C programming language</li><li>create system programs in C for the Linux operating system</li><li>understand how modern operating system enable computer programs to run as processes</li>",
      "content": "Semester 1: students will learn how to program in C. The material will be assessed using weekly exercises (20%) and an individual programming assignment (30%).Semester 2: students will learn how processes run in modern operating systems (assessed by a class test worth 25%) and complete a large group practical to create a systems program for Linux, written in C (worth 25%).",
      "ilo": "On completion of the class, a student should be able to:<li>write programs in C, including the use of data structures and pointers</li><li>understand how memory is used and referenced in C</li><li>understand how the compilation process works in C</li><li>write systems programs in C using system calls</li><li>understand how processes are created and managed</li><li>understand how multiple process can run in modern operating systesm</li>",
      "level": "2",
      "credits": "20"
    },
    "CS103 - Machines, Languages & Computation": {
      "module_id": "CS103 - Machines, Languages & Computation",
      "title": "CS103 - Machines, Languages &amp; Computation",
      "summary": "To help students to achieve a broad knowledge of the essence of computation and computational systems, as embodied by the notions of computable functions, formal languages and recursion, logic and computability and abstract machines.",
      "content": "<li>Computable and Non-Computable Functions: an introduction to the ideas of functions, computable functions, infinite sets of different cardinalities and the symbolic derivation of theorems, leading up to a proof of the existence of non-computable functions; an introduction to symbolic systems and the notion of theoremhood in such a system; the idea of lambda-calculus as a notation for computable functions; the relationship between computable functions and computer programs.</li><li>Recursion and Languages: a first look at context-free grammars and the idea that finite grammatical rules can capture infinitely many strings through recursion; the idea that recursion can be used in functions and in logical rules and definitions; an introduction to formal languages and the specification of grammatical rules to capture the structure of a given language; recognising and understanding recursive definitions; proof by structural induction.</li><li>Logic and Computability: introducing the propositional calculus as a set of symbolic rules and proving theorems in propositional calculus by natural deduction; lambda-calculus as a notation for proofs; the notions of soundness and completeness for a symbolic system; the idea of a decision procedure and a decision procedure for theoremhood in the propositional calculus; the three classes of problems: tractable, intractable and undecidable; the P=NP question.</li><li>Abstract Machines: finite state machines as simple abstract models of computation with some examples; what finite state machines can\u2019t do and an example; adding memory to a finite state machine to form a Turing machine; Turing machines as computable function boxes; the idea of the Universal Turing machine; the Church-Turing thesis: the limits of computational power; some examples of some undecidable problems.</li>",
      "ilo": "On completion of this class, a student should be able:<li>To understand the difference between computable and non-computable functions and to demonstrate that non-computable functions can exist.</li><li>To understand the concept of a formal language for specifying structures and the concept of recursion in both grammatical rules and function specifications.</li><li>To understand the concept of a rewriting system for symbolic manipulation and to produce derivations using such a system.</li><li>To understand the propositional calculus as a set of symbolic rules, and to derive theorems in the propositional calculus using these rules.</li><li>To understand the difference between tractable, intractable and undecidable problems and to understand what a decision procedure is.</li><li>To understand the concept of an abstract machine for performing computation, with reference to finite state machines and Turing machines.</li>",
      "level": "1",
      "credits": "20"
    },
    "CS207 - Advanced Programming": {
      "module_id": "CS207 - Advanced Programming",
      "title": "CS207 - Advanced Programming",
      "summary": "To further the students\u2019 skills in object-oriented programming, provide knowledge of key abstract data types along with their implementation and usage, and to provide experience in the development of&nbsp; software and an introduction to design. The main goal is for students to be able to develop programs with specialized data structures and utilizing APIs from a specification, and being able to ensure and show how the system they developed matches the specification.",
      "content": "<li>Introduction to Abstract Data Types*: lists, stacks, queues, hash tables, trees, sets, graphs etc.; examples of their definition, different implementations, ADT class libraries and their usage.</li><li>Key algorithms associated with ADTs such as searching and sorting*: introduction to a range of techniques, including the divide and conquer approach. Implementation of algorithms and abstract data types (the aim here is to present a small number of basic, popular algorithms to enable pragmatic implementation, rather than comprehensive coverage).</li><li>Trees: n-ary and binary* trees; typical instances and uses of trees; ADT implementation; algorithms covered include insertion* and traversal; the significance of different modes of traversal.#</li><li>The second semester will introduce the overall software development process. This will include requirements, analysis, design, implementation and testing. These stages will be documented using models such as class diagrams, activity diagrams, and sequence diagrams as defined in the Unified Modelling Language (UML).An essential feature of this class is the practical element \u2013 the opportunity for students to experience the design and implementation of a small system in small teams.* topics to be covered in semester 1, to facilitate semester 2 content of CS208</li>",
      "ilo": "On completion of this class, a student should be able:<li>to understand and have implemented a range of fundamental abstract data types.</li><li>to understand a number of essential algorithms that are closely associated with these data types.</li><li>to use these algorithms and abstract data types in practical applications.</li><li>to gather and document requirements using a modelling approach such as use cases.</li><li>to design a small system using a modelling approach such as class diagrams.</li><li>to implement a software design to produce a small system as part of a team.</li><li>to write unit tests for code to verify an implementation</li>",
      "level": "2",
      "credits": "20"
    },
    "CS451 - Design Patterns and Software Architecture": {
      "module_id": "CS451 - Design Patterns and Software Architecture",
      "title": "CS451 - Design Patterns and Software Architecture",
      "summary": "The aim of the class is to enable participants to understand the challenges of advanced software design and the issues associated with large-scale software architectures, frameworks, patterns, and components. Participants will develop their understanding of tools and techniques that may be used for static and dynamic analysis of software.&nbsp;The class focuses mainly on practical aspects of software development involving extensive Java programming and investigating the application of large Java frameworks.&nbsp;",
      "content": "Indicative content:&nbsp;<li>Software Design: key design principles and heuristics and trade-offs between these.&nbsp;</li><li>Design Patterns&nbsp;</li><li>Software Architecture&nbsp;</li><li>Frameworks&nbsp;</li><li>Major approaches to automated evaluation and analysis: dynamic analysis and static analysis</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Have a practical understanding of how to automatically evaluate software systems using static and dynamic analysis.&nbsp;</li><li>Identify, understand, and apply common software design patterns.&nbsp;</li><li>Have a practical understanding of the software development process using frameworks.&nbsp;</li><li>Identify and apply classical software architectural styles.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS308 - Building Software Systems": {
      "module_id": "CS308 - Building Software Systems",
      "title": "CS308 - Building Software Systems",
      "summary": "To extend and deepen the students understanding of the analysis, design and implementation of software systems; to provide further experience in the activity of designing and implementing non-trivial systems; and to enable the student to demonstrate practical competence in a group environment.The goal for the student is the development in a group setting of significant systems from scratch aiming not just at <i>any</i> solution but a good solution, and to be introduced to more general Software Engineering topics.",
      "content": "Further study of software engineering methods drawn from the following: requirements analysis and specification, establishing stakeholders\u2019 viewpoints, use-case modelling, systems analysis, specification, design (in particular the development of a detailed design for the construction phase, designing for re-use and future change, further design patterns, design metrics, implementation and testing of designs), implementation, defensive programming, verification and validation, and maintenance. Further study of software development tools, especially those that facilitate software development in a group context (e.g. version control and configuration management tools, xUnit etc.). Software engineering management: project management, team organization.The substantial practical activity will exercise skills from a selection of syllabus topics, and will incorporate group projects. This material thus provides a broader experience of the management and organisation of software processes for the production of large-scale software.",
      "ilo": "On completion of the class, a student should be able to:<li>understand the need for working effectively within a team environment, on practical software engineering problems, including planning and managing a group\u2019s workload</li><li>display a disciplined approach to good practices in the general area of software engineering, and to apply software engineering techniques to practical problems</li><li>appreciate the importance of organisation, management and professionalism in the development of large scale software</li><li>undertake a requirements analysis and to write a software requirements specification</li><li>determine, from an object-oriented analysis, a detailed design which incorporates the necessary technical infrastructure and which provides a basis for implementation</li><li>identify opportunities for re-use, including the use of design patterns</li><li>distinguish between designs in terms of their intrinsic quality and in terms of objective criteria such as flexibility, robustness to change etc.</li><li>implement, verify and validate a medium-sized software system</li><li>effectively employ a range of software development tools e.g. IDEs, version control, testing and issue tracking</li>",
      "level": "3",
      "credits": "20"
    },
    "CS115 - Integrated Project 1": {
      "module_id": "CS115 - Integrated Project 1",
      "title": "CS115 - Integrated Project 1",
      "summary": "This class enables participants to apply aspects of their degree course in an industrial context and so to understand the complexities of commercial software development.&nbsp;",
      "content": "The nature of the personal development plans and e-portfolio of evidence will vary depending upon the participant\u2019s working environment and will be identified through discussion with the participant, their employer and learning adviser. They will be expected to submit basic portfolio evidence and a reflective commentary associated with their evidence. Formative exercises will be used to establish personal development planning skills, such as objective setting. Participants will also be required to keep a weekly journal.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Apply taught theories within an industrial context.&nbsp;</li><li>Display an appreciation of good software development practices within their work place.&nbsp;</li><li>Present their work effectively (e.g. through oral presentations, written reports).&nbsp;</li><li>Demonstrate reflective work practices.</li>",
      "level": "1",
      "credits": "30"
    },
    "CS106 - Computer Systems & Organisation": {
      "module_id": "CS106 - Computer Systems & Organisation",
      "title": "CS106 - Computer Systems &amp; Organisation",
      "summary": "<i>Semester 1:</i> to enable the student to develop an understanding and appreciation of a computer system\u2019s functional components \u2013 both hardware and software, their characteristics, their interactions, and their fundamental role in the manipulation of data.<i>Semester 2:</i> to further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.",
      "content": "<i>Semester 1:</i><li>Machines and Computation: Brief history of computers and the nature of computation, e.g. how arithmetic expressions are evaluated.</li><li>Introduction to Operating Systems: brief history, role and purpose, basic functionality and operation, the tradeoffs in operating systems design, the influences of different computer systems and environments, security and open source software on operating system design.</li><li>Introduction to Net-centric computing: brief history and the development of the Internet, the range of specialisations within net-centric computing, emerging technologies and their capabilities, limitations and near-term potential.</li><li>Introduction to a simple computer: CPU basics and organisation (registers, the ALU, the Control Unit and datapath); the bus; clocks; I/O; memory; interrupts).</li><li>Basic Functional (Hardware) Components of Computer Systems: for example, CPU, memory, I/O, networks.</li><li>Basic Functional (Software) Components of Computer Systems: for example, assemblers, compilers, and operating systems.</li><li>Elementary assembly language programming: simple computations involving loops, counters, and accumulation; awareness of bugs.</li><li>Representation of numeric data: unsigned binary, signed magnitude, and twos complement, floating point; twos complement arithmetic; range, precision, and errors in floating point arithmetic.</li><li>Representation of text, audio, and images; issues associated with compression and communication, e.g. how JPEG works and when it doesn\u2019t; Huffman coding.</li><li>Function of logic gates; sum of products expressions, Boolean algebra, combinatorial and sequential logic circuits, for example those for multiplexers, adders, registers, shift registers, counters, overflow detection; PLAs.</li><i>Semester 2:</i><li>Introduction to instruction set architecture, micro-architecture and system architecture.</li><li>Processor instruction set architecture: instruction types and formats, register sets, addressing modes.</li><li>Processor structures: memory-to-register architectures; load/store architectures; overview of Flynn\u2019s classification of computer architectures.</li><li>The relationship between low-level and high-level programming languages.</li><li>Instruction sequencing, flow-of-control, subroutine call and return mechanisms.</li><li>Low-level architectural support for high-level languages.</li><li>Low-level architectural support for operating systems.</li><li>Low-level architectural support for concurrency.</li><li>Memory: types of memory, overview of the memory hierarchy.</li><li>Input/Output: types of I/O; overview of common I/O devices and interfaces.</li><li>Networks: types of network; overview of common network standards, protocols, and interfaces.</li><li>Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments.</li>",
      "ilo": "On completion of the first half of the class, a student should have developed an understanding of:<li>The function and basic operation of the fundamental hardware components of computer systems.</li><li>The function and basic operation of the fundamental software components of computer systems.</li><li>The hierarchy of, and the interaction between, the components of a typical computer system.</li><li>The concept of a logical layer and the benefits of building abstract layers in hierarchical fashion.</li><li>The need for APIs and middleware and how computing resources are used by application software and managed by system software.</li><li>The evolution of early networks and the Internet and the structure of a typical, current, network architecture.</li><li>The concept of an instruction set architecture (ISA), and the nature of a machine-level instruction in terms of its functionality and use of resources (registers and memory).</li><li>The various classes of instruction: data movement, arithmetic, logical, and flow control; their use and abuse in simple programs.</li><li>The typical types of data/number/information representations and the implications of these for calculations and transformations.</li><li>Boolean functions and logic expressions and their implementation in digital logic gates, and combinational and sequential circuits.</li>On completion of the second half of the class, a student should be able to:<li>Demonstrate their knowledge of data/number/information representations and the limitations of such representations.</li><li>Appreciate how a CPU may be constructed from combinational and sequential logic circuits.</li><li>Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.</li><li>Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.</li><li>Appreciate how conditional operations are implemented at the machine level.</li><li>Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.</li><li>Appreciate how an ISA has an impact on high-level languages and the design of compilers.</li><li>Understand the basic principles of operation of the memory, I/O and network subsystems of a typical computer.</li><li>Appreciate how future developments in computer systems may be influenced by current trends and technologies.</li>",
      "level": "1",
      "credits": "20"
    },
    "CS355 - User-Centered Design": {
      "module_id": "CS355 - User-Centered Design",
      "title": "CS355 - User-Centered Design",
      "summary": "The aim of this class is to introduce participants to the principles, tools and techniques for developing good user-centred systems. Furthermore, participants will become familiar with various evaluation techniques with respect to usability and accessibility.&nbsp;",
      "content": "<li>Human Computer Interaction&nbsp;</li><li>Usability and Accessibility&nbsp;</li><li>Modelling user requirements&nbsp;</li><li>Designing inclusive user interfaces&nbsp;</li><li>Testing and Debugging&nbsp;</li><li>Evaluation studies: user and expert&nbsp;</li><li>Iterative interface prototyping, rapid prototyping&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the fundamentals of usability.&nbsp;</li><li>Understand users and their context and how these should be considered in the context of user interface design and evaluation.&nbsp;</li><li>Select and employ appropriate design methods for an interactive system.&nbsp;</li><li>Conduct low and hi fidelity prototyping techniques to develop an example interactive system.&nbsp;</li><li>Assess interactive systems for usability using appropriate evaluation techniques, justify the choice of techniques.&nbsp;</li><li>Understand and discuss future research directions in interface design and evaluation.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS211 - Professional Issues in Computing": {
      "module_id": "CS211 - Professional Issues in Computing",
      "title": "CS211 - Professional Issues in Computing",
      "summary": "To ensure that the student is aware of the legal, social, ethical and professional issues commensurate with the practice of Information Systems Engineering.",
      "content": "<li>Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.</li><li>ICTs and society: the information society; impact of ICTs on society; cybercrime; digital evidence.</li><li>General and Specific Statute Law: including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.</li>",
      "ilo": "On completion of the class, a student should be able:<li>To appreciate the characteristics of professionalism;</li><li>To recognise and appreciate the professional aspects of other engineering and related classes in their curriculum, and how those aspects influence technical practice;</li><li>To form a sound basis on which they will subsequently be able to practise Information Systems Engineering with a due regard for legal, ethical and social issues.</li>",
      "level": "2",
      "credits": "10"
    },
    "CS351 - Programming 3": {
      "module_id": "CS351 - Programming 3",
      "title": "CS351 - Programming 3",
      "summary": "<li>The aim of this class is to develop an understanding of highly concurrent software systems. This understanding will be enhanced through significant practical work which consolidates the class content.</li>",
      "content": "Concurrency: processes &amp; threads, thread synchronisation and thread safety, thread monitoring, testing for concurrency, building object-oriented concurrent applications.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the concepts of software design for multiprocessing, OS process and thread models, process and thread scheduling, and inter-process communication.&nbsp;</li><li>Appreciate the problems of process and thread synchronisation and understand concurrency mechanisms.&nbsp;</li><li>Appreciate the issues that affect the design, implementation and performance of multiprocessor systems and to understand current approaches to ameliorate these.&nbsp;</li><li>Demonstrate an understanding of OS protection and security mechanisms.&nbsp;</li><li>Display practical skills necessary to develop thread-safe concurrent applications.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS410 - Advanced Functional Programming": {
      "module_id": "CS410 - Advanced Functional Programming",
      "title": "CS410 - Advanced Functional Programming",
      "summary": "To provide the student with further skills in functional programming and an appreciation of the mathematical structures which underpin powerful general programming concepts and techniques.",
      "content": "Understanding the mathematical structures arising in advanced functional programs as mediated by the following concepts: type classes and constructor classes, monoids, functors, applicative functors, monads and monad transformers, arrows, comonads, inductive and coinductive types, recursion patterns including folds and unfolds, continuations, and generalised algebraic data types.Using these concepts to achieve the following features of code: abstraction, code reuse, type guarantees of validity and safety, data structures equipped with mathematical structure.Applying the ideas learned in the course to specific programming problems, possibly including the following: interactive processes, input/output, environment handling and modular interpreters, zippers, parsers, type checkers, graphical user interfaces, and transaction processing.For the most part, the class will be mediated in Haskell, but other functional programming languages may be explored. Advanced material may involve the categorical background to the functor class hierarchy, or the basics of functional programming with dependent types.",
      "ilo": "On completion of the class, a student should be able<li>to understand the advantages of high-level programming languages;</li><li>to understand the advantages of using mathematics to structure programming;</li><li>to understand the principles of functional program design and demonstrate their practical application;</li><li>to design and implement significant software systems, e.g. those arising in fourth year projects.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS116 - Introduction to Programming": {
      "module_id": "CS116 - Introduction to Programming",
      "title": "CS116 - Introduction to Programming",
      "summary": "The aim of the class is to give participants a solid foundation in programming and equip them with the ability to write programs.",
      "content": "<li>Introduction to Objects: Objects and Classes. Class Definition. Fields. Basic Types (int, char, bool) and Strings. Methods. Parameters. Return Types. Scope. Visibility. Object Interaction. Class and Object Diagrams.&nbsp;</li><li>Selection and Iteration. Conditional Statements. Boolean Expressions. For Loops. While Loops. Nested Loops. Switch Statement.&nbsp;</li><li>Collections Arrays. ArrayLists. HashMaps. HashSets. Java API. Iterators. Foreach Loop. Generic Collections.&nbsp;</li><li>Inheritance and Interfaces. Inheritance. Overriding. Static and Dynamic Types. Subtyping. Polymorphism. Type Substitution. Interfaces. Abstract Classes. Object Class&nbsp;</li><li>Input-Output and Error Handling. Console Reading and Writing. File Reading and Writing. Exceptions. Defensive Programming. Testing and Test-Driven Development. JUnit. Debugging.&nbsp;</li><li>Graphical User Interfaces (GUIs) GUI Components. GUI Layout. Event Handling.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Appreciate the role of a high-level language within the context of a computer system.&nbsp;</li><li>Understand the program development process.&nbsp;</li><li>Understand the principles of program design and demonstrate their practical application.&nbsp;</li><li>Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.&nbsp;</li><li>Demonstrate familiarity with a sophisticated interactive development environment (IDE).</li>",
      "level": "1",
      "credits": "20"
    },
    "CS353 - Fundamentals of Data Analytics": {
      "module_id": "CS353 - Fundamentals of Data Analytics",
      "title": "CS353 - Fundamentals of Data Analytics",
      "summary": "The aim of this class is to provide participants with: a) Python programming skills; b) an understanding of the challenges posed by the advent of big data (e.g. its modelling, storage, and access); an understanding of the key algorithms and techniques which are embodied in data analytics solutions.&nbsp;",
      "content": "Introduction to Python: simple data types (numbers, strings, simple list data structures and booleans); simple operators (assignment, arithmetic and string manipulation); control flow (conditional and iteration); manipulating simple data structures (lists, sets, and dictionaries); structuring code (functions); error handing (exceptions); library classes and documentation; testing and debugging.&nbsp;&nbsp;Data Analytics: Quantitative methods for data analysis and knowledge extraction including classification, clustering, association rules, Bayesian approaches, decision trees.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand and implement main control and flow structures of an imperative programming language (e.g. Python).&nbsp;</li><li>Understand and implement simple data elements, basic data structures, and the main code structure constructs of an imperative programming language (e.g. Python).&nbsp;</li><li>Understand how to use Python to enable the use of various big data technologies.&nbsp;</li><li>Understand how classical statistical techniques are applied in modern data analysis.&nbsp;</li><li>Understand the potential application of data analysis tools for various problems and appreciate their limitations.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS408 - Project": {
      "module_id": "CS408 - Project",
      "title": "CS408 - Project",
      "summary": "To enable the student to demonstrate practical and documentary competence.",
      "content": "Honours and MEng projects are substantial pieces of practical work; they may draw on any aspect of the degree course, or more widely. Topics will be suggested by and supervised by individual members of the Department\u2019s staff.For current year and background information, see material via <a href=\"http://classes.myplace.strath.ac.uk/\">MyPlace</a>.",
      "ilo": "On completion of the class, a student should be able to have demonstrated ability:<li>to pull together ideas from one or more of the classes they have undertaken</li><li>to build on material acquired throughout the degree course</li><li>to undertake independent studying, reading, writing and working</li><li>to display a disciplined approach to good practices in the general area of the degree course</li><li>to determine and successfully work to a timetable</li><li>to tackle successfully a substantial engineering problem</li>",
      "level": "4",
      "credits": "40"
    },
    "CS321 - Computer Networks": {
      "module_id": "CS321 - Computer Networks",
      "title": "CS321 - Computer Networks",
      "summary": "To provide the participant with a solid foundation in the principles of computer networking and a basic understanding of the operation of the latest networking technologies. On completing this class, the participant should have the necessary skills to be able to design, build and test a small-scale communications network in a virtual environment.&nbsp;",
      "content": "The class aims to provide a good grounding in the basics of computer networking. This module provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.&nbsp;It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.&nbsp;&nbsp;Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas:&nbsp;<li>The role of web services for tactical battlefield communications&nbsp;</li><li>Adaptive, user experience driven video streaming in 5G mobile networks&nbsp;</li><li>Autonomous network management in virtualised, software defined networks&nbsp;</li>Main topics covered:&nbsp;<li>Introduction to Computer Networks: The uses of computer networks, network Hardware &amp; types of networks, protocols, layers &amp; network services, OSI &amp; TCP/IP reference models&nbsp;</li><li>Network architectures &amp; services&nbsp;</li><li>Layers of a network protocol stack: the physical layer, data link layer, internet layer, application layer</li><li>IP addressing and sub-netting&nbsp;</li><li>Network devices&nbsp;</li><li>Message passing and real time traffic support&nbsp;</li><li>Building a virtual network&nbsp;</li><li>Local Area Network design&nbsp;</li><li>Current trends in networking: cloud services, software defined networks, network function virtualisation</li><li>Emerging trends in networking: autonomous network management, 5G mobile networks&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate a broad knowledge of the area of computer networking and its terminology.&nbsp;</li><li>Demonstrate an understanding of the operation of a range of networking protocols and devices.&nbsp;</li><li>Demonstrate an understanding of the TCP/IP and OSI models.&nbsp;</li><li>Demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks)&nbsp;</li><li>Design, implement and test a basic communications network in a virtual environment.&nbsp;</li>",
      "level": "3",
      "credits": "20"
    },
    "CS255 - Professional Issues": {
      "module_id": "CS255 - Professional Issues",
      "title": "CS255 - Professional Issues",
      "summary": "The aim of the class is to ensure that participants are aware of the legal, social, ethical and professional issues commensurate with the practice of Computer Science/Software Development.",
      "content": "<li>Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.&nbsp;</li><li>ICTs and society: the information society; impact of ICT on society; cyber crime; digital evidence.&nbsp;</li><li>General and Specific Statute Law including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the legal and regulatory issues facing information and computing professionals.&nbsp;</li><li>Appreciate the characteristics of professionalism.&nbsp;</li><li>Understand how their organisation addresses the legal, ethical, social and professional issues that arise within the IT sector.</li>",
      "level": "2",
      "credits": "10"
    },
    "CS551 - Mobile Software and Applications": {
      "module_id": "CS551 - Mobile Software and Applications",
      "title": "CS551 - Mobile Software and Applications",
      "summary": "To develop an understanding of the underpinning theories, paradigms, algorithms and architectures for building software applications to function in mobile computing environments.",
      "content": "<li>Review of mobile system characteristics and their implications.</li><li>Physical and logical mobility.</li><li>Mobile systems architectures, programming models and middleware.</li><li>Sensing and context-awareness.</li><li>Mobile security and privacy.</li><li>The Android OS and development platform.</li><li>Research issues and emerging trends, e.g. persuasive computing, self management, etc.</li>",
      "ilo": "On completion of the class, a student should be able to:<li>appreciate and explain the problems associated with mobile software environments</li><li>identify and explain the models and techniques typically employed in the design and development of a range of software for mobile environments, and appreciate the limitations of these</li><li>appreciate the role and impact of context-awareness and persuasion in modern mobile applications</li><li>demonstrate the ability to implement selections from a range of the software typically used in mobile environments.</li>",
      "level": "5",
      "credits": "20"
    },
    "CS104 - Information & Information Systems": {
      "module_id": "CS104 - Information & Information Systems",
      "title": "CS104 - Information &amp; Information Systems",
      "summary": "To help students gain a broader understanding of the human and social aspects of&nbsp; today's information and data-driven world in the context of research and scholarship, government, business, health, education.",
      "content": "The class will take a \u201chow it works\u201d approach, with particular focus on user and societal context.<li>Information, Data, People and Society; Human and Social aspects of Information, Technology and Systems; Digital Skills/ Digital divide;&nbsp;</li><li>Information and Knowledge \u2013 published, unpublished, peer reviewed, internet, web, social media: technology for access/use of information and data;&nbsp; quality, value and &nbsp;trust issues</li><li>Data, Information, Big data, Social media: Impact on people, society, government, business, education and research, culture, entertainment</li><li>Open data, open science: progress of science and society; Economics of information vs. information economy; open data management challenges; socio-cultural issues of data sharing/reuse</li><li>When human becomes data; datafied society; &nbsp;misinformation, disinformation; cognitive impact of information and social media; social, personal, psychological issues</li><li>Information and data: ethics, trust, security, privacy; machine-generated data; ownership and value of data; information governance</li><li>Data in everyday life: data-driven government, business, education,&nbsp; finance/banking, health, environment/climate change</li><li>Human-centred information; Impact of digital information and data on human and society; Human information behaviour Emotion &amp; empathy vs. function; people behind data/communications</li><li>Information, data, sustainable development and global challenges: government, health, education, economy, employment, environment \u2026</li><li>Key issues and challenges around information, technology/systems, people &nbsp;and policies.</li>&nbsp;",
      "ilo": "On completion of this class, a student should be able:<li>To understand what is meant by an information system.</li><li>To demonstrate a broad understanding of the technology underlying information systems, and in particular those information systems which have a deep impact on society.</li><li>To understand techniques for information and knowledge representation.</li><li>To understand key issues in information creation, sharing and dissemination.</li><li>To understand the user and social contexts of information systems.</li><li>To evaluate the success of an information system with respect to determined criteria for success for specific users and contexts.</li><li>To understand the design principles behind successful information systems in government, academia, business and &nbsp;health.</li><li>To appreciate the activities for the organization and processing of information that take place behind the scene to make digital information accessible to the users.</li><li>To understand the concepts of misinformation and disinformation and their implications for people and society.</li><li>To understand the role of data and information for sustainable development in different contexts.</li>",
      "level": "1",
      "credits": "20"
    },
    "CS114 - Software Engineering 1": {
      "module_id": "CS114 - Software Engineering 1",
      "title": "CS114 - Software Engineering 1",
      "summary": "The aim of the class is to provide a high-level overview of the software engineering lifecycle, software development processes, anatomy of software systems, testing principles and practices, maintenance and evolution.&nbsp;",
      "content": "<li>High level overview of the software lifecycle from initial product conception through to retiral.&nbsp;</li><li>Software development processes (waterfall to agile to DevOps etc. and including project management).&nbsp;</li><li>Anatomy of a software system. High-level overview of a system (classes, modules, test cases, data files, etc.) and how these relate to each other and are managed (configuration/version control, e.g. Git) and built into a system (build tools such as maven, etc.).&nbsp;</li><li>Testing Principles. Role and purpose of testing. Testing levels (acceptance, system, integration etc.). Principles of designing tests.&nbsp;</li><li>Testing Practices. Running tests, testing tools, and handling test results. Filing bug reports.&nbsp;</li><li>Maintenance and Evolution. Concept of software maintenance. Filing and responding to feature requests. Regression testing. Making and committing changes. Continuous integration.&nbsp;</li>",
      "ilo": "After completing this class, participants will be able to:&nbsp;<li>Understand the software development lifecycle and the role that software development plays in their organisation.&nbsp;</li><li>Understand the activities involved in and the differences between the major software development paradigms.&nbsp;</li><li>Demonstrate an appreciation of the main components of a software system and the tools and techniques used to manage these.&nbsp;</li><li>Understand the role and purpose of testing and the basic principles of test design.&nbsp;</li><li>Demonstrate practical competence in the application of testing tools.&nbsp;</li><li>Understand the concept of software maintenance/evolution and demonstrate an appreciation of how this managed within their organisation.&nbsp;</li>",
      "level": "1",
      "credits": "20"
    },
    "CS453 - Introduction to Artificial Intelligence": {
      "module_id": "CS453 - Introduction to Artificial Intelligence",
      "title": "CS453 - Introduction to Artificial Intelligence",
      "summary": "The aim of the class is to give learners a basic introduction to modern AI. Participants will develop a practical understanding of AI algorithms which enable autonomous systems to make rational decisions, AI systems which encompass a variety of such algorithms to achieve an overall goal, and the implementation of these in a suitable high-level programming language.",
      "content": "<li>What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.&nbsp;</li><li>Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).&nbsp;</li><li>Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.&nbsp;</li><li>Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.&nbsp;</li><li>Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing, Monte Carlo Tree Search.&nbsp;</li><li>Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches., PDDL (Planning Domain Definition Language).</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand and define the problem of AI as it relates to autonomous systems.&nbsp;</li><li>Implement key AI algorithms and build AI systems.&nbsp;</li><li>Apply search techniques to enable autonomous systems to choose actions that are appropriate to their goals.&nbsp;</li><li>Apply key techniques to adversarial problems, such as Mini-Max and Monte Carlo Tree search.&nbsp;</li><li>Define problems as planning problems using PDDL and solve them using a planner.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS424 - DTSP Work-Based Learning 3": {
      "module_id": "CS424 - DTSP Work-Based Learning 3",
      "title": "CS424 - DTSP Work-Based Learning 3",
      "summary": "This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies.&nbsp;",
      "content": "Participants will undertake the following.&nbsp;<li>Self-assessment (they will be asked to rate their performance with respect to a defined set of competencies).&nbsp;</li><li>Produce personal development plans.&nbsp;</li><li>Write reflective reports where they reflect upon tasks carried out at work, work-related events or courses that they have attended.</li><li>Produce evidence that they meet a set of competencies defined by a recognised professional body.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate reflective work practices.&nbsp;</li><li>Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;</li><li>Identify areas and strategies for self-improvement within a professional context.&nbsp;</li><li>Demonstrate their understanding and application of digital and technology solutions concepts within their work-place.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS354 - Computer Networks": {
      "module_id": "CS354 - Computer Networks",
      "title": "CS354 - Computer Networks",
      "summary": "The aim of this class is to equip participants with a knowledge and understanding of computer networking. Participants will gain a practical understanding of the topic via assessed programming assignments.",
      "content": "<li>Basic components of a computer network and their functions&nbsp;</li><li>Common communications protocols&nbsp;</li><li>TCP/IP Model&nbsp;</li><li>Client/Server communication (sockets)&nbsp;</li><li>Building a basic virtual network</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate a broad knowledge of the area of computer networking and its terminology.&nbsp;</li><li>Demonstrate an understanding of the operation of a range of networking protocols and devices.&nbsp;</li><li>Demonstrate an understanding of the TCP/IP model.&nbsp;</li><li>Demonstrate a broad knowledge of socket programming and the client/server model.&nbsp;</li><li>Design and implement a basic communications network in a virtual&nbsp;</li><li>environment.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS107 - Fundamentals of Computer Systems": {
      "module_id": "CS107 - Fundamentals of Computer Systems",
      "title": "CS107 - Fundamentals of Computer Systems",
      "summary": "To further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.",
      "content": "<li>Introduction to instruction set architecture, micro-architecture and system architecture.</li><li>Processor instruction set architecture: instruction types and formats, register sets, addressing modes.</li><li>Processor structures: memory-to-register architectures; load/store architectures; overview of Flynn\u2019s classification of computer architectures.</li><li>The relationship between low-level and high-level programming languages.</li><li>Instruction sequencing, flow-of-control, subroutine call and return mechanisms.</li><li>Low-level architectural support for high-level languages.</li><li>Low-level architectural support for operating systems.</li><li>Low-level architectural support for concurrency.</li><li>Memory: types of memory, overview of the memory hierarchy.</li><li>Input/Output: types of I/O; overview of common I/O devices and interfaces.</li><li>Networks: types of network; overview of common network standards, protocols, and interfaces.</li><li>Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments</li>",
      "ilo": "On completion of the class, a student should be able to:<li>Demonstrate their knowledge of data/number/information representations and the limitations of such representations.</li><li>Appreciate how a CPU may be constructed from combinational and sequential logic circuits.</li><li>Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.</li><li>Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.</li><li>Appreciate how conditional operations are implemented at the machine level.</li><li>Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.</li><li>Appreciate how an ISA has an impact on high-level languages and the design of compilers.</li><li>Understand the basic principles of operation of the memory, I/O and network subsystems of a typical computer.</li><li>Appreciate how future developments in computer systems may be influenced by current trends and technologies.</li>",
      "level": "1",
      "credits": "10"
    },
    "CS253 - Information and Data 2": {
      "module_id": "CS253 - Information and Data 2",
      "title": "CS253 - Information and Data 2",
      "summary": "The aim of the class is to provide participants with a conceptual and practical understanding of data modelling, database design and database technology. The class then builds on a basic understanding of the relational database approach, covering more complex SQL query design and efficient execution.",
      "content": "<li>Introduction to the Database Environment: functions of a database management system;&nbsp;</li><li>Entity Relationship modelling.&nbsp;</li><li>The Relational Data Model, relational algebra, integrity constraints.&nbsp;</li><li>Relational query languages.&nbsp;</li><li>Normalisation.&nbsp;</li><li>JDBC&nbsp;</li><li>NoSQL</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Show an appreciation of the facilities and services which should be provided by a fully featured database management system.&nbsp;</li><li>Demonstrate knowledge of commonly occurring data models.&nbsp;</li><li>Display knowledge of the process of designing a database system, starting from an informal specification.&nbsp;</li><li>Display skill in formulating database queries using SQL.&nbsp;</li><li>Demonstrate an ability to utilise triggers / stored procedures, and understand the importance of indexing.&nbsp;</li><li>Display knowledge of potential future developments in database technology.</li>",
      "level": "2",
      "credits": "20"
    },
    "CS549 - Distributed Information Systems": {
      "module_id": "CS549 - Distributed Information Systems",
      "title": "CS549 - Distributed Information Systems",
      "summary": "To help the student to an extended understanding of the deep technical issues underlying information systems in the particular context of distributing content over the world-wide web.",
      "content": "Topics to be selected from:<li>Review of the fundamental principles of database management systems.</li><li>Query processing and query optimisation.</li><li>Review of Multi-tier architectures and Internet applications, XML data, P2P data management.</li><li>The history of the Semantic Web. Syntactic vs semantic web. Ontologies.</li><li>The layered approach to the Semantic Web. XML, the tree model of XML documents, XML Schema</li><li>Querying XML documents, XPath.</li><li>RDF (Resource Description Framework). RDF Schema. RDF/S semantics.</li><li>Ontology engineering.</li><li>Query design in directed, labelled graphs with SPARQL.</li><li>Introduction to Description Logic.</li><li>Proof and Trust in the Semantic Web.</li><li>OWL</li><li>Web technologies including Web data mining and collaborative quality filtering.</li><li>Technology for developing countries.</li>",
      "ilo": "On completion of the class, a student should be able to (to the extent appropriate for an MEng graduate):<li>understand how to approach the design of a distributed global application and choose an appropriate technology for each of its components</li><li>appreciate the range of issues involved in the development and maintenance of an application that potentially involves access by many users but also may be updated by editors whose ability to change must be limited</li><li>demonstrate an ability to address through relevant implementation a range of the deep technical issues underlying the realisation of globally distributed information systems</li>",
      "level": "5",
      "credits": "20"
    },
    "CS409 - Software Architecture & Design": {
      "module_id": "CS409 - Software Architecture & Design",
      "title": "CS409 - Software Architecture &amp; Design",
      "summary": "<li>To enable students to understand the challenges of advanced software design and the issues associated with large-scale software architectures, frameworks and patterns.</li><li>To develop the students\u2019 understanding of the tools and techniques that may be used for the automatic analysis and evaluation of software.</li>",
      "content": "Software Design: Key design principles and heuristics and trade-offs between these.Design Patterns: history, principles and expectations. Ways of using patterns. Detailed study of a number of representative patterns.Software Architecture: why is architecture important? Classical architectural styles such as pipe and filter, data abstraction or OO based, event-based, etc.Programming Styles: Why are different programming styles important. Key programming styles such as: procedural, pipe and filter, event-driven, \u2026Frameworks: frameworks as reusable chunks of architecture, the framework lifecycle, development using frameworks, detailed study of some well-known frameworks (e.g. HotDraw).Major approaches to automated evaluation and analysis: dynamic analysis (e,g, testing, debugging, model inference, and visualisation) and static analysis (e.g. call and control graph extractions, metrics calculation, dataflow analysis, type systems, model checking, symbolic execution), and their application and limitations. Construction of tools to support such analysis.",
      "ilo": "On completion of the class, a student should be able to:<li>understand some of the challenging design issues that software engineers face and the trade-offs associated with the solutions to these.</li><li>understand the principles behind software patterns and be able to apply a number of the fundamental patterns</li><li>understand the need for software architecture and the principles of the classic architectural styles</li><li>understand the issues behind the construction and use of a software framework, and to be able to put this into practice</li><li>understand the major approaches to automated software analysis achievable through static and dynamic analysis</li><li>demonstrate practical competence in the application and construction of tools to support automated software analysis</li>",
      "level": "4",
      "credits": "20"
    },
    "CS119 - Problem Solving": {
      "module_id": "CS119 - Problem Solving",
      "title": "CS119 - Problem Solving",
      "summary": "The aim of the class is to provide participants with an understanding of how to decompose a problem into its component parts and abstract these parts to provide a solution. This skill is vital for computer programming.",
      "content": "<li>Algorithms and Problems: What are problems? What properties do algorithms have to have?&nbsp;</li><li>Categorise computer programs in terms of their inputs, outputs and process.&nbsp;</li><li>Break down problems using stepwise refinement. Learn how to communicate algorithms using pseudo code.&nbsp;</li><li>Design of algorithms to solve problems: Creation of test cases; Think like a computer; Flowcharts/pseudo code.</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>decompose a software engineering problem into its component parts.&nbsp;</li><li>abstract or generalise the constituent parts of a problem using pseudo-code/structured English and flowcharts.&nbsp;</li><li>demonstrate their understanding of algorithms.&nbsp;</li><li>create, test and communicate algorithms to solve problems.&nbsp;</li><li>demonstrate an understanding of the relative merits of top down and bottom up approaches to software design.&nbsp;</li>",
      "level": "1",
      "credits": "10"
    },
    "CS323 - Software Engineering for Digital and Technology Solutions": {
      "module_id": "CS323 - Software Engineering for Digital and Technology Solutions",
      "title": "CS323 - Software Engineering for Digital and Technology Solutions",
      "summary": "The aim of the class is to further the participants\u2019 skills and experience in the design and development of large-scale software systems.&nbsp;",
      "content": "<li>Software process and software process models: Predictive (e.g., waterfall) vs adaptive (e.g., iterative waterfall, spiral and agile methods).&nbsp;</li><li>Requirements Engineering: Elicitation, analysis, documentation and validation.&nbsp;&nbsp;</li><li>Object-Oriented Goals and Principles: Abstraction, Encapsulation, Inheritance, Coupling, Cohesion, Refactoring and Clean Code.&nbsp;</li><li>Object-Oriented Design: UML modelling (e.g., class and use case diagrams) and other Object-Oriented representation techniques (e.g., CRC Cards)&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understanding software processes and commonly used software process models.&nbsp;</li><li>Understanding requirements engineering and identifying functional and non-functional requirements.&nbsp;</li><li>Identifying the appropriate stakeholders and creating user stories.&nbsp;</li><li>Learning how to model the requirements of a system using UML (e.g. use cases and class diagrams).&nbsp;</li><li>Working as part of a team to analyse the requirements of a software system.&nbsp;</li>",
      "level": "3",
      "credits": "10"
    },
    "CS407 - Computer Security": {
      "module_id": "CS407 - Computer Security",
      "title": "CS407 - Computer Security",
      "summary": "The aim of this class is to provide students with the opportunity to develop a security mind-set by introducing them to core material in the area of computer security. This should enable students to identify potential threats and vulnerabilities for a range of situations, and propose appropriate actions to mitigate these issues.",
      "content": "The following syllabus is reflective of the types of topics which can be covered:<li>Secure communications: cryptography and steganography</li><li>Network security: an examination of the potential threats to network security such as packet sniffing; an examination of the corresponding mitigation techniques</li><li>Access control: an examination of the different approaches to user authentication and access control including topics such as alternative authentication</li><li>Human aspects of computer security: this is an ever important aspect of security \u2013 the class will explore how the user impacts security and examine why technical solutions are not the whole picture</li><li>Further \u2018hot\u2019 topics: for example malware \u2013 decomposing the structure of malware and antivirus approaches</li>",
      "ilo": "<li>compare and contrast secure communication solutions;</li><li>evaluate an existing or proposed system in terms of potential vulnerabilities and recommend the most appropriate security solution to apply;</li><li>summarise the key vulnerabilities, threats, and attacks with regards to network security and propose suitable approaches to mitigate these issues;</li><li>plan and implement an aspect of technical security such as log analysis.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS254 - Memory and Structure": {
      "module_id": "CS254 - Memory and Structure",
      "title": "CS254 - Memory and Structure",
      "summary": "The aim of the class is to develop the participant's understanding of a low-level programming language, its relationship with the underlying instruction set of the computer, and how data is organised within memory.&nbsp;",
      "content": "<li>Introduction to C &amp; Linux: Installing a POSIX environment and using Linux commands, C as a level between Assembly and Java, loops, arrays and scope.&nbsp;</li><li>Data organisation in memory: pointers, strings, structs and unions, representing objects.&nbsp;</li><li>Memory organisation for programs: Memory hierarchy, Stack and Heap Management, Main memory management, Virtual memory.&nbsp;</li><li>From C to the CPU: CPU organisation, Instruction Sets and Assembly, mapping C constructs to Assembly.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the relationship between a low-level programming language with respect to high level languages and assembly languages.&nbsp;</li><li>Understand how data is organised in memory.&nbsp;</li><li>Have a practical understanding of memory organisation and management within low-level programs.&nbsp;</li><li>Understand the mapping between low-level programs and the CPU.&nbsp;</li><li>Design and implement a low-level program.&nbsp;</li>",
      "level": "2",
      "credits": "10"
    },
    "CS426 - Human Centred Security": {
      "module_id": "CS426 - Human Centred Security",
      "title": "CS426 - Human Centred Security",
      "summary": "L Obj 1 : To understand the fundamental concepts of cyber security, with an emphasis on the human side of cyber securityL Obj 2 : To understand the influences on human decision making and how human behaviour can be changed, including the use of nudgesL Obj 3 : To be able to design an evidence-based intervention which improves the user\u2019s interaction with a security solutionL Obj 4 : To be able to write information security policies that accommodate the needs of humansL Obj 5 : To gain an appreciation of the entire socio-technical system within which users interact with security systemsL Obj 6 : To gain an appreciation of a range of social engineering techniques, and ways of ameliorating these",
      "content": "1. What is human-centred security? This will review the information provided by CS407 in greater detail.2. Human as solution in the cyber domain. This will discuss a systemic approach to cyber security \u2013 looking at social and organizational influences, and ways in which organizations can make the individual part of the solution rather than \u201cthe problem\u201d.3. Usable and Accessible Authentication. Here various alternative authentication mechanisms will be presented, together with their pro\u2019s and con\u2019s, as well as the principles of accessible authentication. An ontology of password best practice, as well as age-appropriate ontologies.4. Privacy: why privacy is so hard to get people to care about, the privacy paradox, how to help people to articulate their privacy rights. How we can teach children about their privacy rights. The ubiquity of IoT devices and their impact on privacy.5. Human Decision Making and Behaviour Change. People do not simply change their behaviour because they are told to. It is a process. This part of the course will present the various steps people take from action to inaction and the factors that encourage and deter change.6. Nudging to effect behaviour change, the use of fear appeals, the use of negative emotions in organizations.7. Security culture and social science approach to organizational cyber security. 8. Social Engineering Attacks \u2013 specifically a range of interventions that can be used to make users more resilient to these. This will include phishing, vishing, smishing, popups and various other ways that hackers use to deceive.9. Country-Level Cyber Security Strategies, including Cyber Diplomacy, cyber security strategy policies and responsibilization of citizens.10. Contemplating cyber security \u201cprocess\u201d in organisations, including the role of information security policies, considering how to write them, and how to support employees rather than coerce them.",
      "ilo": "This class will strengthen the security offering by making students more aware of human-centred security design",
      "level": "4",
      "credits": "20"
    },
    "CS412 - Information Access and Mining": {
      "module_id": "CS412 - Information Access and Mining",
      "title": "CS412 - Information Access and Mining",
      "summary": "This class will enable the student to understand the fundamentals of information access and information mining. The class will cover a range of techniques for extracting information from textual and non-textual resources, modelling the information content of resources, detecting patterns within information resources and making use of these patterns. It will focus particularly on unstructured textual information found on the web.",
      "content": "Introduction, Information Access, the Web and Electronic Archives, including commercial and non-commercial applications.Textual Information Storage &amp; Retrieval: indexing, querying, ranking and retrieval. Document analysis and representation. Information Retrieval models (e.g. Boolean, Vector Space, Probabilistic). Relevance feedback and clustering.Textual Information Filtering: machine learning and information access. Content-based and collaborative-based filtering.Image Retrieval: retrieval of images by semantic and visual features.Video Retrieval: video segmentation, representation, storage and retrieval. Document visualisation: presentation of multimedia retrieval results.Web search engines: indexing and retrieval of multimedia information on the Web. Structured document indexing and retrieval. Analysis of link connectivity.Information mining: detecting patterns within data. Techniques for information mining including clustering, classification, and association rule learning.&nbsp; Metrics for information mining.Applications of deep neural networks to natural language processing and computer vision.",
      "ilo": "On completion of the class, a student should be able:<li>to demonstrate a knowledge of the issues involved in representing information stored in electronic form, including text, images, video and speech</li><li>to demonstrate a knowledge of techniques for the access of information based on such representations</li><li>to demonstrate a knowledge of the broad range of techniques for evaluating information access systems</li><li>to demonstrate a knowledge of statistical and machine learning approaches for detecting patterns within information</li><li>to demonstrate a knowledge of the practical applications of large-scale information mining approaches</li><li>to demonstrate an awareness of the current challenges of constructing large-scale information access systems</li>",
      "level": "4",
      "credits": "20"
    },
    "CS274 - Work Based Learning 1": {
      "module_id": "CS274 - Work Based Learning 1",
      "title": "CS274 - Work Based Learning 1",
      "summary": "This class enables degree apprentices to demonstrate the application of aspects of their degree course within an industrial context, to record experience gained in the workplace and to develop their broader professional skills. This is achieved by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet appropriate professional competencies.",
      "content": "Participants will undertake the following.&nbsp;<li>Weekly journaling, providing the opportunity to capture their weekly work activities at a high level.</li><li>Self-assessment, where they will review their progress with respect to demonstration of a defined set of competencies.&nbsp;</li><li>Produce personal development plans that contain objectives to progress competencies identified as requiring development.</li><li>Produce&nbsp;evidence documenting workplace activities and upload it to an e-portfolio, clearly linking that evidence with a defined set of competencies.</li><li>Upload assets, such as reports and blogs, produced in other modules to their e-portfolio, clearly linking these assets with a defined set of competencies.&nbsp;<br>&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate reflective work practices.&nbsp;</li><li>Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;</li><li>Identify areas and strategies for self-improvement within a professional context.</li>",
      "level": "2",
      "credits": "10"
    },
    "CS455 - Individual Work-Based Project": {
      "module_id": "CS455 - Individual Work-Based Project",
      "title": "CS455 - Individual Work-Based Project",
      "summary": "This class aims to develop participants' project management skills and advance their practical understanding of software development within a work-related project. Participants are required to undertake a significant individual work-based project with minimal supervision in an area of IT that is relevant to their job role.",
      "content": "For British Computer Society accreditation, it is expected that within an undergraduate programme, students will undertake a major computing project, normally in their final year and normally as an individual activity, giving them the opportunity to demonstrate:&nbsp;<li>their ability to apply practical and analytical skills present in the programme as a whole&nbsp;</li><li>innovation and/or creativity&nbsp;</li><li>synthesis of information, ideas and practices to provide a quality solution together with an evaluation of that solution&nbsp;</li><li>that their project meets a real need in a wider context&nbsp;</li><li>the ability to self-manage a significant piece of work&nbsp;</li><li>critical self-evaluation of the process&nbsp;</li>During term 1, participants will identify a project in consultation with their line manager and academic supervisor. Once the project has been approved, work on the project will take place in terms 2 and 3.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Apply analytical and practical skills gained earlier in the programme.&nbsp;</li><li>Synthesise information, ideas and practice, to develop a quality solution.&nbsp;</li><li>Manage and execute a significant individual work-based project, with minimal supervision, within a field of IT agreed in discussion with the academic \u201cclient\u201d/supervisor and the learner\u2019s employer.&nbsp;</li><li>Communicate project progress, business and technical information, and project outcomes in oral and formal written format.&nbsp;</li><li>Critically evaluate the project process and outcomes.&nbsp;</li><li>Specify, design, test and implement solution(s) appropriate to the (project) task and business domain.&nbsp;</li>",
      "level": "4",
      "credits": "40"
    },
    "CS416 - Industrial Placement 1": {
      "module_id": "CS416 - Industrial Placement 1",
      "title": "CS416 - Industrial Placement 1",
      "summary": "To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires.",
      "content": "The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the MEng Computer Science degree, but if circumstances require it can be undertaken later in the course than the end of third year.<br>The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the work reported will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard.<br>&nbsp;",
      "ilo": "\u2022 to build on material acquired in the first three years of the degree course<br>\u2022 to work in industry as a member of an industrial team<br>\u2022 to pull together ideas from one or more of the classes they have undertaken<br>\u2022 to display a disciplined approach to good practices in the general area of the degree course<br>\u2022 to undertake independent working<br>&nbsp;",
      "level": "4",
      "credits": "20"
    },
    "CS101 - Topics in Computing 1": {
      "module_id": "CS101 - Topics in Computing 1",
      "title": "CS101 - Topics in Computing 1",
      "summary": "To help the student to develop a broader perspective of computer science and to develop problem solving, team working, presentational skills, as well as personal and professional development skills.",
      "content": "The class is based around a number (typically four) of group projects based on a variety of interesting challenges in computer science. Students work in teams to solve these with support from the teaching staff and present their results in a variety of formats (written reports, oral presentations, etc).",
      "ilo": "On completion of the class, a student should be able:<li>To appreciate the wider problems and challenges in computer science.</li><li>To appreciate the importance of working effectively as a team in solving problems.</li><li>To appreciate how to present effectively in written, oral and graphical form the results of investigations.</li><li>To use a variety of resources such as the University library, databases and the internet to find relevant material.</li><li>To appreciate the relationship between material from different computer science classes.</li>",
      "level": "1",
      "credits": "20"
    },
    "CS362 - Work Based Learning 2": {
      "module_id": "CS362 - Work Based Learning 2",
      "title": "CS362 - Work Based Learning 2",
      "summary": "This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, to record experience gained in the workplace and to develop their broader professional skills. This is achieved by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet appropriate professional competencies.",
      "content": "Participants will undertake the following.<li>weekly journalling, providing the opportunity to capture their weekly work activities at a high level.</li><li>self-assessment, where they will review their performance with respect to a defined set of competencies.</li><li>produce personal development plans that contain objectives to progress competencies identified as requiring development.</li><li>create evidence, in the form of short written task summaries, that they meet a set of competencies defined by a recognised professional body and clearly link evidence with competencies.</li>",
      "ilo": "On completion of this class, participants should be able to:<li>demonstrate reflective work practices.</li><li>demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.</li><li>identify areas and strategies for self-improvement within a professional context.</li>",
      "level": "3",
      "credits": "10"
    },
    "CS112 - Programming 1": {
      "module_id": "CS112 - Programming 1",
      "title": "CS112 - Programming 1",
      "summary": "The aim of the class is to give participants a solid foundation in Object-Oriented programming with Java which is probably the most widely used programming language.&nbsp;",
      "content": "<li>Introduction to Objects: Objects and Classes. Class Definition. Fields. Basic Types (int, char, bool) and Strings. Methods. Parameters. Return Types. Scope. Visibility. Object Interaction. Class and Object Diagrams.&nbsp;</li><li>Selection and Iteration. Conditional Statements. Boolean Expressions. For Loops. While Loops. Nested Loops. Switch Statement.&nbsp;</li><li>Collections Arrays. ArrayLists ArrayLists. HashMaps. HashSets. Java API. Iterators. Foreach Loop. Generic Collections.&nbsp;</li><li>Inheritance and Interfaces. Inheritance. Overriding. Static and Dynamic Types. Subtyping. Polymorphism. Type Substitution. Interfaces. Abstract Classes. Object Class&nbsp;</li><li>Input-Output and Error Handling. Console Reading and Writing. File Reading and Writing. Exceptions. Defensive Programming. Testing and Test-Driven Development. JUnit. Debugging.&nbsp;</li><li>Graphical User Interfaces (GUIs) GUI Components. GUI Layout. Event Handling.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Appreciate the role of a high-level language within the context of a computer system.&nbsp;</li><li>Understand the program development process.&nbsp;</li><li>Understand the principles of program design and demonstrate their practical application.&nbsp;</li><li>Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.&nbsp;</li><li>Demonstrate familiarity with a sophisticated interactive development environment (IDE).&nbsp;</li>",
      "level": "1",
      "credits": "30"
    },
    "CS459 - Digital Forensics": {
      "module_id": "CS459 - Digital Forensics",
      "title": "CS459 - Digital Forensics",
      "summary": "The aim of the class is to enable participants to understand issues associated with the nature of cybercrime, digital evidence, detection methods and proof, in a variety of digital forensic contexts, including computers, networks and portable digital devices.",
      "content": "Indicative topics&nbsp;<li>Context, Legal and Practical Considerations&nbsp;<ul><li>Cybercrime; Forensic process; Legal process and law enforcement; ACPO guidelines; Digital evidence; Incident response&nbsp;</li></ul></li><li>Computer Forensics&nbsp;<ul><li>File Systems (File system organisation, Memory, Registry, System logs); Disk imaging; Programs and their traces; Searching and analysis; Investigative tools (Open Source and Proprietary)&nbsp;</li></ul></li><li>Network Forensics&nbsp;<ul><li>Intrusion detection; Attack trace-back; Packet inspection; Log analysis&nbsp;</li></ul></li><li>Anti-Forensics and Hostile Code&nbsp;</li><li>Other topics&nbsp;<ul><li>Mobile devices, Virtual forensics&nbsp;</li></ul></li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the varieties and impact of cybercrime.&nbsp;</li><li>Understand how to undertake digital forensic examinations, where evidence is collected to support or oppose a hypothesis.&nbsp;</li><li>Understand the role of the file system in detecting and mapping user activity.&nbsp;</li><li>Understand network-based detection techniques.&nbsp;</li><li>Understand the nature of anti-forensics.&nbsp;</li>",
      "level": "4",
      "credits": "20"
    },
    "CS552 - Industrial Placement 2": {
      "module_id": "CS552 - Industrial Placement 2",
      "title": "CS552 - Industrial Placement 2",
      "summary": "To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires",
      "content": "The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the Computer Science MEng degree, but if circumstances require it can be undertaken later in the course than the end of third year.The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard.",
      "ilo": "On completion of the class, a student should be able:<li>to build on material acquired in the first three years of the degree course</li><li>to work in industry as a member of an industrial team</li><li>to pull together ideas from one or more of the classes they have undertaken</li><li>to display a disciplined approach to good practices in the general area of the degree course</li>to undertake independent writing and working",
      "level": "5",
      "credits": "20"
    },
    "CS427 - IBM IT Architectures": {
      "module_id": "CS427 - IBM IT Architectures",
      "title": "CS427 - IBM IT Architectures",
      "summary": "Make it possible for students to work with IBM IT architects and learn from industry experts.",
      "content": "- Meta level IT architecture patterns<br>- Developing an IT architecture within constraints<br>- What an IT architectect does all day<br>- Converting a requirements document to an IT architecture",
      "ilo": "<li>Appreciate the complexity of architecting IT systems</li><li>Be aware of standard IT architecture patterns and be able to apply them</li><li>Be able to present IT Architecture proposals to a \u201cclient\u201d</li><li>Be able to take a set of specifications and work within a team to architect an IT system to specification</li><li>Learn to present solutions to expert audience and accept constructive criticism</li><li>Working in a team to architect a system</li>",
      "level": "4",
      "credits": "20"
    },
    "CS547 - Advanced Topics in Software Engineering": {
      "module_id": "CS547 - Advanced Topics in Software Engineering",
      "title": "CS547 - Advanced Topics in Software Engineering",
      "summary": "To introduce students to a selection of recent advances in software engineering, along with some of the challenges and outstanding problems.The detailed aims of the class are:<li>To make students aware of key aspects of current software engineering research.</li><li>To familiarise students with the state-of-the-art in terms of what problems can be solved and what are the current exciting challenges.</li><li>To develop the necessary skills in students to allow them to contribute to the software engineering research community.</li><li>To equip students with the skills and background to appreciate the contributions to software engineering research across the full range of material presented at the key international conferences in the field.</li>",
      "content": "The material from the class will be drawn from recent major conferences in software engineering (e.g. ICSE, ICSM, ASE, RE) and journals (e.g. IEEE TSE, TOSEM, EMSE). The class will study a relatively small number of subjects in depth, and where possible develop, implement and evaluate solutions.The class also maintains a strong practical focus and students will be required to develop prototype tools to explore some of the topics covered in greater depth.",
      "ilo": "After completing this class students will be able to:<li>Recognise the limitations of current approaches and systems and identify unsolved problems in the field</li><li>Apply and or employ any implementations of recent developments (e.g. tools, languages, frameworks etc.)</li><li>Build prototype or proof of concept tools to demonstrate and/or evaluate recent developments</li><li>Read, review, and critically appraise software engineering research papers</li>",
      "level": "5",
      "credits": "20"
    },
    "CS456 - Cloud Computing": {
      "module_id": "CS456 - Cloud Computing",
      "title": "CS456 - Cloud Computing",
      "summary": "<li>Provide a good general overview of software development for cloud native applications.</li><li>Understand security considerations that are particular to cloud deployment and containerisation.</li><li>Develop and deploy applications locally and on the cloud.</li><li>Produce applications that include web services and functions as a service.</li><li>Use current practices around data serialisation using ORM and ODMs.</li>",
      "content": "<li>Cloud capabilities, billing and service costs, deploying an application to Azure.</li><li>Virtual machines and containers.</li><li>Serialisation (ORM, ODM), database connections and databases on the cloud.</li><li>Web services and containerised web services.</li><li>DevOps on the cloud.</li><li>Containerised web services on the cloud.</li><li>Container orchestration using Kubernetes.</li><li>Security considerations of cloud deployments and of containers.</li><li>Functions as a service, locally and on the cloud.</li><li>Microservices and communication buses.</li><li>Cloud hosted analytics and Internet of Things services.</li>",
      "ilo": "<li>Students understand modern serialisation practices (ORM, ODM).</li><li>Students are aware of costs, roles and policy settings that can be used to deploy cloud hosted applications safely.</li><li>Students have a broad understanding of how to deploy scaleable applications onto a cloud platform.</li><li>Students understand containerisation, container orchestration and security considerations.</li><li>Students understand DevOps processes on the cloud.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS415 - Industrial Placement": {
      "module_id": "CS415 - Industrial Placement",
      "title": "CS415 - Industrial Placement",
      "summary": "To enable the student to experience the application of aspects of their degree course in an industrial context and so to understand the complexities of commercial software development.",
      "content": "The period of industrial placement lasts for approximately twelve months; students are expected during their fourth year to take an active part, in cooperation with the placement coordinators, in securing an appropriate placement. If, after displaying due diligence, students are unable to secure any form of suitable external placement then arrangements will be found within the University or, alternatively and probably more likely, transfer to the Honours degree in Computer Science can be arranged.<br>The nature of the work undertaken will vary substantially; it is expected that the majority of the students (like those on industrial placement for related degrees) will find placements where they will be working close to the frontiers of what is presently achievable. It is also expected that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard.<br>&nbsp;",
      "ilo": "<li>to build on and consolidate material acquired in the first three years of the degree course</li><li>to work in industry as a member of an industrial team</li><li>to undertake independent writing and working</li><li>to display an appreciation of good practices in software engineering</li>",
      "level": "4",
      "credits": "20"
    },
    "CS276 - Software Engineering Principles for Businesss": {
      "module_id": "CS276 - Software Engineering Principles for Businesss",
      "title": "CS276 - Software Engineering Principles for Businesss",
      "summary": "The aim of the class is to further the participants\u2019 skills and experience in the design and development of large-scale software systems.",
      "content": "<li>Software process and software process models: Predictive (e.g., waterfall) vs adaptive (e.g., iterative waterfall, spiral and agile methods).</li><li>Requirements Engineering: Elicitation, analysis, documentation and validation.</li><li>Object-Oriented Goals and Principles: Abstraction, Encapsulation, Inheritance, Coupling, Cohesion, Refactoring and Clean Code.</li><li>Object-Oriented Design: UML modelling (e.g., class and use case diagrams) and other Object-Oriented representation techniques (e.g., CRC Cards).</li>",
      "ilo": "On completion of this class, participants should be able to:<li>understand software processes and commonly used software process models.</li><li>understand requirements engineering and identifying functional and non-functional requirements.</li><li>identify the appropriate stakeholders and creating user stories.</li><li>model the requirements of a system using UML (e.g. use cases and class diagrams).</li><li>work as part of a team to analyse the requirements of a software system.</li>",
      "level": "2",
      "credits": "10"
    },
    "CS357 - Integrated Project 3": {
      "module_id": "CS357 - Integrated Project 3",
      "title": "CS357 - Integrated Project 3",
      "summary": "This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies.",
      "content": "Apprentices will undertake the following.&nbsp;<li>A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;</li><li>Work-based learning which includes:&nbsp;<ul><li>Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;</li><li>Producing personal development plans&nbsp;</li><li>Writing weekly journal entries where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;</li><li>Producing evidence that they meet a set of competencies defined by a recognised professional body.&nbsp;</li></ul></li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate their understanding and application of good software development practices within their work place.&nbsp;</li><li>Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;</li><li>Present their work effectively (e.g. through oral presentations, written reports).&nbsp;</li><li>Demonstrate reflective work practices.&nbsp;</li><li>Identify areas and strategies for self-improvement within a professional context.&nbsp;</li><li>Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.</li>",
      "level": "3",
      "credits": "30"
    },
    "CS105 - Programming Foundations": {
      "module_id": "CS105 - Programming Foundations",
      "title": "CS105 - Programming Foundations",
      "summary": "To provide the student with a solid foundation in the principles of computer programming. On completing this class the student should have the necessary skills to be able to design, build and test a small system in a high-level language (Java in the current incarnation of the class).",
      "content": "The class aims to provide a good grounding in the basics of programming. An \u201cobjects-first\u201d approach means that proper object-oriented programming concepts can be emphasised and explored from day one. The course is iterative, concept-based and project-driven \u2013 it covers the important programming ideas via a number of projects and extensive hands-on exercises. It does not attempt to provide a complete coverage of the language, but aims to introduce the basics which are then built on in later classes.Main topics covered:-<li>Background: Introduction to the purpose of high level languages and the development and compilation process.</li><li>The fundamental concepts of programming:<ul><li>Key concepts of objects, classes, methods, parameters, data types etc.</li><li>Defining classes \u2013 fields, constructors, methods, parameters, assignment.</li><li>Defining methods \u2013 local variables, blocks, control structures (conditionals and loops).</li><li>Inter- and intra- object communication \u2013 object references, method calls, parameter passing, return values etc.</li><li>Collections of objects \u2013 arrays, arraylists (e.g.), iterators.</li><li>Abstraction mechanisms: Library classes and the API \u2013 introduction to the API, documentation, use of key library classes.</li><li>Abstract data types \u2013 commonly used types such as Map, Set etc.</li><li>More abstraction mechanisms \u2013 inheritance, interfaces, sub typing, polymorphism etc.</li><li>External communication \u2013 e.g. input and output, GUIs, file handling and exceptions.</li></ul></li><li>Principles of program design and testing: Documentation (e.g. javadoc), basic testing principles, test automation using tools such as the xUnit family, debugging, basic Class diagrams.</li><li>Development environments: Initially the class makes use of a relatively simple and supportive environment (such as BlueJ) to illustrate and emphasise the key concepts (classes, objects, method calls etc.) and support easy development. As the course progresses it will make greater use of a more sophisticated environment (such as Eclipse) that is also of use in the subsequent years of the course.</li>",
      "ilo": "On completion of the class, a student should be able to:<li>Understand the program development process.</li><li>Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.</li><li>Demonstrate familiarity with a sophisticated interactive development environment (IDE).</li>",
      "level": "1",
      "credits": "20"
    },
    "CS272 - Introduction to Computer Networks": {
      "module_id": "CS272 - Introduction to Computer Networks",
      "title": "CS272 - Introduction to Computer Networks",
      "summary": "The aim of this class is to equip participants with knowledge and understanding of computer networking. Participants will gain a practical understanding of the topic via assessed programming assignments.",
      "content": "The class aims to provide a good grounding in the basics of computer networking. It provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.<br><br>It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.<br><br>Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas:<li>The role of web services for tactical battlefield communications</li><li>Adaptive, user experience driven video streaming in 5G mobile networks</li><li>Autonomous network management in virtualised, software defined networks</li>",
      "ilo": "On completion of this class, participants will be able to:<li>demonstrate a broad knowledge of the area of computer networking and its terminology.</li><li>demonstrate an understanding of the operation of a range of networking protocols and devices.</li><li>demonstrate an understanding of the TCP/IP model.</li><li>demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks).</li>",
      "level": "2",
      "credits": "10"
    },
    "CS317 - Mobile App Development": {
      "module_id": "CS317 - Mobile App Development",
      "title": "CS317 - Mobile App Development",
      "summary": "Students should gain a good understanding of the issues in developing for mobile environments, approaches to handling these issues and skills in developing for a widespread mobile platform.",
      "content": "Mobile Graphical User Interfaces (Application lifecycle, Event-based programming, defining flexible screen layouts, linking code with resources, Model-View-Controller design; permissions and app security); Data Storage on Mobile Devices (local databases, local files, settings); Networking (data exchange standards, designing for highly unstable networks, synchronisation); Mobile 2D Graphics (screen graphical elements, 2D standards, animation); Mobile 3D Graphics (Computer graphics 3D modelling and lighting, 3D standards); Linking to other phone services (sending texts and emails, showing maps); Sensors (typical range of sensors, location input, accelerometer input, approaches to handling sensor input, smoothing sensor data); Mobile Large Data Solutions (crowd sourcing and data sharing); Mobile Interaction Techniques (user experience vs usability, mobile interface guidelines, novel interaction approaches). Legal aspects of mobile computing and future directions. Alternative platforms and development environments and frameworks.",
      "ilo": "On completion of the class, a student should:<li>understand the special nature of mobile app development.</li><li>understand and be able to develop graphical user interfaces for mobile apps.</li><li>understand networking requirements/challenges for mobile app development and be able to understand and develop solutions.</li><li>understand and be able to develop 2D and 3D graphics as appropriate for mobiles.</li><li>have an awareness of research into advanced interaction techniques for mobiles</li>Transferable Skills and Cognitive Ability Learning Outcomes:<li>To strengthen a student\u2019s programming ability in environments with large APIs.</li><li>To strengthen a student\u2019s programming ability in unstable situations.</li><li>To build team-development skills.</li><li>To build skills in working with a common mobile platform.</li>",
      "level": "3",
      "credits": "20"
    },
    "CS251 - Programming 2": {
      "module_id": "CS251 - Programming 2",
      "title": "CS251 - Programming 2",
      "summary": "The aim of the class is to further participants\u2019 skills in object-oriented programming, provide knowledge of key abstract data types along with their implementation and usage, and to provide experience in the development of larger scale software. The main goal is for participants to be able to develop larger programs with specialised data structures and utilising APIs from a specification. Participants will also gain an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types.",
      "content": "The class will begin with a short revision of the concepts covered during year 1, CS112 Programming 1, e.g. Java basics, base types, objects, special types, selection, iteration, input/output, object-oriented design, inheritance, interfaces, abstract classes, exceptions.&nbsp;&nbsp;The following topics will then be covered.&nbsp;<li>ADTs: Lists, Stacks, Queues, Sets, Trees, Graphs, Maps. Collections. Generics. Iterators.&nbsp;</li><li>Algorithms: Searching and Sorting. Graph Traversal Algorithms.&nbsp;</li><li>Efficiency and Complexity of Algorithms and Data Structures.&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand and be able to implement a range of fundamental abstract data types.&nbsp;</li><li>Understand a number of essential algorithms that are closely associated with these data types.&nbsp;</li><li>Use these algorithms and abstract data types in practical applications.&nbsp;</li><li>Make a critical assessment of the performance of different implementations of algorithms and abstract data types.&nbsp;</li><li>Appreciate a number of fundamental computational problems, and be aware of real-world instances of those problems.</li>",
      "level": "2",
      "credits": "30"
    },
    "CS454 - Fundamentals of Cyber Security": {
      "module_id": "CS454 - Fundamentals of Cyber Security",
      "title": "CS454 - Fundamentals of Cyber Security",
      "summary": "The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice.&nbsp;",
      "content": "Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp;",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Compare and contrast secure communication solutions.</li><li>Evaluate an existing or proposed system in terms of potential vulnerabilities and recommend the most appropriate security solution to apply.</li><li>Summarise the key vulnerabilities, threats, and attacks with regards to network security and propose suitable approaches to mitigate these issues.</li><li>Plan and implement an aspect of technical security such as log analysis.</li>",
      "level": "4",
      "credits": "20"
    },
    "CS121 - Programming with Python": {
      "module_id": "CS121 - Programming with Python",
      "title": "CS121 - Programming with Python",
      "summary": "The aim of this class is to introduce students to basic coding skills, enable them to gain an understanding of basic principles and develop basic competence in programming in a modern industry standard programming language.",
      "content": "<li>Simple data types (numbers, strings, simple list data structures and booleans)&nbsp;</li><li>Simple operators (assignment, arithmetic and string manipulation)&nbsp;</li><li>Control flow (conditional and iteration)&nbsp;</li><li>Manipulating simple data structures (lists, sets, and dictionaries)&nbsp;</li><li>Structuring code (functions)&nbsp;</li><li>Error handing&nbsp;</li><li>Objects&nbsp;</li><li>Library classes and Documentation&nbsp;</li><li>Testing and Debugging&nbsp;</li><li>Input/Output</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>understand simple data elements and basic data structures of the Python programming language.&nbsp;</li><li>understand main control and flow structures of the Python programming language.&nbsp;</li><li>understand and be able to develop programs using the Python programming language.&nbsp;</li><li>understand and be able to use objects in the Python programming language.&nbsp;</li><li>translate a specification for a moderately difficult real-world problem into a working python program which provides a solution to the problem posed.&nbsp;</li>",
      "level": "1",
      "credits": "30"
    },
    "CS208 - Logic & Algorithms": {
      "module_id": "CS208 - Logic & Algorithms",
      "title": "CS208 - Logic &amp; Algorithms",
      "summary": "To equip students with the tools to model and measure computation. To build on CS103 Machines, Languages and Computation and develop further understanding of the mathematical foundations of computation. To foster an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types.",
      "content": "First Semester:<li>Propositional Logic revisited: natural deduction systems; translation between real and formal domains; inference, proofs, axioms; equivalence of systems</li><li>Formal Systems and Interpreted Formal Systems: language, inference and interpretation, syntax and semantics, satisfaction, soundness, completeness</li><li>Predicate Logic: predicates, universal and existential quantification; generalisation, specialisation by symbolic substitution; awareness of free variables, bound variables, and alpha-equivalence</li><li>Relations: relations as predicates, relations as graphs; equivalence relations, preorders, partial orders; functions and partial functions as special cases of relations; simple logic (Prolog) programming as proof search</li><li>Models of Computation: simple abstract machines, Turing machines, expression evaluation, lambda-calculus reduction, imperative execution, correspondence between models of equivalent strength, the Church-Turing thesis</li>Second Semester:<li>Algorithms: algorithms and processes; iteration and recursion, studied comparatively; preconditions, postconditions, and invariants; specification as relation between inputs and outputs</li><li>Introduction to Algorithmic Complexity: basic algorithmic classification, with examples; the order notation (Big-oh); elementary complexity and estimation of run times; the tyranny of growth</li><li>Searching and Sorting: the complexity of a range of techniques, including the divide and conquer approach; the relative complexity of searching and sorting algorithms; the sorting algorithms covered will include bubble sort, insertion sort, merge sort and quick sort; searching, including sequential search and the binary chop; hashing</li><li>Binary Trees revisited: implementations by array and by nodes with pointers; expression trees; binary tree implementation of sorted list; algorithms covered include traversal, searching, balancing and deletion; awareness of ordering and balancing invariants and their implications for correctness and complexity</li><li>Graphs revisited: directed and undirected graphs; representations of graphs; basic graph algorithms; topological sorting; applications of graphs to real world problems (for example telecommunications, transportation systems, dependencies between objects)</li><li>Complexity Implications of ADT Implementation: e.g. for priority queues, graphs; access times</li><li>Fundamental Techniques: divide and conquer, greedy algorithms, dynamic programming, backtracking search</li><li>Additional Problems, Algorithms and Techniques: as selected by class lecturers</li><li>Practical Work: Further exploration of algorithms and abstract data types, empirical evaluation of performance, one or two larger scale exercises.</li>",
      "ilo": "On completion of the class, a student should be able:<li>to understand a mathematical basis for a simple natural deduction system and perform rigorous proof construction given a well-defined framework</li><li>to work confidently with propositional logic in a natural deduction setting and develop an understanding of predicate logic</li><li>to understand the concept of an interpreted formal system, along with the concepts of soundness and completeness in this context</li><li>to have a good understanding of the Church-Turing thesis and the general concept of computation, making correlations between different models of computation, e.g., lambda calculus, Turing machines, Hoare\u2019s IMP</li><li>to appreciate the concepts of logical invariant, precondition and postcondition, with respect to data structures and algorithms</li><li>to study a number of fundamental algorithms, including in particular the fundamental algorithms of searching and sorting, identifying the invariants on which they rely</li><li>to make a critical assessment of different implementations of algorithms and abstract data types</li><li>to carry out a number of empirical studies of the performance of algorithms and abstract data types</li><li>to appreciate a number of fundamental computational problems, and be aware of real world instances of those problems</li>",
      "level": "2",
      "credits": "20"
    },
    "CS259 - Quantitative Methods in Computer Science": {
      "module_id": "CS259 - Quantitative Methods in Computer Science",
      "title": "CS259 - Quantitative Methods in Computer Science",
      "summary": "The class will teach the quantitative and numerical methods needed through practical examples. Teaching these methods through practical examples will both show the relevance of the methods being taught and strengthen the programming skills of the students in this important area.To teach the quantitative and numerical methods that underpin modern Computer Science, such as (but not restricted to) Artificial Intelligence and Data Analytics. The class will also provide students with the numerical methods needed to perform quantitative evaluations of algorithms and software.L Obj 1 : to understand and use linear algebra techniques as used in modern AI and data analytics: scalars, vectors, matrices, tensorsL Obj 2 : to understand multivariate calculus techniques as used in modern AI and data analytics: derivatives, gradients, integrals, convex optimisationL Obj 3 : to understand and apply probability theory as used in modern AI and data analytics: randomness, probability distributions, variance and expectation, expected valueL Obj 4 : understand and apply statistical techniques as used modern AI, data analytics and quantitative evaluation of software and algorithms: basic data analysis, significance tests, basic Bayesian statistics",
      "content": "1. Linear algebra notation is used in Machine Learning to describe the parameters and structure of different machine learning algorithms. This makes linear algebra a necessity to understand how neural networks are put together and how they are operating. This part of the course will cover:<li>Scalars, Vectors, Matrices, Tensors</li><li>Matrix Norms</li><li>Special Matrices and Vectors</li><li>Eigenvalues and Eigenvectors</li>2. Multivariate calculus is used to supplement the learning part of machine learning. It is what is used to learn from examples, update the parameters of different models and improve the performance. This part of the course will cover:<li>Derivatives</li><li>Integrals</li><li>Gradients</li><li>Differential Operators</li><li>Convex Optimization</li>3. Probability: probability used to make assumptions about the underlying data when we are designing these deep learning or AI algorithms. It is important for us to understand the key probability distributions, and we will cover it in depth in this course. This part of the course will cover:<li>Elements of Probability</li><li>Random Variables</li><li>Distributions</li><li>Variance and Expectation</li><li>Special Random Variables</li>4. Statistics: statistical methods are used in AI to analyse data and quantify the performance of agents.&nbsp; &nbsp; Statistical concepts: mean, standard deviation, variance, confidence intervals.&nbsp; &nbsp; Statistical methods for data analytics&nbsp; &nbsp; Use of statistics in performance measurement&nbsp; &nbsp; Introduction to Bayesian methods",
      "ilo": "L Out 1 : ability to apply basic data analysis to a range of problems in Computer Science and Software Engineering.L Out 2:L Out 3:L Out 4:",
      "level": "2",
      "credits": "10"
    },
    "CS358 - Introduction to C Programming": {
      "module_id": "CS358 - Introduction to C Programming",
      "title": "CS358 - Introduction to C Programming",
      "summary": "The aim of the class is to develop the participant's understanding of a low-level programming language, its relationship with the underlying instruction set of the computer, and how data is organised within memory.&nbsp;",
      "content": "<li>Introduction to C &amp; Linux: Installing a POSIX environment and using Linux commands, C as a level between Assembly and Java, loops, arrays and scope&nbsp;</li><li>Data organisation in memory: pointers, strings, structs and unions, representing objects&nbsp;</li><li>Memory organisation for programs: Memory hierarchy, Stack and Heap Management, Main memory management, Virtual memory&nbsp;</li><li>From C to the CPU: CPU organization, Instruction Sets and Assembly, mapping C constructs to Assembly&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the fundamentals of C programming.&nbsp;</li><li>Understand the role of low-level programming and its relationship with high-level languages and Instruction Set Architectures.&nbsp;</li><li>Have a practical understanding of how data is organised in memory.&nbsp;</li><li>Understand memory organisation and management within low-level programs.&nbsp;</li><li>Design and implement a low-level program.</li>",
      "level": "3",
      "credits": "20"
    },
    "CS452 - Developing Cross-Platform Apps for Mobile Devices": {
      "module_id": "CS452 - Developing Cross-Platform Apps for Mobile Devices",
      "title": "CS452 - Developing Cross-Platform Apps for Mobile Devices",
      "summary": "The aim of the class is to equip participants with the knowledge and skills to build cross-platform native mobile apps which can run on both iOS and Android devices using declarative and component-based JavaScript libraries.",
      "content": "Indicative class syllabus:&nbsp;<li>JavaScript: advanced JavaScript concepts (ES6 and beyond) such as arrow functions, exporting and importing modules, spread operator and rest parameters, destructing and promises.&nbsp;</li><li>React: the underlying reasons for using declarative JavaScript libraries; the essential React concepts for building user interfaces.&nbsp;</li><li>Developing mobile apps using React Native: core React Native topics such as responsiveness, navigation, using native device features (such as the camera, Geolocation and notifications), authentication, asynchronous HTTP requests and managing the app\u2019s state; the app\u2019s deployment and the automated over the air (OTA) updates of mobile apps.</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Demonstrate a deep understanding of advanced JavaScript topics (ES6 and beyond).&nbsp;</li><li>Demonstrate an understanding of declarative and component-based programming.&nbsp;</li><li>Use declarative JavaScript libraries (such as React) for building user interfaces.&nbsp;</li><li>Design and implement cross-platform (iOS and Android) apps for mobile devices.&nbsp;</li><li>Manage an app\u2019s state and use native device features (e.g. camera and Geolocation).&nbsp;</li><li>Deploy and automatically update mobile apps.&nbsp;</li>",
      "level": "4",
      "credits": "20"
    },
    "CS356 - Group Project": {
      "module_id": "CS356 - Group Project",
      "title": "CS356 - Group Project",
      "summary": "To extend and deepen the participant's understanding of the analysis, design and implementation of a medium-sized software system; to provide further experience in the activity of designing and implementing non-trivial systems; and to enable the participant to demonstrate practical competence in a group environment.&nbsp;",
      "content": "Participants will undertake a group project which enables them to apply the knowledge and skills gained in the classes CS351 Programming 3, CS353 Fundamentals of Data Analytics, CS354 Computer Networks, CS355 User-Centred Design, and CS352 Software Engineering 3.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the need for working effectively within a team environment on practical software engineering problems, including planning and managing a group\u2019s workload.&nbsp;</li><li>Appreciate the importance of organisation, management and professionalism in the development of large-scale software.&nbsp;</li><li>Analyse, design, implement, verify and validate a medium-sized software system.&nbsp;</li><li>Effectively employ a range of software development tools e.g. IDEs, configuration management, version control, testing and issue tracking tools.&nbsp;</li><li>Display a disciplined approach to good practices in the general area of software engineering, and to apply software engineering techniques to practical problems.&nbsp;</li>",
      "level": "3",
      "credits": "15"
    },
    "CS425 - Synoptic Project": {
      "module_id": "CS425 - Synoptic Project",
      "title": "CS425 - Synoptic Project",
      "summary": "This class aims to develop participants' project management skills and advance their practical understanding of software development within a work-related project. Participants are required to undertake a significant individual work-based project with minimal supervision in an area of IT that is relevant to their job role.",
      "content": "For British Computer Society accreditation, it is expected that within an undergraduate programme, students will undertake a major computing project, normally in their final year and normally as an individual activity, giving them the opportunity to demonstrate:&nbsp;<li>their ability to apply practical and analytical skills present in the programme as a whole&nbsp;</li><li>innovation and/or creativity&nbsp;</li><li>synthesis of information, ideas and practices to provide a quality solution together with an evaluation of that solution&nbsp;</li><li>that their project meets a real need in a wider context&nbsp;</li><li>the ability to self-manage a significant piece of work&nbsp;</li><li>critical self-evaluation of the process&nbsp;</li>During term 1, participants will identify a project in consultation with their line manager and academic supervisor and produce a draft scope followed by the final scope. Project delivery will take place in terms 2 and 3. A report will be submitted at the end of term 3 followed by and End Point Assessment presentation.",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Apply analytical and practical skills gained earlier in the programme.&nbsp;</li><li>Synthesise information, ideas and practice, to develop a quality solution.&nbsp;</li><li>Manage and execute a significant individual work-based project, with minimal supervision, within a field of IT agreed in discussion with the academic supervisor and the participant\u2019s employer.&nbsp;</li><li>Communicate project progress, business and technical information, and project outcomes in oral and formal written format.&nbsp;</li><li>Critically evaluate the project process and outcomes.&nbsp;</li><li>Specify, design, test and implement solution(s) appropriate to the (project) task and business domain.&nbsp;</li>",
      "level": "4",
      "credits": "60"
    },
    "CS256 - Integrated Project 2": {
      "module_id": "CS256 - Integrated Project 2",
      "title": "CS256 - Integrated Project 2",
      "summary": "This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies.",
      "content": "Apprentices will undertake the following.&nbsp;<li>A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;</li><li>Work-based learning which includes:&nbsp;<ul><li>Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;</li><li>Producing personal development plans.&nbsp;</li><li>Maintaining a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;</li><li>Producing evidence that they meet a set of competencies defined by a recognised professional body.</li></ul></li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Display an understanding and application of good software development practices within their work place.&nbsp;</li><li>Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;</li><li>Present their work effectively (e.g. through oral presentations, written reports).&nbsp;</li><li>Demonstrate reflective work practices.&nbsp;</li><li>Identify areas and strategies for self-improvement within a professional context.&nbsp;</li><li>Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.</li>",
      "level": "2",
      "credits": "30"
    },
    "CS252 - Software Engineering 2": {
      "module_id": "CS252 - Software Engineering 2",
      "title": "CS252 - Software Engineering 2",
      "summary": "The aim of the class is to further the participants\u2019 skills and experience in the design, development and testing of larger scale software systems.",
      "content": "<li>Object-Oriented Analysis and Design: Requirements Analysis and Requirements Modelling, Feature Lists, Use Cases, Class Diagrams and other OO Model Representations. Modelling Techniques e.g. Mapping Use Cases to Designs, CRC Cards.&nbsp;</li><li>Design Principles: Coupling, Cohesion, Refactoring, Clean Code (OCP, DRY, SRP, LSP), Introduction to Design Patterns.&nbsp;</li><li>Project Management and Process Models: Agile, Traditional, Management Issues, Management Techniques, etc.&nbsp;</li><li>Testing in the Large: Test-driven development, Multi-Class Testing, System Testing, Mocking, Testing Frameworks e.g. JUnit.&nbsp;</li><li>Software in the Large Tools: Build, Deployment, Testing, Version Control (e.g. Git), etc.&nbsp;</li><li>Software Maintenance: Issues and Techniques, Bug Fixing, Feature Addition, etc.</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Produce a design by identifying, from a requirements specification, necessary classes, their relationships, and their interactions.&nbsp;</li><li>Implement a given design and verify and validate the implementation.&nbsp;</li><li>Be familiar with the main tools and technologies used to support the development and management of software systems.&nbsp;</li><li>Work as part of a team to design, build, test and deliver a software system.&nbsp;</li><li>Understand the key components involved in designing, building and testing a software system.&nbsp;</li>",
      "level": "2",
      "credits": "20"
    },
    "CS316 - Functional Programming": {
      "module_id": "CS316 - Functional Programming",
      "title": "CS316 - Functional Programming",
      "summary": "To provide the student with skills in basic functional programming and experience in integrated deployment of those skills.",
      "content": "Core topics in the Haskell programming language are: Basic functions; Haskell\u2019s built in data types; if expressions; case expressions; guarded functions; local definitions; pattern matching; list processing with built-in functions; recursion; polymorphism; anonymous functions; first-class functions; algebraic data types including recursive and polymorphic such types; standard type classes; monadic-style input/output.The course will conclude with substantial integrative project work (e.g. a lexer-parser-interpreter and/or turtle graphics).",
      "ilo": "On completion of the class, a student should be able:<li>To understand the basic advantages of high-level programming languages.</li><li>To understand the basic advantages of using mathematics to structure programming.</li><li>To understand the basic principles of functional program design and demonstrate their practical application.</li><li>To specify and implement simple functional programs in the programming language Haskell.</li><li>To integrate the basic techniques of functional programming in a substantial project.</li>",
      "level": "3",
      "credits": "20"
    },
    "CS209 - User & Data Modelling": {
      "module_id": "CS209 - User & Data Modelling",
      "title": "CS209 - User &amp; Data Modelling",
      "summary": "To provide the student with a critical appreciation and understanding of how to model user activities and the data to support them, together with how to implement systems and databases to support user activities.",
      "content": "<li>Introduction to the Database Environment: functions of a database management system; data dictionary systems; database administration. Entity Relationship modelling. The Relational Data Model and its Implementations: relational query languages; normalisation. Object oriented, object relational and other data models. Distributed databases. Indexing. Web databases.</li><li>Modelling user requirements; human perceptual, cognitive and motor skills; communication theories; dialogue guidelines; screen design; input/output manipulation; dialogue specification techniques; iterative interface prototyping; accessibility. Formative and summative evaluation methods; experimental design and analysis. Case studies.</li>",
      "ilo": "On completion of this class, a student should be able to:<li>Design, using suitable annotations, models for human tasks, system interactions, data and database systems;</li><li>Design and conduct a range of usability evaluation methods;</li><li>Appreciate the importance of user-centred design and of key aspects of human psychology and physiology for interactive systems design;</li><li>Critique systems for their usability using a range of criteria;</li><li>Design and implement a database system, starting from an informal specification through implementation in a relational database management system to querying in SQL;</li><li>To show an appreciation of the facilities and services which should be provided by a fully featured database management system;</li><li>To demonstrate knowledge of commonly occurring data models;</li><li>To display knowledge of potential future developments in database and interactive system technology</li>",
      "level": "2",
      "credits": "20"
    },
    "CS367 - Introduction to Cyber Security": {
      "module_id": "CS367 - Introduction to Cyber Security",
      "title": "CS367 - Introduction to Cyber Security",
      "summary": "To develop a security mindset by exploring fundamental elements of cyber security",
      "content": "Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.",
      "ilo": "On completion of the class, participants will be able to:1. Identify and assess threats for a given context.2. Evaluate an existing or proposed system in terms of potential vulnerabilities and argue appropriate mitigation techniques for a given context.3. Compare and contrast aspects of managing cyber security such as cyber security frameworks.4. Contribute to risk assessment in a cyber security context.",
      "level": "3",
      "credits": "20"
    },
    "CS457 - Machine Learning": {
      "module_id": "CS457 - Machine Learning",
      "title": "CS457 - Machine Learning",
      "summary": "The aim of this class is to equip participants with a sound understanding of the principles of Machine Learning and a range of popular approaches, along with the knowledge of how and when to apply the techniques. The class balances a solid theoretical knowledge of the techniques with practical application via Python (and associated libraries).&nbsp;",
      "content": "Indicative topics:&nbsp;<li>Machine learning basics&nbsp;</li><li>Overview of the machine learning process&nbsp;</li><li>Classifiers and classification measures&nbsp;</li><li>Training models&nbsp;</li><li>Support Vector Machines&nbsp;</li><li>Decision trees&nbsp;</li><li>Ensemble Learning&nbsp;</li><li>Dimensionality Reduction (Principal Components Analysis)&nbsp;</li><li>Introduction to Neural Networks&nbsp;</li><li>Perceptrons and Artificial Neural Networks&nbsp;</li><li>Backpropagation and Network Training&nbsp;</li><li>Multi-layer and Deep Neural Networks&nbsp;</li><li>Convolutional Neural Networks&nbsp;</li><li>Recurrent Neural Networks&nbsp;</li>",
      "ilo": "After completing this class participants will be able to:&nbsp;<li>Understand the aims and fundamental principles of Machine Learning.&nbsp;</li><li>Understand a range of the essential core algorithms and approaches to Machine Learning.&nbsp;</li><li>Apply the algorithms covered on substantial data sets using Python and Scikit-learn, and interpret the outcomes.&nbsp;</li><li>Understand the applicability of these algorithms to different types of data and problems along with their strengths and limitations.&nbsp;</li><li>Understand the limitations of basic approaches to Deep Learning and the need for advanced strategies.&nbsp;</li><li>Understand and apply a range of the advanced algorithms and approaches to Deep Learning and Machine Learning using Artificial Neural Networks and interpret the outcomes.&nbsp;</li>",
      "level": "4",
      "credits": "20"
    },
    "CS411 - Theory of Computation": {
      "module_id": "CS411 - Theory of Computation",
      "title": "CS411 - Theory of Computation",
      "summary": "Building on the previous material in software development, to extend and to formalise the student\u2019s abilities in the area of computational complexity.",
      "content": "Introduction: the need for formality in the analysis of problems in computation.Computation by Abstract Machines: classification, finite automata, deterministic and non-deterministic machines, Turing Machines, the halting problem, solvable, semi-solvable and unsolvable problems.Analysis of Algorithms and Complexity Theory: Measuring complexity of algorithms, Big-O and Small-o notations, analysing certain algorithms, polynomial time algorithms, the PATH problem, tree searchers (depth-first search &amp; breadth-first search), the HAMPATH problem, the Composites problem, the class NP, polynomial time reducibility, the CLIQUE problem, NP-completeness, the Cook-Levin Theorem.",
      "ilo": "On completion of the class, a student should be able:<li>to categorise abstract machines and to construct machines appropriate to specific problems</li><li>to display an understanding of the merits and limitations of the analytical techniques of software development</li><li>to recognise the significance of complexity classes and analysis and to deduce the complexity of certain types of algorithm</li><li>to demonstrate a deeper and broader understanding of classes of complexity and of the ability to deduce the complexity of specific algorithms</li><li>to display an extended ability to determine the complexity of software by the application of analytical techniques</li><li>to demonstrate practical competence in the range of issues associated with the class</li>",
      "level": "4",
      "credits": "20"
    }
  }
}