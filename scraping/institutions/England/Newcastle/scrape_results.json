{
  "2023": {
    "CSC1033 : Foundations of Data Science": {
      "credits": "20",
      "module_id": "CSC1033 : Foundations of Data Science",
      "title": "CSC1033 : Foundations of Data Science",
      "summary": "This module will provide students with an understanding of information storage and retrieval. This relates to all forms of data, including text and multimedia (image, video and audio) stored on and consumed from the web, amongst other sources. The module covers fundamental techniques and strategies of information storage and retrieval used in a variety of online applications such as web- search engines and business storage and analytics.",
      "content": "* &nbsp; &nbsp;  &nbsp; Retrieval, browsing, user information needs, and other core concerns.<br>\n* &nbsp; &nbsp;  &nbsp; Notions of structured, unstructured and semi-structured data<br>\n* &nbsp; &nbsp;  &nbsp; Data representation (XML, character sets, images, audio/video)<br>\n* &nbsp; &nbsp;  &nbsp; Relational databases, SQL<br>\n* &nbsp; &nbsp;  &nbsp; A generic architecture for information retrieval<br>\n* &nbsp; &nbsp;  &nbsp; Spiders/crawlers, stopwords and keywords, indexing and stemming<br>\n* &nbsp; &nbsp;  &nbsp; Query expansion and its relationship with the Semantic Web.<br>\n* &nbsp; &nbsp;  &nbsp; Metadata and semantics, faceted classifications, and other \"linked data\" issues<br>\n* &nbsp; &nbsp;  &nbsp; Information models, databases and data normalization for transactional systems (OLTP)<br>\n* &nbsp; &nbsp;  &nbsp; Data de-normalization, data marts / data warehouses, star and snowflake schemas, and cubes as support for analytical systems (OLAP) as support to Business Intelligence<br>\n* &nbsp; &nbsp;  &nbsp; The challenges presented by \"Big Data\"<br>\n* &nbsp; &nbsp;  &nbsp; NoSQL and Cloud Computing for distributed and scalable treatment of \"Big Data\".<br>\n* &nbsp; &nbsp;  &nbsp; Exemplar applications, including publishing archives, web-based search engines<br>\n* &nbsp; &nbsp;  &nbsp; Data Ethics",
      "ilo": "",
      "level": "CSC1033 : Foundations of Data Science"
    },
    "CSC3833 : Data Visualization and Visual Analytics": {
      "credits": "10",
      "module_id": "CSC3833 : Data Visualization and Visual Analytics",
      "title": "CSC3833 : Data Visualization and Visual Analytics",
      "summary": "Students will learn and acquire skills in data exploration and visualization. By the end of the module, they will be able to take raw data sets, clean them, structure them and choose suitable methods for visualizing them. They will also acquire theoretical knowledge of the underpinning descriptive statistics and the basics of human perception for cognition.",
      "content": "\u2022  Topics from:<br>\n\u2022  Descriptive statistics for data sets.<br>\n\u2022  The visualization pipeline.<br>\n\u2022  Human perception and cognition.<br>\n\u2022  Visualization of numerical data and categorical data.<br>\n\u2022  Visualization of geographical data.<br>\n\u2022  Visualization of time series data.<br>\n\u2022  Interactive techniques for visualization.<br>\n\u2022  Visualization design<br>\n\u2022  What makes a good visualization.",
      "ilo": "",
      "level": "CSC3833 : Data Visualization and Visual Analytics"
    },
    "CSC2035 : Software Systems Design and Implementation": {
      "credits": "30",
      "module_id": "CSC2035 : Software Systems Design and Implementation",
      "title": "CSC2035 : Software Systems Design and Implementation",
      "summary": "To introduce the design and implementation of software systems.<br><br>\nThere are factors that we must take into account when designing and implementing software systems that either do not arise in application development or are less critical in application development. These include the longevity of systems compared to applications, agreement on shared abstractions that are often codified in interfaces and standards, and the conservation of resources to maximise their availability to applications. This module gives students an appreciation of such factors and their implications for good design and software development in general.<br><br>\nOperating systems and their extension to networks of systems are used as exemplars. The lessons drawn from their design and implementation are applicable not only to other systems but also to good applications design. The appreciation of their general applicability and the trade-offs involved will inform any future software development students undertake.<br><br>\nThe module is directly related to and builds on the Stage 1 module CSC1032 on Computer Systems Design and Architectures.",
      "content": "The module is organised into three strands: operating systems, networks of systems and practical systems development work that complements and exemplifies the other two strands.<br><br>\nIn operating systems, the focus will be on processes and memory management, scheduling and the need for, and mechanisms to achieve, inter-process communication and concurrency control. In networks we cover the fundamental abstractions presented by the Internet, with a particular focus on achieving reliable communication over an unreliable network of networks.<br><br>\nSpecific topics covered in the theoretical strands include:<br>\n-  the process model and process lifecycle<br>\n-  process address space and isolation and virtual memory<br>\n-  process implementation<br>\n-  scheduling requirements and algorithms<br>\n-  concurrent execution and mechanisms for data sharing<br>\n-  the mutual exclusion problem and the implementation of solutions<br>\n-  network topologies<br>\n-  network protocols<br>\n-  network layers and their realisation in TCP/IP<br>\n-  internetworking and reliable communication",
      "ilo": "",
      "level": "CSC2035 : Software Systems Design and Implementation"
    },
    "CSC1031 : Fundamentals of Computing": {
      "credits": "20",
      "module_id": "CSC1031 : Fundamentals of Computing",
      "title": "CSC1031 : Fundamentals of Computing",
      "summary": "To develop confidence in the use of fundamental techniques in Computer Science.<br>\nTo provide a knowledge of the formal concepts essential for study and professional practice in Computing Science and Software Engineering.<br>\nTo practice the basic techniques for modelling and solving computing problems.<br>\nTo prepare students for the more advanced topics they will encounter on their degree.<br>\nTo develop an awareness of the role of formal techniques in Computing Science.",
      "content": "Set Theory<br>\nNumbers and their Representation<br>\nReal Valued Functions<br>\nVector and Matrices<br>\nCombinatorics<br>\nRelations and Functions<br>\nProof Techniques<br>\nGraph Theory<br>\nPropositional Logic <br>\nPredicate Logic",
      "ilo": "",
      "level": "CSC1031 : Fundamentals of Computing"
    },
    "CSC3632 : System and Network Security": {
      "credits": "20",
      "module_id": "CSC3632 : System and Network Security",
      "title": "CSC3632 : System and Network Security",
      "summary": "To explore in depth the different mechanisms used to protect the security of systems and network, and to manage the corresponding risk.",
      "content": "\u2022  Cryptography: simple and practical introduction to symmetric and asymmetric encryption, hashing and <br>\n   signature.<br>\n\u2022  Malicious code: XXS, Code Injection, Reverse Engineering<br>\n\u2022  Network Security: Firewall, IDS, Packet Analysis, Security protocols<br>\n\u2022  Authentication and Authorisation: Biometrics, Access Control<br>\n\u2022  Risk Management: Threat Modelling, Risk Assessment<br>\n\u2022  Privacy: k-anonymity<br>\n\u2022  Human Factors: Usability, Behavioural security",
      "ilo": "",
      "level": "CSC3632 : System and Network Security"
    },
    "CSC3831 : Computer Vision & AI": {
      "credits": "20",
      "module_id": "CSC3831 : Computer Vision & AI",
      "title": "CSC3831 : Computer Vision &amp; AI",
      "summary": "This module aims to provide a foundation in the field data analytics, predictive data science, computer vision methods and machine learning.",
      "content": "Selected topics chosen from:<br><br>\nPrinciples and practice of computer vision:<br>\nBackground, Image Model, Spatial Coordinate, Digitisation.<br>\nImage Sampling, Image Quality, Image Pixel Relationships.<br>\nLinear Operators, 2-D Transforms. Spatial Domain Methods, Frequency Domain Methods.<br>\nImage Compression, Lossless and Lossy Compression, Compression Standards.<br>\nObject Detection Methods, Edge Liking and Boundary Detection.<br>\nThresholding Methods, Region Oriented Methods. Pattern Recognition, Segmentation, Introduction to Convolutional Neural Network (CNN).<br><br><br>\nPrinciples and practice of machine learning and deep neural networks:<br>\nCovering core concepts, and techniques along with current leading approaches in machine/deep learning.",
      "ilo": "",
      "level": "CSC3831 : Computer Vision &amp; AI"
    },
    "CSC3432 : Biomedical Data Analytics and AI": {
      "credits": "20",
      "module_id": "CSC3432 : Biomedical Data Analytics and AI",
      "title": "CSC3432 : Biomedical Data Analytics and AI",
      "summary": "1.  To familiarise students with the fundamental computational approaches used for tackling biological and <br>\n    biomedical data handling and analysis<br>\n2.  To introduce the concepts of algorithm design for biological/biomedical data<br>\n3.  To develop skills in algorithm design with an emphasis on solving biological/biomedical problems<br>\n4.  To understand the most appropriate type of algorithms for differing analytical problems in biology and <br>\n    biomedicine and to introduce some of the most appropriate implementation strategies.",
      "content": "1.  The broad spectrum of data types in biology and biomedicine<br>\n2.  Basic concepts of cell and molecular biology<br>\n3.  Algorithms for biological sequence comparison<br>\n4.  Algorithms for structural bioinformatics <br>\n5.  Artificial Intelligence approaches for the analysis of biological and biomedical data<br>\n6.  Biological/Biomedical data preprocessing<br>\n7.  Biological significance of biomedical data analysis<br>\n8.  Analysis of biological/biomedical sequence data<br>\n9.  Analysis of biological/biomedical imaging data<br>\n10. Analysis of biological/biomedical tabular data",
      "ilo": "",
      "level": "CSC3432 : Biomedical Data Analytics and AI"
    },
    "CSC2034 : Introducing Contemporary Topics in Computing": {
      "credits": "30",
      "module_id": "CSC2034 : Introducing Contemporary Topics in Computing",
      "title": "CSC2034 : Introducing Contemporary Topics in Computing",
      "summary": "The module provides students with an introductory understanding of a range of advanced areas in computing, based on research areas which the School of Computing at Newcastle is renowned for (and not covered in other Stage 2 modules). The module acts as introduction to these contemporary topics, and gives students insight into optional modules and project choices in preparation for Stage 3, while building on skills learned in Stages 1 and 2, accruing experience of how they are applied into more advanced areas of computing.",
      "content": "The taught component of the module gives a \u2018taster\u2019 for each contemporary topic through lectures and practical sessions, along with general lectures on key skills and knowledge. This is followed by a period of project work in which students investigate one contemporary topic more deeply through guided independent project work. <br><br>\nEach topics taster will:<br>\n\u2022  Introduce key concepts and definitions<br>\n\u2022  Provide an overview of relevant techniques, paradigms, and tools<br>\n\u2022  Cover ongoing research and potential ethical issues<br>\n\u2022  Place the topic in the wider context of computing and industry<br><br>\nGeneral lectures cover:<br>\n\u2022  Reflective writing<br>\n\u2022  Reading academic papers<br>\n\u2022  Finding and managing information<br>\n\u2022  Writing technical reports<br><br>\nWe aim to cover five topics, delivered by lecturers, and supported by demonstrators, who are active researchers in these areas. Current topics are:<br><br>\n\u2022  Science of Programming<br>\n\u2022  Human Computer Interaction<br>\n\u2022  Biocomputing<br>\n\u2022  Computer Game Engineering<br>\n\u2022  Data Science<br><br>\nNote that due to the nature of research, these are topics subject to change.",
      "ilo": "",
      "level": "CSC2034 : Introducing Contemporary Topics in Computing"
    },
    "CSC1035 : Programming Portfolio 2": {
      "credits": "30",
      "module_id": "CSC1035 : Programming Portfolio 2",
      "title": "CSC1035 : Programming Portfolio 2",
      "summary": "By the end of this module students will have gained further experience in, and a knowledge of the basic concepts of all stages of the software engineering lifecycle, both as individuals and as members of a team, namely requirements analysis, design, coding, testing and maintenance, building on the experience gained in Programming Portfolio 1. Emphasis will be placed on the development of programming skills. An active learning, problem-based approach is adopted.<br>\nStudents will be given a series of practical problems that relate to various stages of the software engineering lifecycle. Supplementary lecture materials will introduce the topics to be tackled, and how to tackle them, but these topics will relate to aspects of the material presented in one or more of the co-requisite modules Computer Systems Design, Information Storage and Retrieval, and Fundamentals of Computing, thus giving students practical enrichment of that material, and/or to specialisms that can be studied at Stages 2 and 3 (HCI, Security, Bio, Games, Software Engineering, Data Analytics), thus enabling students to gain a flavour of what is available in the later stages of their programme of study and allowing them to make an informed choice towards the end of Stage 2. Students will have gained further awareness of the legal, social, ethical and professional aspects of being a practicing software engineer.",
      "content": "Students expand their knowledge and experience in all stages of the software engineering life- cycle.<br><br>\nLectures and tutorials expand upon general principles of:<br><br>\nThe building blocks and structure of computer programs<br><br>\nData structures, collection classes, generic types and iteration<br><br>\nTime, space, speed trade-offs in program design <br><br>\nUnderstanding programming abstraction<br><br>\nExploring and realizing higher level abstractions <br><br>\nError checking/programming with exception handling <br><br>\nRecursion with examples from sorting and searching <br><br>\nEvent Driven Programming<br><br>\nDesign patterns: immutability, factories, singleton, composition.<br><br>\nStudents will gain further insight into the legal, social, ethical and professional aspects of being a software engineer",
      "ilo": "",
      "level": "CSC1035 : Programming Portfolio 2"
    },
    "CSC3431 : Introduction to BioDesign and Natural Computing": {
      "credits": "20",
      "module_id": "CSC3431 : Introduction to BioDesign and Natural Computing",
      "title": "CSC3431 : Introduction to BioDesign and Natural Computing",
      "summary": "By the end of this module students will have gained, at an introductory level, experience in, and a knowledge of (i) the basic concepts underpinning novel forms of computation that are inspired by Nature and use biological or 'natural' (i.e., non-silicon based) computing substrates. (ii) the applcation of computing in the design and engineering of biological systems. The module will prepare interested students for a dissertation project in the research area, and potential further study or early career in the field of bio-computing. <br><br>\nThis module aims to provide a basic and wide-ranging overview of this field, while also being adequately rigorous in its treatment and grounded in real-world applications. The material covered is complementary to the stage 3 module (CSC3432 Biomedical Data Analytics).",
      "content": "Students will be introduced to how biology, ecology, and chemistry have inspired novel computational paradigms. <br>\nStudents will be introduced to the concept of probabilistic (random) algorithms as an approach to solve computationally hard problems<br>\nStudents will be introduced to the principles of biological engineering and computational biodesign<br>\nStudents will be introduced to the concepts of evolutionary algorithms, neural networks, molecular &amp; DNA computing, and/or quantum computing<br>\nStudents will be introduced to the synthetic biology design-build-test cycle and the role of engineering<br>\nStudents will be introduced to the basic paradigms of biological engineering and the role of mathematical modelling in model-based design<br>\nStudents will be introduced to the role of standards in computational biodesign",
      "ilo": "",
      "level": "CSC3431 : Introduction to BioDesign and Natural Computing"
    },
    "CSC2032 : Algorithm Design and Analysis": {
      "credits": "10",
      "module_id": "CSC2032 : Algorithm Design and Analysis",
      "title": "CSC2032 : Algorithm Design and Analysis",
      "summary": "Knowledge of a range of key application areas where algorithmic solutions are required.<br>\nUnderstand the key issues in algorithm design.<br>\nUnderstand what makes a \"good\" algorithm.<br>\nExplore a range of techniques for algorithm design.<br>\nAbility to analyse an algorithm\u2019s complexity.",
      "content": "Introduction to Algorithms:<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Introduce the idea of an algorithm<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Documenting an algorithm and the use of pseudo code<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Introduction to algorithm analysis<br><br>\nFundamental Algorithmic Problems:<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Searching<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Sorting <br>\n\u2022 &nbsp; &nbsp;  &nbsp; String searching <br>\n\u2022 &nbsp; &nbsp;  &nbsp; Graph problems<br><br>\nAlgorithm Analysis:<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Asymptotic analysis of upper and average complexity bounds<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Identifying differences among best, average, and worst case behaviours<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Standard complexity classes<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Using recurrence relations to analyze recursive algorithms<br>\n\u2022 &nbsp; &nbsp;  &nbsp; NP Complete problems<br><br>\nAlgorithm Design Techniques:<br>\n\u2022 &nbsp; &nbsp;  &nbsp; General ideas for algorithm development <br>\n\u2022 &nbsp; &nbsp;  &nbsp; Brute-force algorithms<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Greedy algorithms<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Divide-and-conquer<br>\n\u2022 &nbsp; &nbsp;  &nbsp; Backtracking",
      "ilo": "",
      "level": "CSC2032 : Algorithm Design and Analysis"
    },
    "CSC2033 : Software Engineering Team Project": {
      "credits": "30",
      "module_id": "CSC2033 : Software Engineering Team Project",
      "title": "CSC2033 : Software Engineering Team Project",
      "summary": "To provide practical experience of real-world software development and team working.<br>\nTo develop employability skills and provide experience of working with appropriate industrial-strength tool-chains<br>\nThis module gives students the opportunity to work within a team situation that simulates a real-world environment. The module takes place over an intensive period of 7 weeks and consists of some career development activities as well as practical software engineering experience.<br>\nCareer Development. A variety of employability-based activities will take place throughout the module, including CV and covering letter workshops which will be held to help students develop their CV writing skills. <br>\nPractical Software Engineering. Students will research into relevant skills required for a software engineer (beyond coding, for example project management and collaborative development). All students are allocated into teams and given a project brief, alongside a course of lectures on software processes and lifecycles and techniques. This is supported by toolchain tutorials where experience will be gained with a variety of tools for collaborative planning, building, verification and release of software systems by working on small- scale tutorial examples.<br>\nFor the remainder of the module teams will work on the project, with guest talks from industry practitioners where possible. Progress will be checked regularly during practical labs or tutorials, whereby all team members are expected to be able to briefly explain their current work, and also through timesheets and weekly reports. Project work will continue into the normal semester 2 exam period with a final trade fair and demonstration and submission of final reports, peer assessment and self-reflection.<br>\nThe class will be divided into a number of teams with between 5 and 10 students in each team. Team membership will be determined by the module leader \u2013 team will comprise of students with diverse backgrounds, abilities and skills. Students will need to make the most of the skills within their team and allocate tasks and roles accordingly.",
      "content": "Professional skills:<br>\n- &nbsp; &nbsp;  &nbsp; The software engineering skillset<br>\n- &nbsp; &nbsp;  &nbsp; Employability techniques i.e. interviews/CVs<br>\nProcesses and Project Management:<br>\n- &nbsp; &nbsp;  &nbsp; Life-cycle and process models<br>\n- &nbsp; &nbsp;  &nbsp; Team organisation, roles and responsibilities<br>\n- &nbsp; &nbsp;  &nbsp; Configuration management principles<br>\nSoftware Engineering Techniques and Tools<br>\n- &nbsp; &nbsp;  &nbsp; Requirements Engineering,  UML design, Principles of verification<br>\n- &nbsp; &nbsp;  &nbsp; Tools for collaborative planning, building, verification and release of software systems",
      "ilo": "",
      "level": "CSC2033 : Software Engineering Team Project"
    },
    "CSC1032 : Computer Systems Design and Architectures": {
      "credits": "20",
      "module_id": "CSC1032 : Computer Systems Design and Architectures",
      "title": "CSC1032 : Computer Systems Design and Architectures",
      "summary": "On completion of this module students will, from a high level perspective, be able to:<br><br>\n\u2022 describe the purpose of, and the interaction between, the functional hardware and software components of a <br>\n  variety of computer systems.<br>\n\u2022 identify the principal hardware components and software services which provide infrastructure for the Internet <br>\n  from the global scale down to the desktop.<br>\n\u2022 describe the components of operating systems and how they are combined with applications to provide services <br>\n  and share resources.",
      "content": "\u2022  An overview of current computer systems architecture.<br>\n\u2022  Introduction to Operating Systems: what they are and what they do, management of resources. <br>\n\u2022  Processes, scheduling. Interprocess communication (IPC). <br>\n\u2022  Memory, virtual memory and memory management. Files, file systems. <br>\n\u2022  An introduction to Linux and system administration and systems programming.",
      "ilo": "",
      "level": "CSC1032 : Computer Systems Design and Architectures"
    },
    "CSC3631 : Cryptography": {
      "credits": "10",
      "module_id": "CSC3631 : Cryptography",
      "title": "CSC3631 : Cryptography",
      "summary": "To introduce students to the theory and practice of block ciphers, cryptographic hash functions,<br>\npublic key cryptography and cryptographic protocols.",
      "content": "Algorithms \u2013 cryptographic algorithms<br>\n- Historical overview of cryptography<br>\n- Private-key cryptography and the key-exchange problem<br>\n- Public-key cryptography<br>\n- Digital signatures<br>\n- Security protocols<br>\n- Applications (zero-knowledge proofs, authentication, and so on)<br>\nNet-Centric Computing \u2013 network security<br>\n- Fundamentals of cryptography<br>\n- Secret-key algorithms<br>\n- Public-key algorithms<br>\n- Authentication protocols<br>\n- Digital signatures",
      "ilo": "",
      "level": "CSC3631 : Cryptography"
    },
    "NCL3007 : Career Development for final year students": {
      "credits": "20",
      "module_id": "NCL3007 : Career Development for final year students",
      "title": "NCL3007 : Career Development for final year students",
      "summary": "To develop students\u2019 self-awareness and the ability to self-manage, proactively interact and ethically apply knowledge and skills in a work-related context.<br><br>\nThe Career Development module offers students the opportunity to undertake work-related learning in a variety of environments, both on and off the University campus. Through engagement with the module, students will learn about themselves, enhancing their employability and personal enterprise skills as well as contributing towards meeting the aims of the host organisation.",
      "content": "Successful graduates are equipped with the necessary skills to perform and an ability to plan and manage their portfolio career, which is likely to be varied. The 3rd stage Career Development module therefore offers students the opportunity to learn about their skills and attributes and how they might apply these in future roles upon graduation.  To aid this learning and development, they undertake work-related learning in a variety of different environments, both on and off the University campus. See http://www.ncl.ac.uk/careers/modules/cdm/ for more information. <br><br>\nSupported by module tutors, students will reflect on and manage their own learning and development through a series of workshops, seminars and lectures, both on campus and online. Through engagement with both a professional experience and module teaching, students will enhance their employability and career readiness. <br><br>\nStudents will join the module at the start of semester one and are expected to balance their work for the module, including engagement with their placement/professional experience, across the academic year.<br><br>\nAt the start of the academic year students are expected to:<br>\n\u2022 &nbsp; &nbsp;  &nbsp; confirm that all pre-requisites have been met;<br>\n\u2022 &nbsp; &nbsp;  &nbsp; attend teaching/seminars and complete related engagement tasks;<br>\n\u2022 &nbsp; &nbsp;  &nbsp; negotiate calendar of activity and duties with their host organisation (placement) or the Careers Service (other professional experience) to meet module requirements.<br><br>\nTeaching for the 2022/23 academic year will be arranged in two-week Learning Units with a thematic focus which will unite teaching sessions, online content and module engagement tasks to be completed by students via Canvas. Engaging with all content across the thematic blocks will ensure students meet all of the module learning outcomes. Most Learning Units include a synchronous online (lecture) session and a small group seminar which is planned to take place in person on campus. <br><br>\nSemester 1 themes will be: Induction/orientation; goal-setting, action planning and reflection; graduate skills and attributes; and career planning (exploration and research). Semester 2 themes will be: Giving and receiving feedback; networking (in person and online); engagement with employers; career planning (decision making and applications). Sessions focused on preparing for module assessments will also be available.",
      "ilo": "",
      "level": "NCL3007 : Career Development for final year students"
    },
    "CSC1034 : Programming Portfolio 1": {
      "credits": "30",
      "module_id": "CSC1034 : Programming Portfolio 1",
      "title": "CSC1034 : Programming Portfolio 1",
      "summary": "By the end of this module students will have gained, at an introductory level, experience in, and a knowledge of the basic concepts of all stages of the software engineering lifecycle, namely requirements analysis, design, coding, testing and maintenance. Particular emphasis will be placed on the development of programming skills. An active learning, problem-based approach will be adopted. Students will be given a series of practical problems that relate to various stages of the software engineering lifecycle. Supplementary lectures and online materials will introduce the topics to be tackled, and how to tackle them. Topics will be selected broadly from across computing,  thus giving students practical enrichment of that material, and/or to specialisms that can be studied at Stages 2 and 3 (HCI, Security, Bio, Trends in Pervasive Computing, Games, Software Engineering, Data Analytics). Students will have gained awareness of the legal, social, ethical and professional aspects of being a practising software engineer.",
      "content": "\u2022  An introduction to all stages of the software engineering lifecycle. <br><br>\n\u2022  An introduction to general principles of programming languages and their realisation in a representative <br>\n   language.<br><br>\n\u2022  An introduction to the legal, social, ethical and professional aspects of being a software engineer.",
      "ilo": "",
      "level": "CSC1034 : Programming Portfolio 1"
    },
    "CSC3231 : Graphics for Games": {
      "credits": "10",
      "module_id": "CSC3231 : Graphics for Games",
      "title": "CSC3231 : Graphics for Games",
      "summary": "To give students an understanding of both the theories and practices that underpin good game design. Through this module, students will develop the knowledge and skills to apply several theoretical game design frameworks to the critical analysis of existing game systems, as well as to design, prototype, and implement their own advanced gameplay mechanic systems",
      "content": "History \u2013 how the design of systems of play have evolved through ancient games, sports, tabletop games, early and modern video games.<br><br>\nTheory and critical analysis \u2013 understanding theories of play, Ludology and Narratology, Mechanics, Dynamics and Aesthetics, and how to apply them to the analysis of games designs.<br><br>\nSystems Design \u2013 combining and balancing multiple complex systems to create a coherent holistic experience.<br><br>\nVisual Communication \u2013 world building and level design, including techniques for pre-empting and guiding the player through visual cues.<br><br>\nMethodologies \u2013 commonly used approaches for implementing game designs, including iterative, top-down vs bottom-up, and player-centric vs systems-centric design paradigms.",
      "ilo": "",
      "level": "CSC3231 : Graphics for Games"
    },
    "CSC3334 : Science of Computing (Inactive)": {
      "credits": "20",
      "module_id": "CSC3334 : Science of Computing (Inactive)",
      "title": "CSC3334 : Science of Computing (Inactive)",
      "summary": "Using models to understand complicated systems is a standard process in engineering. The key skill is abstraction (leaving out details to focus on key properties). The principal aim of this module is to communicate this skill.<br><br>\nTo record models, it is necessary to use some notation. There are several notations, and they tend to have areas of application. If the notation is well thought out, it makes it possible to reason about properties of the described system; If there is mechanical support, one can both exercise the model and draw verified conclusions.<br><br>\nThe range of applications of interest range from simple components to aircraft collision avoidance.<br><br>\nA particular focus will be on recording the meaning (semantics) of programming languages.<br>\nProgramming languages come and go - if you make a career in computing, there is no doubt that you will have to learn languages which do not even exist today. In addition to literally thousands of existing general-purpose languages, there are languages tailored for specific applications, such as gaming, virtual reality, text layout, robotics. Sadly, many languages embody one new idea (e.g. objects, concurrency, remote execution), but are significantly *worse* than their predecessors in other respects. <br><br>\nA key aim of this module is to communicate ways of understanding and documenting the main ideas in a language. The material should equip you to make sense of the many languages you will meet in your career. If you design new languages, they will benefit from you being able to manipulate the key concepts.<br><br>\nFurthermore, to make sure the complexities (and scale) of language design are addressed, you will also be trained in practical aspects of formal modelling and verification. For this we will use a well- founded approach following a set of mature formal tools and techniques within software engineering",
      "content": "Modelling and Specification<br>\n-  Key notion of abstraction: pre/post conditions and data abstraction<br>\n-  Reasoning about a model<br>\n-  Checking that an implementation corresponds to a model<br>\n-  Notions of functional programming: induction, recursion, datatypes, etc.<br>\n-  Animating versus reasoning about a model<br>\n-  Basics notions of verification tools: Isabelle 101, tooling for language design.<br>\n-  Elicitation and basic proof of simple properties of interest<br>\n-  Code-contracts and programming correctness-reasoning <br><br>\nProgramming languages<br>\n-  syntax versus semantics<br>\n-  concrete versus abstract syntax; <br>\n-  context conditions<br>\n-  Semantics (meaning) focus on the \"Structural Operational Semantics\"<br>\n-  Improved language-design decisions: type system extensions (e.g. security-types, etc.), feature extension <br>\n   (e.g. OO + concurrency), etc.<br><br>\n-  General<br>\n-  Nature of software verification principles (correctness, abstraction, refinement, design decisions, <br>\n   documented assumptions, model-based testing, etc.)<br>\n-  Understanding the expertise required and costs involved, identifying the right technique to the task at hand.",
      "ilo": "",
      "level": "CSC3334 : Science of Computing (Inactive)"
    },
    "CSC2031 : Security Programming": {
      "credits": "20",
      "module_id": "CSC2031 : Security Programming",
      "title": "CSC2031 : Security Programming",
      "summary": "All computer scientist graduates should have a fundamental understanding of security when designing and implementing modern day software applications. This module explores key security challenges faced by these  applications and the security techniques commonly used to manage them. Students will gain first-hand experience in employing secure software practices and implementing security mechanisms to help address those challenges.",
      "content": "1. Security Foundations<br>\n2. Authentication<br>\n3. Access Control<br>\n4. Cryptography<br>\n5. Software Security<br>\n6. Web Security",
      "ilo": "",
      "level": "CSC2031 : Security Programming"
    },
    "CSC3094 : Major Project and Dissertation in Computer Science": {
      "credits": "60",
      "module_id": "CSC3094 : Major Project and Dissertation in Computer Science",
      "title": "CSC3094 : Major Project and Dissertation in Computer Science",
      "summary": "The individual project is a substantial piece of independent work involving technical and research skills and knowledge developed in the earlier parts of the degree. It develops your independence, your ability to research a relevant field of knowledge, plan and manage your own work.  You will have the opportunity to contribute directly to research or development activities, develop your own specialist expertise in the project topic, and further improve your planning and communication skills. You will work closely with a member of staff from one of the School's research groups, and you may also be working with an industrial partner. The project culminates in a substantial report which can form part of your portfolio for potential employers. <br><br>\nResearch skills are at the foundation of innovative projects in computing, whether in professional practice or in the Research &amp; Development lab. <br><br>\nGraduate computer scientists, in addition to their core technical competencies, should be able to access and appreciate research results. You will have the opportunity to contribute directly to research or development activities, develop your own specialist expertise in the project topic, and further improve your planning and communication skills. You will work closely with a member of staff from one of the School's research groups, and you may also be working with an industrial partner (possibly in an industry laboratory). The project culminates in a report. <br><br><br>\n\u2022  To deepen through practice the knowledge and skills acquired in the rest of the programme.<br>\n\u2022  To develop an understanding of the character, processes and methods of research. <br>\n\u2022  To build confidence in approaching, using and appraising the Computer Science and related literature. <br>\n\u2022  To enhance skills required to define, propose, plan and execute a substantial individual project. <br>\n\u2022  To grow awareness of the ethical and professional issues that arise in project work.",
      "content": "Students will either select a project from a list offered by potential supervisors or propose and refine a project proposal with a supervisor. In every project there will be a research component and a design, programming and/or analytic element. <br><br>\n1. Research: Background research will be undertaken in the selected topic using skills developed in the first <br>\n   part of the module using library and online resources. The supervisor will advise on the quality of sources <br>\n   and standards in the topic area. <br><br>\n2. Development and Analytic Skills: The core of the project will involve defining and carrying out a project <br>\n   plan largely independently, but with guidance from the supervisor. <br><br>\n3. Report: A report will be prepared, describing the technical background, the work undertaken, the analysis and <br>\n   evaluation of results and suggestions for further work. Guidance on the style and content of the report will <br>\n   be provided by means of examples and through the supervisor. <br><br>\nThe taught components support students with the following: <br><br>\n\u2022  What is Research? Principles of originality, knowledge (including fallibility) and gain. Relating research,  <br>\n   innovation and impact. <br><br>\n\u2022  Scientific method and intellectual discovery. Reasoning techniques (deductive, abductive, inductive).  <br>\n   Presentation of claims with supporting arguments: comparing and evaluating sources, critical evaluation of  <br>\n   published material. Types of research activity in Computer Science, from theoretical studies to development <br>\n   or application studies. <br><br>\n\u2022  The Computer Science Knowledge Base: the peer review process; understanding, searching, and appraising  <br>\n   literature including technical reports, conference proceedings, journals of record, identifying information <br>\n   need, locating and accessing information. <br><br>\n\u2022  Project Proposal and Planning: the elements of a project proposal; identifying aims and objectives, project  <br>\n   definition, planning and risk management; ethical and professional context and considerations. <br><br>\n\u2022  Conducting a Project: review of process models; practical guidance on monitoring and management. <br><br>\n\u2022  Communicating findings: elements of scholarship including citation, referencing, the structure and style of  <br>\n   research reports and papers, oral presentations and posters.",
      "ilo": "",
      "level": "CSC3094 : Major Project and Dissertation in Computer Science"
    },
    "CSC3731 : Human Computer Interaction: Interaction Design": {
      "credits": "20",
      "module_id": "CSC3731 : Human Computer Interaction: Interaction Design",
      "title": "CSC3731 : Human Computer Interaction: Interaction Design",
      "summary": "To give students an understanding of Interaction Design practice and its application to a variety of application areas including ubiquitous computing, tangible interactions, and social interactions.<br>\nTo give students an understanding of relevant Interaction Design theories.<br>\nTo equip students with a skill set in practices of Interaction Design including understanding users, prototyping, and evaluation.<br>\nTo expose the students to the issues of privacy and ethics in relation to digital technologies and how they relate to specific design decisions.<br>\nTo give students experience in GUI design on multiple platforms.<br>\nTo give students experience of, and to develop skills in, working in collaborative design teams.",
      "content": "Understanding users and user requirements<br>\nFieldwork for design and evaluation<br>\nModels, theories, and frameworks of interaction design<br>\nDesign principles<br>\nMethods for designing with and for users<br>\nDesign considerations for ubiquitous technologies, wearables, tangibles user interfaces, interactive surfaces, and natural user interfaces<br>\nDesigning for specific application areas such as user experience and social interactions.<br>\nPrototyping <br>\nExpert and user evaluation techniques <br>\nData, ethics and privacy.",
      "ilo": "",
      "level": "CSC3731 : Human Computer Interaction: Interaction Design"
    },
    "CSC3121 : Distributed Systems": {
      "credits": "10",
      "module_id": "CSC3121 : Distributed Systems",
      "title": "CSC3121 : Distributed Systems",
      "summary": "To explain how concepts and techniques from computer networking, operating systems, and object-oriented programming can be combined to develop distributed systems. The course will cover the underlying theory of event ordering, logical and physical clocks, and then the practical aspects of distributed system structuring using the client-server approach.",
      "content": "Structuring distributed applications: using client-server and remote procedure calls; also, how atomic transactions, with their 'ACID' properties provide a reliable way of sharing of information; design challenges in remote procedure calls and in realizing ACID properties; the solutions commonly deployed to address these challenges, together with their conceptual underpinnings.<br>\nOrdering of events: using logical and physical clocks.<br>\nPractical aspects: analysing a distributed system design and designing a total order delivery system.",
      "ilo": "",
      "level": "CSC3121 : Distributed Systems"
    },
    "CSC3634 : Fault Tolerant and Cyber-Physical Systems": {
      "credits": "20",
      "module_id": "CSC3634 : Fault Tolerant and Cyber-Physical Systems",
      "title": "CSC3634 : Fault Tolerant and Cyber-Physical Systems",
      "summary": "The module aims to provide an overview of the concepts of reliability, and fault tolerance, with a particular focus on  cyber-physical systems (CPSs). We provide a systems approach to the design, evaluation and implementation fault tolerance in CPSs and other computer systems, exemplified by case studies of present-day systems.<br>\nThis module will introduce the student to the principles of system dependability, fault tolerance, and CPSs. It motivates the need for a multi-disciplinary approach to the design of CPS, the need for a systems approach to fault tolerance, and the use of modelling and simulation to support these.",
      "content": "An overview of system dependability and cyber-physical system concepts. <br>\nThe need for reliability techniques for achieving reliability.<br>\nThe need for a multi-disciplinary systems approach to the design of modern systems.<br>\nFault tolerance principles, implementations and limitations.<br>\nError detection and error recovery techniques.<br>\nSoftware and hardware fault tolerance.<br>\nAn introduction to real-time control and controller tuning.<br>\nUsage of VDM-RT and 20-sim for modelling cyber and physical components.<br>\nUsage of collaborative model-based design and co-simulation for cyber-physical systems.<br>\nReal-world case studies on fault tolerance and CPSs.",
      "ilo": "",
      "level": "CSC3634 : Fault Tolerant and Cyber-Physical Systems"
    },
    "CSC3232 : Gaming Technologies and Simulations": {
      "credits": "20",
      "module_id": "CSC3232 : Gaming Technologies and Simulations",
      "title": "CSC3232 : Gaming Technologies and Simulations",
      "summary": "To understand the programming techniques associated with the technical development of a video game. Students gain experience in the technical design and implementation of engineering a computer games system. The analysis of a design as an engineered system is assessed through appropriate choice of system components based on complexity, processor cost and memory imprint.",
      "content": "The syllabus has focus around the programming requirements for video games in the context of physics, artificial intelligence, and gameplay<br><br>\n\u2022  Players and adversaries \u2013 gameplay programming for adversarial based games <br>\n\u2022  Path-finding \u2013 algorithms for navigation <br>\n\u2022  Game AI\u2013 algorithms for simulating behaviour <br>\n\u2022  Physics \u2013 approximating realistic simulations in real-time in video games<br>\n\u2022  Gameplay modelling- Using probability to encourage longevity of play",
      "ilo": "",
      "level": "CSC3232 : Gaming Technologies and Simulations"
    }
  }
}