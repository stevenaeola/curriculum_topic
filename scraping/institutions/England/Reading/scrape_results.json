{
  "2023": {
    "CS2DI17": {
      "module_id": "CS2DI17",
      "title": "Databases and Information Security",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>The module consists of two parts.</p><br>\n<br>\n<p>&nbsp;</p><br>\n<br>\n<p>The first part covers major threats and risks that affect the security of a network and the systems that rely on it (network security), and the major threats to data in both structured and unstructured form (data security).</p><br>\n<br>\n<p><br><br>\nThe second part,&nbsp; covers Databases. An introduction to the basics of relational database design, Structured Query Language (SQL) and some selected advanced database topics.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>&nbsp;</p><br>\n<br>\n<p>Information security:</p><br>\n<br>\n<p><br><br>\nThe CIA (Confidentiality, Integrity, Availability) model of information security The value of information assets and physical assets, and the cost of their loss Motives and capabilities of different attackers<br><br>\nExamples of attacks on a networked system at different levels of the OSI network stack Examples of countermeasures for different attacks<br><br>\nPasswords and other methods of authentication</p><br>\n<br>\n<p>Public/private key cryptography, digital signatures and certificates Multi-level security and access control<br><br>\nNon-technical aspects: social engineering and physical security The effect of social, legal and economic incentives on security<br><br>\nResponsible and ethical use of technical skills and knowledge by organisations and individuals</p><br>\n<br>\n<p>&nbsp;</p><br>\n<br>\n<p>Databases:<br><br>\n&nbsp;</p><br>\n<br>\n<p>Database Management Systems</p><br>\n<br>\n<p>Relational database model (ER model, relations, attributes, data structures and keys) Normalisation<br><br>\nDatabase definition (SQL - DDL)</p><br>\n<br>\n<p>Transactions, concurrency and consistency (SQL - TCL)</p><br>\n<br>\n<p>Database manipulation (SQL \u2013 DML, multipurpose queries, database population, views, stored procedures, trigger</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>The student will be able to:</p><br>\n<br>\n<p><br><br>\nInformation Security:</p><br>\n<br>\n<p>The student will be able to:</p><br>\n<br>\n<ul><br>\n<li>Identify ways of countering different types of threat;</li><br>\n<li>Produce strategies to minimise risks of security breaches in a range of network environments and data storage systems;</li><br>\n<li>Critically analyse the shortcomings of a range of security strategies; Describe and apply the techniques used to penetrate aWeb application;</li><br>\n<li>Develop appropriate security policies and network architectures to minimise the threats from network intrusion;</li><br>\n<li>Understand the different types of threat posed by different classes of hacker and by different categories of malware;</li><br>\n<li>Describe and apply the principles of key cryptography and message digests in security protocols such as TLS;</li><br>\n<li>Apply appropriate access controls and authentication techniques at different levels</li><br>\n<li>Critically analyse the security and privacy issues surrounding structured and unstructured data in a variety of different scenarios, with an in-depth focus on securing such data in Web applications.</li><br>\n</ul><br>\n<br>\n<p><br><br>\nDatabases</p><br>\n<br>\n<ul><br>\n<li>Carry out the analysis of a simple problem susceptible to solution using database technology;</li><br>\n<li>Produce a well-structured design in terms of the structural elements of a relational database; Design and implement a database application to solve the problem posed;</li><br>\n<li>Use the SQL language, including DDL, an in-database procedural language such as PL/SQL, and database triggers;</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong>CS1PC20 Programming in C/C++ and CS1FC16 Fundamentals of Computer Science  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3DV20": {
      "module_id": "CS3DV20",
      "title": "Data Integration and Visualisation",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module focuses on key aspects of data integration and data visualisation, covering concepts, principles, techniques and tools for the effective analysis of data. Students will learn techniques for processing various types of data for information visualisation. The students will be encouraged to test their technical abilities for data integration and develop their creative skills in visualising data to support data-driven decision making.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Context: Importance of data visualisation and its historical account.</li><br>\n<li>Nature of data and data sources diversity</li><br>\n<li>Data integration methods and technologies, e.g. ETL (extraction, transformation and load)</li><br>\n<li>Data warehousing strategy, architecture and design (star schemas, temporal dimensions, cubes, etc.)</li><br>\n<li>Critical analysis using multidimensional datasets</li><br>\n<li>Types of data visualisation methods (e.g., distribution correlation, ranking) and charts</li><br>\n<li>Data visualization design techniques and effective presentation (e.g., understanding data statistics)</li><br>\n<li>Interactive Dashboards</li><br>\n<li>Impact of designs on the presented statistics Type of tools (e.g., Tableau)</li><br>\n<li>Real-world application domains and requirements (e.g., financial trends, genetics, regression)</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>On successful completion of the module, students will be able to:</p><br>\n<br>\n<ul><br>\n<li>Critically choose and then apply appropriate methods to conduct data integration and data visualisation;</li><br>\n<li>Have a sound understanding of the essential concepts and principles of data integration and data visualisation techniques;</li><br>\n<li>Develop data-driven approaches for information discovery and processing in a domain context through data integration and data visualisation;</li><br>\n<li>Design and implement a data integration and visualisation tool which can perform a set of functions, such as ETL, multidimensional datasets, data warehouse, and interactive dashboards;</li><br>\n<li>Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.</li><br>\n<li>Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2IY16": {
      "module_id": "CS2IY16",
      "title": "Industrial Year",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module is taken by students entering a placement year in industry. The placement is for a minimum of 9 months (40 weeks) and is completed in one academic year. The students carry out work within the company with which they are placed that is related to Computer Science/IT. The students are assessed on the basis of written and oral presentations of their work and experience during the placement.</p><br>\n<br>\n<p>Successful completion of a placement does not contribute to the student\u2019s final degree classification but earns them a \u2018with Industrial Year\u2019 degree in their subject area.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The area of work undertaken on the placement will be related to the student's programme in the Department of Computer Science. The day-to-day content of the work will be set by the company. The work placement should provide the student with the opportunity for independent problem solving and working in a team.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>.</p><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>120 [60 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Placement opportunity: </strong>Maxi placement<br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2AO17": {
      "module_id": "CS2AO17",
      "title": "Algorithms and Operating Systems",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>Algorithms and Operating Systems are fundamental concepts in Computer Science discipline. The module gives an introduction to fundamental algorithm design strategies that are common to many concrete applications. It also provides a general understanding of the structure and the main&nbsp;functionalities of modern operating systems.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p><strong>Algorithms:</strong></p><br>\n<br>\n<ul><br>\n<li>Additional Data structures (Heaps, Graphs)</li><br>\n<li>Divide and Conquer (General method, Analysis, examples - Sorting, Convex Hull, Matrix Multiplication)</li><br>\n<li>The Greedy method (General method, Analysis, examples - Shortest Paths, Spanning Trees)</li><br>\n<li>Dynamic Programming (General method, Analysis, Travelling salesperson, Transitive Closure)</li><br>\n</ul><br>\n<br>\n<p><strong>Operating Systems:</strong></p><br>\n<br>\n<ul><br>\n<li>Introduction to operating systems Structure</li><br>\n</ul><br>\n<br>\n<p><strong>Processes:</strong></p><br>\n<br>\n<ul><br>\n<li>Process concepts, lifecycle, process management, inter-process communication</li><br>\n</ul><br>\n<br>\n<p><strong>Scheduling:</strong></p><br>\n<br>\n<ul><br>\n<li>Scheduling fundamentals, CPU-I/O interleaving, (non-)preemption, context switching</li><br>\n<li>Scheduling algorithms: FCFS, SJF, SRTF, priority scheduling, round robin</li><br>\n</ul><br>\n<br>\n<p><strong>Memory Management:</strong></p><br>\n<br>\n<ul><br>\n<li>Segmentation</li><br>\n<li>&nbsp;Paging</li><br>\n<li>&nbsp;Limits of multi-programming</li><br>\n</ul><br>\n<br>\n<p><strong>File System:</strong></p><br>\n<br>\n<ul><br>\n<li>File management</li><br>\n<li>Directory and storage</li><br>\n<li>Hierarchies&nbsp;and access control</li><br>\n</ul><br>\n<br>\n<p><strong>Input and Output:</strong></p><br>\n<br>\n<ul><br>\n<li>General structure</li><br>\n<li>Application I/O interface</li><br>\n<li>Block and character devices</li><br>\n<li>Buffering</li><br>\n<li>Blocking versus non-blocking I/O</li><br>\n</ul><br>\n<br>\n<p><strong>Security and Protection:</strong></p><br>\n<br>\n<ul><br>\n<li>Protection domain,</li><br>\n<li>Authentication</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:10.45pt\">On completion of the module a student should be able to:</p><br>\n<br>\n<ul><br>\n<li>Identify the fundamental strategies in algorithmic design;</li><br>\n<li>Distinguish which strategy is appropriate to solve a given problem; Classify different algorithmic strategies;</li><br>\n<li>Analyze a given algorithm and assess its efficiency;</li><br>\n<li>Apply techniques of proof by induction to verify certain properties of algorithms;</li><br>\n<li>Describethe general structure and purpose of an operating system;</li><br>\n<li>Explain the concepts of process, address space, and file;</li><br>\n<li>Compare and contrast various CPU scheduling algorithms;</li><br>\n<li>Understand the differences between segmented and paged memories, and be able to describe the advantages and disadvantages of each;</li><br>\n<li>Compare and contrast polled, interrupt-driven and DMA-based access to I/O devices.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong>CS1FC16 Fundamentals of Computer Science and CS1PC20 Programming in C/C++  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3IA16": {
      "module_id": "CS3IA16",
      "title": "Image Analysis",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>&nbsp;The module delivers a set of topics involved in image analysis, such as image enhancement, image compression, image segmentation, and colour image processing. Relevant techniques are introduced in lectures and practised in assigned lab-based coursework.&nbsp;</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>This module covers the following topics:</p><br>\n<br>\n<ul><br>\n<li>digital image fundamentals;</li><br>\n<li>image enhancement in the spatial domain;</li><br>\n<li>image enhancement in the frequency domain;</li><br>\n<li>colour image processing;</li><br>\n<li>mathematical morphology in image processing;</li><br>\n<li>image compression;</li><br>\n<li>image segmentation.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:5.95pt\">Students who complete this module will have:</p><br>\n<br>\n<ul><br>\n<li>basic skills for image analysis;</li><br>\n<li>the ability to address issues associated with image transformation, histogram analysis and modification, image morphological operations and colour image manipulation;</li><br>\n<li>skills to develop algorithms for digital image enhancement, image compression and texture-based image segmentation.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn / Summer term module<br>\n<strong>Pre-requisites: </strong>CS1MA16 Mathematics for Computer Science or CS1MA20 Mathematics and Computation or CS1MA20NU Mathematics and Computation or MA1LA Linear Algebra  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2SS20": {
      "module_id": "CS2SS20",
      "title": "Software System Design with UML",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module delivers the Unified Modelling Language (UML) methodology and its selected techniques which aid to articulate system users\u2019 needs and then transform the needs on to software application solutions. Students will be engaged in an interactive learning environment in that they develop professional application design knowledge and skills.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>OO design theory and process;</li><br>\n<li>UML design methodology;</li><br>\n<li>UML techniques with their concepts and principles;</li><br>\n<li>Requirement specifications modelling in both static and dynamic perspective in a given context; and</li><br>\n<li>Validation of the models and their input and output.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>A student completing the module should be able to</p><br>\n<br>\n<ul><br>\n<li>Understand the object-oriented (OO) systems theory;</li><br>\n<li>Establish a \u201cSystems Thinking\u201d approach for conducting requirement analysis and software design;</li><br>\n<li>Master the UML methodology including its techniques to modelling requirements specifications; and</li><br>\n<li>Apply the UML techniques in a context domain and evaluate design decisions.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3VI18": {
      "module_id": "CS3VI18",
      "title": "Visual Intelligence",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module covers the topics of visual perception and computer vision.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The module includes the following: introduction to natural vision (human perception); theory of image-based pattern classification; geometric-based vision; appearance-based vision; object recognition; applications of computer vision.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:5.95pt\">Students who complete this module will have:</p><br>\n<br>\n<ul><br>\n<li>basic knowledge of human perceptual skills relating to vision;</li><br>\n<li>the ability to address high level issues relating to computer vision including pattern classification, knowledge of geometric-based vision and appearance-based vision;</li><br>\n<li>knowledge of application of computer vision including generic object recognition, cognitive computer vision and computational visual surveillance.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>School of Mathematical, Physical and Computational Sciences<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong>CS1MA16 Mathematics for Computer Science or CS1MA20 Mathematics and Computation or CS1MA20NU Mathematics and Computation or MA1LA Linear Algebra  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong>CS3IA16 Image Analysis   <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2QT19": {
      "module_id": "CS2QT19",
      "title": "Software Engineering: Quality and Testing",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>Exploring software testing in the context of overall quality and competing commercial pressures, the module develops the knowledge and skills required for planning and executing comprehensive testing, including static and dynamic approaches, and methods of automation.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Introduction to requirements, testing and quality systems;</li><br>\n<li>The fundamental test process;</li><br>\n<li>Testing throughout the lifecycle, acceptance and regression testing;</li><br>\n<li>Testing techniques;</li><br>\n<li>Test management;</li><br>\n<li>Designing practical testing systems;</li><br>\n<li>Testing in Agile projects;</li><br>\n<li>Introduction to the Capability Maturity Model.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>By the end of the course, students should be able to:</p><br>\n<br>\n<ul><br>\n<li>Explain why testing is necessary;</li><br>\n<li>Create a quality plan for the lifecycle of development;</li><br>\n<li>Define test cases for black and white box problems;</li><br>\n<li>Manage and execute static tests; with particular attention to requirements and design documents;</li><br>\n<li>Present a systems view of preparing and executing, managing and reporting tests;</li><br>\n<li>Explain the challenge of testing in agile environments;</li><br>\n<li>Relate the test activity to the Capability Maturity Model (CMM).</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong>CS1SE20 Software Engineering: Fundamentals and Professional Development and CS1PC20 Programming in C/C++  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3AI18": {
      "module_id": "CS3AI18",
      "title": "Artificial Intelligence",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>The main goal of this module is to familiarise students with fundamental methods in Artificial Intelligence such as supervised, unsupervised, reinforcement and deep learning. The students will learn how to apply these methods to real-life problems.</p><br>\n<br>\n<p>The module aims to provide students with theoretical and practical knowledge of Artificial Intelligence from various techniques and applications.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Nature and goals of artificial intelligence, its application areas</li><br>\n<li>Training machine learning models</li><br>\n<li>Natural language processing</li><br>\n<li>Image processing</li><br>\n<li>Deep learning</li><br>\n<li>Reinforcement learning</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:5.95pt\">By the end of the module, students should be able to:</p><br>\n<br>\n<ul><br>\n<li style=\"margin-left: 5.95pt;\">understand the basic algorithms and techniques of artificial intelligence;</li><br>\n<li style=\"margin-left: 5.95pt;\">apply state-of-the-art artificial intelligence algorithms and methods to real-world problems to create a small-scale AI project.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>School of Mathematical, Physical and Computational Sciences<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1HW22": {
      "module_id": "CS1HW22",
      "title": "HCI and Web Applications",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module introduces both the theory and practice of Human-Computer Interaction (HCI) between computers and humans, in particular adopting experience of interactive design for web- based architectures and systems, and using HCI heuristic principles for evaluating user interface in terms of information visualisation. The HCI methodology can be used to guide a development process for web-based applications that enhances useability of the web application. &nbsp;</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>HCI theory and methodology</li><br>\n<li>psychology/physiology of the human perception and behaviour interacting with computing devices</li><br>\n<li>Articulate user requirements for web-based applications</li><br>\n<li>Construct conceptual and physical design leading to implementation for look-and-feel of a web application front-end</li><br>\n<li>Adopt HTML, CSS, and JavaScript in implementation of a web application</li><br>\n<li>Apply HCI evaluation techniques (including heuristic evaluation, expert evaluation and user testing) to measuring usability and accessibility as well as professional and ethical issues towards a resultant web application</li><br>\n<li>Trends of HCI and web development in the modern computing era</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>A student completing the module should be able to</p><br>\n<br>\n<ul><br>\n<li>understand the theory, principles, and methodology of Human-Computer Interaction (HCI)</li><br>\n<li>apply the range of HCI methods and techniques in design, development, and evaluation of web-based applications</li><br>\n<li>represent look-and-feel in given real-world context and ensure its useability in the web-based application</li><br>\n<li>evaluate critically the developed wen-based application against user experience and expectation</li><br>\n<li>implement a look-and feel with HTML, CSS, and JavaScript for a front-end of web-based applications</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3SC17": {
      "module_id": "CS3SC17",
      "title": "Social, Legal and Ethical Aspects of Computing",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module provides students with a sound grounding in a range of social, legal, ethical and professional (SLEP) issues that might arise in their possible roles as working in technology related disciplines.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The social impact of technological change will be taught using interactive lectures, presenting a topic to the class and giving a starting point from which the students can give their own ideas and reasoned arguments. Encouragement will be given for students to continue these discussions outside lectures both in person and using online discussion tools such as Blackboard.</p><br>\n<br>\n<p>Assignments (requiring self-directed research) will support the aims of the module, in the form of assessment for learning.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>By the end of the course, students should be able to:</p><br>\n<br>\n<ul><br>\n<li>Understand the impact that new technologies have on individuals, businesses, communities and globally;</li><br>\n<li>Present compelling arguments about the social impact of new technological developments;</li><br>\n<li>Understand the legal and ethical implications of providing a service or product;</li><br>\n<li>Understand the legal and ethical issues of holding and using data.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2AY20": {
      "module_id": "CS2AY20",
      "title": "Study Abroad Year",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module provides opportunities for students who wish to study abroad at a university with which the University of Reading has an exchange agreement. The student first applies to a host university abroad, and selects modules offered by the host university. These modules are equivalent to 120 credits from the University of Reading.&nbsp;&nbsp;</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The module is based on exchange programmes with universities in other countries. It consists of an approved number of credits from a host university amounting to the equivalent of 120 credits from the University of Reading. Support and advice about applying for places can be obtained from the Study Abroad office in the University of Reading.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>By the end of the module, it is expected that the student will be able to successfully pass oral and/or written examinations according to the requirements of the host university.</p><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>120 [60 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2CO16": {
      "module_id": "CS2CO16",
      "title": "Compilers",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module presents&nbsp;the theory and practice of compilers, including how to write a compiler and introductory computation theory. A compiler turns source code written by a human into machine code executable by a computer. Thus knowing how a compiler works allows one to understand the connection between programming and computer architecture. The module also considers broader issues in programming language design and implementation.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>The typical structure of a compiler and how it enables code reuse;&nbsp;</li><br>\n<li>Different ways of specifying a programming language;</li><br>\n<li>Regular expressions and grammars in Backus Naur Form (BNF) for specifying programming language tokenisation and syntax;</li><br>\n<li>Lexical analysis and syntax analysis using parser generators, such as lex/yacc or ANTLR;&nbsp;</li><br>\n<li>Writing a simple lexical analysis engine or recursive descent parser by hand;</li><br>\n<li>Finite state automata and their relevance to lexical analysis;</li><br>\n<li>Earley\u2019s parsing algorithm (or some other parsing algorithm) for context free grammars;&nbsp;</li><br>\n<li>Semantic analysis : the roles of variable scoping, storage allocation and types in a programming language;</li><br>\n<li>Intermediate code generation for a variety of common programming language constructs, such as assignment, compound expressions, conditionals, loops, functions, arraysand objects;</li><br>\n<li>Machine code generation;</li><br>\n<li>Goals of program optimisation and the importance of considering side effects in ensuring safe optimisation;</li><br>\n<li>Some common program optimisations;</li><br>\n<li>Fundamental limits of optimisation, as imposed by the Halting Theorem.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>On completion of this module, students will be able to:</p><br>\n<br>\n<ul><br>\n<li>Write a compiler for a simple programming language, or modify an existing one;</li><br>\n<li>Use a parser generator to create a parser for a programming language;</li><br>\n<li>Describe and explain the purpose of each stage in a typical compiler;</li><br>\n<li>Compute whether a finite state automaton recognises an input word;</li><br>\n<li>Convert descriptions of regular languages between naturallanguage, regular expressions and finite state automata;</li><br>\n<li>Suggest a rule in Backus Naur Form (BNF) for a particular programming language construct;</li><br>\n<li>Draw a parse tree or left-most derivation for a sentence, given a grammar in BNF;</li><br>\n<li>Describe how a parsing algorithm works and trace its execution for a simple example;</li><br>\n<li>Demonstrate that a given grammar is ambiguous;</li><br>\n<li>Rewrite an ambiguous grammar to enforce the correct precedence or associativity;</li><br>\n<li>Explain the role of types in a programming language;</li><br>\n<li>Suggest what type checks are necessary for a programming language construct or fragment of code;</li><br>\n<li>Write intermediate code corresponding to high-level language code;</li><br>\n<li>Describe common programming language optimisations and apply them to high-level language code or intermediate code;</li><br>\n<li>Critically analyse the correctness and effectiveness of unfamiliar optimisations;</li><br>\n<li>State the Halting Theorem and its relevance to program optimisation;&nbsp;</li><br>\n<li>Informally prove the Halting Theorem;</li><br>\n<li>Critically analyse decisions in programming language design and implementation.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong>CS1PR16 Programming or CS1PC20 Programming in C/C++  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3DP19": {
      "module_id": "CS3DP19",
      "title": "Distributed Systems and Parallel Computing",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module introduces concepts, principles, tools, techniques and algorithms for distributed systems and parallel computing, and examines the deployment of relevant applications in Cloud, big data analytics, and massive-parallel environment. In this context, this module covers the topic ranging from hardware and software architectures and algorithms in the development of distributed systems, MapReduce program paradigm and Hadoop ecosystems, and in-memory and stream computing tools such as Spark, Storm, and Flink; to parallel programming paradigms for relevant hardware and software applications, such as OpenMP and MPI, and massive parallelism provided by GPUs. Talks from academia and industry will be incorporated in teaching for value adding in learning.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Overview to distributed and parallel computing; hardware and software architectures</li><br>\n<li>Use-cases for distributed and parallel applications from industry and science</li><br>\n<li>Issues in designing of distribution and parallel systems and algorithms</li><br>\n<li>Industry relevant processing models for big data and tools like Hadoop and Spark</li><br>\n<li>Relevant algorithms and data structures</li><br>\n<li>Introduction to scientific computing</li><br>\n<li>Parallel programming paradigms and concepts with a focus on OpenMP and MPI</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>Students completing this module should be able to:</p><br>\n<br>\n<ul><br>\n<li>characterize distributed systems and parallel computing</li><br>\n<li>understand how to solve parallel problems via distributed and parallel algorithms</li><br>\n<li>implement solutions for easy distributed and parallel problems</li><br>\n<li>harness the capabilities of distributed and parallel environments including on personal devices assess the characteristics of distributed applications and systems</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1AC16": {
      "module_id": "CS1AC16",
      "title": "Applications of Computer Science",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module introduces popular applications associated with computers, including artificial intelligence, robotics, virtual reality, computer vision&nbsp;and data analytics.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The module consists of four application themes, as listed below:</p><br>\n<br>\n<ul><br>\n<li>Artificial intelligence: here various methods are discussed which are used for \u2018intelligent\u2019 computing machines. These include classical AI methods such as Expert Systems and Problem Solving, as well as neural networks and evolutionary computing methods which, have been inspired by natural systems. Applications for artificial intelligence algorithms are also considered;</li><br>\n<li>Robotics, Artificial Life and Virtual Reality: a cybernetic approach to these subjects is taken, showing how the theme of feedback is key to the control of robots, interaction with robots, computers and humans, and learning by robots and other forms of artificial life. Different types and applications of robots are described, their history given and their brain, sensors and actuators are discussed. Interaction is explored in terms of robots interacting with humans and robots, and humans in Virtual Reality systems, for which computer graphics and haptics are also discussed. Concepts in artificial life are explored, including mobile robots, Game of Life, Daisyworld as well as Fractals and, Lindemayer systems which can be used in virtual worlds;</li><br>\n<li>Computer vision:&nbsp; this is the science behind development of capability to emulate (or possibly exceed) human's ability to visually sense the world, and is concerned with the automatic extraction, analysis and understanding of useful information from a single image or multiple images.&nbsp; This block of lectures will specifically focus on of some of most important methodologies and applications of computer vision and include topics such as biometrics, detection and tracking, deep learning, and behavioural recognition.&nbsp; The lectures cover both the underpinning theory behind the different topics presented as well as a deeper understanding of how the methods are applied in the real world;</li><br>\n<li>Data analytics: Students are introduced to the concept of extracting useful information from data, covering types of data, data sources, pre-processing and manipulation techniques, feature selection and transformation, and data visualisation. These concepts are applied with hands-on activities using relevant software.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\nStudents completing this module should be able to describe typical techniques and apply relevant algorithms to  artificial intelligence and robots, to use basic algorithms describing tasks involved in computer vision and computer graphics; and to deal with data workflows with relevant data analytical tools.\n</p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1MA20": {
      "module_id": "CS1MA20",
      "title": "Mathematics and Computation",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>An introduction to mathematics which is relevant to computer science, including linear algebra, probability and statistics. The focus of the module is more on understanding the concepts and considering how they can be implemented on a computer, than in pure mathematics.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>Linear algebra (7 credits):</p><br>\n<br>\n<ul><br>\n<li>Matrices, elementwise operations, trace, transpose, multiplication. Implementations as code (e.g. in MATLAB).</li><br>\n<li>Linear transformations</li><br>\n<li>Matrix determinant, inverse. Implementations as code (e.g. in MATLAB).</li><br>\n<li>Vectors</li><br>\n<li>Matrix rank</li><br>\n<li>Gaussian elimination. Implementation as code (e.g. in MATLAB).</li><br>\n<li>Eigenvalues and eigenvectors</li><br>\n<li>Introduce applications of linear algebra (computer graphics, machine learning)</li><br>\n</ul><br>\n<br>\n<p>Graphical Representation (3 credits)</p><br>\n<br>\n<ul><br>\n<li>Introduction of relevant functions, including polynomials, trigonometrical, exponential and logarithmic.</li><br>\n<li>Draw graphs of relevant functions</li><br>\n<li>Interpret key aspects of graphs</li><br>\n<li>Use MATLAB for plotting graphs</li><br>\n</ul><br>\n<br>\n<p>Implementation of numerical algorithms in MATLAB (4 credits), covering concepts of integration as area under curve, differentiation as gradient e.g.:</p><br>\n<br>\n<ul><br>\n<li>Newton\u2013Raphson method</li><br>\n<li>Basic numerical quadrature</li><br>\n<li>Euler's method for first order differential equations</li><br>\n<li>Computer science applications</li><br>\n</ul><br>\n<br>\n<p>Complex numbers (2 credits):</p><br>\n<br>\n<ul><br>\n<li>Working with complex numbers</li><br>\n<li>Representations</li><br>\n<li>Modulus and argument of complex numbers</li><br>\n<li>Computer science applications of complex numbers</li><br>\n<li>Using complex numbers in programs.</li><br>\n</ul><br>\n<br>\n<p>Probability and Statistics (4 credits):</p><br>\n<br>\n<ul><br>\n<li>Simple probabilities</li><br>\n<li>Probability Distributions</li><br>\n<li>Data analysis</li><br>\n<li>Correlation</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><ul><br>\n<li>Ability to perform calculations with matrices and vectors</li><br>\n<li>Ability to draw and interpret graphs</li><br>\n<li>Implementation of numerical methods</li><br>\n<li>Calculations with complex numbers</li><br>\n<li>Ability to use probability and statistics</li><br>\n<li>Knowledge of applications of these methods in the context of the subject</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2SA16": {
      "module_id": "CS2SA16",
      "title": "Service-Oriented System Applications",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p style=\"margin-left:5.95pt\">The module aims to adopt service-oriented concepts and principles for developing and integrating software applications and technology. This approach represents business operations in \u201cbusiness services\u201d and breaks down a software application into common repeatable \u201capplication services\u201d and \u201ctechnology services\u201d. Using this approach, enterprises can configure and reconfigure these sets of services for conceptualising service-oriented systems applications which are aligned with business structure and goals. In order to represent the architectural requirements, the enterprise architecture and ArchiMate can be employed for modelling service-oriented systems applications.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Fundamentals of a service-oriented business application</li><br>\n<li>Service-oriented functional components for building and integrating the business applications (e.g. CRM, ERP, and SCM);</li><br>\n<li>The enterprise architecture methodology with its techniques through the modelling language of ArchiMate;</li><br>\n<li>Modelling of enterprise architecture elements and aligning the system application elements with their influential enterprise elements from the business layer and technology layer;</li><br>\n<li>Validation of the architecture design through a given scenario.</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>After completing the module, a student should be able to:</p><br>\n<br>\n<ul><br>\n<li>Understand the service orientation paradigm and the enterprise architecture theory to aid enterprise analytics;</li><br>\n<li>Apply the enterprise architecture theory to specify key business and technical elements, and the alignment between these elements in an enterprise;</li><br>\n<li>Use the modelling language of ArchiMate to model an enterprise architecture to reveal business strengths and weaknesses, and sustainability which are largely determined by an integration of business operations, applications, and technologies;</li><br>\n<li>Use the enterprise architecture model to support decision making on improvements and predict the future business.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3DS19": {
      "module_id": "CS3DS19",
      "title": "Data Science Algorithms and Tools",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>Automated data collection and mature database technology lead to tremendous amounts of data stored in databases, data warehouses and other information repositories. In this context, automated data analysis and data modelling tools and algorithms (Data Mining) are becoming essential components to any information system. Application areas of these techniques include scientific computing, intelligent business, direct marketing, customer relationship management, market segmentation, store shelf management, data warehouse management, fraud detection in e-commerce and in credit card transactions, etc.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Introduction to Data Mining;</li><br>\n<li>Introduction to Data Science and Machine Learning platforms</li><br>\n<li>KNIME</li><br>\n<li>Data preprocessing;</li><br>\n<li>Proximity measures;</li><br>\n<li>Regression, Classification and model evaluation;</li><br>\n<li>Clustering and cluster validity;</li><br>\n<li>Decision Tree Induction;</li><br>\n<li>Association Rule Mining;</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>Students are expected to understand the general Data Mining principles and techniques, and to be able to apply them in different contexts. In a practical project a data workflow is designed and developed using advanced tools for data science to combine data mining algorithms and analyse real-world datasets.</p><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1FC16": {
      "module_id": "CS1FC16",
      "title": "Fundamentals of Computer Science",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\nThis module introduces the essential concept of computer systems in the autumn term, and the foundations of data structures and algorithms in the spring term.\n</p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>In the autumn term:</p><br>\n<br>\n<ul><br>\n<li>General introduction to computer systems and hardware/software interaction;</li><br>\n<li>Information representation: binary representation of text, integer, and floating points;</li><br>\n<li>Data manipulation: the role of computer architecture, instructions and program execution;</li><br>\n<li>Instruction set architecture</li><br>\n<li>Processors and pipelining</li><br>\n<li>Memory hierarchy design</li><br>\n</ul><br>\n<br>\n<p>In the spring term</p><br>\n<br>\n<ul><br>\n<li>Operating systems: components and their functions;</li><br>\n<li>Computer networking: network classification, protocols, internet architecture and applications;</li><br>\n<li>Information security: threats and protections, good practices;</li><br>\n<li>Algorithms: the art of problem solving, iterative and recursive methods and assessing complexity;</li><br>\n<li>Practical examples, including searching and sorting, graphical and numerical;</li><br>\n<li>Data structures: arrays, stacks, queues;</li><br>\n<li>Encoding of strings, vectors and matrices;</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>Students completing this module should be able to:</p><br>\n<br>\n<ul><br>\n<li>describe the structure of computer systems and the interaction between software and hardware; use binary code for information representation</li><br>\n<li>articulate data manipulation inside a computer system through a machine language (instructions) and relevant operations</li><br>\n<li>establish knowledge of instruction set and memory hierarchy architectures in a computer system</li><br>\n<li>explain the role of computer networking in computer communication, including internet and its applications</li><br>\n<li>appreciate the importance of information security in computer design and usages explain the role of designing algorithms, as distinct from designing programs describe and use various data structures in computer programs</li><br>\n<li>implement and analyse an algorithm and assess its efficiency</li><br>\n<li>Perform simple computations, and suggest a suitable encoding for data structures and write code to process it</li><br>\n<li>Compare and contrast different machine arithmetics, such as fixed point and floating point</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1PC20": {
      "module_id": "CS1PC20",
      "title": "Programming in C/C++",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module&nbsp;introduces students to procedural and object-oriented programming principles and programming languages in C and C++.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ol><br>\n<li>Computing Concepts, Introduction to Programming and Structured Program Development</li><br>\n<li>The C programming language; Program Control; Types and Operators; Functions; Arrays and Pointers; Characters and Strings; Formatted Input/Output; Structures, Unions, and Enumerations; File Processing; Data Structures</li><br>\n<li>Introduction to object-oriented programming; Encapsulation; Inheritance; Polymorphism</li><br>\n<li>The C++ programming language; Classes; Inheritance; Operator Overloading; Templates; Advanced Topics</li><br>\n<li>Using UNIX and Windows operating systems; Compilers, Linkers, Debuggers and Integrated Development Environments; typical computer organization</li><br>\n</ol><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><ul><br>\n<li>Recognise and describe programming constructs in C and C++</li><br>\n<li>Explain and demonstrate how to compile, link and run programs with and without integrated development environments</li><br>\n<li>Compare the use of Windows and UNIX for programming&nbsp;</li><br>\n<li>Explain and demonstrate how to edit, test and debug programs</li><br>\n<li>Analyse easy problems and design and implement an algorithm to solve them&nbsp;</li><br>\n<li>Describe fundamental concepts and algorithms that are relevant in programming</li><br>\n<li>Describe how code is executed by a computer&nbsp;&nbsp;</li><br>\n<li>Predict what a segment of code will produce (tracing)&nbsp;</li><br>\n<li>Critically evaluate programming solutions</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3IP16": {
      "module_id": "CS3IP16",
      "title": "Individual Project",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p style=\"margin-left:5.95pt\">In this module, students work individually on their final year project, which is worth 40 credits (out of 120 credits). The student must pass this module in order to be awarded an honors degree as this is a BCS requirement.</p><br>\n<br>\n<p style=\"margin-left:5.95pt\">This module also encourages students to develop a set of professional skills, such as problem-solving;&nbsp; creativity; critical thinking; hypothesis generation and testing; literacy; action planning and decision making; self-reflection; negotiation and persuasion; organisation and time management; professional communication (with supervisors and peers); initiative and self-motivation; software design and development; effective use of commercial software; end-user awareness; presentation skills; and technical report writing for technical and non-technical audiences.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The final year project will usually be related to current research and industrial activities in the department. Students will plan their project, carry it out, present it orally in a formal setting, and give a practical demonstration to a panel of academics. Students will be able to express preferences for their choice of final project based on staff project proposals. Students are also able to propose their own projects. All project proposals are scrutinised for suitability for the particular degrees.<br><br>\nArrangement for supervision will normally take the form of a regular meeting (in a group) with supervisor and, as part of the formal progress monitoring process, weekly log-book sign off. Full details of the project arrangements, project titles, monitoring, assessment and timetable for submission of reports are made available to all relevant students via Blackboard by the end of Summer Term of Part 2.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:12.2pt\">To embrace the analytical and methodological approach of a professional. Students are set a major project which they have to plan, design, implement, test, evaluate and present both orally and in written form. By the end of the module, it is expected that the student will be able to:</p><br>\n<br>\n<ul><br>\n<li style=\"margin-left: 12.2pt;\">independently identify, research and synthesise literature relevant to the problem;</li><br>\n<li style=\"margin-left: 12.2pt;\">apply relevant techniques to systematically design a solution to a problem;</li><br>\n<li style=\"margin-left: 12.2pt;\">implement and/or build a suitable solution, with systematic test and evaluation;</li><br>\n<li style=\"margin-left: 12.2pt;\">develop a professional approach to record-keeping and log-book maintenance which in turn enhances the student\u2019s ability to maintain a professional development record;</li><br>\n<li style=\"margin-left: 12.2pt;\">demonstrate competence in producing professional standard project report; and</li><br>\n<li style=\"margin-left: 12.2pt;\">critically appraise and reflect on their own work about what has been achieved and the extent to which the objectives of the project have been satisfied.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>40 [20 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2CA17": {
      "module_id": "CS2CA17",
      "title": "Computer Architecture and Networking",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module introduces Computer Networking in the autumn term and Computer Architecture, based on RISC/MIPS architecture, in the spring term.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The core concepts of network architecture and communication protocols, which present in the framework of multi-tier architectures, are discussed in the autumn term. These include Local Area Networking (LAN) routing and Ethernet protocols; Internetworking; and error, congestion and flow control. The module covers network technologies ranging from local area networks to the Internet, including Ethernet with a focus on TCP/IP, IP addressing, routing protocols, and congestion control schemes within the Internet. An introduction is also given to the core Internet applications, such as email, web serving and name resolution.</p><br>\n<br>\n<p>In the spring term, the module introduces the underlying theory of modern computer architecture in terms of instruction set architecture, organisation, and hardware. It begins with an introduction to the fundamentals of computer design for Von Neumann architecture, and continues with an examination of the components of processor, memory and input/output. DLX, which is an educational edition of MIPS and RISC architecture, is used as a model machine in teaching. An important theme is the relationship between architecture and performance. The module covers modern techniques for improving computer performance, such as instruction-level parallel processing (pipelining), and cache-memory-hierarchy design. The role of Input/Output in computer architecture with storage systems is also examined from the design point of view.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>Students who complete this module will have:</p><br>\n<br>\n<ul><br>\n<li>&nbsp;core concepts and knowledge of network architecture and communication protocols;</li><br>\n<li>ability to implement the concepts in real world network applications;</li><br>\n<li>basic skills for computer architecture design;</li><br>\n<li>ability to quantitatively evaluate computer performance by using benchmark suites;</li><br>\n<li>skills to improve computer performance by using hardware and software techniques.</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring / Summer module<br>\n<strong>Pre-requisites: </strong>CS1PR16 Programming or CS1PC20 Programming in C/C++ and CS1FC16 Fundamentals of Computer Science  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS1SE20": {
      "module_id": "CS1SE20",
      "title": "Software Engineering: Fundamentals and Professional Development",
      "level": "1",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p style=\"margin-left:5.95pt\">This module introduces students to the concepts, practice and management in software engineering and the professional development to support it. It addresses the lifecycle activities associated with developing software as part of a system as well as the management activities required to ensure that the software is developed on time, within budget and is fit for purpose. The module also incorporates case studies and examples to show the application of the concepts and principles to real-world systems.</p><br>\n<br>\n<p style=\"margin-left:5.95pt\">A learning approach is adopted which reflects software engineering theory and practice. Students &nbsp;&nbsp;are given course material to read/view prior to the lectures, and are required to produce a number of assessments in teams.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p style=\"margin-left:5.95pt\">The module draws on the IEEE\u2019s articulation of knowledge on the subject, as presented in the Software Engineering Book of Knowledge v3 (SWEBOK).</p><br>\n<br>\n<ul><br>\n<li>&nbsp;Introduction to Software Engineering (e.g. models, methods, processes, and management).</li><br>\n<li>Human factors in Software Engineering</li><br>\n<li>Software requirements fundamentals, processes, requirements elicitation techniques/tools</li><br>\n<li>Software design fundamentals, architecture, design techniques and modelling approaches</li><br>\n<li>Software construction fundamentals, technologies/tools, environments</li><br>\n<li>Software validation methods, and testing techniques</li><br>\n<li>Software maintenance and configuration management</li><br>\n<li>Software quality requirements, measurement, and management</li><br>\n<li>Software Engineering professional practices (e.g. professionalism, legal, ethical, economic impact of software, documentation, communication skills in written and presentation form)</li><br>\n<li>Software Engineering in the modern computing era (e.g. DevOps transformation)</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p style=\"margin-left:13.3pt\">By the end of the module, it is expected that the student will be able to:</p><br>\n<br>\n<ul><br>\n<li>Understand the software engineering theory, and practice them in developing software applications in the wide domain context</li><br>\n<li>Describe the software lifecycle and the activities associated with each phase of it (feasibility, requirements, design, implementation, testing, handover, maintenance, evolution, and decommissioning)</li><br>\n<li>Create software application development project plans, and conduct risk analysis, configuration management and testing</li><br>\n<li>Distinguish the difference between plan-based and agile-based approaches to software development</li><br>\n<li>Appreciate the importance of software engineering to real-world projects</li><br>\n<li>Work jointly with others in a group project as well as being able to work independently</li><br>\n<li>Demonstrate innovative, creative, and critical thinking towardsa development of solution</li><br>\n<li>Perform in communication and documentation</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>4<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3TM20": {
      "module_id": "CS3TM20",
      "title": "Text Mining and Natural Language Processing",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>This module introduces both the theory and practice of Text Mining and Natural Language Processing (NLP).</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>This module will provide an overview of the field of Text Mining and NLP and its sub-areas, and will introduce and explain its key techniques, including their applicability and limitations. Topics covered will include:</p><br>\n<br>\n<ul><br>\n<li>Regular expression, Text Normalization</li><br>\n<li>N-gram and language model, part-of-speech tagging</li><br>\n<li>lexical semantics, Word Senses and WordNet</li><br>\n<li>Syntactic and Semantic parsing</li><br>\n<li>Text classification, sentiment analysis</li><br>\n<li>Information extraction including name entity recognition and relation extraction</li><br>\n<li>Advanced topics: Machine learning for NLP, Word embedding, Hidden Markov model and Viterbi algorithm</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>By the end of this module, students should be able to</p><br>\n<br>\n<ul><br>\n<li>Understand and apply the fundamental principles of text mining and natural language processing;</li><br>\n<li>Apply methods and algorithms to process different types of textual data;</li><br>\n<li>Empirically evaluate the performances of methods and algorithms by using accuracy and efficiency metrics; and</li><br>\n<li>Apply analytical and programming skills through using the existing NLP methods andtools such as NLTK and scikit-learn (python)</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2PJ20": {
      "module_id": "CS2PJ20",
      "title": "Programming in Java",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p style=\"margin-left:5.95pt; margin-right:-.05pt\">This module introduces to students the fundamentals of programming using Java and its usage in developing real world applications. It will be delivered in two parts and will comprise of in-person lectures and practical sessions to provide students with hands-on experience of writing Java programs using integrated development environment tools. The first part will focus on the syntax, semantics and idioms of Java programming language and in the second part focus will be on introducing concepts of Android programming using Java.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Introduction to Java Programming</li><br>\n<li>Object Oriented Programming in Java using classes</li><br>\n<li>Structure of the Java Language&nbsp;</li><br>\n<li>Developing GUIs (Widgets, Event driven Programming)</li><br>\n<li>Storing and Retrieving Data with File I/O</li><br>\n<li>Working with Databases (JDBC, MySQL)</li><br>\n<li>Java development tools (JDK, JAR, IDEs)</li><br>\n<li>Android app development</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>On completion of this module, students will be able to</p><br>\n<br>\n<ul><br>\n<li>Implement object-oriented designs with Java.</li><br>\n<li>Identify Java language components and how they work together in applications.</li><br>\n<li>Design, program and debug Java applications</li><br>\n<li>Extend Java classes with inheritance and dynamic binding</li><br>\n<li>Use the Java Collections API and generates API documentation for their own application</li><br>\n<li>Understand how the various components of an Android app work</li><br>\n<li>Develop deployable android apps</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>20 [10 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Autumn / Spring term module<br>\n<strong>Pre-requisites: </strong>CS1PC20 Programming in C/C++  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3BC20": {
      "module_id": "CS3BC20",
      "title": "Blockchain Computing",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>The advent of Blockchain technologies as a confluence of distributed systems for transferring value, asymmetric encryption and consensus seeking algorithms has evolved through a trend from web2.0, web3.0, and crowdsourcing promising computing for decentralisation and democratisation of transaction processing.&nbsp;</p><br>\n<br>\n<p>The increasing number of potential application domains being considered for the take-up and scale-up of this technology makes a compelling case for the provision of this course.&nbsp; &nbsp;This is to ensure that our Computer Science graduates\u2019 awareness of latest technological developments and their employability prospects are enhanced through gaining a sufficiently deep understanding of this emerging technology.<br><br>\n&nbsp;&nbsp;<br><br>\nThis modules will deliver a theoretical and practical implementation level understanding of the various layers of the Blockchain technology stack including asymmetric encryption, mining (Proof-of-Work), Proof-of-Stake&nbsp; consensus algorithms, Blockchain validation and integration as well as the potential Ethical, Legal and Societal issues arising from failure to incorporate the appropriate security-privacy safeguards.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><ul><br>\n<li>Introduction to the fundamental concepts of a distributed trustless ledger such as immutability, irreversibility, the layers of Blockchain technology stack; including overview of the architectural layers of a Blockchain, network (peer-to-peer) and the data structures</li><br>\n<li>Transactions processing, hashing, asymmetric encryption</li><br>\n<li>Digital signature, consensus algorithms</li><br>\n<li>Consensus reaching using variants of Proof-of-Work &nbsp;and Proof-of-Stake algorithms</li><br>\n<li>Smart contracts&nbsp;</li><br>\n<li>Concepts re integrity and resolution of Blockchain, avoiding duplication of work</li><br>\n<li>Byzantine Fault Tolerance: fault tolerance amongst the peer-to-peer network of nodes</li><br>\n<li>Merkle root algorithm, forks resolution, interoperability</li><br>\n<li>Security &amp; privacy, public versus private (Permissioned, Permissionless) Blockchain</li><br>\n<li>Ethically and socially responsible design of Blockchains&nbsp;</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>At the end of the module studies, students should be able to:</p><br>\n<br>\n<ul><br>\n<li>Conceptualise the distributed ledger architecture at various levels of abstraction</li><br>\n<li>Understand the theoretical underpinning of Blockchain architectural layers</li><br>\n<li>Understand the issues relating to the efficient, secure and privacy-aware deployment of Blockchain layers</li><br>\n<li>Implement the primary layers of a Blockchain as a laboratory simulation of a small-scale Blockchain. This will help the students assimilate the subject more deeply and gain a systemic understanding of the Blockhain architecture through experience in analysing and building the primary Blockchain components and their integration.&nbsp;</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong>CS2DI17 Databases and Information Security or CS2DI17NU Databases and Information Security  <br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS3VR16": {
      "module_id": "CS3VR16",
      "title": "Virtual Reality",
      "level": "3",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>To describe virtual reality in terms of the scientific issues, application areas and strengths and weaknesses of the technology. To provide experience of various devices and software.&nbsp;To provide hands-on experience of various devices and software.</p><br>\n<br>\n<p>This module also encourages students to develop a set of professional skills, such as creativity (of virtual world), group work, scripting and effective use of commercial software.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>In a virtual reality, users can interact within a 3D computer-generated environment through multi- modal displays that support interaction through vision, hearing, and touch. This course will discuss what is (and is not) virtual reality, introduce topics relating to perception of virtual environments (e.g. stereo vision and sound localisation), and introduce a range of display and input technologies (e.g. head-mounted displays, cubic projection displays, and tracking technologies). The course will develop the mathematical and programming framework for highly interactive environments including modelling and animation of 3D objects, and the programming techniques used to render these in real-time.</p><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>By the end of the module, the student should be able to demonstrate an understanding of the techniques used in Virtual Reality and 3D modelling skills. The student will be able to compare the applicability of various VR technologies to given applications and be able to apply their understanding to the design of an entire VR system, composing display technology and software.</p><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>6<br>\n<strong>Terms in which taught: </strong>Autumn term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    },
    "CS2PP22": {
      "module_id": "CS2PP22",
      "title": "Programming in Python for Data Science",
      "level": "2",
      "summary": "<p><strong>Summary module description: </strong><br>\n</p><p>The module introduces students to the Python programming language and the Python data science library ecosystem through application of programming fundamentals, data processing, and machine learning techniques.&nbsp; Data manipulation and statistical data science methods are also covered.</p><br>\n<p></p>",
      "content": "<p><strong>Outline content: </strong><br>\n</p><p>The course begins with an introduction to the Python programming language and the Python library ecosystem.&nbsp; Students will perform a series of practical exercises designed to develop skill in Python scripting and wider program development. These will incorporate aspects of data analysis and professional and scientific research techniques.</p><br>\n<br>\n<p>The Python language will be covered in depth, including:</p><br>\n<br>\n<ul><br>\n<li>Data types, operators, and flow control</li><br>\n<li>Functional and object-oriented programming</li><br>\n<li>Using DataFrames to organise and manipulate data with Pandas</li><br>\n<li>Working with matrices and arrays using NumPy</li><br>\n<li>Data visualisation with Matplotlib</li><br>\n<li>Analysing data using scikit-learn</li><br>\n<li>Handling data with widely used, open-source Python libraries</li><br>\n</ul><br>\n<br>\n<p>Example application to data science:</p><br>\n<br>\n<ul><br>\n<li>Regression</li><br>\n<li>Clustering</li><br>\n<li>Classification</li><br>\n<li>Network (graph) analysis</li><br>\n</ul><br>\n<p></p>",
      "ilo": "<p><strong>Assessable learning outcomes:</strong><br>\n</p><p>On completion of this module, students will be able to:&nbsp;</p><br>\n<br>\n<ul><br>\n<li>Implement common computer science algorithms in the Python programming language;&nbsp;</li><br>\n<li>Demonstrate an understanding of the use of functional&nbsp;and object-oriented&nbsp;programming paradigms in Python;&nbsp;</li><br>\n<li>Read and manipulate data in several formats to extract specific features;&nbsp;</li><br>\n<li>Assemble, implement, and select appropriate data science methodologies in Python;</li><br>\n<li>Employ third-party Python libraries appropriately to&nbsp;design and create well-structured programs&nbsp;for practical applications.&nbsp;</li><br>\n</ul><br>\n<p></p>",
      "credits": "<strong>Module Provider: </strong>Computer Science<br>\n<strong>Number of credits: </strong>10 [5 ECTS credits]<br>\n<strong>Level:</strong>5<br>\n<strong>Terms in which taught: </strong>Spring term module<br>\n<strong>Pre-requisites: </strong><br>\n<strong>Non-modular pre-requisites: </strong><br>\n<strong>Co-requisites: </strong> <br>\n<strong>Modules excluded: </strong> <br>\n<strong>Current from: </strong>2023/4"
    }
  }
}