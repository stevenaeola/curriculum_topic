{
  "2023": {
    "Introductory Mathematics for Computer Science (COMP0011)": {
      "module_id": "Introductory Mathematics for Computer Science (COMP0011)",
      "title": "Introductory Mathematics for Computer Science (COMP0011)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to provide a grounding in mathematics and statistics most relevant to a Computer Science undergraduate degree.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Apply concepts in mathematics and statistics to frame problems&nbsp;and reason about them.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Mathematics:</p>\n\n<ul><li>Trig, exp and log.</li>\n\t<li>Polynomials.</li>\n\t<li>Limits and continuity.</li>\n\t<li>Differential calculus of one and two variables.</li>\n\t<li>Integration.</li>\n\t<li>Series summation and power series.</li>\n\t<li>Complex numbers.</li>\n\t<li>Vector spaces.</li>\n\t<li>Matrices.</li>\n\t<li>Linear Algebra.</li>\n</ul><p>Statistics:</p>\n\n<ul><li>Probability, descriptive statistics.</li>\n\t<li>Discrete random variables.</li>\n\t<li>Continuous random variables.</li>\n\t<li>Statistical estimation.</li>\n\t<li>Hypothesis testing.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Design and Professional Skills I (Computer Science) (ENGF0034)": {
      "module_id": "Design and Professional Skills I (Computer Science) (ENGF0034)",
      "title": "Design and Professional Skills I (Computer Science) (ENGF0034)",
      "summary": "<p>This module is intended to introduce you to engineering, design, technical communication and academic writing, as well as other engineering professional practices and skill sets necessary for your future employability. Technical communication in most cases can be broken down into writing, technical argument, and explanation, data visualisation as well as presentation. Specific components will include (but are not limited to) the following: an introduction to your chosen engineering discipline, the design process, critical and creative thinking, decision-making, problem solving, ethics and sustainability, industry standards and professional conduct, teamworking, leadership, project management, career preparation and employability. It will aim to deliver these through instruction, engagement, practice, and feedback. The module is taught through the context or application of your own chosen engineering discipline, computer science, which is supported through the teaching of technical skills required by the profession and industrial practices. Moreover, this module includes two intensive team-based projects, known as Scenarios, which are designed to help you practice the aforementioned technical and professional skills alongside developing your technical understanding and practice of computer science.\u202f&nbsp;</p>\n\n<p>This Design and Professional Skills I module is part of the engineering faculty\u2019s cross-faculty teaching framework called the Integrated Engineering Programme (IEP) and is designed to be integrated with the ENGF0001 Engineering Challenges module taught in parallel during Term 1. This means that content and skills will be referenced and referred to across these two modules.\u202f&nbsp;</p>\n\n<p><strong>Intended Learning Outcomes&nbsp;</strong></p>\n\n<p>By the end of the module, you should be able to:&nbsp;</p>\n\n<ul><li>\n\t<p>outline the basic elements of the design cycle, understand the underlying processes, and use these to tackle real engineering problems&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>describe an engineering problem and its constraints in a concise written or spoken report.&nbsp;</p>\n\t</li>\n</ul><ul><li>\n\t<p>give examples of ethical issues related to engineering and recall tools that can be used to analyse future problems as they arise&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>give examples of how your specific discipline interacts with sustainability and describe their responsibilities as an engineer in this regard\u202f&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>acknowledge the basic tools for critical thinking and problem-solving and use these to tackle real-world problems, whether engineering or otherwise&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>identify and describe the utility of important structural features in writing and presentation (such as introductions, conclusions, and topic sentences), use these effectively, and evaluate your use in others\u2019 work \u202f&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>analyse the audience for a given communication (report, video or talk/presentation) and determine the appropriate point of view, level of detail, and jargon\u202f&nbsp;</p>\n\t</li>\n</ul><ul><li>\n\t<p>describe and practice basic concepts in team-working, project management and engineering leadership, and recall the facilities available to you to develop your abilities in this area \u202f&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>recognise the level of conduct expected of them by the body governing their profession, explain why such codes of conduct are necessary; and recall where they are provided for all to witness\u202f&nbsp;</p>\n\t</li>\n\t<li>\n\t<p>report/present on discipline specific material such as programming with Python&nbsp;</p>\n\t</li>\n</ul><p>\u202f&nbsp;</p>\n\n<p>\u202f&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Discrete Mathematics for Computer Scientists (COMP0147)": {
      "module_id": "Discrete Mathematics for Computer Scientists (COMP0147)",
      "title": "Discrete Mathematics for Computer Scientists (COMP0147)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to equip first year computer science students with knowledge of foundational mathematics and logic that will be needed for future computer science modules. To provide students with basic tools and skills for mathematical problem solving, proof and refutation.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Analyse and solve typical problems in discrete mathematics and logic.</li>\n\t<li>Identify and reason with the logical content of arguments.</li>\n\t<li>Carry out standard mathematical proofs and refutations.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following is indicative of the topics the module will typically cover:</p>\n\n<p>The first part of the module will focus on foundational discrete mathematics, including but not necessarily limited to: functions and relations, permutations, group theory, set theory, cardinalities, diagonalisation, linear algebra and combinatorics. The module continues with mathematical reasoning, logical notation and proof by mathematical induction.<br><br><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed A-level Mathematics (or an appropriate equivalent).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Theory of Computation (COMP0003)": {
      "module_id": "Theory of Computation (COMP0003)",
      "title": "Theory of Computation (COMP0003)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to introduce students to formal logical reasoning and to fundamental concepts in the theory of computation and formal languages.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Identify and reason with the logical content of arguments.</li>\n\t<li>Recognise, write down and reason about automata and language grammars.</li>\n\t<li>Carry out standard proofs and refutations involving logic and computational models.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>This module introduces students to the theory of computation. The first half of the module will focus on mathematical logic, including: propositional logic, first-order logic, proof by induction and modal logic. The second half will focus on fundamentals of computation, automata and language theory.<br><br><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; and (2) have A-level Mathematics (or equivalent).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Algorithms (COMP0005)": {
      "module_id": "Algorithms (COMP0005)",
      "title": "Algorithms (COMP0005)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The aim of this module is to provide students with an introduction to data structures and algorithms that are fundamental to programming and to understand computation. We will apply these techniques to computational problems, with the aim to develop problem-solving skills, to develop the ability to analyse the efficiency of algorithms, and to encourage a thoughtful approach to the analysis and design of computational problems.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand a variety of fundamental data structures and be able to use them effectively in the design and implementation of algorithms.</li>\n\t<li>Understand a variety of fundamental algorithmic problems and algorithms for solving them.</li>\n\t<li>Analyse the space and time efficiency of algorithms and understand how to design efficient algorithms.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Analysis of algorithms</li>\n\t<li>Abstract Data Types</li>\n\t<li>Sorting Algorithms</li>\n\t<li>Searching Algorithms</li>\n\t<li>Graphs Algorithms</li>\n\t<li>String-processing Algorithms</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>Students are expected to have basic experience of programming in Python. Resources for self-study and Programming Tutor support will be provided in advance of the module.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Object-Oriented Programming (COMP0004)": {
      "module_id": "Object-Oriented Programming (COMP0004)",
      "title": "Object-Oriented Programming (COMP0004)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module provides a thorough introduction to object-oriented (OO) programming. The key object-oriented concepts such as class design, inheritance, dynamic binding and interfaces, are introduced along with design strategies for smaller sized object-oriented programs. Material is also included on data representation, the implementation of common data structures such as lists, trees and hash tables, basic cloud-based applications, and on development tools and practices. To learn how to apply object-oriented design concepts, and practice programming skills, the module has a substantial practical element, with weekly lab classes, sets of exercise questions, and an individual programming coursework.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Design and implement smaller-scale object-oriented programs.</li>\n\t<li>Have a good knowledge of key object-oriented principles and design strategies.</li>\n\t<li>Read, write, and process data sets using object-oriented techniques.</li>\n\t<li>Understand how core data structures are implemented using classes.</li>\n\t<li>Develop basic object-oriented&nbsp;applications that run in a cloud environment.</li>\n\t<li>Use programming tools such as an integrated development environment (IDE), debugger, and version control.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Object-Oriented Principles:</p>\n\n<ul><li>Taking an object-oriented approach to software development.</li>\n\t<li>Classes and the use of abstractions.</li>\n\t<li>Key design principles and development practices.</li>\n</ul><p>Object-Oriented Programming:</p>\n\n<ul><li>Designing and implementing classes.</li>\n\t<li>Identifying and implementing class relationships.</li>\n\t<li>Using abstract classes, interfaces and inheritance.</li>\n\t<li>Developing smaller-scale programs taking an object-oriented approach.</li>\n\t<li>Effective object-oriented design and programming practices.</li>\n\t<li>Documenting designs using class diagrams.</li>\n\t<li>The design of basic cloud-based applications.</li>\n</ul><p>Data Representation:</p>\n\n<ul><li>Implementing common data structures.</li>\n\t<li>Storing data in files.</li>\n\t<li>Processing data to extract information.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) \u200bbe registered on a programme and year of study for which it is a formally available; and (2) have taken Principles of Programming (COMP0002) in Term 1.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Principles of Programming (COMP0002)": {
      "module_id": "Principles of Programming (COMP0002)",
      "title": "Principles of Programming (COMP0002)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.<br><br><strong>Learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Design, implement, and debug small programs using two different programming paradigms, given straightforward specifications.</li>\n\t<li>Develop straightforward algorithms to solve a range of common programming problems.</li>\n\t<li>Compare and contrast the different paradigms, understanding the relative advantages and disadvantages of each.</li>\n\t<li>Use common programming tools such as compilers, editors and debuggers.</li>\n\t<li>Gain a basic understanding of how programs use computer memory, memory management, and the binary representation of data values.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Core Programming Concepts:</p>\n\n<ul><li>What is programming?</li>\n\t<li>Programming languages.</li>\n\t<li>Programs and algorithms.</li>\n\t<li>Compilers and tools.</li>\n\t<li>Running and debugging programs.</li>\n</ul><p>Introduction to Imperative Programming:</p>\n\n<ul><li>Core imperative programming ideas: sequence, selection, iteration, recursion, assignment and variables.</li>\n\t<li>Types and type checking.</li>\n\t<li>Functions, parameters, scope and lifetime.</li>\n\t<li>Arrays and files.</li>\n\t<li>Pointers, memory allocation, and memory management.</li>\n</ul><p>Introduction to Functional Programming:</p>\n\n<ul><li>Core functional programming ideas.</li>\n\t<li>Recursion and recursive data structures such as lists.</li>\n\t<li>Lazy evaluation.</li>\n\t<li>Role of types.</li>\n\t<li>Higher order functions.</li>\n\t<li>List comprehension.</li>\n\t<li>Recursive functions.</li>\n</ul><p>Program design in the small:</p>\n\n<ul><li>Designing and implementing small programs.</li>\n\t<li>Implementing and using basic algorithms and data structures.</li>\n\t<li>Good programming and design practice.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Engineering Challenges (ENGF0001)": {
      "module_id": "Engineering Challenges (ENGF0001)",
      "title": "Engineering Challenges (ENGF0001)",
      "summary": "<p>The challenges of the 21st century require more than just theoretical knowledge in order to solve them. Design, professional and technical skills are sorely needed to help communities tackle big problems in crucial areas such as energy, infrastructure and security, as well as health and sustainability.</p>\n\n<p>The aim of the Engineering Challenges module is to introduce you to real-world project-based working as well as some of the techniques and skills that you will need both in the rest of your degree and beyond. The module is split into two design projects, known as Challenges. Each Challenge is designed to address part of the design process and provide you with opportunities to integrate knowledge and skills developed in other modules such as experimental methods, modelling and prototyping as well as developing and improving skills such as creative thinking, critical thinking, decision-making, problem-solving, designing, effective team working, self-directed learning, technical writing, and communication.</p>\n\n<p>Challenge 1, the first design project, is a department-based individual project on a topic relevant to the research conducted within the department of your chosen degree programme. The aim here is to introduce you to your department and give you a sense of the wider context and application beyond the classroom. You will also start to learn skills like information gathering, giving and receiving feedback and presenting your work. Challenge 2, the second design project, is interdisciplinary, with departments paired up or grouped together to work on aspects of one large project where you will also start to think about the social impact of your engineering solutions, whilst designing it to technically work. In this hands-on and active module, you will learn to apply teamwork and communication skills as well as basic project management tools/practices.&nbsp;</p>\n\n<p>This Engineering Challenges module is part of the Engineering faculty\u2019s cross-faculty teaching framework called the Integrated Engineering Programme (IEP) and is designed to be integrated with the ENGF0002 DPS and ENGF0003 MMAI modules taught in parallel during the same term. This means that material and skills will be referenced and referred to across the three modules.&nbsp;&nbsp;</p>\n\n<p><strong>Intended Learning Outcomes&nbsp;</strong></p>\n\n<p>Throughout this module you\u2019ll gain a better understanding of your discipline and its context within the wider world, the design process and the interaction between society and engineering. You will start developing your skills and abilities in information gathering, engineering design, communication, creative and critical problem solving, decision making and teamwork in groups that are multi-disciplinary in addition to those that only comprise colleagues from your chosen discipline.&nbsp;</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Architecture and Concurrency (COMP0008)": {
      "module_id": "Computer Architecture and Concurrency (COMP0008)",
      "title": "Computer Architecture and Concurrency (COMP0008)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to provide a working knowledge of the hardware and architecture of a modern computer system, particularly focusing on concurrency aspects and those that have an impact on writing multithreaded software. Students will gain a fundamental understanding of the concurrency abstraction and how it impacts both computer architecture and software design. We will look at computer architecture aspects that directly impact multithreaded software such as the memory hierarchy, cache coherence/consistency and hardware multithreading. We will learn how to design correct multithreaded Java software based on a solid theoretical understanding of concurrency principles and the Java Memory Model. The module will cover an understanding of concurrency from low-level aspects (such as spin locks implemented in assembly language) to high-level design patterns used within the Java concurrency package.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Use the concurrency abstraction to reason about concurrent systems.</li>\n\t<li>Write and understand modern assembly language programs.</li>\n\t<li>Describe how high-level languages are translated to assembly language and subsequently machine code.</li>\n\t<li>Describe the internal structure of processors and different forms of parallelism employed.</li>\n\t<li>Describe how modern computers handle memory and input/output including key concurrency aspects such as cache coherence, memory consistency/visibility and interrupt-driven thread switching.</li>\n\t<li>Describe how operating systems schedule application level threads onto the CPU resources.</li>\n\t<li>Describe how synchronization mechanisms in high-level languages are implemented in terms of more primitive hardware concurrency instructions.</li>\n\t<li>Reason about and resolve safety aspects of multithreaded Java including interference and visibility issues.</li>\n\t<li>Write safe and efficient multithreaded Java code using the monitor design and other patterns.</li>\n\t<li>Compare and contrast the traditional Java concurrency mechanisms with those of the new Java concurrency package mechanisms.</li>\n\t<li>Correctly and safely use the thread-safe data and control structures within the new Java concurrency package.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Top-down high level overview of a computer: the main components making up a computer and how they interact.</li>\n\t<li>The concurrency abstraction.</li>\n\t<li>Assembly language and machine code.</li>\n\t<li>Translation of high-level languages into machine code.</li>\n\t<li>Internal structure of a processor: the control unit (CU) and datapath.</li>\n\t<li>Parallelism within the CPU.</li>\n\t<li>Key aspects of how operating systems handle application-level threads.</li>\n\t<li>Memory hierarchy, cache structure and cache coherence mechanisms.</li>\n\t<li>Creating and managing Java threads.</li>\n\t<li>Understanding and reasoning with the Java Memory Model (JMM) specification.</li>\n\t<li>Java traditional synchronization mechanisms (and how they relate to low-level hardware instructions)</li>\n\t<li>Monitor design patterns and conditional variables.</li>\n\t<li>Reasoning about the correctness of concurrent programs: safe data structures.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; (2) understand basic computer arithmetic (binary/hex manipulation, fixed-size arithmetic, 2s- and 16s-complement forms, etc.); and (3) have strong Java programming skills.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Logic (COMP0009)": {
      "module_id": "Logic (COMP0009)",
      "title": "Logic (COMP0009)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to introduce and familiarise students with logical and mathematical inference. Students learn a number of logical inference methods for classical logics and for non-classical logics.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand how axiomatic systems can be used for propositional and predicate logic.</li>\n\t<li>Understand the notions of soundness and completeness.</li>\n\t<li>Understand how propositional and predicate tableaus work.</li>\n\t<li>Have familiarity with other logics, including modal and temporal logics.</li>\n\t<li>Analyse algebras of relations.</li>\n</ol><p><strong>Indicative content:&nbsp;</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:&nbsp;</p>\n\n<p>Propositional logic, Predicate logic, Modal Logic and Temporal Logic:</p>\n\n<ul><li>Review of syntax and semantics.</li>\n\t<li>Deduction and Inference.</li>\n\t<li>Truth tables.</li>\n\t<li>Decidability of propositional logic.</li>\n</ul><p>Mathematical proofs:</p>\n\n<ul><li>Proof by contradiction.</li>\n\t<li>Induction and structured induction.</li>\n\t<li>Hilbert systems.</li>\n\t<li>Axioms and inference rules for propositional logic.</li>\n\t<li>Axioms and inference rules for predicate logic.</li>\n\t<li>Axioms and inference rules for modal and temporal logics.</li>\n\t<li>Tableau construction for propositional logic, predicate logic, modal logics.</li>\n\t<li>Soundness and completeness theorems for first order logic.</li>\n\t<li>Semi-decidability of first order logic.</li>\n\t<li>Undecidability of arithmetic.</li>\n</ul><p>Algebras of Relations:</p>\n\n<ul><li>Algebras of binary relations</li>\n\t<li>Kleene Algebra</li>\n\t<li>Relation Algebra</li>\n\t<li>Other Algebras of Relations.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; (2) have taken Theory of Computation (COMP0003) and Algorithms (COMP0005); and (3) have some programming experience (as the assessment will require them to implement a program in C).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Security (COMP0141)": {
      "module_id": "Security (COMP0141)",
      "title": "Security (COMP0141)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims at giving students a foundation in computer security, cryptography and human aspects of security. After taking the module students should be able to identify risks and security sensitive aspects of systems, where a system can range from a small and simple solution for a specific task to a full organisation including IT infrastructure and users. They will be taught this from the experience of how systems have failed in the past and by analysing systems from an adversarial viewpoint.</p>\n\n<p>Students should also know core defensive techniques to prevent or mitigate attacks. They should be able to formulate a threat model for a system and reason about whether it is secure or insecure, Students should be able to deliver effective security for real-world environments: how to design and manage security in organisations to effectively protect them.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand how to formulate a threat model including the assets to be protected, the capabilities of the adversary, and reason about whether the probability the adversary may succeed.</li>\n\t<li>Know core cryptographic methods to protect communication such as message authentication codes, digital signatures, encryption, and key exchange. Understand the security guarantees cryptographic tools provide and conversely how inappropriate use lead to vulnerabilities.</li>\n\t<li>Understand key principles and concepts related to computer and systems security. Understand the complexities of building flexile and correct access control and authentication systems, from a technical and HCI perspective. Recognize and exploit common security vulnerabilities on hosts and networks.</li>\n\t<li>Know that security involves people, processes and technology. Understand how security needs to fit with business goals and organisational processes to work effectively&nbsp;rather than disrupt, create friction, and drain resources.</li>\n\t<li>Know the basics of how to influence and manage security behaviours of a range of organisational stakeholders, employees, managers, developers, security specialists.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>The module gives students a foundation in computer security, cryptography and human aspects of security. Students will study attacks against system and analyse systems from an attacker\u2019s perspective. The module will also cover core defensive techniques and develop threat models that can be used to analyse the security of a system. The module studies specific cryptographic systems, core computer security, and security for real-world environments: how to design and manage security in organisations to effectively protect them.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Systems Engineering (COMP0016)": {
      "module_id": "Systems Engineering (COMP0016)",
      "title": "Systems Engineering (COMP0016)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to take students through the experience of Research and Development (R and D) processes by developing a reference Proof of Concept design and prototype implementation for a complex and substantial software application over an extended period of time.</p>\n\n<p>Students will work with an external project partner to obtain requirements and get feedback for a project partner-defined problem. Experience of working with team organisation and management; develop and work to a plan, with weekly lab checks, project partner reports and deliverable milestones to be met; develop a practical understanding of how the research experimentation and development of a software system is organised and carried out, both in terms of team working skills and the technical knowledge required; practice using relevant skills and knowledge in completing tasks and milestones; develop writing, media production, presentation and communication (technical and customer facing) skills; and learn how to evaluate their work and team and individual performance.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand how to work effectively with an external project partner and professional behaviour.</li>\n\t<li>Understand a software development process involving research and experimentation in an area of Computer Science.</li>\n\t<li>Organise a team and work effectively in a team.</li>\n\t<li>Understand how to undertake research to identify and use relevant ideas and technologies when developing software.</li>\n\t<li>Understand how to develop and test good quality software.</li>\n\t<li>Understand Research and Development approaches to requirements capture, HCI factors, and team-based development relevant to the projects undertaken.</li>\n\t<li>Write documentation and present results.</li>\n\t<li>Understand technical writing skills and share their awareness of legal issues as they apply to software development.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>Students will undertake a systems engineering project within the Computer Science Industry Exchange Programme (IXN) structure. The students will work in small teams, where each team works with an external project partner to develop a cutting-edge solution to a challenging problem defined by the project partner. The project partner will typically be from one of the following types of organisation: public sector, SMEs, large companies, charity, healthcare/NHS, external research institution, or UCL research centre.</p>\n\n<p>The project will be structured as a single major project portfolio, with a series of milestones, where each milestone involves completing a stage of the project: requirements, research into potential solutions, experiments and prototypes, definition of reference design, implementation, testing, and delivery. Each of these stages is to be documented on the projects team website. Each portfolio milestone is also a point of assessment.</p>\n\n<p>A number of teaching methods will be employed, including hackathon-style sessions, project sprints in labs and specific lectures. Weekly communications are needed with project partner, with weekly lab checks and project partner reports to track the project progress and team working. An Elevator Pitch to companies is to be given by each team. The final milestone will require teams to deliver a working version of their application, along with a project website documenting the project results. Any publication of results on behalf of the project partner is seen as an advantage.</p>\n\n<p>In addition, each student will write a technical report assessing the work done, the team members, and reflecting on what they have learnt, in particular the area of technologies they have studied. Each team is allocated a PGTA, who they will meet every teaching week to report on progress and get feedback. Each team also has an academic supervisor, who will monitor the overall status of the team, and can provide more specialised support and feedback. The project finishes with delivery of their software to their project partner in a usable state with a joint code walkthrough, an assessed presentation and delivery of all associated materials such as legal implications, manufacturing processes and others. The taught material will be directly relevant to, and needed for, the project work. The overall project work will be submitted as an online project portfolio made up of the milestones.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have experience of object-oriented programming.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "30"
    },
    "Intermediate Mathematics for Computer Science (COMP0199)": {
      "module_id": "Intermediate Mathematics for Computer Science (COMP0199)",
      "title": "Intermediate Mathematics for Computer Science (COMP0199)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module aims to provide a grounding in mathematics and statistics most relevant to a Computer Science undergraduate degree.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Reason about series of functions and multivariate functions.</li>\n\t<li>Employ numerical methods to solve mathematical problems.</li>\n\t<li>Decompose and study the properties of matrices and vector spaces.</li>\n\t<li>Model probabilities using measure theory.</li>\n\t<li>Use advanced statistical methods to reason about hypotheses.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Mathematics:</p>\n\n<ul><li>Sequences and Series of Functions.</li>\n\t<li>Multivariate Differential Calculus.</li>\n\t<li>Optimisation.</li>\n\t<li>Numerical Methods.</li>\n\t<li>Eigenvalues and Matrix reduction.</li>\n\t<li>Euclidian Spaces and Orthogonal Matrices.</li>\n</ul><p>Statistics:</p>\n\n<ul><li>Continuous Random Variables.</li>\n\t<li>Joint Probabilities and Marginal Distributions.</li>\n\t<li>Hypothesis Testing, Bootstrapping.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Software Engineering (COMP0010)": {
      "module_id": "Software Engineering (COMP0010)",
      "title": "Software Engineering (COMP0010)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module focusses on designing and building software systems, which these days are often large, complex and long-lived. They are worked on by teams of engineers and changed constantly over their lifetimes. We will look at principles and patterns of software design, where to apply them, and how they may inform our design choices. We will also look at techniques for ensuring that systems you build behave correctly. We show how the application of these makes it possible to evolve systems effectively in a rigorous way.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Appreciate the wider engineering context that forms the background to developing complex, evolving software-intensive systems.</li>\n\t<li>Apply a range of design patterns and principles to solve particular design problems.</li>\n\t<li>Apply a range of refactoring techniques to improve code quality.</li>\n\t<li>Use a range of tools and techniques for automated software testing, including test-driven development.</li>\n\t<li>Manage risk in making changes to an existing software system through rigorous engineering practices.</li>\n\t<li>Reflect on the appropriateness of different software engineering techniques in different circumstances, and on the quality of the design of an application.</li>\n</ol><p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ul><li>Object Oriented Design Principles.</li>\n\t<li>Design Patterns.</li>\n\t<li>Software Architecture.</li>\n\t<li>Testing.</li>\n\t<li>Tools and Processes.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; and (2) have taken a module or course in Java programming.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Database and Information Management Systems (COMP0022)": {
      "module_id": "Database and Information Management Systems (COMP0022)",
      "title": "Database and Information Management Systems (COMP0022)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Students will learn fundamental theories and methods of database systems: what they are, how they are developed and how they function to achieve their purposes. The module will exemplify these constructs with contemporary database technologies and students will learn how these technologies are exploited to build effective information systems of different scale.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the theories and methods of database systems.</li>\n\t<li>Apply the theories and methods of database systems in creating effective information systems.</li>\n\t<li>Understand current and emerging database technologies and the application settings in which they are used.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>The Database Management System.</li>\n\t<li>Transaction management and failure management.</li>\n\t<li>Query processing and optimization.</li>\n\t<li>Distributed databases.</li>\n\t<li>Data warehousing.</li>\n\t<li>Data mining and online analytic processing.</li>\n\t<li>Semi-structured data databases.</li>\n\t<li>Emerging database models and technologies.</li>\n\t<li>Database implementation and optimisation.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Individual Project for Year 3 BSc (COMP0029)": {
      "module_id": "Individual Project for Year 3 BSc (COMP0029)",
      "title": "Individual Project for Year 3 BSc (COMP0029)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned throughout the degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Work individually to undertake a major project.</li>\n\t<li>Plan and coordinate the project activities to meet the deadlines.</li>\n\t<li>Make realistic work commitments.</li>\n\t<li>Write a substantial report to document the project results.</li>\n\t<li>Demonstrate good problem solving and evaluation skills.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>There is no set syllabus; students identify their chosen project topic and find a member of the academic staff who will act as the Project Supervisor.</li>\n\t<li>The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3.</li>\n\t<li>Students are responsible for organising and carrying out their project and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary.</li>\n\t<li>There are two formative milestones: (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what it is required to complete the project. These documents are prepared with advice from the Project Supervisor and must be approved by them to confirm the project is proceeding properly.</li>\n</ul><p>Project goals:</p>\n\n<ul><li>A BSc project is expected to have a reasonable level of challenge and depth and may include research-oriented goals as well as the practical application of Computer Science ideas and concepts.</li>\n</ul><p>Project report:</p>\n\n<ul><li>The final report documents the results of the project, and is expected to be a substantial, well-written, and properly structured document. Obtaining a higher module mark depends on submitting a good quality report, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content.</li>\n</ul><p>Reading list:</p>\n\n<ul><li>As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their Project Supervisor.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "30"
    },
    "Computability and Complexity Theory (COMP0017)": {
      "module_id": "Computability and Complexity Theory (COMP0017)",
      "title": "Computability and Complexity Theory (COMP0017)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module addresses the theoretical and practical limitations of computation and provides a mathematical framework for proving properties of programs. The concepts of undecidability and intractability are formally introduced and discussed through a number of examples. The module will convey the proof techniques that are used to classify problems. It is intended that students learn how to apply them to classify unfamiliar problems for themselves.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Analyse the complexity of a variety of problems and algorithms.</li>\n\t<li>Prove that a problem is undecidable.</li>\n\t<li>Prove the equivalence of different models of computation.</li>\n\t<li>Find a polynomial time reduction from one problem to another.</li>\n\t<li>Determine the complexity class of a decidable problem.</li>\n\t<li>Categorise the complexity of a language.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Models of Computation:</p>\n\n<ul><li>Deterministic Turing machines.</li>\n\t<li>Alternative models: variations of the concept of Turing machine.</li>\n\t<li>Alternative models: register machines, imperative programming languages.</li>\n</ul><p>Languages:</p>\n\n<ul><li>Language acceptance.</li>\n\t<li>Language recognition.</li>\n\t<li>Decidable and Recognisable languages.</li>\n\t<li>Closure properties of languages.</li>\n</ul><p>Undecidability:</p>\n\n<ul><li>The Halting Problem and other unsolvable problems.</li>\n\t<li>Problem reduction.</li>\n\t<li>Rice\u2019s Theorem.</li>\n\t<li>Cantor\u2019s diagonal argument and the cardinality of unrecognisable languages.</li>\n\t<li>Undecidability of the tiling problem.</li>\n\t<li>Undecidability of first-order logic and incompleteness of arithmetic.</li>\n</ul><p>Basic Concepts of Complexity Theory:</p>\n\n<ul><li>Tractable and intractable problems and algorithms.</li>\n\t<li>Definition of Time Complexity.</li>\n\t<li>Decision vs Optimisation Problems.</li>\n\t<li>Travelling Salesman and its variants.</li>\n</ul><p>Polynomial-time reduction:</p>\n\n<ul><li>Definition and properties.</li>\n\t<li>Lemmas and proofs.</li>\n\t<li>Hamiltonian Graphs and Travelling Salesman.</li>\n</ul><p>Complexity classes:</p>\n\n<ul><li>Non-deterministic Turing machines.</li>\n\t<li>P, NP, and NP-complete classes.</li>\n\t<li>Complement and Co-Complete Classes.</li>\n</ul><p>Proving NP-hardness:</p>\n\n<ul><li>Cook\u2019s theorem.</li>\n\t<li>Satisfiability and its variants.</li>\n\t<li>Reductions between variants.</li>\n</ul><p>Other Complexity Classes:</p>\n\n<ul><li>Space complexity, PSPACE, and PSPACE-Completeness.</li>\n\t<li>Savitch\u2019s theorem.</li>\n\t<li>Logarithmic space.</li>\n\t<li>Time and space hierarchy theorems.</li>\n\t<li>Exponential time and hardness.</li>\n\t<li>Probabilistic classes.</li>\n\t<li>Approximation algorithms and hardness.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Theory of Computation (COMP0003), Algorithms (COMP0005), and Logic and Database Theory (COMP0009).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Graphics (COMP0027)": {
      "module_id": "Computer Graphics (COMP0027)",
      "title": "Computer Graphics (COMP0027)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Understanding the theoretical concepts behind computer that generate pictures from virtual worlds and teaching practical skills to implement them.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Perform operations to 3d primitives using linear algebra.</li>\n\t<li>Write a simple ray-tracer to intersect primitives with rays through pixels.</li>\n\t<li>Understand how all steps of rasterization work and being able to code that from scratch.</li>\n\t<li>Understand the concept of Monte Carlo simulation and how it relates to image synthesis.</li>\n\t<li>Implement Monte Carlo simulations.</li>\n\t<li>Use scene graphs, including light, material and textures to describe virtual 3D worlds.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Introduction:</p>\n\n<ul><li>The painter\u2019s method.</li>\n</ul><p>Creating an image using ray tracing:</p>\n\n<ul><li>Ray casting using a simple camera.</li>\n\t<li>Local illumination.</li>\n\t<li>Global illumination with recursive ray tracing.</li>\n</ul><p>Specifying a general camera:</p>\n\n<ul><li>World / image coordinates.</li>\n\t<li>Creation of an arbitrary camera.</li>\n\t<li>Ray tracing with an arbitrary camera.</li>\n</ul><p>Constructing a scene:</p>\n\n<ul><li>Scene hierarchy.</li>\n\t<li>Transformations of objects / rays.</li>\n\t<li>Other modelling techniques.</li>\n</ul><p>Acceleration Techniques:</p>\n\n<ul><li>Bounding volumes.</li>\n\t<li>Space subdivision.</li>\n</ul><p>From ray tracing to projecting polygons:</p>\n\n<ul><li>Graphics pipeline.</li>\n\t<li>Transforming the polygons to image space.</li>\n\t<li>Sutherland-Hodgman clipping.</li>\n\t<li>Scan conversion.</li>\n\t<li>Z-buffering.</li>\n\t<li>Interpolated shading.</li>\n\t<li>Texture mapping.</li>\n\t<li>Back-face culling.</li>\n</ul><p>Shadows:</p>\n\n<ul><li>Shadow volumes.</li>\n\t<li>Shadow buffer.</li>\n\t<li>Shadow mapping.</li>\n\t<li>Soft shadows.</li>\n</ul><p>The nature of light:</p>\n\n<ul><li>Transport theory, Radiance, luminance, radiosity.</li>\n\t<li>The radiance equation.</li>\n\t<li>Photon mapping.</li>\n\t<li>Monte Carlo integration.</li>\n</ul><p>Parametric curves and surfaces:</p>\n\n<ul><li>Bezier Curves.</li>\n\t<li>B-Splines Curves.</li>\n\t<li>Parametric surfaces.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming.</p>\n\n<p>To be eligible to select the module delivery Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Systems (COMP0019)": {
      "module_id": "Computer Systems (COMP0019)",
      "title": "Computer Systems (COMP0019)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The aim for this module is to have our advanced undergraduates develop a \u201cwhole-stack\u201d understanding of the complex interactions among modern computer system hardware (specifically, a modern, multi-core CPU and its memory hierarchy), a modern operating system, and the applications that run atop them. These interactions dictate application correctness and performance. These fundamental principles will be taught in the concrete framework of the x86 CPU architecture and the Linux/UNIX operating system. Students should not only understand these fundamental principles, but be able to put them into practice in real C programs.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the C and Linux/UNIX programming environment, from the hardware (memory hierarchy, memory model between cores) to low-level operating system functionality (file and network I/O, process management, virtual memory system, program linking and loading).</li>\n\t<li>Understand the interactions between hardware and the C and Linux/UNIX programming environment that affect application correctness and performance.</li>\n\t<li>Design correct applications that perform well in the C and Linux/UNIX programming environment.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module teaches students topics in computer systems design and systems programming, with an emphasis on the C programming language, Intel CPU architecture, and UNIX/Linux operating system architecture.&nbsp;The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Machine-level representation of code and data (assembly language; how C constructs are compiled into x86 assembly language; machine-level representations of data types and machine and C arithmetic; stack frame structure in C on the x86; array layout in memory; pointer arithmetic).</li>\n\t<li>Use of the gdb debugger on C code in the Linux/UNIX environment.</li>\n\t<li>Undefined behaviour in the C language specification and real C programs, and its consequences.</li>\n\t<li>The memory hierarchy: registers, L1 caches, L2 caches, L3 caches, DRAM, SSD, disk; cache architectures; performance implications of caches on program performance.</li>\n\t<li>Linking: static linking, relocatable object code, symbol resolution, loading executables, dynamic linking and shared libraries, position-independent code, interposition.</li>\n\t<li>Processes, signals, context switches, exceptions, system call error handling, job control, process creation and management.</li>\n\t<li>Virtual memory: address translation, memory mapping, dynamic memory allocation, memory-related bugs in C;</li>\n\t<li>System I/O: filesystem I/O, system call interface and semantics.</li>\n\t<li>Concurrent systems programming: threads in C on Linux/UNIX, x86 memory consistency model, races, deadlocks.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have basic proficiency in C programming (including dynamic memory allocation); (3) have basic knowledge of computer arithmetic (e.g., two's complement integer representation); and (4) have prior exposure to assembly language for some CPU.</p>\n\n<p>UCL Computer Science undergraduates will normally have met these prerequisites by having passed the relevant compulsory modules in prior years.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Networked Systems (COMP0023)": {
      "module_id": "Networked Systems (COMP0023)",
      "title": "Networked Systems (COMP0023)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module offers a rigorous introduction to the problems that arise when networking computer systems, and algorithms and systems design that solve these problems. The architectural principles and protocols that underlie the internet will be explained in detail. Topics to be taught will include the physical layer, widely used link layers (wired and wireless), MAC protocols, internetworking, intra-domain routing, reliable transport, congestion control, wide-area (policy) routing, naming, network security, the end-to-end principle, and network applications.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the nuances of interactions between a network's distributed entities.</li>\n</ol><p>This is a vital skill, without which one cannot truly be said to understand networking. To help students develop this skill, the module incorporates significant programming courseworks in Python and Java, in which students build or interact with working implementations of network protocols.</p>\n\n<p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Introduction to Networking; Information, Error Control Coding, and Compression.</li>\n\t<li>Medium Access Control: CDMA, ALOHA, and Ethernet; Link Layer Addressing and Forwarding; Spanning Trees.</li>\n\t<li>Achieving Reliability; Stop-and-Wait, Go-Back-N.</li>\n\t<li>Achieving Reliability (cont); Selective Repeat; Intro to Internetworking; Network Address Translation; Inside Internet Routers.</li>\n\t<li>The Domain Name System; Multi-hop Networks and end-to-end Arguments.</li>\n\t<li>Reliable Transport and TCP.</li>\n\t<li>TCP and Congestion Control.</li>\n\t<li>Intra-Domain Routing; Introduction, Distance-Vector, Link-State.</li>\n\t<li>Inter-Domain Routing; BGP.</li>\n\t<li>Wireless Networks; 802.11 MAC.</li>\n\t<li>Security: Firewalls, Worms and IDSes; Content Delivery HTTP, Web Caching, and Content Distribution Networks.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Machine Learning for Domain Specialists (COMP0142)": {
      "module_id": "Machine Learning for Domain Specialists (COMP0142)",
      "title": "Machine Learning for Domain Specialists (COMP0142)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to Introduce students to the basics of machine learning while giving class-based examples of applications to areas of domain specialisation.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module a student will be able to:</p>\n\n<ol><li>Understand elements of the fundamental concepts and mathematical basis of machine learning; apply practical machine learning software to perform data analysis tasks.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>General theory and mathematical foundations are presented in lectures while practical applications are presented in classes.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>An introduction to machine learning tasks (unsupervised, supervised, reinforcement).</li>\n\t<li>Mathematical foundations (linear algebra, calculus, probability, statistics).</li>\n\t<li>Supervised Learning: including an exploration of some of the following: linear and polynomial regression, logistic regression, Naive Bayes, kernel methods, SVMs, decision trees, ensemble learning, neural networks, Gaussian processes.</li>\n\t<li>Unsupervised Learning: including an exploration of some of the following: PCA, manifold learning, k-means, Gaussian mixture models, EM algorithm.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) should have experience of rudimentary programming and an awareness of standard results in fundamentals of linear algebra (vectors, matrices, eigenvectors /eigenvalues etc.), elements of probability theory (random variables, expectation, variance, conditional probabilities, Bayes rule etc.), elements of statistics (sample statistics, maximum likelihood estimation etc.), and calculus (real-valued functions, derivatives, Taylor series, integrals etc.). Results from these areas will be used, often without proof, throughout the module.</p>\n\n<p><strong>Self-assessment test:</strong></p>\n\n<p>Students should take <a href=\"http://www.cs.ucl.ac.uk/SAT/SAT-COMP0142.pdf\">a self assessment test</a>, to assess their ability against the level of the module.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Advanced Mathematics for Computer Science (COMP0238)": {
      "module_id": "Advanced Mathematics for Computer Science (COMP0238)",
      "title": "Advanced Mathematics for Computer Science (COMP0238)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module aims to provide students with advanced mathematical tools and to (1) consolidate knowledge in Algebra analysis, Differential Calculus, Integral Calculus, Probabilities and Statistics; (2) introduce advanced methods making use of this knowledge in a practical manner; and (3) connect these notions with subsequent Computer Science modules.</p>\n\n<p><strong>Intended l</strong><strong>earning outcomes</strong></p>\n\n<p>On successful completion of this module, a student will be able to:</p>\n\n<ol><li>Know and understand key results in the areas of Algebra, Calculus, Probability and Statistics.</li>\n\t<li>Apply problem solving methods which make use of the key results in the areas of Algebra, Calculus, Probability and Statistics.</li>\n\t<li>Apply these methods in modern areas of Computer Science such as: Artificial Intelligence, Computational Finance, and Computer Graphics.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Optimisation.</li>\n\t<li>Convexity.</li>\n\t<li>Advanced Linear Algebra and Matrix Reduction.</li>\n\t<li>Number Theory and Arithmetic.</li>\n\t<li>Statistics and Sampling.</li>\n\t<li>Probabilistic Processes.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Introduction to Cryptography (COMP0025)": {
      "module_id": "Introduction to Cryptography (COMP0025)",
      "title": "Introduction to Cryptography (COMP0025)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Cryptography is the practice and study of techniques for secure communication in the presence of adversarial entities. For many centuries the goal of cryptography was the protection of privacy of communications. However, computers, digital communication and in particular the Internet have brought an abundance of new security objectives such as anonymity, authenticity, non-repudiation, authorized wiretapping (called law enforcement), or traceability. These developments have turned cryptography into an indispensable tool to protect the information in computing systems and it is utilized nowadays by billions of people on a daily basis to safeguard their data at rest and in transit.</p>\n\n<p>The goal of this module is to make students familiar with the basic paradigms and principles of modern cryptography. In particular, students will be confronted with a range of security objectives, different levels of security that can be achieved, and some of the available cryptographic techniques that can be used to achieve these goals.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Model security precisely and formally in terms of adversarial objective and system access.</li>\n\t<li>Explain and reason about basic cryptographic tools to protect and authenticate data.</li>\n\t<li>Suggest security parameters that protect against standard attacks.</li>\n\t<li>Read scientific articles and international standards in the field of cryptography.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Classical ciphers:</p>\n\n<ul><li>Cryptanalysis of classical ciphers.</li>\n\t<li>Probability theory.</li>\n\t<li>Perfect security; Block ciphers.</li>\n\t<li>DES.</li>\n\t<li>AES.</li>\n\t<li>Block cipher modes of operation.</li>\n</ul><p>Private-key encryption:</p>\n\n<ul><li>Chosen plaintext attacks.</li>\n\t<li>Randomised encryption.</li>\n\t<li>Pseudorandomness.</li>\n\t<li>Chosen ciphertext attacks.</li>\n</ul><p>Message authentication codes:</p>\n\n<ul><li>Private-key authentication.</li>\n\t<li>CBC-MAC.</li>\n\t<li>Pseudorandom functions.</li>\n\t<li>CCA-secure private-key encryption.</li>\n</ul><p>Hash functions:</p>\n\n<ul><li>Integrity.</li>\n\t<li>Pre-image resistance.</li>\n\t<li>Collision-resistance.</li>\n\t<li>SHA-256.</li>\n\t<li>NMAC/HMAC.</li>\n</ul><p>Key distribution:</p>\n\n<ul><li>Key distribution centres.</li>\n\t<li>Modular arithmetic and group theory.</li>\n\t<li>Diffie-Hellman key exchange.</li>\n</ul><p>Public-key distribution:</p>\n\n<ul><li>EIGamal encryption.</li>\n\t<li>Cramer-Shoup encryption.</li>\n\t<li>Discrete logarithm problem.</li>\n</ul><p>Digital signatures:</p>\n\n<ul><li>RSA signatures.</li>\n\t<li>RSA-FDH and RSA-PSS signatures.</li>\n\t<li>DSA signatures.</li>\n\t<li>X.509 certificates.</li>\n\t<li>Certification paths.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>To be eligible to select the module delivery for Undergraduate (FHEQ Level 7) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have successfully completed a module in mathematics or probability theory at FHEQ level 6 or higher.</p>\n\n<p>The module is theoretically and mathematically demanding.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Technology Entrepreneurship (COMP0039)": {
      "module_id": "Technology Entrepreneurship (COMP0039)",
      "title": "Technology Entrepreneurship (COMP0039)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This is UCL Computer Science\u2019s principal entrepreneurship module for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to thousands of students, resulting in the launch of several innovative businesses.</p>\n\n<p>The module covers the new business lifecycle (selecting and testing a moneymaking idea, preparing a business plan, raising finance, the Exit),&nbsp;aspects of new business operation (registering a company, setting up your office, understanding financial statements),&nbsp;and exploiting new e-commerce tools and techniques (doing business electronically, company web sites, online business software and services.)<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Apply first-hand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Invention and innovation, finding and qualifying new opportunities. Business Model Generation.</li>\n\t<li>Confirming customer needs and testing market demand. Customer development.</li>\n\t<li>Lean Start-ups: what is your minimum viable product? The value of prototyping.</li>\n\t<li>Delivery channels and customer relationships. Business Plan and Preparing a Pitch.</li>\n\t<li>Financial Forecasting, Costing and Pricing. Management accounts. Cash-flow and profit and loss.</li>\n\t<li>Developing sustainable competitive advantage.&nbsp;Intellectual Property Rights.</li>\n\t<li>Corporate form and structure. Founder dilemmas - team, equity, remuneration etc. Developing your brand.</li>\n\t<li>Defining and testing critical business model uncertainties. Measuring progress.</li>\n\t<li>Common start-up metrics.</li>\n\t<li>Sources of Funding.&nbsp;Presenting to VCs.</li>\n\t<li>Class presentations, conclusions and next steps.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Quantum Computation (COMP0157)": {
      "module_id": "Quantum Computation (COMP0157)",
      "title": "Quantum Computation (COMP0157)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The aim of the module is to introduce the students to the principles of quantum mechanics from a computer science perspective, and to the field of quantum computation and algorithms.</p>\n\n<p><strong>Intended learning outcomes: </strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand (i.e., be able to describe, analyse and reason about) quantum computation, and how it differs from classical probabilistic computation.</li>\n\t<li>Analyse the behaviour of simple quantum circuits.</li>\n\t<li>Understand how quantum superposition and interference can give quantum speedups over classical algorithms in certain cases and apply these concepts to the design of quantum algorithms.</li>\n\t<li>Derive the Quantum Fourier Transform, and apply it to the design of quantum algorithms</li>\n\t<li>Derive Grover\u2019s unstructured search technique and apply it to the design of quantum algorithms.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module provides a first course on quantum computation. The following is indicative of the topics the module will typically cover:</p>\n\n<p>The basic mathematical formalism of quantum mechanics is be introduced from a computer science perspective, assuming no prior knowledge of quantum mechanics or physics. Building on this, the module develops the standard circuit model of quantum computation and basic quantum complexity theory. Most of the module is devoted to quantum algorithms, including rigorous derivations and algorithm analysis. This section of the course starts from simple examples, and builds up to the major quantum algorithms, such as Shor\u2019s quantum factoring algorithm and Grover\u2019s unstructured search algorithm.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Functional Programming (COMP0020)": {
      "module_id": "Functional Programming (COMP0020)",
      "title": "Functional Programming (COMP0020)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management.</p>\n\n<p>The module explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the module students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to (at a level commensurate with FHEQ level 6):</p>\n\n<ol><li>Understand the basics of the lambda calculus and combinators and how they are used in the implementation of functional languages.</li>\n\t<li>Understand the main features of a lazy functional language.</li>\n\t<li>Understand type checking, type-inference and the operation of the Miranda (Hindley-Milner) type system.</li>\n\t<li>Write and understand non-trivial functional programs in Miranda.</li>\n\t<li>Understand the computation and memory management issues affecting the sequential implementation of lazy functional languages.</li>\n\t<li>Solve problems relating to any aspect of the module's syllabus, under examination conditions.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ol><li>Classification of programming languages:\n\t<ul><li>Distinctive features of Functional Programming Languages.</li>\n\t</ul></li>\n\t<li>The Lambda Calculus and Combinators:\n\t<ul><li>Versions of the Lambda Calculus.</li>\n\t\t<li>Syntax and semantics.</li>\n\t\t<li>Reduction orders, strong normalisation.</li>\n\t\t<li>Combinators and computationally complete sets.</li>\n\t</ul></li>\n\t<li>Introduction to Miranda:\n\t<ul><li>Programming environment.</li>\n\t\t<li>Types and simple polymorphic types.</li>\n\t\t<li>Recursion.</li>\n\t\t<li>Pattern-matching.</li>\n\t\t<li>Lists.</li>\n\t\t<li>Higher-Order functions.</li>\n\t\t<li>User-defined types.</li>\n\t</ul></li>\n\t<li>Type polymorphism and type systems.</li>\n\t<li>Recursive programming techniques.</li>\n\t<li>Introduction to implementation techniques:\n\t<ul><li>Strict evaluation and lazy evaluation.</li>\n\t\t<li>The need for automatic memory management.</li>\n\t</ul></li>\n\t<li>Automatic memory management:\n\t<ul><li>Garbage collection techniques.</li>\n\t</ul></li>\n</ol><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is formally available.</p>\n\n<p>To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must both: (1) be registered on a programme of study for which it is formally available; and (2) have either taken all Term 1 modules of the MSc Computer Science programme at UCL or have studied the following at FHEQ level 6 or higher:</p>\n\n<ul><li>Programming in one high-level programming language and one assembly language.</li>\n\t<li>Formal systems of logic such as Boolean algebra, propositional logic or predicate calculus.</li>\n\t<li>Virtual machines, virtual memory and memory paging.</li>\n\t<li>Compilers, including lexical analysis, parsing and code generation.</li>\n\t<li>Dynamic data structures and abstract data types.</li>\n\t<li>Models of storage in computer systems.</li>\n\t<li>Algorithmic complexity.</li>\n</ul><p>Students must be proficient in the English language to UCL's Level 4 standard or better.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Artificial Intelligence and Neural Computing (COMP0024)": {
      "module_id": "Artificial Intelligence and Neural Computing (COMP0024)",
      "title": "Artificial Intelligence and Neural Computing (COMP0024)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module introduces artificial intelligence and neural computing as both technical subjects and as fields of intellectual activity. The overall aims are to introduce basic concepts of artificial intelligence for reasoning and learning behaviour; and to introduce neural computing as an alternative knowledge acquisition/representation paradigm, to explain its basic principles and to describe a range of neural computing techniques and their application areas.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Identify problems that can be expressed in terms of search problems or logic problems, and translate them into the appropriate form, and know how they could be addressed using an algorithmic approach.</li>\n\t<li>Identify problems that can be expressed in terms of neural networks, and to select an appropriate learning methodology for the problem area.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Artificial intelligence:</p>\n\n<ul><li>Nature of artificial intelligence.</li>\n\t<li>Searching state spaces.</li>\n\t<li>Utility theory.</li>\n\t<li>Logic for artificial intelligence.</li>\n\t<li>Argumentation.</li>\n\t<li>Reasoning about concepts.</li>\n\t<li>Reasoning about uncertainty.</li>\n\t<li>Machine learning.</li>\n\t<li>Common-sense reasoning.</li>\n</ul><p>Neural Computing:</p>\n\n<ul><li>Overview of network architectures and learning paradigms.</li>\n\t<li>Fully connected networks.</li>\n\t<li>Convolutional Neural Networks.</li>\n\t<li>Networks Dealing with Sequential Data.</li>\n\t<li>(Deep) Reinforcement Learning.</li>\n\t<li>Meta-Learning.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed a module in propositional and predicate logic at FHEQ level 4 or higher.</p>\n\n<p>To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have a bachelor\u2019s degree or higher in mathematics or philosophy; (3) have passed a module in propositional and predicate logic at FHEQ level 4 or higher; and (4) have pre-approval to select the module from the Module leader.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Interaction Design (COMP0021)": {
      "module_id": "Interaction Design (COMP0021)",
      "title": "Interaction Design (COMP0021)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module covers advanced topics in interaction design, informed by current research in user experience, human-computer interaction and interaction design. A central theme is how to design technologies to meet people\u2019s needs.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Have knowledge and understanding of research in interaction design.</li>\n\t<li>Have knowledge and understanding of methods used in interaction design.</li>\n\t<li>Reflect critically on the appropriateness of different interaction design methods.</li>\n\t<li>Conduct basic user research.</li>\n\t<li>Design, prototype and evaluate a novel ubiquitous computing technology.</li>\n</ol><p>And will have developed the following transferrable skills:</p>\n\n<ol><li>Information gathering and organising skills.</li>\n\t<li>Critical reading skills.</li>\n\t<li>Argumentation skills and the ability to synthesis information from multiple sources.</li>\n\t<li>Written, visual and video presentation skills.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module is separated into two related streams.&nbsp;The following are indicative of the topics the module will typically cover:</p>\n\n<p>Research (weekly): This series of e-lectures will introduce students to core (current and historical) and nascent interaction design methods and technologies, including approaches to conducting user research, designing, prototyping and evaluating user-centred systems reviewing evolving interaction technologies.</p>\n\n<p>Workshops (weekly): These more practical sessions will give students an opportunity to put interaction design methods into practice. They will link closely to the coursework.<br><br><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have some prior knowledge of HCI or interaction design.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Image Processing (COMP0026)": {
      "module_id": "Image Processing (COMP0026)",
      "title": "Image Processing (COMP0026)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module focuses on digital image processing. It first introduces the digital image, with a description of how digital images are captured and represented. It then goes on to cover algorithms for image segmentation and feature extraction in direct space. The module then proceeds to cover image filtering techniques with some indication of the role and implications of Fourier space, and more advanced characterisation and feature detection techniques such as edge and corner detection, together with multi-resolution methods, template matching and optical flow techniques.</p>\n\n<p>The module has a strong practical component that allows students to explore a range of practical techniques by implementing their own image processing tools using Matlab or Python.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol start=\"1\"><li>\n\t<p>Understand (i.e., be able to describe, analyse and reason about) how digital images are represented (in the spatial and frequency domain), manipulated, encoded and processed, with emphasis on algorithm design, implementation and performance evaluation.</p>\n\t</li>\n</ol><ol start=\"2\"><li>\n\t<p>Implement a variety of image processing algorithms including image manipulation, segmentation, filtering, blending, feature extraction and description, edge detection, template matching and image editing.</p>\n\t</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Introduction to digital image processing:</p>\n\n<ul><li>\n\t<p>Digital image capture.</p>\n\t</li>\n\t<li>\n\t<p>Data types and 2D representation of digital images.</p>\n\t</li>\n\t<li>\n\t<p>Discrete sampling model.</p>\n\t</li>\n\t<li>\n\t<p>Noise processes.</p>\n\t</li>\n</ul><p>Segmentation:</p>\n\n<ul><li>\n\t<p>Thresholding and thresholding algorithms.</p>\n\t</li>\n\t<li>\n\t<p>Performance evaluation and ROC analysis.</p>\n\t</li>\n\t<li>\n\t<p>Connected components labelling.</p>\n\t</li>\n\t<li>\n\t<p>Clustering algorithms.</p>\n\t</li>\n\t<li>\n\t<p>Graph based methods.</p>\n\t</li>\n\t<li>\n\t<p>Image transformations:</p>\n\t</li>\n\t<li>\n\t<p>Grey level transformations.</p>\n\t</li>\n\t<li>\n\t<p>Histogram equalization.</p>\n\t</li>\n\t<li>\n\t<p>Geometric transformations.</p>\n\t</li>\n\t<li>\n\t<p>Affine transformations.</p>\n\t</li>\n\t<li>\n\t<p>Warps.</p>\n\t</li>\n</ul><p>Image filtering:</p>\n\n<ul><li>\n\t<p>Fourier analysis.</p>\n\t</li>\n\t<li>\n\t<p>Linear and non-linear filtering operations.</p>\n\t</li>\n\t<li>\n\t<p>Image convolutions</p>\n\t</li>\n\t<li>\n\t<p>Separable convolutions.</p>\n\t</li>\n\t<li>\n\t<p>Aliasing, sub-sampling and interpolation.</p>\n\t</li>\n\t<li>\n\t<p>Laplacian pyramids.</p>\n\t</li>\n</ul><p>Edge and corner detection:</p>\n\n<ul><li>\n\t<p>Edge detection.</p>\n\t</li>\n\t<li>\n\t<p>Image structure tensor.</p>\n\t</li>\n\t<li>\n\t<p>Image auto-correlation.</p>\n\t</li>\n\t<li>\n\t<p>Harris corner detector.</p>\n\t</li>\n\t<li>\n\t<p>Sift corner detector/descriptor.</p>\n\t</li>\n</ul><p>Template matching and advanced topics:</p>\n\n<ul><li>\n\t<p>Similarity and dissimilarity matching metrics.</p>\n\t</li>\n\t<li>\n\t<p>Template matching.</p>\n\t</li>\n\t<li>\n\t<p>Optical flow.</p>\n\t</li>\n\t<li>\n\t<p>Non-local means filtering.</p>\n\t</li>\n\t<li>\n\t<p>Poisson image editing.</p>\n\t</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>To be eligible to select the module delivery Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have a bachelor\u2019s degree or higher in a physical science or engineering subject with significant mathematical and programming content.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Machine Learning for Visual Computing (COMP0169)": {
      "module_id": "Machine Learning for Visual Computing (COMP0169)",
      "title": "Machine Learning for Visual Computing (COMP0169)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to equip students with knowledge of how to apply AI to problems from the creative industry; familiarity with basic ML-based algorithms and data structures to process digital media; ability of dealing with large scale data and training of machine intelligence; knowing rephrasing of existing concepts from digital media with tools from AI; and awareness of the difficulty of computed results and artistic freedom.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Formulate the diversity of image analysis and synthesis tasks as a machine learning process.</li>\n\t<li>Understand theoretical and practical concepts allowing image processing and generation to become learnable and basic understanding of how to execute that learning.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>Creative industries such as print, feature films, music, fabrication or interactive media increasingly make use of multiple machine learning driven tools. This module enables students to contribute to a new shift of paradigm, where such tools become increasingly intelligent of the content being designed and the users designing them. This is enabled by machine learning, a new way of dealing with data and new forms of algorithms. We will cover an applied background of machine learning and focus on data structures particularly relevant for creative content such as images and video and focus on learnable algorithms that allow to machines to process them intelligently, such as convolutional neural networks.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Basic regression: Ability to explain basic (1D) data with a linear model and to make predictions. Knowledge of how what a linear model entails, also in higher dimensions. The resulting attitude could be both that a surprisingly simple thing can explain complex visual phenomena, yet others it cannot.</li>\n\t<li>Understanding of linearity and non-linearity: Participants will be able to judge if a linear or nonlinear model is adequate and how important non-linearity is for Visual Computing. They should have knowledge of how to represent such models. The key change in perspective is that almost all non-trivial processes are nonlinear.</li>\n\t<li>Classification: Ability to formalize a problem as classification code a simple classifier in. Knowledge that classification is regression over probabilities to be from a class.</li>\n\t<li>Neural networks: Students should be able to code up a simple perceptron from scratch and manipulate its parameters (e.g., number of units and layers), as well as control the non-linearities. They would understand that NN is just matrix multiplications followed by non-linearities.</li>\n\t<li>Audio/2D/3D images and pixel processing: Load and stored images/3D data, audio in the coding environment they use. Understand basic issues of sampling and representations like colour and luminance. The attitude should be changing such that not only the algorithm matters, but also the right representation is critical.</li>\n\t<li>Tunable image filters; convolutional neural networks: Participants will learn how to execute convolutions on images and how to set up their environment to optimize the parameters of the convolutions. The key knowledge is that learning convolutions allows to share learned parameters across the image.</li>\n\t<li>3D meshes and point clouds: Until now data structures were regular, but now students will learn how to load irregular data (3D graphs, 3D meshes, 3D point clouds) into their environment and also how to process them as well as to learn tunable filters for them. They will deepen their knowledge of convolution by seeing how it extends to unstructured data, a generalization. The resulting attitude should be, that a well-defined convolution works on regular data as well as irregular ones.</li>\n\t<li>Ambiguity and style: Students will be explained, that under some conditions, multiple solutions are valid and that it can be adequate to report any of these. They will see how to change their code from working on paired data matching an output to a reference, it can be sufficient to match only statistics. The required skill is to change the loss and choose the right representation of these statistics.</li>\n\t<li>Generative modelling: We will first introduce the concept of a generative model, which takes simple parameters in low dimensions and maps them to complex objects in millions of dimensions. Using this requires the skill to load many exemplars and encode and decode them, which students can compose from components from before. The change of attitude should be, that a generative model is a very abstract way to \u201caddress\u201d objects in a family of natural instances: images of faces, houses, cars, etc.</li>\n\t<li>Levels of supervision; Adversarial training: Students here will acquire the skill to replace the supervision in form of pairs that are mapped to each other by a paradigm where only random samples form a target distribution are given. To this end they have to understand that the loss is replaced by another network.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Research Methods (COMP0030)": {
      "module_id": "Research Methods (COMP0030)",
      "title": "Research Methods (COMP0030)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The aims of this module are to: deepen the student's appreciation of what research in computer science is and how it is carried out; teach students how to read research publications critically; teach students how to evaluate research ideas; teach students how to perform a literature survey; outline the work needed to produce a research paper; and introduce the students to both seminal papers and cutting-edge research in computer science.<br><br><strong>Intended learning outcomes:</strong><br>\nOn successful completion of the module, a student will be able to:</p>\n\n<ol><li>Identify seminal and cutting-edge topics in computer science.</li>\n\t<li>Distinguish research topics from engineering tasks.</li>\n\t<li>Know how to go about evaluating the novelty and contribution of a research idea.</li>\n\t<li>Write a critical survey; students should also gain a good knowledge of a number of areas of research carried out in the department.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>Students are split into groups, and each assigned a supervisor who will give them a batch of research papers and help to answer questions on those papers. Students will receive guidance from the module lead and their supervisor on how to write a literature review.<br><br><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Science Study Abroad (COMP0032)": {
      "module_id": "Computer Science Study Abroad (COMP0032)",
      "title": "Computer Science Study Abroad (COMP0032)",
      "summary": "<p><strong>Study Abroad Year:</strong></p>\n\n<p>This module represents the Study Abroad Year of an MEng International Programme. The Study Abroad Year is a year of study taken at an approved international partner institution in Year 3, which replaces the equivalent Year 3 study at UCL. Students resume the standard Year 4 curriculum when they return to UCL.</p>\n\n<p>More information about Study Abroad is available at <a href=\"https://www.ucl.ac.uk/students/go-abroad/study-abroad-and-erasmus.\">UCL\u2019s Study Abroad website</a> and in the <a href=\"https://wiki.ucl.ac.uk/display/CSSH/Computer+Science+Student+Handbook\">Computer Science Student Handbook, Section 8</a>. The department will notify students about the Study Abroad scheme at the start of Year 2.</p>\n\n<p><strong>Aims:</strong></p>\n\n<p>The educational aims of the Study Abroad Year follow exactly those of their existing MEng Computer Science or MEng Mathematical Computation programme, with the additional aims of extending the educational experience of students through: (a) continuing advanced education in computer science, (b) experience of education in a different cultural and/or linguistic setting, and (c) access to high level teaching and research expertise from outside UCL.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>Students will have studied modules / courses at an appropriate breadth and depth to enable them to progress to Year 4 of their&nbsp;MEng International Programme, whilst at the same time having benefited from the experience of Higher Education in a different linguistic and/or cultural setting.<br><br><strong>Content:</strong></p>\n\n<p>Students studying abroad must follow a programme that satisfies the following criteria:</p>\n\n<ul><li>Be of overall of equivalent depth to that of their UCL Year 3 MEng&nbsp;programme.</li>\n\t<li>Be substantially composed of courses in computer science.</li>\n\t<li>Have a significant engineering orientation (as defined by UK-SPEC) and&nbsp;be compliant with the QAA subject benchmark framework.</li>\n\t<li>Be of equal workload to that of their&nbsp;UCL Year 3 MEng that is, using accepted equivalence measures, be of 120 credits.</li>\n\t<li>Be formally assessed by the host institution and the results of the assessment independently reported to the Study Abroad Tutor.</li>\n\t<li>Include taught modules/ courses, that should not consist solely of project work.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have been approved to commence the Study Abroad Year.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "120"
    },
    "Group Research Project (COMP0031)": {
      "module_id": "Group Research Project (COMP0031)",
      "title": "Group Research Project (COMP0031)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The aim of the module is to give undergraduate students exposure to cutting-edge research undertaken in the department and enhance student awareness of the range of research in computer science. The module will allow undergraduate students to develop research skills in computer science and its specific sub-disciplines, by means of an actual research project, conducted in small groups and under the direct supervision of an active academic researcher.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Formulate research questions.</li>\n\t<li>Plan and execute research activities in a systematic and organized way.</li>\n\t<li>Critically evaluate and review their work and the work of others.</li>\n\t<li>Effectively communicate their research work and findings.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>Students will work in groups to conduct a research project and produce a report/ paper presenting their results, under the supervision of a member of research/ academic staff.</p>\n\n<p>This will build on work previously undertaken in Research Methods (COMP0030) for MEng Computer Science students or Directed Reading (COMP0007) for MEng Mathematical Computation students.</p>\n\n<p>The following is indicative of the topics the module will typically cover:&nbsp;</p>\n\n<ul><li>Module introduction, team formation, and assignment to research supervisor:\n\t<ul><li>For MEng Computer Science students, the team and research supervisor will be the same as for Research Methods (COMP0030).</li>\n\t\t<li>For MEng Mathematical Computation students, team formation and assignment to research supervisor will occur late in Term 1.</li>\n\t</ul></li>\n\t<li>Definition of scope of the projects and agreement of the steps to be undertaken (project specific.)</li>\n\t<li>Research is undertaken under the guidance and supervision of the research supervisor, and tutorials will run on a weekly basis.</li>\n\t<li>Preparation of final deliverables. Each team is required to submit a paper/ report, presenting the results of the project (e.g., hypothesis/ research idea, methodology followed, experiments conducted, analysis of results). Each student is also required to submit a personal report giving (a) a critical assessment of the project results, (b) a detailed assessment of their own role, including a summary of what they contributed, and (c) a brief assessment of each group member.</li>\n\t<li>Reading lists are project-specific and will be provided on a per-group basis.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must either (1) be registered on MEng Computer Science and have taken Research Methods (COMP0030) in Term 1; or (2) be registered on MEng Mathematical Computation and have taken Directed Reading (COMP0007) in Year 2.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Graphical Models (COMP0080)": {
      "module_id": "Graphical Models (COMP0080)",
      "title": "Graphical Models (COMP0080)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module introduces probabilistic modelling, covering the broad theoretical landscape, and aims to cover much of the first 12 chapters of the <a href=\"http://www.cs.ucl.ac.uk/staff/d.barber/brml/\">core textbook</a>. The emphasis is on probabilistic modelling of discrete variables.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Construct probabilistic models, learn parameters and perform inference. This forms the foundation of many models in the wider sciences and students should be able to develop novel models for applications in a variety of related areas.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Bayesian Reasoning.</li>\n\t<li>Bayesian Networks.</li>\n\t<li>Directed and Undirected Graphical Models.</li>\n\t<li>Inference in Singly Connected Graphs.</li>\n\t<li>Hidden Markov Models.</li>\n\t<li>Junction Tree Algorithm.</li>\n\t<li>Decision Making under uncertainty.</li>\n\t<li>Markov Decision Processes.</li>\n\t<li>Learning with Missing Data.</li>\n\t<li>Approximate Inference using Sampling.</li>\n</ul><p>If time permits, we will also cover some deterministic approximate inference.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is&nbsp; formally available; (2) have understanding of and abilities with Linear Algebra, Multivariate Calculus and Probability at mathematics FHEQ Level 4 or above; and (3) have familiarity with coding a high-level language in order to complete assessments (strongly recommend that students are skilled in Python) (some tools in Matlab and Julia are provided).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Reinforcement Learning (COMP0089)": {
      "module_id": "Reinforcement Learning (COMP0089)",
      "title": "Reinforcement Learning (COMP0089)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to introduce students to the foundations of reinforcement learning, and to equip students with the ability to successfully implement, apply and test relevant learning algorithms.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the basics of reinforcement learning paradigms.</li>\n\t<li>Understand the theoretical foundations, formalisms and algorithms in reinforcement learning.</li>\n\t<li>Understand how to apply reinforcement learning algorithms to environments with complex dynamics.</li>\n\t<li>Understand how to combine reinforcement learning with function approximation, and specifically with modern deep learning methods (deep reinforcement learning).</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module is about prediction and control using reinforcement learning, including aspects of deep reinforcement learning, i.e., the application of neural networks-based functional approximation to reinforcement learning problems.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Markov decision processes.</li>\n\t<li>Planning by dynamic programming.</li>\n\t<li>Model-free prediction and control.</li>\n\t<li>Value function approximation.</li>\n\t<li>Policy gradient methods, Actor-critic algorithms.</li>\n\t<li>Integration of Learning and Planning.</li>\n\t<li>Exploration vs exploitation trade-offs.</li>\n</ul><p>For these topics we will discuss theory and concrete algorithms and applications.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have a strong understanding of probability, calculus, and linear algebra; (3) have knowledge of coding skills in Python (in order to complete assessments); and (4) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module).</p>\n\n<p>It is recommended that students have taken either Bayesian Deep Learning (COMP0171), or Applied Deep Learning (COMP0197) (or be concurrently enrolled in such a module).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Advanced Topics in Machine Learning (COMP0083)": {
      "module_id": "Advanced Topics in Machine Learning (COMP0083)",
      "title": "Advanced Topics in Machine Learning (COMP0083)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to introduce the students to some of the more advanced and technically challenging topics in Machine Learning, typically including the theory and applications of kernel methods and another topic of choice selected for the given year (such as convex optimisation, statistical learning theory, transfer learning, meta learning, online learning.)</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Gain in-depth familiarity with the selected research topics;&nbsp;understand how to design and implement learning algorithms.</li>\n\t<li>Individually read, understand and discuss research papers in the field.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module consists of two parts; each part is organised around a research topic in Machine Learning. The following are indicative of the topics the module will typically cover:</p>\n\n<p>Part 1:</p>\n\n<p>Advanced introduction to kernel methods -</p>\n\n<ul><li>Definition of a kernel, how it relates to a feature space, The reproducing kernel Hilbert space.</li>\n\t<li>Simple applications: kernel PCA, kernel ridge regression.</li>\n\t<li>Distance between means in RKHS, integral probability metrics, the maximum mean discrepancy (MMD), two-sample tests.</li>\n\t<li>Choice of kernels for distinguishing distributions, characteristic kernels.</li>\n\t<li>Covariance operator in RKHS: proof of existence, definition of norms (including HSIC, the Hilbert-Schmidt independence criterion).</li>\n\t<li>Application of HSIC to independence testing.</li>\n\t<li>Feature selection, taxonomy discovery.</li>\n\t<li>Introduction to independent component analysis, kernel ICA.</li>\n\t<li>Large margin classification, support vector machines for classification.</li>\n</ul><p>Part 2:</p>\n\n<ul><li>A second research topic of research, such as convex optimisation, statistical learning theory, transfer learning, meta learning, online learning.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have high competency with Multivariable Calculus, Probability and Combinatorics, and Linear Algebra such that they can reprove basic results as well as novel results; and (3) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Malware (COMP0060)": {
      "module_id": "Malware (COMP0060)",
      "title": "Malware (COMP0060)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to&nbsp;provide students with specialist understanding of the issues and techniques in malware detection and classification; and broad understanding of the human, social, economic, and historical context in which malware occurs.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Have specialist understanding of the nature of malware, its capabilities, and how it is combatted through detection and classification.</li>\n\t<li>Understand what the underlying scientific and logical limitations on society\u2019s ability to combat malware are.</li>\n\t<li>Have an appreciation and broad understanding of the social, economic and historical context in which malware occurs.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Introduction:</p>\n\n<ul><li>The taxonomy of malware and its capabilities: viruses, Trojan horses, rootkits, backdoors, worms, targeted malware.</li>\n\t<li>History of malware.</li>\n</ul><p>The social and economic context for malware:</p>\n\n<ul><li>Crime, anti-malware companies, legal issues, the growing proliferation of malware.</li>\n</ul><p>Basic Analysis:</p>\n\n<ul><li>Signature generation and detection.</li>\n\t<li>Clone detection methods.</li>\n</ul><p>Static analysis theory:</p>\n\n<ul><li>Program semantics.</li>\n</ul><p>Static Analysis:</p>\n\n<ul><li>System calls: dependency analysis issues in assembly languages. semantic invariance of system call sequences.</li>\n\t<li>Taint-based analyses.</li>\n\t<li>Semantic clones.</li>\n</ul><p>Dynamic Analysis:</p>\n\n<ul><li>Virtualization- semantic gap.</li>\n\t<li>Reverse engineering.</li>\n\t<li>Hybridisation with static analysis.</li>\n</ul><p>Similarity metrics:</p>\n\n<ul><li>(Kolmogorov Complexity.)</li>\n\t<li>Association metrics.</li>\n\t<li>Other entropy-based metrics.</li>\n</ul><p>NLP based approaches. Problems in large scale classification:</p>\n\n<ul><li>Scalability.</li>\n\t<li>Triage methods.</li>\n\t<li>Required FP rate.</li>\n</ul><p>Hiding:</p>\n\n<ul><li>Polymorphism. compression, encryption, virtualization.</li>\n\t<li>Metamorphism. high level code obfuscation engines, on-board metamorphic engines, semantics-preserving rewritings.</li>\n\t<li>Frankenstein.</li>\n</ul><p>The theory of malware:</p>\n\n<ul><li>Rice\u2019s theorem and the undecidability of semantic equivalence.</li>\n\t<li>Adleman\u2019s proof of the undecidability of the presence of a virus.</li>\n\t<li>Cohen\u2019s experiments on detectability and self-obfuscation.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken modules in logic and discrete mathematics, assembly, and imperative programming at FHEQ level 4 or higher.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "People and Security (COMP0056)": {
      "module_id": "People and Security (COMP0056)",
      "title": "People and Security (COMP0056)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Students will be able to specify usability criteria that a security mechanism has to meet to be workable for end-user groups and work contexts. They will know the strengths and weaknesses of particular security mechanisms in practice, and hence be able to choose and configure mechanisms for best performance in a given organisational context. Students will be able to specify accompanying measures (policies, training, monitoring and ensuring compliance) that a user organisation needs to implement to ensure long-term security in practice.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Apply their knowledge of human factors and behavioural economics to specify and implement workable and effective security solutions and manage security behaviour.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Understanding Human Behaviour in Security:</p>\n\n<ul><li>Systems thinking and design.</li>\n\t<li>Usability: Users, tasks and context.</li>\n\t<li>Performance and Workload.</li>\n\t<li>Productivity and performance vs risk and security.</li>\n</ul><p>Economics:</p>\n\n<ul><li>Humans and Risk.</li>\n\t<li>Risk Biases and Decision-making.</li>\n\t<li>Friction and the Compliance Budget.</li>\n</ul><p>Authentication:</p>\n\n<ul><li>Authentication tasks:\n\t<ul><li>enrolment, verification, recovery.</li>\n\t</ul></li>\n\t<li>Knowledge-based authentication:\n\t<ul><li>Passwords,</li>\n\t</ul></li>\n\t<li>phrases, PINs, graphical Authentication.</li>\n\t<li>Token-based authentication.</li>\n\t<li>Biometric authentication:\n\t<ul><li>physical and behavioural.</li>\n\t</ul></li>\n\t<li>Continuous authentication via devices, sensors, and biometrics.</li>\n\t<li>Payment systems and transaction authentication.</li>\n</ul><p>Access control:</p>\n\n<ul><li>Different access control models, organisational impact and user workload.</li>\n\t<li>Attacks and attackers (and how to counter them):</li>\n\t<li>Types of attacks (Guessing, observation, capture and coercion).</li>\n\t<li>Types of attackers: motivation, resources risk propensity.</li>\n\t<li>Social engineering attacks.</li>\n\t<li>Insider attacks.</li>\n</ul><p>Identity:</p>\n\n<ul><li>Online identity vs identity in the physical world.</li>\n\t<li>National identity vs socially constructed systems.</li>\n\t<li>Digital footprints, shadows and super-identities.</li>\n\t<li>Identity as currency.</li>\n</ul><p>Privacy:</p>\n\n<ul><li>Data protection and user perception.</li>\n\t<li>Delivering privacy: Privacy by Design, the PST model.</li>\n\t<li>Surveillance, dataveillance and sousveillance online and in the physical world (CCTV).</li>\n</ul><p>Trust:</p>\n\n<ul><li>Model of trust in online interaction.</li>\n\t<li>Incentivising trustworthy behaviour.</li>\n\t<li>Reputation systems and their application in online systems.</li>\n</ul><p>Influencing user behaviour:</p>\n\n<ul><li>Security awareness, education and training.</li>\n\t<li>User interface design and influencing techniques.</li>\n\t<li>Values, attitudes, security culture and security behaviour.</li>\n\t<li>Responsibility and communication.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have knowledge of basic information security principles; and (3) have good essay-writing skills.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Supervised Learning (COMP0078)": {
      "module_id": "Supervised Learning (COMP0078)",
      "title": "Supervised Learning (COMP0078)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>This module covers supervised approaches to machine learning (ML). Our goal will be to gain intuition about a number of ML methodologies, how they function, where they perform well, poorly and so forth. These intuitions will be given as mathematical results which will be supported by proof.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Gain in-depth familiarity with various classical and contemporary supervised learning algorithms.</li>\n\t<li>Understand the underlying limitations and principles that govern learning algorithms and ways of assessing and improving their performance.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module consists of both foundational topics for supervised learning such as Linear Regression, Nearest Neighbours and Kernelisation as well contemporary research areas such as multi-task learning and optimisation via proximal methods.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Nearest Neighbours.</li>\n\t<li>Linear Regression.</li>\n\t<li>Kernels and Regularisation</li>\n\t<li>Support Vector Machines.</li>\n\t<li>Gaussian Processes.</li>\n\t<li>Decision Trees.</li>\n\t<li>Ensemble Learning.</li>\n\t<li>Sparsity Methods.</li>\n\t<li>Multi-task Learning.</li>\n\t<li>Proximal Methods.</li>\n\t<li>Semi-supervised Learning.</li>\n\t<li>Neural Networks.</li>\n\t<li>Matrix Factorization.</li>\n\t<li>Online Learning.</li>\n\t<li>Statistical Learning Theory.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have high competency with Multivariable Calculus, Probability and Combinatorics, and Linear Algebra such that they can reprove basic results as well as novel results.</p>\n\n<p>The module is mathematical in nature. As such there is a significant proportion devoted to formal theorems and proofs.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Individual Project for Year 4 MEng (COMP0138)": {
      "module_id": "Individual Project for Year 4 MEng (COMP0138)",
      "title": "Individual Project for Year 4 MEng (COMP0138)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>To give students the experience of undertaking and completing a substantial and challenging individual project running over both teaching terms, applying knowledge learned throughout their degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a high academic standard via a written report. The project work should incorporate advanced ideas and methodologies derived from Year 3 and Year 4 modules, as well as emphasise research and evaluation skills.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Work individually to undertake a major project.</li>\n\t<li>Plan and coordinate the project activities to meet the deadlines.</li>\n\t<li>Make realistic work commitments.</li>\n\t<li>Write a substantial report to document the project results.</li>\n\t<li>Demonstrate good research and evaluation skills.</li>\n\t<li>Investigate and identify solutions to one or more challenging problems.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>There is no set syllabus; students identify their chosen project topic and find a member of the academic staff who will act as the Project Supervisor.</li>\n\t<li>The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3.</li>\n\t<li>Students are responsible for organising and carrying out their project and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary.</li>\n\t<li>There are two formative milestones: (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what it is required to complete the project. These documents are prepared with advice from the Project Supervisor and must be approved by them to confirm the project is proceeding properly.</li>\n</ul><p>Project goals:</p>\n\n<ul><li>A MEng project is expected to have significant challenge and depth, reflecting that it is a Masters level project. The student is encouraged to do a research-oriented project and it is possible to submit a research paper in place of a standard project report.</li>\n</ul><p>Project report:</p>\n\n<ul><li>The final report documents the results of the project and is expected to be a substantial and properly structured document, or a properly constructed research paper. Obtaining a higher module mark depends on both submitting a good quality report or paper, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content.</li>\n</ul><p>Reading list:</p>\n\n<ul><li>As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "30"
    },
    "Information Retrieval and Data Mining (COMP0084)": {
      "module_id": "Information Retrieval and Data Mining (COMP0084)",
      "title": "Information Retrieval and Data Mining (COMP0084)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module is aimed at an entry level study of information retrieval and data mining techniques. It is about how to find relevant information and subsequently extract meaningful patterns out of it. While the basic theories and mathematical models of information retrieval and data mining are covered, the course is primarily focused on practical algorithms of textual document indexing, relevance ranking, web usage mining, text analytics, as well as their performance evaluations.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the common algorithms and techniques for information retrieval (document indexing and retrieval, query processing, etc).</li>\n\t<li>Understand the quantitative evaluation methods for the IR systems and data mining techniques.</li>\n\t<li>Understand&nbsp;the popular probabilistic retrieval methods and ranking principles.</li>\n\t<li>Understand&nbsp;the techniques and algorithms existing in practical retrieval and data mining systems such as those in web search engines and recommender systems, including the recently popular topic of deep learning.</li>\n\t<li>Understand&nbsp;basic algorithms that can be used to make predictions out of data.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Overview of the fields:</p>\n\n<ul><li>Study some basic concepts of information retrieval and data mining, such as the concept of relevance, association rules, and knowledge discovery. Understand the conceptual models of an information retrieval and knowledge discovery system.</li>\n</ul><p>Indexing and Text Processing:</p>\n\n<ul><li>Introduce various indexing techniques for textual information items, such as inverted indices, tokenization, stemming and stop words. Techniques used for text compression, such as the Lempel-ziv algorithm and Huffman Coding will be covered.</li>\n</ul><p>Retrieval Methods:</p>\n\n<ul><li>Study popular retrieval models (boolean, vector space, binary independence, language modelling). Probability ranking principle. Other commonly-used techniques such as relevance feedback, pseudo relevance feedback, and query expansion will also be covered;</li>\n</ul><p>Measurements:</p>\n\n<ul><li>Online and offline Evaluation techniques to evaluate retrieval quality. Commonly used evaluation metrics such as average precision, NDCG, etc. Cranfield Paradigm and TREC conferences, as well as some recently popular techniques such as interleaving will be discussed;</li>\n</ul><p>Data Mining:</p>\n\n<ul><li>Study basic techniques, algorithms, and systems of data mining and analytics, including frequent pattern and correlation and association analysis, basic machine learning algorithms such as linear regression and logistic regression. Discussion on basic personalisation and usage mining techniques.</li>\n</ul><p>Emerging Areas:</p>\n\n<ul><li>Study new emerging areas such as learning to rank, deep learning, word embeddings and topic modelling.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have an understanding of probability and statistics; and (3) have proficiency in Java or Python programming (as demonstrated by a least one programming project in the past).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Practical Program Analysis (COMP0174)": {
      "module_id": "Practical Program Analysis (COMP0174)",
      "title": "Practical Program Analysis (COMP0174)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Program analysis is widely used in industry to ensure software quality and security on various stages of software development process. This module covers both theoretical and practical aspects of modern program analysis. First, the module introduces static program analysis techniques such as data flow analysis and abstract interpretation. Second, the module demonstrates dynamic analysis techniques such as taint analysis and race detection. Third, the module shows how these techniques are used in practice to ensure software quality and security. Finally, the module discusses the implementation of program analysis techniques.&nbsp;</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:&nbsp;</p>\n\n<ol><li>Rigorously reason about software properties.&nbsp;</li>\n\t<li>Choose appropriate program analysis techniques in different stages and contexts of software development. &nbsp;</li>\n\t<li>Apply modern program analysis tools to real-world software and correctly interpret their output. &nbsp;</li>\n\t<li>Implement custom program analysis tools.&nbsp;</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Introduction to program analysis.</li>\n\t<li>Pattern-based analysis.</li>\n\t<li>Lattice theory.</li>\n\t<li>Data-flow analysis:\n\t<ul><li>Constant propagation.</li>\n\t\t<li>Live variables.</li>\n\t\t<li>Reaching definitions.</li>\n\t</ul></li>\n\t<li>Abstract Interpretation.</li>\n\t<li>Dynamic analysis:\n\t<ul><li>Dynamic race detection.</li>\n\t\t<li>Buffer overflow detection.</li>\n\t\t<li>Dynamic taint analysis.</li>\n\t\t<li>Application of dynamic analysis (fuzz testing, web security).</li>\n\t</ul></li>\n\t<li>Program analysis in practice.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Affective Computing and Human-Robot Interaction (COMP0053)": {
      "module_id": "Affective Computing and Human-Robot Interaction (COMP0053)",
      "title": "Affective Computing and Human-Robot Interaction (COMP0053)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module targets students who have no previous knowledge in cognitive science and emotion theory and therefore the aim of Part A of the module is to give a basic introduction to the theory of emotion from physiological and psychological viewpoints and to understand its importance in human decision and communication processes. Part B will concentrate on the application of machine learning techniques to automatic emotion recognition by looking at current applications (e.g., in entertainment, education, and health) and available sensing technology. Part C will focus on the challenges in designing robots that are capable of socially interacting with humans. Examples of current applications (e.g., in entertainment, health, rehabilitation, service robotics) will be used to identify problems and discuss affective computing challenges and approaches for the topics taught in Parts A and B.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Have basic knowledge of emotion models and of how technology (e.g.,&nbsp;robot) can be endowed with the ability to affectively and socially interact with its user.</li>\n\t<li>Understand the challenges that affective computing and social HRI pose to the machine learning field and identify the advantages and disadvantages of different approaches to address those issues.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Emotion theory:</p>\n\n<ul><li>What is affect, emotion, mood?</li>\n\t<li>Why do we have emotions?</li>\n\t<li>Neurological and psychological perspectives.</li>\n\t<li>How do humans express and recognise emotions?</li>\n\t<li>Emotion expression models, appraisal theories.</li>\n\t<li>Affective and social interaction.</li>\n</ul><p>Affective computing:</p>\n\n<ul><li>Definition.</li>\n\t<li>Aims and current challenges.</li>\n\t<li>Applications; emotion recognition.</li>\n\t<li>How to select and use sensors for data collection.</li>\n\t<li>How to build an automatic emotion recognition system from: single modality,&nbsp;facial expressions, body expressions, touch expressions, voice, bio-signals and multimodal fusion.</li>\n</ul><p>Introduction to Physiological computing:</p>\n\n<ul><li>Key concepts (physiological sensing, affect recognition, biofeedback).</li>\n\t<li>How to build low-cost physiological computing systems (e.g. emergent wearable devices, low-cost cameras).</li>\n\t<li>Types of affect-related physiological signals and how to obtain features (cardiovascular, respiratory, perspiratory etc).</li>\n</ul><p>Human-Robot Interaction (HRI):</p>\n\n<ul><li>Social robotics: motivation and emotions in robot.</li>\n\t<li>Emotion based architecture.</li>\n\t<li>Ethical issues in Affective Computing and HRI research.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have some machine learning background, for example from Supervised Learning (COMP0078), or Introduction to Machine Learning (COMP0088); and (3) have some programming skills (for example, Python, MATLAB, Java, C, C++).</p>\n\n<p>There is no imposed programming platform.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Perception and Interfaces (COMP0160)": {
      "module_id": "Perception and Interfaces (COMP0160)",
      "title": "Perception and Interfaces (COMP0160)",
      "summary": "<p><strong>Aims: </strong></p>\n\n<p>The aims of the module are to: (1) provide&nbsp;students with an understanding of the underlying theories and methods of measuring human perception and its uses within computing; and (2) provide&nbsp;students with the knowledge of how to use perceptual principles in the design of interfaces/environments.</p>\n\n<p><strong>Intended learning outcomes: </strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Explain how humans perceive and interpret sensory information.</li>\n\t<li>Understand the relevance of perception in computing (e.g., robotics, virtual environments, machine learning, sensor design, interfaces).</li>\n\t<li>Appreciate the importance of perception in the design of interfaces/environments.</li>\n\t<li>Apply perceptual techniques to both the design and evaluation of interfaces/environments.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following is indicative of the topics the module will typically cover:</p>\n\n<p>The module covers how we interact with our immediate environment and interfaces through our senses. The module provides students with an understanding of the theoretical principles underlying human perception that can be used in the design and implementation of interfaces and environments. This involves understanding how core perceptual principles are used in the design of displays, sensors and virtual environments. The module also introduces students to software and experimental techniques to monitor and measure how effectively we interact with such interfaces. Not all topics will be covered to the same depth.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module, a student must be registered on a programme and year of study for which it is formally available.</p>\n\n<p>There may be an element of maths and/ or coding involved in the understanding of the concepts, practical work or assessments. Coding may use the following languages: Python, MatLab, C#.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Auditory Computing (COMP0161)": {
      "module_id": "Auditory Computing (COMP0161)",
      "title": "Auditory Computing (COMP0161)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to introduce the perceptual principles underlying auditory computational modelling and applications. In particular, principles and theory of sound detection, selection and organization underlying computational auditory scene analysis, speech recognition and sound and music computing.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of this module, a student will be able to:</p>\n\n<ol><li>Understand the basic principles of auditory processing, acoustics, the design of auditory filters and applications in computing.</li>\n\t<li>Explain the fundamentals of auditory processing, modelling, and its applications.</li>\n\t<li>Understand and appreciate the contribution of low-level auditory processing and the development of computational models of binaural hearing, pitch perception, and speech recognition models</li>\n\t<li>Understand some key principles of music computation involving representation, sonification, and algorithmic design.<strong> </strong></li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following is indicative of the topics the module will typically cover:</p>\n\n<p>An introduction to the perceptual principles underlying auditory computational modelling and applications. This module will complement other module content such as machine learning (auditory filters, non-linear models), machine vision (spectro-temporal processing, organization, representation), speech recognition (spectrograms, time-series analysis), neural computing (cognitive systems), and virtual environments (binaural and spatialized sound presentation). Not all topics will be covered to the same depth.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is formally available.</p>\n\n<p>There may be an element of maths and/ or coding involved in the understanding of the concepts, practical work or assessments. Coding may use the following languages: Python, Java, MatLab, C#.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Security II (COMP0055)": {
      "module_id": "Computer Security II (COMP0055)",
      "title": "Computer Security II (COMP0055)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>Providing an advanced understanding of network and computer security vulnerabilities and countermeasures in real-world systems.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Think critically and creatively about advanced security topics.</li>\n\t<li>Understand how, when, and why to apply security technologies for the most benefit, vis-\u00e0-vis advanced network, software, and system issues.</li>\n\t<li>Design of attacks and defences to networks, systems, and software, both from a theoretical and a practical point of view.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Network protocols and vulnerabilities.</li>\n\t<li>Network defences.</li>\n\t<li>Network security tools.</li>\n\t<li>Intrusion and anomaly detection.</li>\n\t<li>Advanced software and system security: threats, vulnerabilities, and countermeasures via real-world examples.</li>\n\t<li>Malware and botnets.</li>\n\t<li>Denial of service.</li>\n\t<li>Advanced Web security.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken Computer Security I (COMP0054) or an equivalent module in Term 1.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Financial Institutions and Markets (COMP0105)": {
      "module_id": "Financial Institutions and Markets (COMP0105)",
      "title": "Financial Institutions and Markets (COMP0105)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module exposes participants to an overview of the Financial Markets and its key participants and products.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the function of financial markets and their key participants.</li>\n\t<li>Have an overview of the main exchanges and the different ways that their indices are calculated.</li>\n\t<li>Understand the fixed income market and its major products.</li>\n\t<li>Understand the FX market and its major products.</li>\n\t<li>Understand the equity market and its major products.</li>\n\t<li>Understand the derivative market and its major products.</li>\n\t<li>Understand credit risk, its effect on the pricing of financial assets and credit related financial products.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ol><li>Exter\u2019s inverted pyramid.</li>\n\t<li>Public and private sector institutional participants.</li>\n\t<li>Major exchanges and indices.</li>\n\t<li>Overview of consumer, corporate and investment banking financial services.</li>\n\t<li>Fixed income market and products.</li>\n\t<li>FX market and products.</li>\n\t<li>Equity market and products.</li>\n\t<li>Derivative market and products.</li>\n\t<li>Credit risk and derivatives.</li>\n</ol><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have an understanding of the fundamental macroeconomics and software services.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Quantum Information and Communication (COMP0196)": {
      "module_id": "Quantum Information and Communication (COMP0196)",
      "title": "Quantum Information and Communication (COMP0196)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>In this module, students will develop their understanding of the fundamental concepts and techniques of quantum information science, building on those covered in Quantum Computation (COMP0157). The aims are to capacitate students to understand and reason with quantum mechanics, and to introduce the basics of quantum cryptography, fault-tolerant quantum computation and quantum communication networks.</p>\n\n<p><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the mathematical structure of quantum mechanics and perform calculations with it.</li>\n\t<li>Analyze some of the building blocks of quantum information (teleportation, no-cloning, dense coding, and Bell inequalities) and understand the advantages that they provide over classical information.</li>\n\t<li>Analyze and prove the security of some quantum key distribution protocols.</li>\n\t<li>Analyze some quantum error correction codes and understand the basics of fault-tolerant quantum computation.</li>\n\t<li>Understand how to reliably send classical and quantum information through quantum networks.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>Quantum mechanics.</li>\n\t<li>Quantum teleportation and dense coding.</li>\n\t<li>Quantum cryptography.</li>\n\t<li>Quantum error correcting codes.</li>\n\t<li>Quantum communication networks.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Quantum Computation (COMP0157) with a mark of 40% or greater.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Statistical Natural Language Processing (COMP0087)": {
      "module_id": "Statistical Natural Language Processing (COMP0087)",
      "title": "Statistical Natural Language Processing (COMP0087)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module introduces the basics of statistical natural language processing (NLP) and machine learning techniques relevant for NLP.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand relevant ML techniques, in particular in deep learning, what makes NLP challenging (and exciting), how to write programs that process language, and how to address the computational challenges involved.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>NLP is domain-centred fields, as opposed to technique centred fields such as ML, and as such there is no \"theory of NLP\" which can be taught in a cumulative technique-centred way. Instead, this module will focus on NLP applications and the machine learning techniques used to solve them. Through these applications the participants will learn about language itself, relevant linguistic concepts, and Machine Learning techniques. For the latter an emphasis will be on deep learning prediction.</p>\n\n<p>Topics will include (but are not restricted to) machine translation, sequence tagging, constituent and dependency parsing, information extraction, semantics. The module has a strong applied character, with coursework to be programmed and lectures that mix practical aspects with theory and background.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>NLP Tasks:</p>\n\n<ul><li>Language Models.</li>\n\t<li>Machine Translation.</li>\n\t<li>Text Classification.</li>\n\t<li>Sequence Tagging.</li>\n\t<li>Information Extraction.</li>\n\t<li>Machine Reading Comprehension.</li>\n</ul><p>NLP and ML methods:</p>\n\n<ul><li>Encoder/Decoder Architectures.</li>\n\t<li>Feature Engineering.</li>\n\t<li>Deep Neural Networks.</li>\n\t<li>RNNs, CNNs.</li>\n\t<li>Attention.</li>\n\t<li>Word Vectors.</li>\n\t<li>Pretraining.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have an understanding of Basic Probability Theory (e.g., Bayes Rule), Linear Algebra and Multivariate Calculus; (3) have proficiency in programming; (4) have the ability to install libraries on a computer; and (5) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module).</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Requirements Engineering and Software Architecture (COMP0101)": {
      "module_id": "Requirements Engineering and Software Architecture (COMP0101)",
      "title": "Requirements Engineering and Software Architecture (COMP0101)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module will train students in the fundamental principles and latest techniques in systems requirements engineering and software architecture.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of this module, a student will be able to:</p>\n\n<ol><li>Discover, model, analyse and communicate requirements for software intensive systems.</li>\n\t<li>Design, evaluate and communicate software architecture that meet these requirements.</li>\n</ol><p>The module emphasis will be on developing the students' modelling skills and their ability to communicate requirements and architectures with clarity and precision to business stakeholders and software developers.</p>\n\n<p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<ul><li>System Requirements Engineering: Goal-oriented requirements engineering, requirements engineering in agile projects.</li>\n\t<li>Software Architecture: Architecture modelling, architectural styles, quality requirements.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have strong knowledge and practical experience of software engineering at least equivalent to FHEQ level 5.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computer Security I (COMP0054)": {
      "module_id": "Computer Security I (COMP0054)",
      "title": "Computer Security I (COMP0054)",
      "summary": "<p><strong>Aims:</strong><br>\nThis module aims to introduce computer security concepts and techniques. It covers core security principles to engineer systems that provide properties like confidentiality, integrity, or availability, despite the efforts of malicious entities to subvert them.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Recognise security properties of systems, as well as formulate security policies, and model the threats they may face.</li>\n\t<li>Select appropriate controls to guarantee that the security policies are implemented robustly and may resist efforts to subvert them, through exposure to a number of established industry and government security mechanisms and design patterns.</li>\n\t<li>Analyse&nbsp;computer systems&nbsp;and develop&nbsp;strategies to bypass security controls.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>The module provides strong foundations in security engineering and enables students to more easily follow other modules in Information Security and in Applied Cryptography.</p>\n\n<p>The first half of the module covers topics which underpin security of systems:</p>\n\n<ul><li>Basic principles.</li>\n\t<li>Security policies.</li>\n\t<li>Access control (theory and practice).</li>\n\t<li>Hardware,</li>\n\t<li>OS security fundamentals.</li>\n</ul><p>We will then dive into the details of various technical protection mechanisms and computer attacks including hardware, operating system, and side channel attacks. We will also learn about defensive technology in high-integrity systems both from a theoretical and a practical level. We will study user authentication and identification. The module provides strong foundations in security engineering and enables students to more easily follow other modules in Information Security and in Applied Cryptography.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken the equivalent of the core modules of a UK-equivalent honours degree (or higher) in the field of computer science (in particular, operating systems, networking, computer architecture.)</p>\n\n<p>Some mathematics are useful to know, e.g., discrete mathematics, probability, logic, partial orders, entropy.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Acquisition and Processing of 3D Geometry (COMP0119)": {
      "module_id": "Acquisition and Processing of 3D Geometry (COMP0119)",
      "title": "Acquisition and Processing of 3D Geometry (COMP0119)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module aims to expose students to the challenges and potential of geometry processing in relevant application areas. To explain how to use acquire 3D model, and subsequently process, analyse, and manipulate the data. To familiarize students with handling real data sets and apply machine learning algorithms in the context of 3D geometric data.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Read and understand recent advancements in this area (theory).</li>\n\t<li>Obtain a grasp of the key tools in geometry processing (theory) and understand current machine learning approaches in the context of geometry processing.</li>\n\t<li>Gain necessary coding and practical skills to work directly with real-world 3D data (practice).</li>\n\t<li>Learn to formulate and solve problem using the geometric tools they learn as part of the module (practice).</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module introduces basics of geometry processing covering important aspects of acquisition, analysis, and manipulation of 3D data. The module will consist of a mix of theory and applications to real-world scenarios.</p>\n\n<p>The module intends to introduce students to the various stages of a typical geometry processing pipeline. With the recent growth in popularity of 3D acquisition devices (e.g., depth cameras) and modeling frameworks, geometry processing now plays a central role in a diverse set of applications including city planning, architectural geometry, reverse engineering, interactive modeling, etc.</p>\n\n<p>Topics will include but not restricted to mesh representations, mesh smoothing, remeshing, mesh reconstruction, and shape analysis. Necessary topics in differential geometry will be covered in the module.</p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Introduction:</p>\n\n<ul><li>Applications.</li>\n\t<li>Surface representations.</li>\n</ul><p>Geometry Registration:</p>\n\n<ul><li>Local and global registration (ICP, branch-and-bound).</li>\n\t<li>Geometry Acquisition.</li>\n\t<li>3D acquisition using laser scanners.</li>\n\t<li>Structure from motion-based acquisition.</li>\n</ul><p>Differential Geometry:</p>\n\n<ul><li>Introduction to curves and surface.</li>\n\t<li>Mesh Smoothing and Decimation.</li>\n\t<li>Parametrization and Remeshing.</li>\n\t<li>Mesh Deformation.</li>\n\t<li>Laplace Beltrami Operator.</li>\n\t<li>Shape Analysis.</li>\n\t<li>Shape Synthesis.</li>\n\t<li>ML in the context of geometry processing.</li>\n</ul><p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an option or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) should have an understanding of linear algebra; and (3) have coding experience.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Computational Modelling for Biomedical Imaging (COMP0118)": {
      "module_id": "Computational Modelling for Biomedical Imaging (COMP0118)",
      "title": "Computational Modelling for Biomedical Imaging (COMP0118)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>To expose students to the challenges and potential of computational modelling in a key application area. To explain how to use models to learn about the world. To teach parameter estimation techniques through practical examples. To familiarize students with handling real data sets.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand the aims of biomedical imaging.</li>\n\t<li>Understand the advantages and limitations of model-based approaches and data-driven approaches.</li>\n\t<li>Have knowledge of standard techniques in modelling, experimental design and parameter estimation.</li>\n\t<li>Understand the challenges of data modelling, experiment design and parameter estimation in practical situations.</li>\n\t<li>Handle real-world data in computer programs.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The module introduces the basics of mathematical modelling: the distinction between models and the real world; when and how models are useful; advantages and disadvantages of explicit model-based approaches.</p>\n\n<p>The module covers a range of model-based approaches to biomedical imaging and image analysis and basic computer science techniques that underpin them. The intention is to introduce the students to standard techniques of parameter estimation in a hands-on practical way within the context of model-based imaging and image-based modelling.</p>\n\n<p>The module also gives exposure to common applications and challenges in biomedical imaging. It uses several example applications (including microstructural MRI and disease progression modeling) to introduce different kinds of model and, more fundamentally, new algorithms and techniques for parameter estimation, optimization, sampling and validation.</p>\n\n<p><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an option or elective, a student must be registered on a programme and year of study for which it is a formally available.</p>\n\n<p>The module courseworks involve mathematical programme for which we recommend Matlab or python. Familiarity with such environments is helpful, although a strong programmer in other languages will pick up the necessary syntax during the course. It also assumes a strong grasp of general engineering mathematical concepts, in particular linear algebra (intermediate), probability and statistics (intermediate), geometry, and calculus.</p>\n\n<p>Students familiar with statistical modeling, parameter estimation, and machine learning will pick up the content fairly easily; those less familiar with such concepts sometimes find the workload heavy. To get an idea of the content, have a look at section IV (Probabilities and Inference) of the <a href=\"http://www.inference.org.uk/itprnn/book.pdf\">Mackay Information Theory, Inference and Learning Algorithms book</a>.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    },
    "Validation and Verification (COMP0103)": {
      "module_id": "Validation and Verification (COMP0103)",
      "title": "Validation and Verification (COMP0103)",
      "summary": "<p><strong>Aims:</strong></p>\n\n<p>The module will train students in the principles and techniques of validating and verifying software systems. The training will be intellectually demanding and will cover not only the state-of-the practice in validation and verification, but also the most significant trends, problems and results in validation and verification research.<br><br><strong>Intended learning outcomes:</strong></p>\n\n<p>On successful completion of the module, a student will be able to:</p>\n\n<ol><li>Understand correctness, consistency, faults and failures, static analysis and testing</li>\n\t<li>Understand the use of logic as a formal language for the specification of systems.</li>\n\t<li>Understand the use of symbolic execution.</li>\n\t<li>Verify simple systems.</li>\n\t<li>Understand the range of approaches to testing that can be applied to software systems.</li>\n\t<li>Undertake both black-box and white-box (unit-level) testing.</li>\n\t<li>Appreciate the limitations of the current tools and have insights into ongoing research topics to overcome them.</li>\n</ol><p><strong>Indicative content:</strong></p>\n\n<p>The following are indicative of the topics the module will typically cover:</p>\n\n<p>Basic concepts:</p>\n\n<ul><li>Software engineering lifecycle context.</li>\n\t<li>Correctness.</li>\n\t<li>Soundness and completeness.</li>\n\t<li>Faults.</li>\n\t<li>Errors.</li>\n\t<li>Failures.</li>\n\t<li>Static and dynamic analysis.</li>\n</ul><p>Validation:</p>\n\n<ul><li>Kinds of testing (unit, functional, integration, system, acceptance, regression).</li>\n\t<li>Black box and White box testing.</li>\n\t<li>Input partitioning and Random Testing.</li>\n\t<li>Coverage and Structural Testing.</li>\n\t<li>Mutation Testing.</li>\n\t<li>Regression Testing.</li>\n</ul><p>Verification:</p>\n\n<ul><li>Propositional and Predicate Logic.</li>\n\t<li>Specifying and verifying programs.</li>\n\t<li>Symbolic Execution.</li>\n\t<li>Hoare Logic.</li>\n</ul><p>Reading: Selected surveys, research papers, and book chapters.<br><br><strong>Requisites:</strong></p>\n\n<p>To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have a background equivalent to Years 1 and 2 of BSc/ MEng Computer Science at UCL.</p>",
      "content": "",
      "ilo": "",
      "level": "",
      "credits": "15"
    }
  }
}