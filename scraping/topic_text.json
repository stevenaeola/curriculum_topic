["Professional Development for Computer Scientists  Content and aims \n                 \n                    Module overview\n                  This module covers professional skills for computing students in preparation for placement applications and job applications on graduation. It complements the technical skills of your degree programme with professional and employability skills. &nbsp; \n\n\n The module will introduce various career paths and roles within the computing industry. You\u2019ll be working on a career development action plan and will also develop your CV and professional social network profile. &nbsp; \n\n\n You\u2019ll also practice elevator pitches and other interview skills. Crucially, you will hear from a number of industry representatives who will explain what they are looking for in their future recruits. Professional Development for Computer Scientists is strongly recommended if you plan to go on placement during your studies.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  understand the business of computing science and be able to articulate their strengths in this context;   have knowledge of the core career options and awareness of the diversity and variety of careers open to computer scientists;   advance your generic skills: written communication skills, the use of social media for professionals, formal and informal oral communication, CV and cover letter writing, interview skills, presentation skills;   advance your cognitive skills: Reflective analysis skills, planning and strategizing.    ", "Spatial Skills Training 1 COMPSCI1026   This course is designed to develop the spatial skills of participants.     The spatial skills training course has been introduced to develop the spatial skills of students entering computing science with poor spatial ability.     Students will become proficient in spatial visualisation - specifically rotation and orientation of 3D structures   -  &nbsp;  as tested by the   PSVT:R  &nbsp;test of spatial skills.  ", "Professional Work Placement in Computer Science Supervised work experience provides students with the opportunity to set their academic studies in a broader context, to gain practical experience in specific technical areas and to strengthen their communication and time-management skills. It greatly assists them in developing as independent learners, so that they will be able to gain maximum benefit from the learning opportunities afforded by their future study programme. It gives them opportunities, according to the nature of the placement experience, to acquire the basis of technical expertise in specialist areas, which they may be able to enhance through study after completion of the placement, especially in the final project.  ", "Foundation Mathematics for Computing Science and Software Engineering 1 COMPSCI1028   In the School of Computing  &nbsp;Science  , e  ntrants to the undergraduate programs   have varying degree  s  &nbsp;of competence in   Mathematics  , depending on their entry route  . This course is mean  t to   ensure   all students have a basic understanding of those topics in Mathematics that are deemed important pre-requisites   for   undergraduate programs in   Computing  &nbsp;Science and Software Engineering.  &nbsp;     The primary   aim   of this course is   to provide   the opportunity to pursue a degree-level course in Comput  ing  &nbsp;Science or Software Engineering   to students from a diverse   range of   background  &nbsp;knowledge in Mathematics.  &nbsp;A secondary aim is to serve   as a   means to  &nbsp;review and   refresh  &nbsp;the Mathematics  &nbsp;topics  &nbsp;  that are a pre-requisite for certain   H  -level courses   in Computer Science and Software Engineering.  &nbsp;     By the end of this course students will be able to:    1.   Manipulat  e  &nbsp;algebraic expressions  ,   solve   algebraic equations  , and apply   algebraic skills to rectilinear shapes  ,  &nbsp;circles and graphs  .    2.   Manipulat  e  &nbsp;trigonometric expressions  &nbsp;and solve trigonometric equations.    3.   Understand functions  , graphs, composites and inverse.    4.   Explain  &nbsp;s  equences,  &nbsp;s  eries,   and r  ecurrence  , and model situations using sequences  .  ", "Year Abroad Learning and teaching methods may include taught courses, a research programme, or a mixture of these.\n\ncomponents. The Year Abroad will be for TWO academic semesters or their equivalent. The student will follow a programme negotiated by the Study Abroad team or nominee, School Study Abroad Tutor and an equivalent representative of the host institution. Prior to the commencement of the Year Abroad, the student, the appropriate officers  from UH and from the host institution will agree a learning contract and mode of attendance.   In institutions where the language of instruction is not English, then the learning contract will take into account\nthe students ability in the language of instruction of the host institution.  The student will be required to provide evidence of appropriate attainment and ability in the language of instruction of the chosen institution when the language of instruction is not English.  ", "Introduction to Programming COMPSCI1027   This course is intended for Graduate Apprenticeship students only.    This course prepares students for the first semester of the Graduate Apprenticeship programme and aims to get students up to speed in at least one programming language. The course will cover the basic computational concepts required to read, amend, and write programs.     This course aims to develop in students an ability to read and understand program solutions in a language. The student will be able to create and enhance solutions to problems in a programming language Python.  &nbsp;     By the end of this course students will be able to:    1.   Describe the purpose and operation of a range of individual computational concepts, as exemplified in one   &nbsp;    &nbsp;        programming language  :    1.   Explain how information is manipulated in a programming language  ;    1.   Describe the core behaviours of solutions to problems expressed in a programming language  ;    1.   Analyse the inputs and outputs for problems in a programming language  ;  &nbsp;    1.   Implement changes to the behaviour of solutions to problems in a programming language  ;  &nbsp;    1.   Implement solutions from scratch to problems in a programming language  .  &nbsp;  ", "Study Abroad Learning and teaching methods may include taught courses, a research programme, or a mixture of these\n \ncomponents. The Study Abroad duration will be for ONE academic semester or its equivalent. The student will follow a programme negotiated by the Study Abroad team or nominee, School Study Abroad Tutor and an equivalent representative of the host institution. Prior to the commencement of the Study Abroad period, the student, the appropriate officers  from UH and from the host institution will agree a learning contract and mode of attendance.   In institutions where the language of instruction is not English, then the learning contract will take into account the students ability in the language of instruction of the host institution.  The student will be required to provide evidence of appropriate attainment and ability in the language of instruction of the chosen institution when the language of instruction is not English.  ", " CM30072: Safety-critical computer systems To give an appreciation of the current state of safe systems development. To develop an understanding of risk in systems. To give a foundation in hazard analysis models and techniques. To show how safety principles may be built into all stages of the software development process.   The nature of risk: computers and risk; how accidents happen; human error. System safety: historical approaches to system safety; basic concepts and terminology.  Managing the development of safety-critical systems.  Modeling human error and the accident process.  Hazard analysis: basic principles; models and techniques.  Safety principles in the software lifecycle: hazard analysis as part of requirements analysis; designing for safety; designing the human-machine interface; verification of safety in computer systems.   At the end of this course a student should be able to demonstrate the following: \n 1. An understanding of the nature of risk in developing computer-based systems. \n 2. The ability to choose and apply appropriate hazard analysis models for simple safety-related problems. \n 3. An understanding of how to approach the design of safety-critical software systems. \n  ", " CM30080: Computer vision To understand the ways of analysing images to get information out of them.  In order to achieve this it will be necessary to understand the underlyin mathematics and computer techniques.   Low level vision: Convolution and linear filtering, edge detection and blurring; the role of scale.  Morphology.  Texture descriptors. \nMulti-camera vision: Homographies, epipolar geometry, and the fundamental matrix.  Mosaicing and 3D reconstruction. \nSegmentation: Hough transforms, unsupervised clustering, scale sieves. \nRecognition: The role of prior models: templates, geometry, and statistics.   Students will be able to: \n 1. Distinguish low-level from high-level Computer Vision methods, and appreciate the vision problem; \n 2. Describe edge detection as a linear filter and distinguish between linear filtering and morphology; \n 3. Describe multi-camera geometry and understand its value in applications such as mosaicing and reconstruction; \n 4. Understand texture and segmentation, and the role of high-level models in recognition; \n 5. Appreciate a broad range of contemporary Computer Vision. \n  ", " CM30320: Natural language processing To provide an introduction to the theory and practice of natural language processing.   Topics covered by this unit will typically include language models, word vector, topic models, part-of-speech tagging, named entity recognition, parsing, information extraction, information retrieval, text classification, speech recognition, sentiment analysis, machine translation.   By the end of the module the student should be able to:\n1. demonstrate knowledge of the fundamental principles of natural language processing,\n2. demonstrate understanding of key algorithms for natural language processing,\n3. write programs that process language,\n4. evaluate the performance of programs that process language. \n  ", " CM20256: Functional programming To illustrate how the logical and semantic foundations of programming languages are translated into usable programming languages. To give students practical experience of using a functional programming language.   The lambda calculus, syntax and semantics; free and bound variables; alpha conversion; beta and eta reduction.  Normal form subject to a reduction scheme.  Reduction order: normal and applicative; Y combinator. Programming in the lambda-calculus:  Church numerals and operations (addition, subtraction, multiplication), Booleans, recursion via fixed points.  The diamond property.  Church-Rosser theorem.\n Typed lambda calculus. Hindley-Milner polymorphism and type checking and type inference. \n Programming in a typed higher-order functional programming language (e.g. Haskell.) Types and type constructors: product, sum and function types. Recursive types, especially lists. Programming with map and fold. Call-by-name, call-by-value and call-by-need; graph reduction. Relationship of functional programming to other programming styles; integration of effects in functional programming languages.   On completion of this unit, students will be able to: \n 1. Define and explain the syntax and semantics of the lambda-calculus, and its role as a model of computation.\n 2. Demonstrate the difference between reduction orders and explain their relationship with call-by-name, call-by-value and call-by-need evaluation.\n 3. Define and explain the simply-typed lambda calculus, Hindley-Milner polymorphism, and type inference. \n 4. Write programs over structured datatypes in a typed higher-order functional programming language. \n  ", " CM40179: Entrepreneurship  *  Develop critical understanding of different schools of entrepreneurial thought\n *  Develop critical understanding of the importance of entrepreneurship in developing an invention or process into a solid business proposition. \n *  Develop key skills in business and operational planning\n *  Develop systematic understanding of key business risk (including but not limited to financial, legal, professional, ethical and environmental risks). \n *  Develop key skills in the development of a business idea from initial concept to business plan.   The course will cover the following content:\n *  History of entrepreneurial thought, finding and developing an idea, market analysis, corporate structure, business funding, hiring, operations, marketing, risk management, legal, social, ethical and professional issues, writing a business plan.   Having taken this module, students should be able to: \n 1. Identify and analyse market opportunity.\n 2. Develop business strategy to take advantage of that opportunity.\n 3. Critically consider key operational issues.\n 4. Investigate alternative funding and financial strategies.\n 5. Identify and address key IPR, legal, social, ethical and professional issues\n 6. Locate and use entrepreneurial resources\n 7. Develop a business plan. \n  ", " CM30226: Logic and semantics of programming languages To develop a detailed understanding of a body of mathematical theory that is used in the formal conceptual analysis of programming languages.    *  Syntactic models of computation (e.g. the simply-typed lambda-calculus, an abstract imperative programming language)\n *  Semantic models of computation (e.g. cartesian closed categories, domains, denotational and operational models)\n *  The use of logic as applied to computation (e.g. the Curry-Howard isomorphism, program logics).   By the end of the unit, successful students will be able to: \n 1. give the central definitions and theorems of one of the mathematical theories underlying the formal study of programming languages; \n 2. use a mathematical theory to give a formal description of computational phenomena; \n 3. evaluate a new mathematical theory that is proposed as providing formal support for computation. \n  ", " MA30245: Graphs and networks: theory and applications To introduce graph theory, from the mathematical fundamentals to modern applications in complex networks.   Graphs, degree sequences and graphicality. Walks, paths, cycles and trees. Linear algebra connections and spectral characterisation of some graph properties. Graph drawing and graph colouring. Statistical measures of networks, including degree distribution, clustering, small-world properties.   At the end of the course students should: understand basic graph theoretic definitions; be able to identify properties of graphs and networks; be familiar with the modelling and statistical characterisation of complex networks. \n  ", " CM30078: Networking To understand the Internet, and associated background and theory, to a level sufficient for a competent domain manager.   The ISO 7-layer model. The Internet: its history and evolution - Predictions for the future.\n The TCP/IP stack: IP, ICMP, TCP, UDP, DNS, XDR, NFS and SMTP. Berkeley. Introduction to packet layout: source routing etc.\n Various link levels: SLIP, 802.5 and Ethernet, satellites, the \"fat pipe\", ATM. Performance issues: bandwidth, MSS and RTT; caching at various layers.\n Who 'owns' the Internet and who 'manages' it: RFCs, service Providers, domain managers, IANA, UKERNA, MANs, commercial British activities. Routing protocols and default routers. HTML and Electronic publishing.\n Legal and ethical issues: slander/libel, copyright, pornography, Publishing versus carrying. Security and firewalls.   Students should be able to: \n 1. Explain the acronyms and concepts of the Internet and how they relate;\n 2. State and apply the steps required to connect a domain to the Internet and explain the issues involved to both technical and nontechnical audiences;\n 3. Discuss the ethical issues involved with the internet, and have an \"intelligent layman's\" grasp of the legal issues and uncertainties.\n 4. Be aware of the fundamental security issues;\n 5. Be able to advise on the configuration issues surrounding a firewall. \n  ", " CM50123: Networking To understand the Internet, and associated background and theory, to a level sufficient for a competent domain manager.   The ISO 7-layer model. The Internet: its history and evolution - predictions for the future. \nThe TCP/IP stack: IP, ICMP, TCP, UDP, DNS, XDR, NFS and SMTP. Berkeley Introduction to packet layout: source routing etc. The CONS/CLNS debate: theory versus practice. \n Various link levels: SLIP, 802.5 and Ethernet, satellites, the \"fat pipe\", ATM.  Performance issues: bandwidth, MSS and RTT; caching at various layers. Who 'owns' the Internet and who 'manages' it: RFCs, service providers, domain managers, IANA, UKERNA, commercial British activities. Routing protocols and default routers. HTML and electronic publishing. Legal and ethical issues: slander/libel, copyright, pornography, publishing versus carrying. Security and firewalls: Kerberos.   After taking this unit a student should be able to:\n *  explain the acronyms and concepts of the Internet and how they relate;\n *  state the steps required to connect a domain to the Internet and explain the issues involved to both technical and non-technical audiences;\n *  understand the ethical issues involved in the use of the Internet, and have an \"intelligent layman's\" grasp of the legal issues and uncertainties;\n *  understand  fundamental security issues, and advise on the configuration issues surrounding a firewall;\n *  be aware of the impact on networking of the latest developments in technology and software; \n *  perform principled analysis and evaluations of network designs. \n  ", " MN20074: Digital business innovation Information Technology (IT) is ubiquitous in the workplace. All areas of business are investing huge sums of money in IT. Within this changing environment, several key trends have defined a new role for information systems, that of innovation. As such, there are new business models, new forms of organisations and inter-organisational alliances as well as emergent forms of work. This unit addresses these issues, and, in particular, aims to provide a non-technical introduction to the use information technologies as tools for the innovative manager who wants to redesign the organisation and business landscape.   The unit will cover material and cases around the following broad categories:\n *  Innovating Potentials of Information Technologies\n *  Disrupting Business Models\n *  Emerging Value Creation Models in the Digital Era\n *  IT-enabled inter-organisational partnership\n *  Emergent forms of work and organisation\n *  Knowledge sharing and creation in Electronic Networks of Practice\n *  Managing Distributed teams and Organisations.   By the end of this unit, the student should be able to:\n *  Display a sound understanding of the innovative potentials of IT in Organisations.\n *  Explain how IT contributes to the disruption of business models.\n *  Identify and apply emerging value creation models in the digital era.\n *  Explore emergent intra-organisational and inter-organisational forms.\n *  Be able to understand the intricacies of organizational interaction and IT use \n  ", " CM30073: Advanced algorithms &amp; complexity To present a detailed introduction to one of the central concepts of combinatorial algorithmics: NP-completeness; to extend this concept to real numbers computations; to study foundations of a more general problem of proving lower complexity bounds.   NP-completeness: Deterministic and Non-deterministic Turing Machines; class NP; versions of reducibility; NP-hard and NPcomplete problems. Proof of NP-completeness of satisfiability problem for Boolean formulae.\n Other NP-complete problems: clique, vertex cover, travelling salesman, subgraph isomorphism, etc. Polynomial-time approximation algorithms for travelling salesman and some otherNP-complete graph problems. \n Real Number Turing machines: Definitions; completeness of real roots existence problem for 4-degree polynomials.\n Lower complexity bounds: Algebraic computation trees and their complexities; complexity of distinctness problem and of knapsack.   1. To be able to recognise NP-hard problems and prove the appropriate reductions.\n 2. To cope with NP-complete problems.\n 3. To know some fundamental methods of proving lower complexity bounds. \n  ", " CM30141: Theory of human computer interaction To foster a contemporary understanding of research issues in Human-Computer Interaction (HCI); to demonstrate how HCI theory relates to selection and application of research methods; to illustrate the range of HCI research in terms of interactive technologies and application domains.   Theories of human behaviour in Human-Computer Interaction (HCI) research; frameworks for conceptualising HCI; contextual analysis; domain- and technology-oriented research; exemplars of quantitative research; exemplars of qualitative research; exemplars of research by design.   1. To be able to describe how theory in Human-Computer Interaction (HCI) influences validity of research methods in state-of-the-art HCI research.&nbsp;\n 2. To account for the interdisciplinary nature of HCI as evidenced by the relationship between HCI research results and the framing of their implications.&nbsp;\n 3. To evaluate claims about HCI research outcomes and their relevance for HCI design.&nbsp; \n  ", " CM30173: Cryptography To introduce students to the techniques, tools and pitfalls of cryptography (including authentication etc.).   Introduction to the problem: security, privacy, authentication, repudiation, revocation. The key distribution problem: public vs private keys. The mathematics of cryptography: Fermat-Euler Theorem, structure of finite fields and elliptic curves. Cryptographic algorithms: Diffie-Hellman, RSA, El-Gamal. Cryptanalysis: discrete logarithms, factoring. The Coppersmith attack. Elliptic Curve analogues. Private-key algorithms: DES, 3DES and AES. Common hashing algorithms: MD5, SHA-1. Characteristics of safe keys.\nUsing cryptography: digital signatures: how to find the public key.Repudiation and revocation, examples in practice: PGP, digital certificates.   1. Students will understand the basic mathematics behind private-key and public-key cryptography; \n 2. Students will be able to describe several well-known techniques for cryptographic security and authentication. \n  ", " CM20217: Foundations of computation To introduce formal models of computation: finite automata, pushdown automata, Turing machines, and the corresponding classes of formal languages: regular, context-free, semi-decidable. To teach students to design algorithms for concrete computational problems within these models of computation. To introduce the dichotomy between deterministic and non-deterministic computation.\n To give students an appreciation of limits of computation, including methods of proving undecidability and specific examples of undecidable problems. To introduce the concept of computational complexity and complexity classes.   1. Deterministic and non-deterministic finite automata.\n 2. Regular languages. Existence of non-regular languages.\n 3. Pushdown automata and context-free grammars and languages. Parsing in context-free languages.\n 4. Existence of non-context-free languages via Pumping Lemma.\n 5. Turing machines and Church-Turing Thesis.\n 6. Universal Turing machine and undecidability of the halting problem.\n 7. Non-deterministic Turing machines, complexity classes P and NP.   On completion of this unit, students will be able to:\n 1. demonstrate an understanding of the fundamental models of computation and the corresponding classes of formal grammars and languages;\n 2. design algorithms for specific computational problems as automata of appropriate types;\n 3. prove mathematically that some computational problems are undecidable within a particular class of computational models;\n 4. be able to give upper bounds on complexities of some decidable computational problems. \n  ", " CM30225: Parallel computing To give students the ability to recognise and understand the problems and opportunities afforded by parallel systems; to recognise the differing types of parallelism available and make advised choices between them; and to take advantage of progress in technology as modern computers become ever more parallel.   1. Basics: supercomputers and the consequences of Moore's Law; bandwidth vs latency; speedup, efficiency, scalability; Amdahl's &amp; Gustafson's Laws; Flynn's taxonomy, SPMD; distributed, shared, NUMA and other memory architectures.\n 2. Shared memory computing: multicore systems (cache coherence and bottlenecks); mutual exclusion and critical regions; low level constructs including POSIX threads and synchronisation methods such as barriers, locks, semaphores, etc.; language-level support including monitors, OpenMP; vector and array (SIMD), HPF, Cn.\n 3. Distributed computing: clusters, message passing, MPI. Programming using MPI (PBS).\n 4. Parallel algorithms and data structures.\n 5. Topics in Parallel Computing: examples might include HPC; MapReduce; distributed file systems; the Grid; GPGPU and OpenCL; instruction level parallelism (SWAR,VLIW).   Students will be able to: \n 1. write and debug simple parallel programs; \n 2. recognise the issues surrounding concurrent access to data; \n 3. Describe the various kinds of parallel hardware, parallel programming methodologies and the relationship between them. \n  ", " CM20254: Data structures and algorithms To build on the students' understanding of algorithms and data structures and how to apply them. To facilitate the empirical assessment of algorithmic differences.   Complexity. Best, worst and average cases; time, space and other measures; big \u039f, big \u0398 and big \u03a9; analysis of algorithms like selectionsort, heapsort, integer multiplication, recursive algorithms and others.\n Data structures. Lists, stacks, queues, trees, hash tables, graphs, etc.\n Algorithms and data structures in practice. The effect of the \"hidden constant\", and crossover points between algorithms, e.g., when to prefer bubblesort over quicksort; polyalgorithms; the gap between algorithms and implementations; how data structures affect the complexity of an implementation; computationally hard problems in everyday life.\n Complexity of integer factorization and primality testing with application to RSA public key cryptosystem.   On completion of this unit, students will be able to: \n 1. determine the complexity of a variety of algorithms\n 2. carry out basic comparative empirical assessments of implementations of alternative algorithms\n 3. choose the right algorithms and data structures for the task in hand\n 4. General understanding of modern public key cryptography by the example of RSA cryptosystem. \n  ", " CM50270: Reinforcement learning This unit introduces the reinforcement learning problem and describes basic solution methods.   Topics covered normally include: dynamic programming, Monte Carlo methods, temporal-difference algorithms, integration of planning and learning, value function approximation, and policy gradient methods.   At the end of this unit, students will be able to:\n 1. describe how reinforcement learning problems differ from supervised learning problems such as regression and classification, \n 2. formulate suitable real-world problems as reinforcement learning problems by defining a state space, an action space, and a reward function appropriate for the context, \n 3. critically evaluate a range of basic solution methods to reinforcement learning problems, \n 4. analyse the difficulties encountered in solving large, complex reinforcement learning problems in practice. \n  ", " EE40098: Computational intelligence To provide students with an understanding of some of the principles of Computational Intelligence.    *  Optimization: simulated annealing, steepest descent, genetic algorithms, the schema Theorem, representation, populations, selection, crossover mutation , swarm optimization\n *  Control: Fuzzy Logic comparison with crisp logic. linguistic variables, degree of membership, fuzzy rules, defuzzification. \n *  Classification: Neural Networks, MCP neuron, geometric interpretation. XOR problem. 1, 2, and 3 layer feed-forward networks. perceptron training rule, sigmoid function, back-propagation, K-nearest neighbour, Principal Component Analysis, Convolutional Neural Networks Feed-back networks. \n *  Bio-inspired: Neurophysiology: biological neuron systems, neuron models for simulation, problem solving in nature, biomimetic computing, swarm Intelligence: emergent behaviour, predator-prey models, conways game of life\n *  Machine Learning: decision tree learning, rule based machine learning, deep learning, support vector machines, Bayesian networks, reinforcement learning.\n   After successfully completing this unit the student should be able to:\n Understand, be able to explain and implement the following types of computational intelligence techniques:\n *  Optimization\n *  Control\n *  Machine Learning\n *  Classification\n Understand and be able to explain the biological inspiration behind computational intelligence systems \n \n  ", " MA30087: Optimisation methods of operational research To present methods of optimisation commonly used in OR, to explain their theoretical basis and give an appreciation of the variety of areas in which they are applicable.    MA30087 is Optional on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB06  : \tBSc(Hons) Computer Science \t  (Year 3)  \n   USCM-AAB07  : \tBSc(Hons) Computer Science  with Study year abroad \t  (Year 4)  \n   USCM-AKB07  : \tBSc(Hons) Computer Science  with Year long work placement \t  (Year 4)  \n   USCM-AFB27  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 3)  \n   USCM-AAB27  : \tBSc(Hons) Computer Science and Artificial Intelligence  with Study year abroad \t  (Year 4)  \n   USCM-AKB27  : \tBSc(Hons) Computer Science and Artificial Intelligence  with Year long work placement \t  (Year 4)  \n   USCM-AFB20  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 3)  \n   USCM-AAB20  : \tBSc(Hons) Computer Science and Mathematics  with Study year abroad \t  (Year 4)  \n   USCM-AKB20  : \tBSc(Hons) Computer Science and Mathematics  with Year long work placement \t  (Year 4)  \n   USCM-AFM01  : \tMComp(Hons) Computer Science \t  (Year 3)  \n   USCM-AAM02  : \tMComp(Hons) Computer Science  with Study year abroad \t  (Year 3)  \n   USCM-AKM02  : \tMComp(Hons) Computer Science  with Year long work placement \t  (Year 3)  \n   USCM-AFM27  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 3)  \n   USCM-AAM27  : \tMComp(Hons) Computer Science and Artificial Intelligence  with Study year abroad \t  (Year 3)  \n   USCM-AKM27  : \tMComp(Hons) Computer Science and Artificial Intelligence  with Year long work placement \t  (Year 3)  \n   USCM-AFM14  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 3)  \n   USCM-AAM14  : \tMComp(Hons) Computer Science and Mathematics  with Study year abroad \t  (Year 3)  \n   USCM-AKM14  : \tMComp(Hons) Computer Science and Mathematics  with Year long work placement \t  (Year 3)  \n \t\t\n Department of Economics  \t\t\n   UHES-AFB04  : \tBSc(Hons) Economics and Mathematics \t  (Year 3)  \n   UHES-AAB04  : \tBSc(Hons) Economics and Mathematics  with Study year abroad \t  (Year 4)  \n   UHES-AKB04  : \tBSc(Hons) Economics and Mathematics  with Year long work placement \t  (Year 4)  \n   UHES-ACB04  : \tBSc(Hons) Economics and Mathematics  with Combined Placement and Study Abroad \t  (Year 4)  \n \t\t\n Department of Mathematical Sciences  \t\t\n   USMA-AFB15  : \tBSc(Hons) Mathematical Sciences \t  (Year 3)  \n   USMA-AAB16  : \tBSc(Hons) Mathematical Sciences  with Study year abroad \t  (Year 4)  \n   USMA-AKB16  : \tBSc(Hons) Mathematical Sciences  with Year long work placement \t  (Year 4)  \n   USMA-AFB13  : \tBSc(Hons) Mathematics \t  (Year 3)  \n   USMA-AAB14  : \tBSc(Hons) Mathematics  with Study year abroad \t  (Year 4)  \n   USMA-AKB14  : \tBSc(Hons) Mathematics  with Year long work placement \t  (Year 4)  \n   USMA-AFB01  : \tBSc(Hons) Mathematics and Statistics \t  (Year 3)  \n   USMA-AAB02  : \tBSc(Hons) Mathematics and Statistics  with Study year abroad \t  (Year 4)  \n   USMA-AKB02  : \tBSc(Hons) Mathematics and Statistics  with Year long work placement \t  (Year 4)  \n   USMA-AFB20  : \tBSc(Hons) Mathematics, Statistics, and Data Science \t  (Year 3)  \n   USMA-AAB06  : \tBSc(Hons) Statistics  with Study year abroad \t  (Year 4)  \n   USMA-AKB06  : \tBSc(Hons) Statistics  with Year long work placement \t  (Year 4)  \n   USMA-AFM14  : \tMMath(Hons) Mathematics \t  (Year 3)  \n   USMA-AFM14  : \tMMath(Hons) Mathematics \t  (Year 4)  \n   USMA-AAM15  : \tMMath(Hons) Mathematics  with Study year abroad \t  (Year 4)  \n   USMA-AKM15  : \tMMath(Hons) Mathematics  with Year long work placement \t  (Year 4)  \n   USMA-AKM15  : \tMMath(Hons) Mathematics  with Year long work placement \t  (Year 5)  \n \t\t\n Department of Physics  \t\t\n   USXX-AFB03  : \tBSc(Hons) Mathematics and Physics \t  (Year 3)  \n   USXX-AAB04  : \tBSc(Hons) Mathematics and Physics  with Study year abroad \t  (Year 4)  \n   USXX-AKB04  : \tBSc(Hons) Mathematics and Physics  with Year long work placement \t  (Year 4)  \n   USXX-AFM01  : \tMSci(Hons) Mathematics and Physics \t  (Year 4)  \n   USXX-AAM01  : \tMSci(Hons) Mathematics and Physics  with Study year abroad \t  (Year 5)  \n   USXX-AKM01  : \tMSci(Hons) Mathematics and Physics  with Year long work placement \t  (Year 5)  \n  On completing the course, students should be able to \n *  Recognise practical problems where optimisation methods can be used effectively\n *  Implement appropriate algorithms, and understand their procedures\n *  Understand the underlying theory of linear programming problems, especially duality.\n \n  ", " MN30076: Business strategy  *  To provide an appreciation of how organisations develop from their entrepreneurial beginnings through maturity and decline.\n *  To examine the interrelationship between strategy formulation, strategy implementation and the behavioural aspects of business\n *  To enable students to explore the theoretical notions behind corporate and business strategy \n *  Students are expected to develop skills of analysis and the ability to interpret complex business situations.   Business objectives, values and mission; industry and market analysis; competitive strategy and advantage; competing strategic styles and frameworks, technology impact on strategy, business life cycle; organisational structures and controls.   By the end of this unit, the student should be able to: \n *  Prepare a strategy plan for an organisation that takes account of the internal and external factors of the business environment\n *  Analysis the business environment of an organisation and how it impacts strategy formulation\n *  Use theoretical tools and frameworks to make sense of complex interrelated business data\n *  Understand what lies behind strategy formulation and begin to think strategically. \n  ", " CM50210: Cryptography To introduce students to the techniques, tools and pitfalls of cryptography (including authentication etc.).   Introduction to the problem: security, privacy, authentication, repudiation, revocation. The key distribution problem: public vs private keys. The mathematics of crytography: Fermat-Euler Theorem, structure of finite fields and elliptic curves. Crytographicalgorithms: Diffie-Hellman, RSAi, El-Gamal. Cryptanalysis: discrete logarithms, factoring. The Coppersmith attack. Elliptic Curve analogues. Private-key algorithms: DES, 3DES and AES. Good hashing algorithms: MD5, SHA-1. Characteristics of safe keys, using cryptography: digital signatures: how to find the public key. Repudiation and revocation, examples in practice: PGP, digital certificates.   Students will understand the basic mathematics behind private-key and public-key cryptography. Students will be able to describe and analyse several well-known techniques for cryptographic security and authentication. Students will be able to evaluate and choose appropriate tools for the application of cryptography in security. Students will have an appreciation of the current state of cryptography research and its issues and future directions. \n  ", " CM50264: Machine learning 1 This unit provides the core of machine learning (ML) by presenting algorithmic approaches to ML as well as an introduction to more advanced topics such as probabilistic techniques.   Topics covered will normally include: numerical optimisation for parameter estimation; algorithmic unsupervised learning (e.g. k-mean clustering and principal component analysis); discriminative approaches to classification and regression; fundamental parametric linear models (e.g. generalised linear models), parametric non-linear models (e.g. decision trees), non-parametric models (e.g. k-nearest neighbours), and ensemble approaches (e.g. boosting).   At the end of this unit, students will be able to:\n *  Display a systematic knowledge of algorithmic ML approaches and demonstrate a comprehensive understanding of their application to specific, real-world problems\n *  Produce practical implementations of algorithmic ML approaches\n *  Evaluate critically the relative merits and limitations of algorithmic ML approaches \n  ", " CM50205: Theory of human computer interaction To foster a contemporary understanding of theoretical and methodological research issues in Human-Computer Interaction (HCI); to demonstrate how conceptual approaches to HCI govern method selection, application and then further development of research; to illustrate and contrast HCI research outcomes in terms of conceptual grounding, interactive technologies and application domains.   Theories of human behaviour in Human-Computer Interaction research; frameworks for conceptualising Human-Computer Interaction; contextual analysis; domain- and technology-oriented research; exemplars of quantitative research; exemplars of qualitative research; exemplars of research through design.   1. To be able to critically evaluate methods used in state-of-the-art research in terms of underlying conceptualisations of user behaviour and/or experience.\n 2. To discuss how disciplinary perspectives guide decision-making in HCI research.\n 3. To critically evaluate claims about HCI research outcomes as they may progress the field.\n 4. To identify possibilities for progressing the field, consistent with one or more conceptualisations of HCI.&nbsp; \n  ", " XX50215: Statistics for data science Students should gain an understanding of the basic theory of probability and statistics. Students will recognise when this theory can be applied in practice.   Topics covered will include: The laws of probability. Discrete and continuous random variables. Bayes' Theorem. Expectation, variance and correlation. Conditional and marginal distributions. Common distributions including the normal, binomial and Poisson. Statistical estimation including maximum likelihood. Hypothesis testing and confidence intervals.   After completion of the unit, students should be able to:\n *  perform elementary mathematical operations in probability and statistics,\n *  translate real-world problems into a probabilistic or statistical framework,\n *  solve statistical problems in abstract form,\n *  critically interpret outcomes in a real-world context,\n *  relate underlying theory to requirements in practical data science. \n  ", " CM30075: Advanced computer graphics The primary aims are to understand the ways of representing, rendering and displaying pictures of three-dimensional objects (in particular). In order to achieve this it will be necessary to understand the underlying mathematics and computer techniques.   Classical Modelling: Mesh models and their representation. Constructive solid geometry (CSG) and its representation. \n Classical Rendering: Raster images; Illumination models; scan line rendering or mesh models and hidden surface removal; ray trace rendering of CSG models; radiosity rendering. \n Geometry: Projective geometry and homogeneous transformations. \nModern modelling and rendering techniques.   1. To be able to distinguish modelling from rendering. \n 2. To be able to describe the relevant components of Euclidean and projective geometry and their relationships to matrix algebra formulations. \n 3. To know the difference between solid and surface-modelling and be able to describe typical computer representations of each. \n 4. To be able to explain and demonstrate in detail rendering for raster displays, including lighting models. \n  ", " CM50268: Bayesian machine learning To convey an appreciation of the philosophy and practical features of Bayesian inference, its general relevance in data science, along with key algorithms and methods of implementation in both a generic and a machine learning context.   Topics covered by this unit will typically include the history and philosophy of Bayesian inference, key concepts such as priors, marginalisation and Occam's razor, practical Bayesian methodology in machine learning contexts and elsewhere, stochastic and deterministic approximation methods, specific Bayesian treatments of linear models, neural networks and Gaussian processes etc.   After completion of the unit, students should be able to:\n *  explain the philosophical foundations of Bayesian inference, and critically review the advantages and disadvantages of the paradigm,\n *  apply and quantitatively assess approximation methods for Bayesian inference,\n *  critically evaluate a range of Bayesian modelling techniques within machine learning scenarios,\n *  implement a baseline Bayesian model (e.g. linear regression) in a relevant programming language (e.g. Python),\n *  employ more advanced Bayesian software libraries to solve problems in data science. \n  ", " CM20219: Fundamentals of visual computing To provide the mathematical and computational foundations for Computer Graphics and Computer Vision.\n To introduce forward processing (e.g., modelling, animation, rendering) as well as inverse processing (e.g., registration, reconstruction, recognition) in the context of Visual Computing.\n To provide skills in modelling and manipulation of images and computer graphic objects.   Geometry and 3D Modelling\n *  Rigid Body Transforms in 2D/3D, Affine/Projective Transforms, Surface Modelling, Parametric Curves, Piecewise Modelling and Continuity, Simple Rendering.\n Image Processing and Low-Level Vision\n *  Image Formation, Linear Filtering, Gradients, Scale, Image Features, Correlation, Matching, Image Warping, Sampling and Aliasing,\n Mathematical methods for Visual Computing\n *  Linear and Projective Transforms, Convolution, Fourier Transforms, Nyquist Theorem.   1. Model and manipulate graphical objects to generate images\n 2. Process images to extract useful information\n 3. Select appropriate techniques for modelling and image processing tasks \n  ", " CM50121: Safety critical systems This unit shares lectures and tutorials with CM30072.  \n\nTo give an appreciation of the current state of safe systems development. To develop an understanding of risk in systems. To give a foundation in hazard analysis models and techniques. To show how safety principles may be built into all stages of the software development process.   The nature of risk: computers and risk; how accidents happen; human error. System safety: historical approaches to system safety; basic concepts and terminology.  Managing the development of safety-critical systems.  Modelling human error and the accident process.  Hazard analysis: basic principles; models and techniques.  Safety principles in the software lifecycle: hazard analysis as part of requirements analysis; designing for safety; designing the human-machine interface; verification of safety in computer systems.   After studying this unit a student will be able to: \n *  understand the concepts of safety,  risk and the role of human factors in the design and    operation of safety critical systems; \n *  understand the nature and role of the safety lifecycle in developing safety related systems;\n *  choose and apply appropriate hazard identification and analysis techniques for a variety of safety related problems;\n *  critically evaluate and reason effectively about hazardous situations in safety critical systems. \n  ", " CM20318: Comparative programming languages To introduce students to the variety of styles of programming languages.   Programming paradigms and language families, for example Functional, Procedural, Object Oriented, Logic, Scripting, Declarative, Macro, Unstructured, Event Driven, etc. Examples of languages from each style, with comparisons.\n Further choices that languages provide, e.g., application based languages; interpreted, bytecoded and compiled; parallel and distributed; OO prototyping, delegation, traits, class centred; managed, unmanaged and garbage collected; static typed, dynamic typed and untyped; call by value, reference, name, need, etc.   On completion of the unit the students will be able to:\n 1. recognise the various styles of programming language\n 2. describe the differences between them\n 3. choose the right programming style and language for the task in hand. \n  ", " CM50265: Machine learning 2 This unit covers the breadth of machine learning topics as well as providing detailed treatment of advanced methods that are representative of the different categories of ML approaches.   Topics covered will normally include a range of subjects: ensemble learning, Natural Language Processing (NLP), and various deep learning models such as Multi-Layer Perceptron (MLP), Convolutional Neural Networks (CNN), Recurrent Neural Networks (RNN), Generative Adversarial Networks (GAN), attention mechanisms and transformers.   At the end of this unit, students will be able to:\n *  Demonstrate a systematic knowledge of state-of-the-art ML approaches and an awareness of the latest ongoing research in the field \n *  Develop and evaluate critically advanced ML models for real-world problems\n *  Identify and implement appropriate and original algorithms to perform inference\n *  Make predictions from models and account for uncertainty \n  ", " CM30359: Reinforcement learning To explore reinforcement learning as an approach to artificial intelligence; to understand how reinforcement learning differs from other approaches to machine learning such as supervised and unsupervised learning; to learn how to formulate and solve reinforcement learning problems, and to appreciate the difficultes involved in solving large, complex reinforcement learning problems in practice.   Topics covered normally include: dynamic programming, Monte Carlo methods, temporal-difference algorithms (e.g., Q-learning), integration of planning and learning, value function approximation (e.g., with deep neural networks), policy-gradient methods, application areas, and an introduction to active areas of research (e.g., hierarchical reinforcement learning, intrinsically-motivated reinforcement learning systems).   On completion of the unit, the students will be able to:\n 1. formulate reinforcement learning problems by defining a state space, an action space, and a reward function, appropriate for the context,\n 2. apply a range of solution methods to reinforcement learning problems,\n 3. appreciate the difficulties encountered in solving large, complex reinforcement learning problems in practice. \n  ", " CM20319: Human-computer interaction and user experience  *  To provide students with a foundation in human-computer interaction as an interdisciplinary field that focuses on the design and use of interactive systems. \n *  To introduce theories, principles and practices that underpin effective interaction design. \n *  To equip students with quantitative and qualitative data gathering and analysis techniques that are appropriate for assessing the value of an interactive system and the user experience that it provides.   Content will cover a range of topics in human-computer interaction and user experience.  Examples of topics include:\n *  General foundations of Human-Computer Interaction\n *  Human perception as it relates to the design and use of interactive systems\n *  Human cognition and performance\n *  Task analysis\n *  Models of interaction (e.g. gulfs of execution and evaluation)\n *  Usability - introduction to the concept and principles\n *  Principles of user interface (UI) and user experience (UX) design\n *  Prototyping techniques\n *  Qualitative and quantitative data evaluation techniques\n *  Virtual, augmented and mixed reality user interfaces\n *  Human-robot interaction and interaction with machine intelligence\n *  HCI in industry (UX)\n *  HCI in research.   After successfully completing this unit students will be able to:\n *  Explain principles of interaction design that apply across a diverse range of interactive systems.\n *  Use established techniques for understanding human activity and modelling human-computer interactions.\n *  Apply interaction and user experience design methods to produce a demonstrable prototype of an interactive system, which provides support for the goals of a defined user group. \n *  Select and use appropriate analytical and empirical evaluation techniques in order to critically evaluate an interaction design. \n  ", " CM50200: Mobile and pervasive systems To equip students with an advanced understanding of current research issues in mobile and pervasive computing;\n To foster the development of critical analysis of design approaches, research methods and theoretical positions in these areas;\n To explore the range of activities that can be supported by interactive technologies on the move and in the environment;\n To analyse the relationship between context and service provision on mobile platforms;\n To foster a systemic understanding of pervasive technologies in the built environment.   the origins and current state of the art in mobile and pervasive computing; design approaches to defining and providing computing services  on mobile and pervasive platforms; privacy and control of personal information in private, social and public settings; social and organisational environments of mobile computing; dynamics of pervasive and context-aware computing.   On successfully completing the unit, students should be able to:\n *  identify challenges and appropriate solutions for the design interactive applications and services in mobile and pervasive contexts;\n *  perform principled evaluations of mobile and pervasive technologies, applications and services;\n *  critically evaluate claims made by designers of mobile and pervasive systems. \n  ", "Computing Science 1F - Computing Fundamentals COMPSCI1006   The aim of the CS1  F  &nbsp;  course is to give students an understanding of human-computer interaction (styles of interaction, requirements for an interactive system in relation to the nature of the tasks being supported, issues in the design of interactive systems, cri  tical assessment of designs);   the ways in which databases contribute to the manage  ment of large amounts of data,   the professional and ethical issues raised by the existence of databases and networks.     The aim of the CS1  F course   is to give students an understanding of:      \u25a0&nbsp;  H  uman-computer interaction:  &nbsp;  styles of interaction, requirements for an interactive system in relation to th  e  nature of   the tasks being supported, issues in the design of interactive systems, critical assessment of designs  ;     \u25a0&nbsp;  T  he ways in which databases contribute to the management of large amounts of data  ;     \u25a0&nbsp;  T  he professional and ethical issues raised by the existence of databases and   networks  ;     \u25a0&nbsp;  M  athematics to support the previous items and to provide a foundation for level 2.     On completion of the CS1  F  &nbsp;course  , the student should be able to:     1.   Explain how applications are built using programs clustered around databases and other   large   collections of data;    2.   D  iagram the architecture of a database management system (DBMS) in general terms; the processes it has to perform and the operational tasks;    3.   G  iven an outline design; carry out all the operational tasks of setting up and using a relational database using a typical DBMS product and a standard SQL;    4.   &nbsp;   Identify the main forms of human computer interaction and appreciate the issues involved in delivering successful interaction via these forms;    5.   Critically assess usability of interactive systems using informal means; and know when to perform such assessments and how to use the outcomes;    6.   Demonstrate and understanding of the nature of human computer activities as tasks; and be able to analyse their structure; assess the conditions under which they are performed; and use such task analysis in the software engineering process;    7.   Discuss the legal and ethical obligations of computing professionals.  ", "Computational Social Intelligence (M) COMPSCI5095   The course introduces the core methodologies behind automatic approaches aimed at making sense of social and psychological aspects of human behaviour. In particular, the course shows 1) how to design and organise the observation of human behaviour in view of the application of automatic approaches, 2) how to apply psychometric instruments for the quantitative analysis of social and psychological phenomena, and 3) how to apply basic statistical techniques to human behaviour analysis and understanding. The course is   interdisciplinary  &nbsp;and it requires the acquisition of both computing and social psychological notions. The application areas to which the course is relevant include, e.g., social robotics, user experience analysis, social media analytics, surveillance and e-health (the list is not exhaustive).     The aim of the course is to introduce the students to the main computational methodologies for automatic analysis of human behaviour. In particular the course teaches how to design and organise the observation of human behaviour in view of the application of computational approaches. Furthermore, it shows how to quantify social and psychological phenomena through the application of standard psychometric questionnaires. Finally, it introduces basic methodologies - based on machine learning and statistics - aimed at mapping behavioural observations into high-level interpretations of human behaviour that take into account social and psychological aspects of human-human and human-machine interactions.     By the end of this course students will be able to:    1.   To d  esign and organise the collection of behavioural data in view of the application of statistical and computational methodologies for human behaviour understanding;    2.   To formulate and assess  &nbsp;social and psychological constructs - in quantitative terms - through the adoption of standard psychometric questionnaires;     3.   To design and construct  &nbsp;statistical methodologies   aimed at  &nbsp;automatically map  ping  &nbsp;behavioural observations into social and psychological constructs  ;    4.   To engage with the scientific literature relevant to the topics presented in the course in view of evaluating and comparing multiple approaches aimed at addressing the same problem;    5.   To formulate the theoretic principles underpinning the methodologies presented in the course.  ", "Advanced Systems Programming (H) COMPSCI4089   This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.     The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system.    &nbsp;   The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing  &nbsp;  systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.     By the end of this  &nbsp;course students will be able  &nbsp;to  :    \u25a0&nbsp;  Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust;   to   d  iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;    \u25a0&nbsp;  Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;    \u25a0&nbsp;  Discuss the advantages and disadvantages of integrating automatic memory management with the operating system/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and/or operating systems;     \u25a0&nbsp;  Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and    \u25a0&nbsp;  Construct and/or analyse simple programming to demonstrate understanding of novel techniques for memory management and/or concurrent programming, to understand the trade-offs and implementation decisions.  ", "Algorithmics II (H) COMPSCI4003   The aims of the course are:     To present a broad range of algorithm design methods, with examples chosen to reflect practical applications;    To enable students to make educated choices between strategies for algorithmic problem-solving;    To convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.     The aims of the course are:     T  o present a broad range of algorithm design methods, with examples chosen to reflect practical applications;  &nbsp;  to enable students to make educated choices between strategies for algorithmic problem-solving;  &nbsp;  to convey the significance of computational complexity, and to present a range of methods for dealing with it in practice.     By the end of the course students will be able to:    1.   Describe a wide range of efficient algorithms for problems with important applications in domains such as computational geometry, string processing and graph theory;    2.   Discuss why these algorithms are correct, and prove their correctness;    3.   Demonstrate the execution of such algorithms as applied to typical problem instances;    4.   Characterise and manipulate advanced data structures such as the suffix tree;    5.   Apply algorithmic techniques to specific problems motivated by practical applications;    6.   Analyse the worst-case complexity of algorithms using a variety of mathematical techniques;    7.   Discuss the theory and practical implications of NP-completeness;    8.   Explain techniques for coping with complexity, such as backtracking algorithms, pseudo-polynomial-time algorithms, constant-factor approximation algorithms, and polynomial-time approximation schemes;    9.   Construct proofs of NP-completeness and   inapproximability  &nbsp;results.  ", "Human Computer Interaction (M) COMPSCI5111   The aim of this course is to introduce stude  nts to advanced topics in Human-  Computer Interaction. I  n technical terms, i  t focuses on   system design issues related to larger numbers of people and of data, including data visualisation, collaborative systems, and tracking and modelling populations. It also introduces other   novel forms in interaction  &nbsp;and evaluation, and legal and ethical issues around interactive and data-centred systems  .     This course will bring depth and breadth to the material covered in Interactive Systems H.  Human-Computer Interaction has moved away from a narrow focus on textual windows on a desktop, operated by one person using a keyboard and mouse.  In terms of devices, phones and other mobile systems lead to ubiquitous use and also ubiquitous sharing of data about us. Such systems are often used to manipulate and explore complex data, including individual and social data.  They are used at a scale that pervades and changes our society, and legal and ethical issues (e.g. GDPR) are influencing what and how we design. The aim of Human-Computer Interaction H will be to equip our students with skills to design for this broad use of technology. It will also to feed into Mobile Human-Computer Interaction H, which concentrates on mobile systems.   &nbsp;   The aim of   this   course is to give the students an o  verview of advanced topics in Human-Computer   I  nteraction, covering the  &nbsp;key areas of   interaction with complex, personal and social data, via data analytics (in particular, visual analytics), and collaborative systems. It will address the ways that we design and evaluate such systems  . There will also be a significant piece of coursework where the students will have   to design, implement and evaluate an   interactive application. This will give them valuable experience in   development and justification of  &nbsp;  such systems  .     By the end of this course students will be able to:    1.   Identify the   key  &nbsp;  exemplars  &nbsp;in   the design of  &nbsp;novel   visualisation systems, collaborative systems, and large-scale user modelling, and in ethical system design  ;    2.   Explain the theoretical concepts behind such system design approaches.    3.   Identify the  &nbsp;main  &nbsp;issues   and key concepts in evaluating such systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria  ;    4.   Have  &nbsp;experience designing   such systems, by d  esign  ing  , develop  ing and evaluating  &nbsp;a significant piece of interactive software embodying key aspects of the course.    5.   Discuss leading-edge developments of   HCI  &nbsp;through a critical analysis of a recently published   HCI  &nbsp;paper.  ", "Computing Science Education Theory and Practice (H) COMPSCI4100   Learning lies at the heart of computing science and software engineering, whether picking up a new language or library, helping others in a team, or researching or adopting new computational paradigms.  Furthermore, it has been adopted in education systems from primary level worldwide, yet there are too few who understand core principles of both the subject and its learning and teaching.  This course introduces you to computing specific education theory and practice, of value to you as a developer or researcher, or as the starting point for a career in CS education.     To develop a broad understanding of CS education principles, practices and challenges in relation to personal learning of the subject and to the development and critique of effective CS learning and teaching activities.     By the end of this course students will be able to:    \u25a0&nbsp;  Name and describe core theories, frameworks, and practices underpinning CS education    \u25a0&nbsp;  Choose and apply techniques appropriate for given   CS learning and teaching   scenarios    \u25a0&nbsp;  Design educational material suitable for use in given CS education contexts    \u25a0&nbsp;  Analyse and evaluate CS education experiences and materials  ", "Mobile Human-Computer Interaction for MSc COMPSCI5112   Mobile Human-Computer Interaction for MSc gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods  &nbsp;and evaluation techniques  .    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ", "Modelling Reactive Systems (H) COMPSCI4031   Modelling concurrent, communicating systems using non-probabilistic and probabilistic techniques, verification using the SPIN and PRISM model checker  s.     Reactive systems are widely and increasingly used throughout society (e.g. telecommunications, flight control, railway signalling, medical devices).  An understanding of the fundamentals of these systems, at an abstract level, is essential for the development of process control systems and should be a pre-requisite for anyone developing software for such applications.  This course provides in-depth study of key formal techniques used in designing and analysing concurrent, reactive systems; and to   present the practical issues raised by using a number of such formalisms and associated software tools, particularly within the context of developing communi  cations protocols and other   communications applications.  &nbsp;    Students will learn to model systems using the Promela specification language and associated verification tool SPIN. In addition, probabilistic systems will be modelled as Discrete Time Markov Chains using the PRISM language and tool.     By the end of the course students will be able to:   &nbsp;   1: Clearly differentiate issues that arise in concurrent, reactive,  &nbsp;  distributed  , and probabilistic systems  ;    2: Explain the various concepts of concurrency and communication that arise in such systems;    3: Demonstrate understanding of the concepts of signalling and control and associated modelling issues;    4: Develop message sequence charts for a reactive system;    5: Enumerate the differences between non-probabilistic and probabilistic formalisms;    6: Design and analyse a reactive system, including a communication protocol, using appropriate design techniques and mechanised analysis tools (SPIN and PRISM)  ;  ", "Algorithmic Foundations 2 COMPSCI2003   To introduce the foundational mathematic  s needed for Computing Science;   To make st  udents proficient in their use;   To show how they can be applied to advantage in understanding computational phenomena.     To introduce the foundational mathematics needed for Computing Science; To make students proficient in their use; To show how they can be applied to advantage in understanding computational phenomena.     By the end of this course students will be able to:       1.   t  ranslate simple English sentences into the notation  &nbsp;of predicate logic, set theory  &nbsp;and relational algebra;    2.   u  se predicate logic, set theory, and relational algebra to write assertions;    3.   u  se laws to prove assertions in predicate logic, set theory, and relational algebra;    4.   d  emonstrate an understanding of inductiv  ely-generated structures and   proofs by induction;    5.   d  eploy the basic concepts of combinatorics  ;    6.   u  nderstand the basic principles of discrete probability theory and apply   them  &nbsp;to simple problems.  ", "Systems And Networks COMPSCI4043   To introduce the structure and function of computer systems, in particular:    To introduce the concept of representation of data.    To provide a general understanding of what computers are and how they work.    To provide background helpful for better understanding the behaviour of programming languages, compilers, and operating systems.    To convey understanding of descriptions of computer systems and projections of future trends.     To introduce the structure and function of computer systems, in particular:    To introduce the concept of representation of data.    To provide a general understanding of what computers are and how they work.    To provide background helpful for better understanding the behaviour of programming languages, compilers, and operating systems.    To convey understanding of descriptions of computer systems and projections of future trends.     By the end of the course students will be able to:    1.   Describe the main components of a computer system;    2.   Describe the concepts of digital representation, bits and words;    3.   Work with the binary and two's complement representation of numbers and convert between these and decimal numbers;    4.   Explain how the behaviours of signed and unsigned operations are caused by the underlying representation;    5.   Describe of how basic control constructs and algorithms are translated to machine language;    6.   Compare critically two machine architectures at the instructions set level;    7.   Describe the central functions of an operating system;    8.   Describe how virtual memory works, together with its benefits and limitations;    9.   Describe how end systems and routers are connected in the Internet;    10.   Explain the main levels of abstraction in computer networks.  ", "Team Project Minor (H) COMPSCI4070   This course gives students the experience of working on a substantial team bas  ed software project.  The course provides the opportunity to apply the principles, practices and tools learned during the associated Professional Software Development (H) course.     To introduce students to the constraints and challenges of long lived software development projects.  To provide the opportunity to practice software industry standard practices and tools for managing the complexity of large scale   software development.     By the end of this course students will be able to:    1.   Manage a small scale team based software project in a disciplined and organised manner  ;    2.   Work with a customer in a problem domain to elaborate, specify and refine requirements  ;    3.   Select, and employ industry standard software practices and tools as appropriate within a software process  ;    4.   Present project progress through short demonstrations  ;    5.   Review, analyse and adapt project processes within a process improvement framework.  ", "Professional Software Development (H) COMPSCI4015   The aims of the course are to:     I  ntroduce students to modern software development methods and techniques for building and maintaining large systems  ;    Prepare  &nbsp;students to apply these methods and techniques presented to them in the context of an extended group-base  d software development exercise;    M  ake the students aware of the professional, social and ethical dimensions of software development  ;  &nbsp;    I  nstil in the students a professional attitude towards software development.     The aims of the course are to:     I  ntroduce students to modern software development methods and techniqu  es for building and maintaining   large systems  ;    Prepare  &nbsp;students to apply these methods and techniques presented to them in the context of an extended group-based software development exercise  &nbsp;(Team Project (H));  &nbsp;    M  ake the students aware of the professional, social and ethical dimensions of software development  ;  &nbsp;    I  nstil in the students a professional attitude towards software development.     By the end of this course students will be able to:    1.   Identify the main phases of software development and how they are related in contemporary development methods;    2.   Maintain  &nbsp;an existing medium to large-scale system according to supplied requirements (this will include modifying some of the system documentation);    3.   Identify and discuss critically professional, social and ethical issues involved in large-scale software development;    4.   Plan, organise and schedule   a substantial team based  &nbsp;project;    5.   Capture and specify functional and non-functional requirements;    6.   Design, specify; implement and test a system which demonstrably meets project requirements;    7.   Maintain  &nbsp;appropriate, clear and accurate documentation;    8.   Use appropriate QA techniques  , including test suite planning  ;    9.   Use appropriate configuration management tools and techniques;    10.   Deliver articulate and informative presentations on project topics;    11.   Communicate effectively within the project team;    12.   Work successfully within a team.  ", "CyberSecurity Fundamentals for MSc (M) COMPSCI5063   This course provides an introduction to the foundational aspects of computer security,  &nbsp;such as protocols. It also covers ways in which these systems can be attached and techniques for thwarting these attacks.   &nbsp;     The aim of this   course  &nbsp;is to provide participants with the opportunity to develop   a security mind-set by   introducing students to  &nbsp;introductory  &nbsp;core material in the area of  &nbsp;computer security.     By the end of this course students should be able to:    1.   Explain cyber security fundamentals concepts including Ethical hacking, Digital Forensics and Penetration testing  ;    2.   Explain   a number of  &nbsp;different security protocols;    3.   E  valuate an existing or proposed   system in terms of potential vulnerabilities  &nbsp;and   recommend  &nbsp;the most appropriate   security solution to apply  &nbsp;in   a   &nbsp;  number  &nbsp;of different scenarios  ;    4.   Summarise the key vulnerabilities, threats, and attacks with regards to network security and explain approaches to mitigate these issues;    5.   Implement an aspect of cyber security  ;    6.   Critically appraise a topic within the field of computer security.  ", "Deep Learning for MSc (M) COMPSCI5103   This course is the next step beyond our introductory machine learning course and teaches students about modern techniques for machine learning with high-dimensional image and sequence (time-series) data, and the underlying computational structures for such systems.     The aim of this course is to go beyond our introductory machine learning   course, and  &nbsp;teach students about modern techniques for machine learning with high-dimensional image and sequence (time-series) data, and the underlying computational structures for such systems. Teach the students about managing large data sets, and the engineering pipelines for large-scale machine learning tasks.   &nbsp;  In this course, students will learn the foundations of deep learning and dynamic models for time-series analysis.     By the end of this course students will be able to:    1.   Understand the major technology trends in advanced machine learning;    2.   Build, train and apply fully connected deep neural networks;    3.   Know how to implement efficient, vectorised neural networks in python and understand the underlying backends;    4.   Apply deep learning methods to new applications;    5.   Understand the machine learning pipeline, and engineering aspects of training data collation, and the importance of unlabelled data.  ", "Machine Learning (M) COMPSCI5014   A practical introduction to the foundations of machine learning.     To present students with an introduction to the   general   theory  &nbsp;of learning from data and to  &nbsp;a number of   popular   Machine Learning methods  .  &nbsp;   To present students with the practical application of Machine Learning techniques in a variety of domains, including Human Computer Interaction, Information Retrieval, Bioinformatics and Computer Vision and Graphics.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Contrast  &nbsp;the strengths and weaknesses of   different  &nbsp;algorithms  &nbsp;for different tasks and datasets  ;    6.   Analyse the benefits and drawbacks of  &nbsp;some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ", "Coaching Software Teams (H) COMPSCI4094   This course gives students the opportunity to learn and practice principles, practices and methods used in coaching Software Engineering teams.  The course is intended for students who have experience of software development through a summer internship or similar. The course covers interpersonal and management skills that are needed for mentoring and leading teams of software developers. The course focuses on whole-team coaching and how to introduce and embed software engineering practices in existing teams. The course is delivered in collaboration with an established software industry partner (JP Morgan).     To introduce advanced principles, practices and methods used in whole-team coaching of Software Engineering teams.    To introduce techniques for effective working in software teams in a mentoring role,     To expose students to the practicalities and reality of software engineering in industry.     By the end of this course students will be able to:  &nbsp;    1.   Explain a range of advanced practices in large-scale collaborative software engineering including agile project management, stakeholder management, user research and product discovery;    2.   Apply and adapt mentoring techniques for working with less experienced colleagues;    3.   Identify, plan, implement and evaluate improvements to team software processes;    4.   Be aware of the limitations of existing software engineering practices in large scale systems development.  ", "Data Fundamentals (H) COMPSCI4073   This course will cover computational approaches to   working with   numerical data   on a large scale. Computation on arrays of continuous variables underpins machine learning, information retrieval, data analytics, computer  &nbsp;vision and signal processing. This course will cover vectorised operations on numerical arrays, fundamental stochastic and probabilist  ic methods and scientific visualisation.     This course will give students skills in manipulating continuous data, specifying problems in a forms   that can be solved  &nbsp;numerically  , dealing with unreliable and uncertain information, and communicating these results. DF  (H)  &nbsp;will introduce operations on vectors and matrices,   specifying and solving problems via numerical optimisation,   time series  &nbsp;modelling  ,   scientific visualisation and basic probabilistic computation. Students will learn how to bridge the continuous and discrete worlds; for example solving graph flow problems via matrix operations, or how to do robust A/B testing of websites The focus will be  &nbsp;  firmly  &nbsp;  on applying and solving these problems from a computer science perspective and not on theoretical background or formal proofs.     By the end of this course   students will be able to:    1.   formulate problems in tensor form and fluently manipulate tensors;    2.   efficiently run vectorized code;  &nbsp;    3.   apply matrix decomposition to practical problems;    4.   represent problems as objective functions and apply optimisation to solve them;    5.   formulate and understand problems with stochastic elements;    6.   understand the principles of Bayesian inference and apply it to simple problems;    7.   create effective, clear, and precise visualisations of scientific data;    8.   understand the effects of sampling and noi  se on time series;    9.   process, filter, summarise and plot time series and array data.  ", "Software Engineering Summer Placement (H) COMPSCI4046   During the long vacation between third and fourth year, Software Engineering students will normally be required to undertake a summer placement of at least   8  &nbsp;weeks to gain relevant practical experience.     To give students the experience of a real software development environment.    To embed the software engineering theory, principles and tools studied during the previous three years through practical experience.    To develop a student's ability to evaluate and enhance their personal software process.     By the end of the course students will be able to:    1.   D  escribe applicability of practices, methods and tool taught in software engineering and other academic computing science courses to real world software development efforts;     2.   P  resent a summary of their contribution during their placement;     3.   Discuss and reflect on their experiences during their placement.  ", "MSc IT+ Team Project (M) COMPSCI5074   Students undertake a suitable   software   development project that extends their programming skills  , introduces them to collaborative software development,  &nbsp;while   enabling them to   integrat  e  &nbsp;relevant skills from their   database and software project management  &nbsp;courses.     To integrate the skills acquired in the first semester courses: Programming,   Database Theory and Applications  .    To have experience of working in a group.    To gain experience in writing a small technical report.     By the end of this course students will be able to:    1. Demonstrate that they can design, implement and test a moderately sized piece of software.    2. Produce a literate report describing the project.    3. Produce the appropriate documentation for the delivered software.  ", "Information Retrieval (M) COMPSCI5011   To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.    To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.     To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.    To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.     By the end of the course students will be able to:    1.   Implement a standard information retrieval (IR) system;    2.   Discuss the theoretical basis behind the standard models of IR (e.g. Boolean, Vector-space, and Probabilistic models);    3.   Discuss how an IR system should be evaluated in terms of the system's performance and the user's satisfaction with the system;    4.   Understand the concepts behind the different retrieval models  &nbsp;including advanced machine learning models such as learning to rank  ;    5.   Understand the techniques involved in retrieving information from the World Wide Web;    6.   Describe the practical engineering issues raised by the implementation of a search engine for the Web  ;    7.   Understand techniques and architectures necessary to speed up the retrieval process for large-scale IR systems  .  ", "Web Science (H) COMPSCI4077   Web Science is the study of the World Wide Web (WWW), its components, facets and characteristics and the impact it has on both society and technology. The World Wide Web changed the way in which we create information, communicate and interact. New models of social networks (LinkedIn, Facebook, etc.) create opportunities, which were not   available  &nbsp;before. Exploiting such data and networks for the benefit of individuals and organizations has become a key in our knowledge society.     The objective of   this course  &nbsp;is to   introduce students to the field of web science and critically examine methodologies and techniques used in the field.     By the end of this course students will be able to:    1.   Skills to analyse and implement technical solutions on social web applications    2.   Describe the techniques employed in developing advertising models on the web    3.   Describe the techniques needed to analyse social networks    4.   Ability to understand and rationalise privacy threats and mitigation strategies in online communities    5.   Describe  &nbsp;methodologies to conduct large scale data analysis  &nbsp;to analyse user behaviour on the web,  &nbsp;to predict user demographics and purchase behaviours    6.   Describe  &nbsp;sentiment and emotion extraction techniques  &nbsp;and employ them.  ", "Software Engineering Full Year Placement Review COMPSCI5101   The   MSci  &nbsp;Software Engineering with Work Placement students in fourth year undertake a full year placement of ten to twelve months to gain relevant practical experience. This is an exercise for their fifth year to reflect on the work done during their time in industry.     To allow the students to reflect on the learning during the fourth year   twelve month  &nbsp;work placement.     By the end of this course students will be able to:    1.   D  escribe applicability of practices, methods and tool taught in software engineering and other academic computing science courses to real world software development efforts;     2.   P  resent a summary of their contribution during their placement;     3.   Discuss and reflect on their experiences during their placement.  ", "Systems Programming COMPSCI2030   This course is intended for Graduate Apprenticeship students only.   &nbsp;   Throughout this course students will be introduced to low level development concepts like memory management and t  ask sequencing, and what role these concepts play in the running of a low-level system. Students should develop a rich understanding of challenges faced in operating systems programming and what implications these challenges have for applications that run   on a higher level. By understanding these low-level concepts, students are expected to develop a more thoughtful approach to their day-to-day programming.     This course aims to strengthen the student's understanding of operating systems and their development. Students should understand the   particular issues  &nbsp;faced in operating systems programming and how these issues differ from those in higher level programming. They should also understand these issues to the degree that they will inform their development on other platforms.     By the end of this course, students will be able to:  &nbsp;    1.   Explain the behaviour of low-level programs written in a systems language  .  &nbsp;    2.   Explain the concepts of memory management and concurrency, including issues and problems faced in these domains  .  &nbsp;    3.   Explain how data structures are represented, and how this interacts with caching and virtual memory, and to be able to demonstrate the performance impact of such issues  .  &nbsp;    4.   Recognise the impact of memory and machine specifics on the performance of a system  .  &nbsp;    5.   Discuss and reason about concurrency and race conditions  .  &nbsp;    6.   Describe the differences between hardware platforms and operating systems and the impact these have on system programming  .  &nbsp;  ", "Artificial Intelligence (H) COMPSCI4004   Artificial Intelligence   (  H  )  &nbsp;is an introduction to Artificial Intelligence, giving the students an overview of intelligent agent design.     The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.    Students will gain practical experience in labs, programming various aspects of intelligent systems.     By the end of the course students will be able to:    1.   Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of  &nbsp;  the subject in its current form;    2.   Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems etc    3.   Discuss difficulties in computer perception;    4.   Discuss basic issues in planning;    5.   Explain and apply search-based problem-solving techniques;    6.   Formulate and apply Bayesian networks in modelling and planning;    7.   Explain and apply utility theory as a probabilistic framework for rational decision making;    8.   Explain and apply basic machine learning techniques to learn from rewards and observations  .  ", "Recommender Systems (H) COMPSCI4075   This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. Recommender systems are  &nbsp;widely used by many users on a day-to-day basis:   while   recommender systems   have been pioneered by   e-commerce sites such  &nbsp;as  &nbsp;Amazon  &nbsp;and Netflix, they are widely used ranging in areas from marketing (e.g. personalized product recommendations   with  &nbsp;your   supermarket loyalty card  ), education, social media, and financial services. This course discusses various techniques for making recommendations, including non-personalized, content-based, and collaborative recommendation techniques,   and their evaluation.     Recommender systems are widely deployed stochastic retrieval systems - a search system that learns what to suggest to a user based upon no explicit user input (i.e. zero query), but make suggestions using what is known about the user or the demogr  aphics that the user belongs to  .  &nbsp;With the prevalence of recommender systems, from e-commerce sites to supermarket loyalty cards, it can be seen   recommendation technologies have the potential to be more ubiquitous than search technologies.  &nbsp;  This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. This course discusses various techniques for making recommendations that are widely used in industry, including non-personalized, content-based, and collaborative recommendation techniques, and their evaluation.     By the end of this course students will be able to:    1.   Describe the techniques in making automatic recommendations and   personalising  &nbsp;them for individual users.    2.   Describe different recommendation system   scenarios,  &nbsp;and models suitable for deployment therein  .    3.   Discuss how a recommender system should be evaluated in terms of the system's performance and the user's satisfaction with the system  .    4.   Describe the practical engineering issues raised by the implementation of a recommender system in a real deployment  .    5.   Implement   and evaluate   a standard recommender system.  ", "Research Methods And Techniques (M) for MSci COMPSCI5025   This course covers the fundamental principles, of the scientific method.  Students will learn the core skills of planning, designing, executing, evaluating and presenting research.     Introduce students to critical research techniques through paper reviews, bibliographies, project proposals and presentations;  &nbsp;  Introduce students to core scientific principles and methods for conducting and evaluating scientific   investigations;  &nbsp;   Introduce  &nbsp;students to the use of controls and statistical power in experimental design;  &nbsp;  Introduce students to important techniques for planning and managing a research project;  &nbsp;  Give guidance on how to structure theses and papers.     By the end of the course students will be able to:    1.   C  ritically review research p  apers;     2.   P  erform a comp  rehensive literature search;    3.   W  rite a comp  rehensive literature survey;    4.   W  rite a convincing and appropriate experimental design for a  &nbsp;chosen CS research problem;    5.   W  rite a convincing project pro  posal;    6.   Perform critical analysis of experimental designs;    7.   E  xplain   the importance of controls and sample sizes in experimental design;    8.   Discuss issues of ethics approval of experiments.  ", "Software Product Release Engineering (M) COMPSCI5115   This course gives students the opportunity to learn about and practice advanced principles, methods and tools in Software Engineering, and discuss the engineering decisions and trade-offs to be made when releasing software products. The course is intended for students who have experience of software development through a summer internship or similar. The course covers technical skills that are needed for designing, implementing, and maintaining releases of software products. The course also covers approaches and trade-offs needed for operating software releases at scale, current \"shift-left\" approaches, and operating models like DevOps, etc.     To introduce advanced principles, methods and approaches in Software Product Release Engineering,    To introduce techniques for effective maintenance and evolution of working software,     To expose students to the practicalities and reality of software engineering in industry.     By the end of this course students will be able to:    1.   Explain a range of advanced practices in software product release engineering including change management,    2.   Reflect critically on the design decisions and trade-offs involved in building and releasing long-lived software products;    3.   Apply and adapt techniques for planning and maintaining up-time and maintenance cycles;    4.   Understand and apply known stability patterns to maintain scaling and software release availability targets;    5.   Design, plan, implement, deploy, maintain and evolve software  releases;    6.   Be aware of the limitations of existing software engineering practices in large scale systems development.  ", "Software Product Release Engineering (H) COMPSCI4102   This course gives students the opportunity to learn about and practice advanced principles, methods and tools in Software Engineering, and discuss the engineering decisions and trade-offs to be made when releasing software products. The course is intended for students who have experience of software development through a summer internship or similar. The course covers technical skills that are needed for designing, implementing, and maintaining releases of software products. The course also covers approaches and trade-offs needed for operating software releases at scale, current \"shift-left\" approaches, and operating models like DevOps, etc.     To introduce advanced principles, methods and approaches in Software Product Release Engineering,    To introduce techniques for effective maintenance and evolution of working software,     To expose students to the practicalities and reality of software engineering in industry.     By the end of this course students will be able to:    1.   Explain a range of advanced practices in software product release engineering including change management, continuous integration and -delivery, software evolution, build automation, and software security;    2.   Reflect critically on the design decisions and trade-offs involved in building and releasing long-lived software products;    3.   Apply and adapt techniques for planning and maintaining up-time and maintenance cycles;    4.   Understand and apply known stability patterns to maintain scaling and software release availability targets;    5.   Design, plan, implement, deploy, maintain and evolve software  releases;    6.   Be aware of the limitations of existing software engineering practices in large scale systems development.  ", "User Interaction COMPSCI2031   This course is intended for Graduate Apprenticeship students only.   &nbsp;   This course will expose students to a range of user interaction techniques and develop their skills to evaluate t  hem in given contexts. The course will also discuss the implications of using certain interaction with respect to social and ethical issues.     This course aims to provide students with the skills and knowledge to evaluate and design user interfaces effectively, with respect to direct interaction and functionality but also the wider scope of issues faced socially.     By the end of this course, students will be able to:  &nbsp;    1.   Identify the main forms of human computer interaction and appreciate the issues involved in delivering successful interaction via these forms  .  &nbsp;    2.   Identify the main issues and key concepts in evaluating interactive systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria  .  &nbsp;    3.   Design, implement and evaluate a simple interactive system using appropriate technology  .  ", "Big Data: Systems, Programming, and Management (M) COMPSCI5088   Big Da  ta is nowadays manifested in a   very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.     The course aims to endow students with:    An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.    Exposure to a number of different cloud data stores and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.    Familiarity with modern programming paradigms (e.g., MapReduce, RDDs, etc.), so to enable them to design and develop programs which can execute in massively parallel infrastructures in the cloud.    The ability to discuss and appraise the internals of (NoSQL) cloud data storage systems, and the ability to enrich these systems with additional functionality.    A deep knowledge of the latest evolutions in the field of big data systems.     By the end of this course students will be able to:    1.   Design, develop and evaluate   programs to access big data repositories in a massively parallel manner  ;    2.   Discuss  &nbsp;and   contrast  &nbsp;the internals of the design and implementation  &nbsp;of current cloud data storage and processing systems;     3.   Identify and   analyse  &nbsp;  issues related to the scalability and efficiency challenges   of  &nbsp;processing complex queries  /algorithms  &nbsp;against big data systems  , and develop and assess ways of addressing said challenges;    4.   Explain and appraise state-of-the-art research in the field of big data systems.    5.   D  emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.  ", "Human-Computer Interaction (H) COMPSCI4023   The aim of this course is to introduce stude  nts to advanced topics in Human-  Computer Interaction. I  n technical terms, i  t focuses on   data visualisation, collaborative systems and multimodal interaction. It also introduces other   novel forms in interaction  &nbsp;and evaluation, and legal and ethical issues around interactive and data-centred systems  .     This course will bring depth and breadth to the material covered in Interactive Systems H.  Human-Computer Interaction has moved away from a narrow focus on textual windows on a desktop, operated by one person using a keyboard and mouse.  In terms of devices, phones and other mobile systems lead to ubiquitous use and also ubiquitous sharing of data about us. In terms of data, such systems are often used to manipulate and explore complex data, including individual and social data.  They are used at a scale that pervades and changes our society, and legal and ethical issues (e.g. GDPR) are influencing what we design and how we design them. The aim of Human-Computer Interaction H will be to equip our students with skills to design for this broad use of technology. It will also to feed into Mobile Human-Computer Interaction H, which concentrates on mobile systems.   &nbsp;   The aim of   this   course is to give the students an o  verview of advanced topics in Human-Computer   I  nteraction, covering the  &nbsp;key areas of   interaction with complex, personal and social data, via data analytics (in particular, visual analytics), and via multimodal interaction. It will address the ways that we design and evaluate such systems  . There will also be a significant piece of coursework where the students will have   to design, implement and evaluate an   interactive application. This will give them valuable experience in   development and justification of  &nbsp;  such systems  .     By the end of the course students will be able to:    1.   Identify the   key  &nbsp;  concepts  &nbsp;and   exemplars  &nbsp;in   the design of  &nbsp;novel   visualisation systems, collaborative systems, and   multimodal   systems, and in ethical system design  ;    2.   Identify the  &nbsp;main  &nbsp;issues   and key concepts in evaluating such systems, in terms of immediate functionality and utility as well as in terms of wider social, legal and ethical criteria  ;    3.   Have  &nbsp;experience designing   such systems, by d  esign  ing  , develop  ing and evaluating  &nbsp;a significant piece of interactive software embodying key aspects of the course.  ", "Computer Architecture (H) COMPSCI4007   The course explains in depth how a computer works, by developing a digital circuit that implements an instruction set architecture.  Topics include cache, virtual memory, support by the architecture for the operating system, and instruction level parallelism.     This course provides a working understanding of the fundamental principles of computer systems.  It answers the question \"How do computers work?\" at a substantive level, as well as giving a foundation needed for other areas in computer systems.  The course reviews the behaviour of digital circuits and introduces a functional hardware description language for specifying and simulating synchronous circuits.  Using the hardware description language, a complete and precise design of   a simple  &nbsp;but realistic computer architecture is developed.  Advanced topics include the memory system, pipelining, superscalar organisation, and interaction between the architecture and operating system, and the use of formal methods in hardware design.  Current trends are introduced, in particular parallelism and reconfigurable computing.     By the end of the course students will be able to:    1.   Demonstrate understanding of a processor   datapath  &nbsp;design, and be able to derive the control signal settings required to make the   datapath  &nbsp;perform an operation;    2.   Implement the   datapath  &nbsp;and the control as digital circuits;    3.   Use simulation to explore properties of a processor circuit;    4.   Analyse the behaviour of a processor pipeline as the processor executes various sequences of instructions;    5.   Predict  &nbsp;the impact of the memory hierarchy on system performance;    6.   Describe how the operating system utilizes the architecture's support   in order to  &nbsp;provide processes, protection, virtual memory, and input/output;    7.   Discuss the role of parallelism in current and future architectures.  ", "Information Visualisation (M) COMPSCI5099   This course is a general   introduction to   the field of   Information Visualisation  , covering visualisation and analytic techniques  , and current research in the area.     This course aims to introduce the broad field of Information Visualisation, with reference to theories of data abstraction and visual perception, current research in the area, and evaluation methods. The theoretical component of the course will be complemented by a practical exercise where students will implement and evaluate an information visualisation system.  &nbsp;     By the end of this course students will be able to:    \u25a0&nbsp;  Discuss the purposes and range of visualisation techniques;    \u25a0&nbsp;  Identify different data types and relate them to different   visualisation techniques;    \u25a0&nbsp;  Explain how theories of visual perception relate to visualisation techniques;    \u25a0&nbsp;  Implement a visualisation system, justifying its design;    \u25a0&nbsp;  Evaluate a visualis  ation system with reference to specified data exploration tasks;     \u25a0&nbsp;  Describe, in general terms, the scope of information visualisation research, and critique current research papers in the area.  ", "Patient Centred Health-Technologies COMPSCI4101   This course will examine digital technology design for healthcare delivery from a patient's perspective. The course discusses the emerging role that digital technology plays in delivering support for mental health and wellbeing, managing long-term chronic health conditions by providing information to patients, and broadening access to medical services. We discuss common challenges for digital innovation in this field including the need to manage sensitive healthcare data in ways that comply with data protection laws, the added burden that gaining ethical approval for research and development work in healthcare settings creates, and the importance of ensuring that designs are accessible to, and accessed by, the widest audience possible. Finally, we look at the human-centred techniques and concepts that play an important role in this area including behaviour change theory, ethnographic studies, healthcare load shifting and participatory design.     The aim of this course is to give students an overview of human-centred digital healthcare design, why it is important but difficult and how to start to address common challenges in it. Students will be introduced to emerging areas of innovation in digital healthcare delivery, the challenges that are faced by designers, and the techniques from human-computer interaction, psychology and social sciences that help to improve address them.     By the end of this course students will be able to:    1.   Identify and critically appraise several different areas of innovation in digital healthcare design including the opportunities that are present and the barriers to their deployment.    2.   Analyse new digital healthcare innovations and 1) identify potential problem areas (including design, AI implementation, and sensor reliability) then 2) respond with a plan using the techniques they have been taught to start to address those issues.    3.   Appraise how inequalities in healthcare delivery are reenforced or mitigated depending on how we design digital healthcare.  ", "Web Science (M) COMPSCI5078   Web Science is the study of the World Wide Web (WWW), its components, facets and characteristics and the impact it has on both society and technology. The World Wide Web changed the way in which we create information, communicate and interact. New models of social networks (LinkedIn, Facebook, etc.) create opportunities, which were not   available  &nbsp;before. Exploiting such data and networks for the benefit of individuals and organizations has become a key in our knowledge society.     The objective of this course is to introduce students to the field of web science and critically examine methodologies a  nd techniques used in the field.     By the end of this course students will be able to:    &nbsp;    1.   Skills to analyse and implement technical solutions on social web applications    2.   Describe methodologies to conduct large scale data  &nbsp;analysis on social data and platforms    3.   Describe the techniques employed in developing advertising models on the web    4.   Describe the techniques needed to analyse social networks    5.   Describe   topic   models and their usage on social systems    6.   Describe sentiment and emotion extraction techniques and employ them    7.   Ability to understand   fairness, ethics and privacy issues on online systems  ", "Advanced Networked Systems (H) COMPSCI4091   The course aims to give students a deep understanding of the fundamental design, implementation, management, and evaluation principles that govern large-scale, high-speed networked systems. These include algorithmic and implementation techniques for high-speed networking in routers and end-nodes; systems performance measurement and modelling principles; network and system resource management, allocation and engineering schemes; and research and technological advances that drive the development of a converged, global telecommunications medium of the future.     Computer networks have become an integral part of society - we take for granted the ability to transact commerce over the Internet, to store documents online, and that users can avail themselves of a growing set of communication methods, ranging from file sharing to social networking and video conferencing. Moreover, computer networks underpin a lot of recent paradigm-shifting advances in ICT, from Cloud Computing, to Smart Cities and the Internet of Things.   &nbsp;   To support the seamless provision of all these advanced services, computer networks engage a complex set of interconnected systems and components whose design is governed by principles across the spectrum of Computing Science and Engineering: from hardware and software architecture, to protocols and algorithms, to analysis and modelling.     This course will therefore adopt a holistic systems thinking instead of the 'black-box' thinking that often results from treating concepts (such as, e.g., algorithms, OS, networking) in isolation.   &nbsp;  &nbsp;   1.   The course   will look at 'network algorithmics' as an interdisciplinary systems approach to streamlining network stack implementations in routers and end-nodes, and understand the bottlenecks that need to be overcome in order to meet strict performance requirements.    2.   The course   will   cover   the importance of high performance in network design and implementation, and understand the need for building networked systems that are on par with ever increasing physical link capacities (you can buy more bandwidth, but cannot buy less delay). In doing so, ways to measure network performance  &nbsp;will be explored  , and also approaches to evaluating and analysing the performance of networked systems. Students will therefore be able to generalise and reason about the capabilities and limitations of different processing and service models.     3.   In addition, the course  &nbsp;will look at algorithms and technologies for efficient and fair resource usage,   and students will   understand the importance of end-to-end protocol design and traffic engineering.   For example, students  &nbsp;will understand why, in networks, packet loss is not an isolated incident 'when things go wrong' but the norm: a mechanism based on which the appropriate feedback loops  &nbsp;can be created   to ensure that the underlying resources are used fully and shared equally.    4.   The course will also   look at recent technological and research advances in emerging  &nbsp;computer networking technologies and protocols. For example, Data Centre / Cloud networking for achieving   full bi-section bandwidth; Software-Defined Networking (SDN) as a transformative paradigm aiming to logically centralise the network control plane; Network Function Virtualisation (NFV) as an approach to embed add-on services on top of connectivity in network infrastructures;   Resilient networked systems.   &nbsp;  &nbsp;   By the end of this course, students will have a deep understanding of the design and implementation principles for building high-performance inter-connected systems, as well as specialist knowledge in advances in computer networking technology. This course will be particularly suitable for students who aspire to successful careers either in systems research, or in diverse industry sectors ranging from global (e.g., Google, Facebook, Amazon) to local (e.g., the banking sector) infrastructure operators, to equipment vendors (e.g., Cisco, Huawei, Ericson) and Internet Service Providers (e.g., BT).     By the end of this course students will be able to:    1.  \tArticulate the key challenges in building high-speed networked systems     2.  \t  Illustrate   the design and im  plement  ation   implications  &nbsp;  for high-performance networked systems,      \tp  rotocols, and algorithms    3.  \tDesign and conduct experiments over diverse networked infrastructures     4.  Outline and critique advances in networking technology and systems  ", "Coaching Software Teams (M) COMPSCI5113   This course gives students the opportunity to learn and practice principles, practices and methods used in coaching Software Engineering teams.  The course is intended for students who have experience of software development through a summer internship or similar. The course covers interpersonal and management skills that are needed for mentoring and leading teams of software developers. The course focuses on whole-team coaching and how to introduce and embed software engineering practices in existing teams. The course is delivered in collaboration with an established software industry partner (JP Morgan).     To introduce advanced principles, practices and methods used in whole-team coaching of Software Engineering teams.    To introduce techniques for effective working in software teams in a mentoring role,     To expose students to the practicalities and reality of software engineering in industry.     By the end of this course students will be able to:    1.   Explain a range of advanced practices in large-scale collaborative software engineering including agile project management, stakeholder management, user research and product discovery;    2.   Apply and adapt mentoring techniques for working with less experienced colleagues;    3.   Identify, plan, implement and evaluate improvements to team software processes;    4.   Be aware of the limitations of existing software engineering practices in large scale systems development.  ", "COMP3507: \nCOMPUTATIONAL COMPLEXITY  The aim of the module is to equip students with the ability to ability to formalise and reason about the complexity of computational problems as well as to identify barriers to efficient computations.   The content will be chosen from the following topics: \n\t\t\t Time complexity and space complexity of computational problems \n\t\t\t Complexity of optimisation and approximation \n\t\t\t Parameterised complexity \n\t\t\t Circuit complexity \n\t\t\t Complexity and cryptography \n\t\t\t Complexity of randomised computation \n\t\t\t Descriptive complexity   On completion of this module, students will be able to demonstrate: \n\t\t\t\t an understanding of the inherent limitations of computation through appreciation of the topic areas; \n\t\t\t\t an appreciation of different ways to measure and reason about the complexity of computation; \n\t\t\t\t a knowledge about various important problem solving paradigms in the broad area of algorithms and complexity. ", "Artificial Intelligence (M) COMPSCI5087   Artificial Intelligence   (M)  &nbsp;is an introduction to Artificial I  ntelligence, giving the students an overview of intelligent agent design  .  &nbsp;     The aim of this course is to provide an overview of intelligent agent design, where agents perceive their environment and act rationally to fulfil their goals.    Students will gain practical experience in labs, programming various aspects of intelligent systems.     By the end of the course students will be able to:    1.   Demonstrate familiarity with the history of AI, philosophical debates, and understand the potential and limitations of the subject in its current form;    2.   Explain the basic components of an intelligent agent, and be able to map these onto other advanced subjects such as information retrieval, computer vision, database systems, robotics, human-computer interaction, reactive systems  ,  &nbsp;  etc  ;    3.   Discuss difficulties in computer perception  ;    4.   Discuss basic issues in planning;    5.   Explain  &nbsp;and apply search-based problem-solving techniques;    6.   Formulate and apply Bayesian networks in modelling and planning;    7.   Explain  &nbsp;and apply utility theory as a probabilistic framework for rational decision making;    8.   Explain  &nbsp;  and apply   basic  &nbsp;  machine learning techniques to learn from   rewards   and   observations  ;    9.   Discuss  &nbsp;  emerging  &nbsp;  and advanced   machine learning   techniques   to  &nbsp;learn   from   r  ewards and   observations  &nbsp;  in high-dimensional   planning   problems   (e.g. deep reinforcement   learning  ,   M  onto  &nbsp;C  arlo tree  -  search, etc.)  ", "Web Application Development 2 COMPSCI2021   The aim of this course is to provide students with a comprehensive overview of web application development.  It will provide students with the skills to design and develop distributed web applications in a disciplined manner, using a range of tools and technologies. It will also strengthen their understanding of the context and rationale of distributed systems.  &nbsp;     To provide an overview of the tools and technologies used in web development;    To promote the disciplined design and development of web applications;    To develop an understanding of the complexity of building distributed applications;    To develop the ability to implement and deploy a web application.     By the end of this course students will be able to:    1.   Describe and understand the opportunities  &nbsp;and   challenges   involved in developing web applications and working in a distributed environment  ;    2.   Use a variety of development tools and web technologies;    3.   Explain and describe the different high level system architectures common to the web;    4.   Explain the role of messaging and protocols within the design of web applications;    5.   Understand and interpret the design and specifications of a web application;    6.   Construct, build and deploy a web application.  ", "Object-Oriented Software Engineering 2 COMPSCI2008   This course introduces the basic concepts of software engineering. Students will learn methods for the design, implementation, testing and documentation of larger object-oriented programs, and will also develop program comprehension and design skills by studying and extending existing programs.     \u25a0&nbsp;  To introduce the basic concepts of software engineering;     \u25a0&nbsp;  To present methods for the design, implementation and documentation of larger object-oriented programs;     \u25a0&nbsp;  To develop program comprehension and design skills by studying and extending existing programs  ;    \u25a0&nbsp;  To introduce different approaches to software testing.     By the end of the course students will be able to:    1.   Discuss the breadth of software engineering.    2.   Apply design principles and patterns while designing and implementing simple systems, based on reusable technology;    3.   Understand different approach  e  s to software testing  ;    ", "Testing and Software Improvement COMPSCI1022   This course is intended for Graduate Apprenticeship students only.   &nbsp;   Students taking this course will know how to write code   in a given  &nbsp;language. The purpose of this course is to   improve the quality of their code, bringing it up to a professional standard with considerations for testing, efficiency and readability.     This course aims to introduce students to the concept of testing in broad terms, as well as the rationale for common strategies and methodologies employed by developers. It will also introduce   students   to code refactoring and clean coding guidelines.     By the end of this course, students will be able to:  &nbsp;    1.   Describe and apply different software testing methodologies as part of a test suite  .  &nbsp;    2.   Explain various development methodologies and underline the benefits and drawbacks of each in different contexts  .  &nbsp;    3.   Apply clean code concepts in order to write code of a high standard  .  &nbsp;    4.   Employ refactoring techniques to improve the efficiency and readability of code  .  &nbsp;    5.   Apply a range of measurement and analysis techniques to improve quality of software  .  ", "Data Storage and Retrieval COMPSCI2029   This course is intended for Graduate Apprenticeship students only.   &nbsp;   At some point, students are likely to encounter databases. The purpose of this course is to prepare them for that  &nbsp;eventuality and teach them the basics of database formulation and interaction. It will also introduce the idea that whatever database they may encounter will not be the only kind available, and many types of data stores exist for different purposes.     The aim of this course is to introduce students to common database practices and interaction techniques, but also to expand their perception of databases beyond the relational   model, and  &nbsp;introduce different types of data stores and methods of persistence.     By the end of this course, students will be able to:  &nbsp;    1.   Describe the options for the persistence of data in a software program  .  &nbsp;    2.   Explain how databases contribute to the management of large amounts of data  .  &nbsp;    3.   Design, create and develop a relational database  .  &nbsp;    4.   Describe how programming languages interact with data stores  .  ", "Professional Skills and Issues (H) COMPSCI4038   This course introduces the social, ethical, legal, and professional issues involved in the widespread deployment of information technology. It stimulates students to develop their own, well-argued positions on many of these issues.     Graduates in Computing Science, Software Engineering, and related disciplines need to understand the   social, ethical, legal, and   professional   as well as technical   issues   inherent in the  &nbsp;widespread deployment of   information technology  &nbsp;(IT)  .    They  &nbsp;  ne  ed to develop the ability to ask serious questions about the social impact of   IT  &nbsp;and to evaluate proposed answers to those questions.   &nbsp;They need to know the   laws and   professional   codes of conduct relevant to the IT industry  &nbsp;(e.g.,   intellectual property, privacy  ,  &nbsp;  freedom of information,  &nbsp;computer  &nbsp;and Internet  &nbsp;misuse,   and professional responsibilities).    This course aims to:    stimulate thinking about the social and ethical implications of the widespread and sustainable use of IT  ;    develop students' awareness of the laws and professional codes of conduct governing the IT industry;    expose students t  o IT industry working practices, including the need for   continuing professional development  ;    devel  op information gathering skills;    encourage students to adopt principled, reasoned stances on important issues in the topic area;    develop   students'   verbal and written argumentation skills.     By the end of this course students will be able to:    1.   I  dentify the principal social, ethical, legal, and professional issues in information technology (IT);    2.   E  xplain the laws and codes of conduct relevant to the IT industry, and relate them to examples of IT in practice;    3.   U  se analytical tools to break down complex ethical issues in IT;    4.   D  evelop and present arguments on social, ethical, legal, and professional issues in IT;    5.   C  onstructively criticise the arguments of others.  ", "Deep Learning (M) COMPSCI5085   This   course  &nbsp;is the next step beyond our introductory machine learning course  &nbsp;  and teaches students about modern techniques for machine learning with high-dimensional image and sequence (time-series) data, and the underlying computational structure  s for such systems.     The aim of this   course  &nbsp;is to go beyond our introductory machine learning   course, and  &nbsp;teach students about modern techniques for machine learning with high-dimensional image and sequence (time-series) data, and the underlying computational structures for such systems. Teach the students about   m  anaging large data sets, and the engineering pipelines for large-scale machine learning tasks.   &nbsp;  In this course, students will learn the foundations of deep learning and dynamic models for time-series analysis.     By the end of this course students will be able to:    1.   U  nderstand the major technology trends in advanced machine learning  ;    2.   B  uild, train and apply fully  &nbsp;connected deep neural networks;    3.   K  now how to implement efficient, vectorised neural networks in python and understand the underlying   backends  ;    4.   A  pply deep learning methods to new applications  ;    5.   U  nderstand the machine learning pipeline, and engineering aspects of training data collation, and the importance of unlabelled data.  ", "Database Theory and Analytics (M) COMPSCI5076   The aim of this course is to introduce students to the concepts of information management by way of databases,  &nbsp;including relational databases, relational algebra, functional dependency   and normalization   theories,   NoSQL/Big Data Systems, and large-scale analytics paradigms  . The course will provide students with the opportunity to develop skills which will assist them to manage information in the current digital age.     To provide students with opportunities to develop an understanding of modern methods of managing computerised information. This includes the principles and   fundamentals   of relational database   conceptual design, relational algebra, preliminaries in relational database   systems  , introduction to NoSQL and Big Data systems  .     By the end of this course students will be able to:    1.   Design a relational database using entity relationship diagram  s and following the principles of normalization  ;    2.   Use a database management system (DBMS) to construct and manage a relational database;    3.   Use the Structured Query Language (SQL) to construct SQL statements   issued over   &nbsp;relational database  s  ;    4.   Apply normalisation techniques   and functional dependency   to a relational database   schema  ;    5.   Explain how databases can handle   physical design and heuristic optimization based on relational algebra  ;    6.   A  nalyse the execution efficiency of SQL   queries   to   heuristically   optimise queries across centralised databases.     7.   Evaluate what the most appropriate   relational schema design   is for a given context and discuss related issues.    8.   Explain how the basic NoSQL and Big Data Systems manage large-scale data.    9.   Analyse the fundamental data analytics tasks using the Map Reduce paradigm.  ", "Conversational Interfaces (M) COMPSCI5094   This course provides a hands-on introduction to   conversational interaction. Students will learn about the components involved in a conversational system,   the techniques for implementing such a system, and how conversational systems are evaluated. Various forms of conversational interface will be covered, including chatbots, spoken dialogue systems, multimodal dialogue systems, and social robots. During the course, students will implement   and evaluate a conversational interactive system.     The aim of the course is to   survey  &nbsp;the theoretical and practical aspects   involved in  &nbsp;implementing   and evaluating   conversational interfaces. It introduces the  &nbsp;main  &nbsp;component tasks involved in a conversational interaction, ranging from speech recognition   to output generation, and surveys tools and approaches that can be used for building a conversational system. It   also introduces techniques and instruments for testing and evaluating   systems.     By the end of this course students will be able to:    \u25a0&nbsp;  Review, critically analyse, evaluate and synthesize existing research in the field of conversational interfaces and spoken language processing.    \u25a0&nbsp;  Make informed judgments about appropriate methodologies for developing and evaluating conversational interfaces.    \u25a0&nbsp;  Implement a conversational interface   using a suitable programming language and software tools.    \u25a0&nbsp;  Carry out a user evaluation of  &nbsp;an implemented conversational system.    \u25a0&nbsp;  Explain how  &nbsp;the   use  &nbsp;of multimodal   interaction and embodied agents   affects the development, deployment, and evaluation of  &nbsp;conversational interfaces  ", "Mobile Human-Computer Interaction (M) COMPSCI5015   Mobile Human-Computer Interaction (H) gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ", "Machine Learning (H) COMPSCI4061   A practical introduction to the foundations of machine learning.     To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Explain the   typical   strengths and weaknesses of a selection of common algorithms    6.   Appreciate some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ", "Advanced Professional Software Engineering COMPSCI2025   This course is intended for Graduate Apprenticeship students only.   &nbsp;   After a year and a half with their employers, students will inherently have learned a lot about their workplace p  ractices and procedures. An earlier course (  Foundations of   Professional Software Engineering) has already developed the students' understanding of workplace practices. This course will return to many of these fundamental concepts and push students to think  &nbsp;more deeply about them, tying their year and a half of experience into reflection and discussion sessions. It will also include a significant team element to ensure that all students have had a breadth of team-working experiences   with their peers.     The aim of this course is to further develop a breadth of professional software engineering concepts which students have been exposed to in a previous course and the workplace. It will also give them the opportunity to show their ability to work as part of a functional team and plan a group project effectively.     By the end of this course, students will be able to:  &nbsp;    1.   Appraise workplace practices which they have encountered throughout their academic career  .  &nbsp;    2.   Evaluate leadership qualities in the workplace  .    3.   Assemble a significant piece of software as part of a team of peers  .  &nbsp;    4.   Assess team working practices in a team project of peers  .  &nbsp;    5.   Can break down and adequately estimate   the scale of   tasks  .  ", "Forensics (M) COMPSCI5080   The course will enable the acquisition of analytical, scientific and communication skills to investigate cyber security incidents and present appropriate evidence to a non-technical audience.   The course will expect students to comprehend aspects of forensic investigation and to   present findings to non-technical stakeholders  , e.g. court-room  .     To encourage the acquisition of analytical, scientific and communication skills to investigate cyber security incidents  and present appropriate evidence to a non-technical audience, e.g. court-room.   &nbsp;     By the end of this course students will be able to  :    1.   critically evaluate cyber system tools and approaches for a given context;    2.   understand the nature of countermeasures against forensic analysis  ;    3.   predict potential ethical, legal and regulatory concerns from gathered forensic evidence;    4.   effectively communicate complex outcomes from a forensic investigation to a non-technical audience, e.g. court-room.  ", "Computing Science - 1S Systems COMPSCI1018   CS1S introduces the fundamentals of computer systems, including representation of information, digital circuits, processor organisation, machine language, and the relation between hardware and software systems.     The aim of Computing Science 1S is to give students an understanding of the structure and function of a computer system at a range of levels, including  &nbsp;number systems,  &nbsp;logic gates and circuits, the organisation of a CPU, machine and assembly language, how high level language constructs are realised in assembly language, and the operating system.  The emphasis is on the connections between the levels of abstraction in a computer system.     By the end of the course students will be able to:     1.  \tDemonstrate an understanding of data representation, including bits, words, binary, and two's complement;    2.  &nbsp;  \tDemonstrate understanding of the main subsystems in a processor architecture, including   control and data   registers, memory, and input/output;    3.  &nbsp;  \tWrite a simple program in assembly language and run it using suitable tools;    4.  &nbsp;  \tDemonstrate understanding of the representation of instructions;    5  .  &nbsp;  \tDemonstrate an understanding of the execution of machine language programs by the CPU in terms of the fetch-execute cycle;    6.  &nbsp;  \tDesign and simulate simple synchronous logic circuits, comprising logic gates and delay flip flops;    7.  &nbsp;  \tDemonstrate an understanding of the relationship between the   architecture and   high-level programming languages  .  ", "Big Data: Systems, Programming, and Management (H) COMPSCI4064   Big Da  ta is nowadays manifested in a   very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.     The course aims to endow students with:    An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.    Exposure to a number of different cloud   data stores  &nbsp;and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.    Familiarity with   modern   programming paradigm  s (e.g., MapReduce, RDDs, etc.)  , so to enable them to write programs which can execute in massively parallel infrastructures in the cloud.    The ability to understand the internals of   (  NoSQL  )  &nbsp;cloud   data   storage systems and the ability to enrich these systems with additional functionality.     By the end of this course students will be able to:    1.   Design  ,  &nbsp;employ   and evaluate   programs to access big data repositories in a massively parallel manner  ;    2.   D  escribe and   contrast  &nbsp;the internals of the design and implementation  &nbsp;of current cloud   data storage   and processing   systems;     3.   Identify and discuss   issues related to the scalability and efficiency challenges when processing complex queries  /algorithms  &nbsp;against big data systems  , and propose ways of addressing said challenges;    4.   D  emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.  ", "Mobile Human-Computer Interaction (H) COMPSCI4068   Mobile Human-Computer Interaction   (H)   gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ", "Algorithmics I (H) COMPSCI4009   To develop the student's skills in the design and analysis of algorithms; To study algorithms for a range of important standard problems; To introduce the student to the theory of NP-completeness together with its practical   implications;To  &nbsp;make the student aware of fundamental concepts of computability.     To develop the student's skills in the design and analysis of algorithms;     To study algorithms for a range of important standard problems;     To introduce the student to the theory of NP-completeness together with its practical implications;    To make the student aware of fundamental concepts of computability.     By the end of the course the student will be able to:    1.   Recognise, and be able to use, standard algorithmic design methods;    2.   Apply the basic principles of algorithm analysis;    3.   Code standard efficient sorting algorithms;    4.   Code fundamental graph algorithms - for search and traversal, shortest paths, minimum spanning trees, and topological sorting;    5.   Describe classical algorithms for string searching, string comparison, and text compression;    6.   Expound on the basic principles, and the practical implications of, the theory of NP-completeness;    7.   Follow NP-completeness proofs for particular problems;    8.   Deploy various strategies for dealing with computational problems that are apparently intractable;    9.   Provide examples of the computability and unsolvability, and know some standard examples of unsolvable problems.  ", "Algorithms And Data Structures (M) COMPSCI5004   To study the concept of algorithms, and how to analyse their efficiency  ;    To study the concept of abstract data types, and the abstract data types most commonly used in software development  ;   To study the basic data structures most commonly used to represent these abstract data types, together with algorithms operating on these data structures.     To study the concept of algorithms, and how to analyse their efficiency  ;   To study the concept of abstract data types, and the abstract data types most commonly used in software development  ;   To study the basic data structures most commonly used to represent these abstract data types, together with algorithms operating on these data structures.     By the end of the course students will be able to:    1: Discuss the concepts of algorithms and algorithm complexity;    2: Use an abstract data type (ADT);    3: Identify commonly used to represent the above ADTs (arrays  ,  &nbsp;linked lists  ,  &nbsp;search trees  ,  &nbsp;hash tables);    4: Describe algorithms expressed in a suitable notation;    5: Use basic insertion  ,  &nbsp;deletion  ,  &nbsp;searching  , merging,  &nbsp;and sorting algorithms;    6: Implement these algorithms in a suitable programming language;    7: Detail complexity of these algorithms;    8: Use recursion in algorithms and programs;     9: Describe ADTs specified informally;    10: Design  ,  &nbsp;specify  ,  &nbsp;and implement ADTs;    11: Code standard ADTs (strings  ,  &nbsp;stacks  ,  &nbsp;queues  ,  &nbsp;lists  ,  &nbsp;sets  ,  &nbsp;maps  ,  &nbsp;trees  ,   graphs);    12: Recognise how to decide which ADTs are suitable for use in particular programs;    13: Implement these data structures in a suitable programming language;    14: Describe how the complexity of ADT operations is affected by the choice of data structures.  ", "Secured Software Engineering for MSc (M) COMPSCI5104   This course covers secure software engineering methods and techniques. It explores all aspects of the software engineering lifecycle that are directly applicable to designing systems where security and/or privacy is critical.     Broadly, this course aims to offer practical knowledge on engineering secure systems across the software engineering   life-cycle  . These include requirements, design, implementation, testing and maintenance. Topics covered include secure design principles and patterns, eliciting security requirements and uncovering security flaws in software design. This is in addition to fundamental privacy engineering concepts such as Privacy-by-Design and other the conceptual framework for understanding privacy in software. This course also devotes a significant time to discussing well known secure design solutions including architectural patterns and design patterns focusing on security/privacy countermeasures. We discuss information-flow analysis and evaluation as mechanisms to assess the effectiveness of the secure design solutions implemented in source code.   &nbsp;   The course will help prepare students to apply software security and privacy techniques in industry, as well as to pursue research in software engineering, security and privacy.   &nbsp;  &nbsp;  &nbsp;      By the end of this course students will be able to:    1.   Describe the life cycle for developing secure software systems.    2.   Apply lightweight refactoring methods to balance trade-offs between competing security, privacy and functionality quality measures in software.    3.   Verify the effectiveness of a secure software design solution.    4.   Explore general approaches to privacy engineering and Privacy-by-Design paradigm in software.    5.   Build a simple privacy justificatory framework for justifying the extent a given software aligns with data protection regulations (  e.g  &nbsp;GDPR, HIPPA, etc.).    6.   Apply secure software design principles to a range of application domains and case studies such as social networks, internet of things, mobile computing, ecommerce,   service oriented  &nbsp;architectures, multi-agent and autonomous systems.  ", "Information Retrieval (H) COMPSCI4069   To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.    To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.     To present students with an in-depth examination of the theoretical and practical issues involved in providing tools to access large collections of documents, especially in the context of the World Wide Web.    To present students with the practical engineering issues raised by the design and implementation of an information retrieval system.     By the end of the course students will be able to:    1.   Implement a standard information retrieval (IR) system;    2.   Discuss the theoretical basis behind the standard models of IR (e.g. Boolean, Vector-space, and Probabilistic models);    3.   Discuss how an IR system should be evaluated in terms of the system's performance and the user's satisfaction with the system;    4.   Describe the techniques in organising information;    5.   Describe the techniques involved in retrieving information from the World Wide Web;    6.   Describe the practical engineering issues raised by the implementation of a search engine for the Web  .  ", "Data Visualisation Analytics module (CS31001) In today's data-driven world, the ability to effectively analyse and visualise data is becoming increasingly important across a wide range of industries, such as healthcare, finance, and digital marketing.This module provides you with the skills and knowledge needed to make sense of complex datasets and communicate insights effectively.By studying statistical methods, exploring data visualisation techniques, and learning how to mine data from vast datasets, you will be able to tackle real-world problems and make data-driven decisions.&nbsp; &nbsp;   study basic frequentist statistics \n explore how to visualise data and information effectively \n learn about the methodologies of the Cross-Industry Standard Process for Data Mining (CRISP-DM) \n explore various data mining algorithms and their use cases \n work with industry standards and techniques for data visualisation and analytics  understand and explain the importance of statistics in today's world \n select appropriate statistical techniques and data visualisations \n discuss various data mining techniques \n select appropriate data mining techniques for real-world problems ", "Computer Vision Methods and Applications (H) COMPSCI4066     The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of  &nbsp;  building advanced image-based applications. Examples of potential vision-based applications include:   image understanding in   mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production  &nbsp;tools  , interactive gaming, augmented reality and visual biometrics  , forensic image analysis, security and surveillance,   and medical imaging.   The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:  &nbsp;face detection,  &nbsp;object recognition, tracking, segmentation and 3D imaging.     \u25a0&nbsp;  To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.    \u25a0&nbsp;  To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above  &nbsp;(section 13)  . Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines.     \u25a0&nbsp;  To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.     By the end of the course students   will   be able to:     1.   Analyse  &nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;    2.   Implement feature extraction and object recognition algorithms;    3.   Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D   surfaces from stereo-pair images, or motion fields from image sequences;    4.   Demonstrate the ability to apply the rudiments of information theory and basic image compression   &nbsp;                                     techniques to the design of image coding/decoding algorithms;    5.   Demonstrate competence in the use of the   programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.  ", "Modelling Reactive Systems (M) COMPSCI5075   Modelling concurrent, communicating systems using non-probabilistic and probabilistic techniques, verification using the SPIN and PRISM model checker  s.  &nbsp;     Reactive systems are widely and increasingly used throughout society (e.g. telecommunications, flight control, railway signalling, medical devices).  An understanding of the fundamentals of these systems, at an abstract level, is essential for the development of process control systems and should be a pre-requisite for anyone developing software for such applications.  This course provides in-depth study of key formal techniques used in designing and analysing concurrent, reactive systems; and to   present the practical issues raised by using a number of such formalisms and associated software tools, particularly within the context of developing communi  cations protocols and other   communications applications.  &nbsp;    Students will learn to model systems using the Promela specification language and associated verification tool SPIN. In addition, probabilistic systems will be modelled as Discrete Time Markov Chains using the PRISM language and too  l.  &nbsp;    The course aims to encourage critical thinking and analysis of existing systems, tools and theories via research-based investigation.     By the end of this course students will be able to:   &nbsp;   1: Clearly differentiate issues that arise in concurrent, reactive, distributed systems  , and probabilistic systems  ;    2: Explain the various concepts of concurrency and communication that arise in such systems;    3: Demonstrate understanding of the concepts of signalling and control and associated modelling issues;    4: Develop message sequence charts for a reactive system;    5: Enumerate the differences between non-probabilistic and probabilistic formalisms;    6: Design and analyse a reactive system, including a communication protocol, using appropriate design techniques   and mechanised analysis tools (SPIN and PRISM);    7  : Critically evaluate existing techniques and methods.  ", "Text as Data for MSc COMPSCI5106   This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document/text analytics tasks.    7.   Critically analyze and critique recent   developments   in  &nbsp;  natural language and   text processing   academic literature.     8.   Evaluate and explain the appropriate application of recent research developments to real-world problems.  ", "Cyber Security Fundamentals (H) COMPSCI4062   This course provides an introduction to the foundational aspects of computer security, such as algorithms and protocols.  It also covers ways in which these systems can be attacked and techniques for thwarting these attacks.     The aim of this course is to provide participants with the opportunity to develop a security mind-set by introducing students to introductory core material in the area of computer security.     By the end of this course students should be able to:    1.   Explain the algorithms behind a number of different cryptographic and communication solutions;    2.   Explain a number of different security protocols;    3.   E  valuate an existing or proposed   system in terms of potential vulnerabilities  &nbsp;and   recommend  &nbsp;the most appropriate   security solution to apply  &nbsp;in a   &nbsp;  number of different scenarios  ;    4.   Summarise the key vulnerabilities, threats, and attacks with regards to network security and explain approaches to mitigate these issues.    5.   Implement an aspect of cyber security  .  &nbsp;  ", "Startup Growth Engineering (H) COMPSCI4087   Start-up Growth Engineering comprises the techniques and best practices applied by the world's most successful tech companies to exponentially grow from the start-up phase into large-scale organisations, with millions of users.  These techniques have been distilled from best practices employed across start-ups in the Silicon Valley and elsewhere.   Start-up Growth Engineering moves beyond traditional product development and marketing activities into an integrated, scientific approach to introducing a new product idea into a market and driving viral user growth.       &nbsp;   The Start-up Growth Engineering course combines theory with a large number of practical examples taken from well-known organisations.  It equips students with the skills to employ their software engineering and product development skills more effectively, in a real-world environment.     To familiarise students with the fundamental techniques used by tech companies to drive exponential user growth, including user retention techniques, the different types of compounding growth mechanisms, and optimization techniques.   &nbsp;   To equip students with the analytical and strategy skills necessary to analyse real-world start-up growth trajectories and construct predictive and optimisation models to drive user growth.       &nbsp;   To enable students to apply these techniques in team situations and to gain an understanding of the typical Growth Engineering team structures and processes employed in Silicon Valley and other leading start-up incubation areas  .     By the end of this course students will be able to:    1.   explain and apply the techniques used to create viral user growth in tech companies;    2.   create a growth strategy for a start-up, designed to drive exponential growth.    3.   explain the key metrics involved in driving start-up exponential growth, and how to optimise those metrics;    4.   qualitatively and quantitatively predict the growth performance of a product or start-up based on current growth metrics    5.   analyse and explain why some start-ups grow into very large-scale organisations, while others with similar products fail;    6.   explain how growth teams are configured inside leading start-ups and the development models used by them.  ", "Recommender Systems (M) COMPSCI5091   This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. Recommender systems are widely used by many users on a day-to-day basis: while recommender systems have been pioneered by e-commerce sites such as Amazon and Netflix, they are widely used ranging in areas from marketing (e.g. personalized product recommendations with your supermarket loyalty card), education, social media, and financial services. This course discusses various techniques for making recommendations, including non-personalized, content-based, and collaborative recommendation techniques, and their evaluation.     Recommender systems are widely deployed stochastic retrieval systems - a search system that learns what to suggest to a user based upon no explicit user input (i.e. zero query), but make suggestions using what is known about the user or the demographics that the user belongs to. With the prevalence of recommender systems, from e-commerce sites to supermarket loyalty cards, it can be seen recommendation technologies have the potential to be more ubiquitous than search technologies. This course introduces the concepts, applications, algorithms, programming, and design of recommender systems -- software systems that recommend products or information, often based on extensive personalization. This course discusses various techniques for making recommendations that are widely used in industry, including non-personalized, content-based, and collaborative recommendation techniques, and their evaluation.     By the end of this course students will be able to:    1.   Describe the techniques in making automatic recommendations and   personalising  &nbsp;them for individual users.    2.   Describe different recommendation system   scenarios,  &nbsp;and models suitable for deployment therein.    3.   Explain   the theoretical concepts behind different recommendation models.    4.   Discuss how a recommender system should be evaluated in terms of the system's performance and the user's satisfaction with the system.    5.   Describe the practical engineering issues raised by the implementation of a recommender system in a real deployment.    6.   Implement and evaluate a standard recommender system.    7.   Discuss leading-edge developments of recommender systems through a critical analysis of a recently published   recommender systems   paper.  ", "Robotics Foundations (H) COMPSCI4076   This course will introduce students to the computational  &nbsp;and mathematical  &nbsp;concepts, information processing and software frameworks of robotic systems. It will also consider the sensory and actuation systems required by a robot to sense, understand and interact with its environment. The primary aim is to give students an understanding of how to prototype and implement   autonomous   robotic systems by making use of   a   sophisticated robotic middleware (e.g. Robot Operating System (ROS)), its associated data transmission channels  ,   software   robotic   stacks  &nbsp;and the underlying mathematics required to operate a robot  .   This  &nbsp;is a hands-on course, designed to provide   student  s with the required programming  , mathematical  &nbsp;and debugging skill-set to implement robotic solutions based on  &nbsp;the  &nbsp;use of off-the-shelf commercially available real and virtual robots.  &nbsp;P  ython skills are a requirement for this course  ;   C/C++ skills are desirable but not essential  .     The aims of Robotics Foundations are:    \u25a0&nbsp;  To facilitate students understanding of   core concepts involved in robot  ic software   development  , from perception to planning and action  ;    \u25a0&nbsp;  To   understand  &nbsp;  how sensed data and pre-obtained information, or world/domain \"knowledge\", is used to plan interaction with the environment    \u25a0&nbsp;  To understand matrix and   transformation   mathematical   operators to accomplish complex robotic motions.    \u25a0&nbsp;  To develop the ability to implement, test  , validate and deploy a   mobile/manipulation robotic problem, based on   the   use of   the  &nbsp;  R  obot   O  perating   S  ystem  .    \u25a0&nbsp;  The relationship between physical robots and their virtual equivalents required for simulation, development   and debugging  &nbsp;will also be considered.    \u25a0&nbsp;  To develop a complete robotic application using off-the-shelf virtual robotic platforms.     By the end of this course  ,  &nbsp;students will be able to:   &nbsp;   1.   Describe   and understand   what constitutes a robot system    2.   Formulate  &nbsp;robot's information capabilities within robotic middleware and understand how data is transformed   from basic  &nbsp;control, sensor and perception functions to robot actions    3.   Create and implement  &nbsp;robot kinematics and motions in mobile robots and robot manipulators    4.   Apply techniques for path and motion planning that allows a robot to move    5.   Design control/behaviour tasks for mobile robots and robot manipulators    6.   Apply  &nbsp;practical software engineering principles during the development of a robotic application    7.   Understand the facilities provided by ROS and how to structure robot control software systems using ROS and vision systems in   OpenCV  .    8.   Be able to program a data processing pipeline consisting of a robot control system in the ROS environment to carry out a specific task, such as locating an object, grasping it and placing it in another location.  ", "Algorithms &amp; Data Structures 2 COMPSCI2007   To familiarise students with fundamental data types and data structures used in programming, with the design and analysis of algorithms for the manipulation of such structures, and to provide practice in the implementation and use of these structures and algorithms in a Java context.     To familiarise students with fundamental data types and data structures used in programming, with the design and analysis of algorithms for the manipulation of such structures, and to provide practice in the implementation and use of these structures and algorithms in a Java context.     By the end of the course students will be able to:    1.   Use an abstract data type (ADT) and its role in program design;    2.   Use stacks, queues, lists, sets and maps, and recognise typical contexts where their use is appropriate;    3.   Represent ADTs as Java interfaces;    4.   Explain the use of basic data structures; such as arrays; linked lists; binary trees; and hash tables;    5.   Implement basic data structures in Java;    6.   Represent standard ADTs by means of appropriate data structures;    7.   Use recursion as an algorithm design technique in appropriate contexts;    8.   Carry out the analysis of a range of algorithms in terms of algorithm analysis and express algorithm complexity using the O notation;    9.   Implement standard searching and sorting algorithms; including binary search;   mergesort  &nbsp;and quicksort; and their complexities;    10.   Use a collection in Java; and related concepts such as comparators and iterators;    11.   Make use of particular Java collections List; Set; Queue and Map; and their various realisations.  ", "Advanced Programming (M) COMPSCI5002   The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.     The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.  It will also cover in brief the underlying Java run time system and techniques found in other languages.     By the end of the course students will be able to:    1.   Use the programming language concepts covered in the earlier Programming course: type checking, scoping, abstraction, data hiding and encapsulation; in an effective way;    2.   &nbsp;Describe the core concepts and issues involved in programming with polymorphic constructs, multiple threads of execution, and networking mechanisms in a general   way;    3.   Use these concepts in Java programs.  ", "Web Science for MSc COMPSCI5107   Web Science is the study of the World Wide Web (WWW), its components, facets and characteristics and the impact it has on both society and technology. The World Wide Web changed the way in which we create information, communicate and interact. New models of social networks (LinkedIn, Facebook, etc.) create opportunities, which were not available before. Exploiting such data and networks for the benefit of individuals and organizations has become a key in our knowledge society.     The objective of this course is to introduce students to the field of web science and critically examine methodologies a  nd techniques used in the field.     By the end of this course students will be able to:    1.   Skills to analyse and implement technical solutions on social web applications    2.   Describe methodologies to conduct large scale data  &nbsp;analysis on social data and platforms    3.   Describe the techniques employed in developing advertising models on the web    4.   Describe the techniques needed to analyse social networks    5.   Describe   topic   models and their usage on social systems    6.   Describe sentiment and emotion extraction techniques and employ them    7.   Ability to understand   fairness, ethics and privacy issues on online systems  ", "Internet Technology (M) COMPSCI5012   The aim of this course is to provide students with a comprehensive overview of web application development.  It will provide students with the skills to design and develop distributed web applications in a disciplined manner, using a range of tools and technologies. It will also strengthen their understanding of the context and rationale of distributed systems.     The aims of this course are:  &nbsp;     To provide an overview of the ongoing developments in web application development  ;     To promote the disciplined design and development of distributed web applications  ;      To strengthen   students  &nbsp;understanding of the context and rationale of distributed systems  ;      To   explain  &nbsp;the messaging and protocols used as a communication mechanisms in web applications  ;     To develop the ability to implement and deploy distributed web applications  .     By the end of the course students will be able to:    1.   Illustrate and describe the n-tier client-server architecture of web applications;    2.   Explain the role of messaging and protocols within the design of web applications;    3.   Explain the opportunities and challenges relating to developing web applications in a distributed environment;    4.   Identify and critically analyse the requirements of a web application;    5.   Design and specify the architecture of a web application;    6.   Evaluate and assess specifications and designs of web applications;    7.   Construct, build and deploy a web application.  ", "Secured Software Engineering (M) COMPSCI5093   This course   covers  &nbsp;  secure software   engineering  &nbsp;methods  &nbsp;and techniques  . It explores   all   aspects of   the   software engineering lifecycle that are directly applicable to designing   systems where security  &nbsp;and  /or  &nbsp;privacy   is critical  .  &nbsp;     Broadly, this course aims to   offe  r practical knowledge on engineering   secure   systems   across the software engineering life-cycle  . These include requirements, design, implementation, testing and maintenance.   Topics covered include secure design principles and patterns  , eliciting security requirements and uncovering security flaws in software design. This is   in addition to fundamental privacy engineering concepts such as Privacy-by-Design  &nbsp;and other  &nbsp;  the conceptual framework for understanding   p  rivacy  &nbsp;in software  . This course also devotes a significant time to discussing well known secure design solutions including architectural patterns and design patterns focusing on security  /privacy  &nbsp;countermeasures  . We discuss  &nbsp;  information-flow  &nbsp;analysis and evaluation as mechanisms to assess the effectiveness of the secure design solutions implemented in source code.   &nbsp;   The course will help prepare students to apply   software security and  &nbsp;privacy techniques in industry  , as well as   to pursue research in software engineering  , security and privacy  .     By the end of this course students will be able to:    1.   Describe   the   life cycle for developing secure software systems.    2.   Apply  &nbsp;  lightweight refactoring   methods  &nbsp;  to   balance trade-offs between competing security, privacy and functionality quality measures in   software.    3.   Verify  &nbsp;the effectiveness of a secure software design solution.    4.   Explore   general approaches to  &nbsp;  privacy engineering and   Privacy-by-Design paradigm in software.    5.   Build a simple privacy   justificatory framework   for   justifying  &nbsp;the extent a given software aligns with  &nbsp;data protection regulations (e.g GDPR, HIPPA  , etc.  )  .    6.   Apply secure software design principles to a range of application domains and case studies such as social networks, internet of things, mobile computing, ecommerce  ,   service oriented architectures  , multi-agent and autonomous systems  .  ", "Human-centred Systems Design and Evaluation (H) COMPSCI4014   The aims of the course are  :    to offer students the opportunity to become familiar with one of the most important interaction paradigms;    to enable students to become skilled in the use of techniques and tools for modelling, implementing and evaluating interactive systems;    to  &nbsp;enable students to apply the theories, techniques and tools presented in the course via challenging exercises which combine design, implementation and evaluation.     The aims of the course are  :    to offer students the opportunity to become familiar with one of the most important interaction paradigms;    to enable students to become skilled in the use of techniques and tools for modelling, implementing and evaluating interactive systems;    to  &nbsp;enable students to apply the theories, techniques and tools presented in the course via challenging exercises which combine design, implementation and evaluation.     By the end of the course students will be able to:    1.   Describe the key problems in interaction design;     2.   Represent and reason about interaction designs;    3.   Design, implement and evaluate   a simple interactive system using appropriate technology  ;    4.   Use formal, experimental and analytic techniques for evaluating interaction;    5.   Discuss   how   the lecture material fits within the whole area of HCI research and practice.  ", "Text as Data - An Introduction to Document Analytics (M) COMPSCI5096   This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document/text analytics tasks.    7.   Critically analyze   and critique   recent   developments   in  &nbsp;  natural language and   text processing   academic  &nbsp;literature  .     8.   Evaluate and explain the appropriate application of   recent   research   developments   to real-world problems.  ", "Data Science Fundamentals COMPSCI2028   This course is intended for Graduate Apprenticeship students only.   &nbsp;   This course introduces students to data science, with topics covering a range of mathematical concepts involved i  n reviewing and changing data. There will be discussions about different types and styles of data and how to handle them, particularly with respect to plotting and visualising this data.     This course introduces students to data science, with topics covering a range of mathematical concepts involved in reviewing and   manipulating  &nbsp;data. There will be discussions about different types and styles of data and how to handle them, particularly with respect to plotting and visualising this data.     By   t  he end of this course, students will be able to:    1.   Apply knowledge of tensor form,   vectorisation  &nbsp;and matrix decomposition in solving mathematical and practical problems  .    2.   Describe how to bridge the continuous and discrete worlds, solving graph flow via metric operations in a software program  .    3.   Create effective, clear, and precise visualisations of data and be able to apply manipulations and conversions on said visualisations  .  ", "Human Computer Interaction Design and Evaluation (M) COMPSCI5057   An introduction to Human-Computer Interaction, covering the tools and techniques required for designing, modelling and evaluating interfaces, as well as selected research topics.     The aim of this course is to both introduce students to the fundamentals of Human Computer Interaction (modelling, cognitive models, interaction paradigms, design rules, evaluation methods) as well to explore some selected advanced research topics through the study of current research literature.     By the end of the course students will be able to:    1.   Describe the key problems in designing effective interfaces, in relation to cognitive models, interactive technologies and usability;    2.   Represent, reason about, and critique interaction designs;    3.   Use formal, experimental and analytic techniques for evaluating interaction models and interfaces;    4.   Explain the contributions of recent research within the context of the scope of the field of HCI.  ", "Professional Issues in the Workplace COMPSCI3012   This course is intended for Graduate Apprenticeship students only.   &nbsp;   By their third year, Graduate Apprentices will have gained significant experience of working as a Software Engineer. During their time in the workplace, they will have already encountered many of the ethical and social issues associated with professional Software Engineering. Drawing on this experience, and building on the material taught in years one and two, this course will allow apprentices to synthesise and evaluate what they have learned, while being exposed to an even broader range of issues via seminars and suggested readings. Acknowledging that apprentices will have encountered potentially quite disparate issues in their respective workplaces, the assessment of this course allows significant flexibility in the issues considered.     The aim of this course is to formalise and consolidate apprentices' understanding of ethical, social, and professional issues that relate to Software Engineering. The course also aims to develop apprentices' verbal and written argumentation skills, honing their ability to construct   well argued  &nbsp;and properly researched positions on issues encountered in their professional experience as Software Engineers. In addition, the course aims to develop apprentices' critical thinking skills by encouraging them to critically engage with the arguments put forward by others.     By the end of this course, students will be able to:    &nbsp;   1.   Explain the ethical and social issues they have encountered in the workplace.    2.   Apply relevant professional codes of conduct in the workplace.    3.   Analyse the ethical and social issues that relate to the profession of Software Engineering more broadly.    4.   Evaluate, synthesise and present arguments about issues related to Software Engineering.  ", "Introduction to Object Oriented Programming COMPSCI2001   This course extends students' experience in programming using a strongly typed language and strengthens their   problem solving  &nbsp;skills. Students will learn the ideas that underpin object-oriented programming and will apply those concepts in developing small and medium sized software systems. Students will also learn to select and re-use existing software components and libraries, and will gain experience in concurrent programming and elementary graphical user-interface (GUI) development.     \u25a0&nbsp;  To further develop the students' experience in programming using a strongly typed language and strengthen their problem solving   skills;    \u25a0&nbsp;  To introduce the ideas that underpin object-oriented programming and ensure students gain the ability to appropriately utilise these concepts in developing small and medium sized software systems;    \u25a0&nbsp;  To develop the ability to select and re-use existing software components and libraries from a limited subset of standard libraries;    \u25a0&nbsp;  To introduce and develop practical experience in concurrent programming, and to explore a variety of  &nbsp;concurrency control mechanisms.     By the end of this course students will be able to:     1.   Use all features of the   Object Oriented  &nbsp;programming languages required to build substantial single-threaded programs;    2.   Describe the object model of   a   language  ;    3.   Explain the significance of the single and multiple inheritance hierarchies; and of implementation and interface inheritance;    4.   Explain the purpose of, and pitfalls inherent in, concurrent programming;    5.   Demonstrate elementary object-oriented design skills;    6.   Build well-structured   Object Oriented  &nbsp;  programs of moderate size using the fundamenta  l class libraries appropriately.  ", "Project Research Readings In Computing Science (M) COMPSCI5003   Immerse students in research topics in   a specialist area of Computing   Science;   Reinforce critical reading and reviewing skills learned in the Research Methods and Techniques course;    Enable students to develop their critical thinking and group discussion capabilities  ;   Develop students' presentation skills.     Immerse students in   the   research topics in   the specialist area of Computing   Science  &nbsp;pertaining to their   MSci  &nbsp;project  ;    Reinforce critical reading and reviewing skills learned in the Research  &nbsp;Methods and Techniques course;    Enable students to develop their critical thinking and   scientific writing   capabilities;    Develop students' presentation skills.     By the end of the course students will be able to:    1.   Exhibit understanding of seminal research in their specialist area by preparing a grant proposal-style report that requires an in-depth understanding of the research area;    2.   Demonstrate the ability to present a critical analysis of relevant literature by presenting a research poster session to a critical audience.  ", "Machine Learning module (CS31006) Machine learning (ML) is a rapidly growing field that has the potential to revolutionise industries such as healthcare, finance, and transportation.With a solid foundation in machine learning, you can analyse vast amounts of data, make predictions, or create intelligent agents. This enables you to implement innovative solutions to solve real-world problems.Whether your passion is data science or software development, the ML skillset is highly sought after in both industries. A strong understanding of machine learning will help you future-proof your career and approach complex problem-solving settings.   study supervised machine learning and its applications \n learn about classification and regression problems \n learn about important principles such as generalisation, data splits, and cross-validation \n explore common machine learning algorithms, such as K-nearest neighbour, and linear regression \n discuss parameter optimisation and commonly used optimisation algorithms \n study how neural networks work and the algorithms used to train them \n discuss deep learning and regularisation  explain key theoretical concepts from machine learning such as generalisation and regularisation \n discuss well-known supervised learning algorithms \n train and evaluate machine learning methods using an industry standard software framework \n describe how to estimate predictive performance of supervised learning methods on a given dataset \n design and conduct machine learning experiments ", "Introduction to Artificial Intelligence and Machine Learning module (CS21002) The world is becoming increasingly reliant on intelligent systems. Learning and adapting technology is relevant for a diverse set of fields, including finance, healthcare, and cybersecurity.With artificial intelligence, we can unlock a wide range of new tools that can improve user experiences, help in pioneering research, and empower developers to create powerful applications.This module explores the fundamental concepts of artificial intelligence and machine learning. With this knowledge, you will be able to develop cutting-edge and innovative technology.   learn about the fundamental concepts surrounding artificial intelligence (AI) \n study the history of AI systems and how they have changed since their introduction \n explore the basics of machine learning (ML) and deep-learning systems and how they can be used \n use popular libraries for AI and ML program development  demonstrate your understanding of fundamental AI principles and its development over time \n apply the theory of searching, constraints, learning, and planning in AI problem-solving scenarios \n understand how ML techniques can be applied to solve real-world problems \n evaluate how recent developments in AI and ML have shaped software development in this field ", "Operating Systems module (CS21004) Operating systems manage and control a computer's resources, allowing users to run and interact with programs. Their job is to ensure programs run safely and facilitate access to files and input/output (I/O) devices.By studying the inner mechanisms of operating systems, you can learn to leverage advanced features such as concurrency, which enables multiple programs to run at the same time.These skills empower you to create more efficient, secure, and scalable programs and computing systems.   study how operating systems run programs using processes and threads \n learn about essential aspects of operating system design, such as CPU scheduling, pre-emption, and concurrency \n examine issues that arise from concurrency and learn about mechanisms to address them \n learn about distributed systems and I/O scheduling for networks, which are crucial in creating larger computing systems \n study how operating systems manage files, access to mass storage, and I/O devices  show a broad understanding of how operating systems function \n demonstrate your understanding of how programs are run and managed by operating systems \n understand and assess the various mechanisms allowing processes to run concurrently \n discuss the issues arising from concurrency and appraise mechanisms to address them \n understand how distributed systems function \n identify security concerns in computer systems ", "COMP3587: \nPROJECT MANAGEMENT  To understand and practice well established project management techniques required for the development of a significant piece of software within a team environment   Project management frameworks and application \n\t\t\t Leadership and innovation \n\t\t\t Managing change \n\t\t\t Practical management skills   On completion of the module, students will be able to:  \n\t\t\t\t Compose a project management plan \n\t\t\t\t Assess project management frameworks and evaluate their appropriateness \n\t\t\t\t Evaluate leadership success \n\t\t\t\t \n\t\t\t ", "Professional Skills for Computing To introduce the key skills required of the computing professional, comprising oral and written communication, along with an awareness of professional aspects of computing practice.  \n The two components of the module address respectively: \n \n Introducing students to the concept of professional ethics and behaviour, the place of computers in society and the legal aspects of computing; \n Developing skills in summarising, quoting, paraphrasing, critical analysis, grammar, referencing, poster construction and oral presentation, and teaching writing as a process approach to composing academic papers. \n   \n Referencing \n Plagiarism \n Literature searching \n Professional Bodies \n Employability \n Ethics \n Law (data protection, computer misuse act) \n Copyright and intellectual property \n Personal reflection \n CPD \n Feedback \n Questionnaire design: Likert scale, numerical data, coding, \n Correlation \n Parametric and non-parametric tests \n   \n Understand the relevance for professional computing along with the practice of basic computer law, professional bodies, and the social impact of computer technology. \n Judge and improve their own writing with increased confidence, utilise appropriate methods for referencing and citing sources, and be familiar with the idea of writing as a process. \n ", "COMP4157: \nLEARNING ANALYTICS  To give students a fundamental understanding of some of the core approaches and problem-solving principles for Learning Analytics (LA) and the role of LA in current and future learning settings and environments.   Statistical Learning Analytics and visualisation: data pre-processing; methods for tackling learning analytics based on statistical approaches; the types of LA that can be done with such approaches - e.g. descriptive and beyond. Visualisation of LA data for different stakeholders - e.g. learner, teacher, administrator, etc.  \n\t\t\t Ethics of Learner Data Usage: discussions on ethical considerations of using learner data, starting from societal view, laws involved, (common) practice, future practice. Algorithmic perspectives, such as (expanded) sensitivity analysis. \n\t\t\t Machine Learning based Learning Analytics: shallow and deep Machine Learning methods for LA; numerical versus textual data analytical methods for LA; combined methods; sentiment analysis for LA; the types of LA that can be done with such approaches - e.g. descriptive, diagnostic, predictive, prescriptive.   The key principles and methodologies of data pre-processing for learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data. \n\t\t\t\t The key principles and methodologies for statistical learning analytics and visualisation, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data. \n\t\t\t\t The key principles of machine learning based learning analytics, as well as the ability to evaluate and interpret where and how to apply such methods, including in the absence of complete data. ", "Databases I To increase awareness of different models of database management systems, and of their potential uses.  \n To make the student aware of the need for rigorous methods for the design of database systems. \n To give the student further opportunities to gain practical skills in the design and implementation of database systems.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n SQL \n CRUD Operations \n Queries \n Normalisation \n Database design \n Data types \n Relational databases \n Keys \n Entity relationship diagrams \n Distributed DBMS \n Database Administration \n  On completion of this module the student will be able to:  \n \n Demonstrate a systematic understanding of database management systems, and deploy established techniques to develop systems appropriate to specific needs \n Demonstrate a thorough knowledge of database interrogation and manipulation using SQL \n Apply recognised industry standard methods to design relational database systems. \n ", "COMP3557: \nDESIGN OF ALGORITHMS AND DATA STRUCTURES  The aim of the module is to equip students with the ability to design and analyse efficient algorithms and data structures.    To be chosen from the following:  \n\t\t\t  hashing (universal, perfect, Cuckoo, Bloom filters)  \n\t\t\t  treaps  \n\t\t\t  skip lists  \n\t\t\t  splay trees  \n\t\t\t  basic models and algorithms for sub-linear space (streaming)  \n\t\t\t  basic models and algorithms for sub-linear time (e.g., property testing)  \n\t\t\t  basic PRAM (shared-memory parallel) algorithms and techniques     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t  a knowledge about various important problem solving paradigms in the broad area of algorithmic design.  \n\t\t\t\t  an understanding of how to measure, transfer and handle data  \n\t\t\t\t  an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems;  \n\t\t\t\t  an ability to conduct review and self-study to further their knowledge beyond the taught material.  ", "Mathematics for Computing A good mathematical grounding is essential for all computing&nbsp;scientists. The mathematics in this syllabus provides the foundation for deeper analysis and understanding of&nbsp;computing subjects, and enhances the student\u2019s ability to make sound judgements regarding the&nbsp;appropriate technology that they will use in the course of their career.&nbsp; Wherever possible, mathematical theory is taught by considering a real example, to provide students with the context for the mathematical tools they will use.&nbsp; Solutions are considered by both analytical and numerical techniques. Where basic principles are involved, some proofs will also be taught. \u2022 Linear algebra: Vectors, Matrices (2D and 3D);  \u2022 Geometric and trigonometric problem solving;  \u2022 Logarithmic functions;  \u2022 Simple differential equations;  \u2022 Set theory;  \u2022 Simultaneous equations;  \n Demonstrate knowledge and understanding of functions, calculus, vectors, linear algebra complex numbers, and ordinary differential equations. \n Select and apply the appropriate mathematical techniques to solve algorithmic problems using clear, logical arguments and appropriate mathematical language. \n Evaluate and use relevant data in the solution of a problem. \n ", "Software Engineering Principles  \n To&nbsp;be able to develop software, we first need to understand some of the theories and approaches that will need to be applied in subsequent modules. This module will enable you to understand software architecture, security, and the law that governs information systems. \n   \n Multi-tier architectures. \n Software design best practices and design patterns. \n Security risks, threats and vulnerabilities (for example buffer overflows, integer overflows and race conditions) to systems as well as security standards. \n Computer ethics and the law in relation to information systems. \n Common pitfalls and mitigations in software engineering.&nbsp; \n   \n Understand Software Engineering architecture and the influences of business factors. \n Identify common pitfalls in Software Engineering implementation. \n Discuss the importance of information systems security. \n Identify areas where legislation impacts the software design process. \n ", "COMP4087: \nADVANCED ALGORITHMS  To give students a deeper knowledge of algorithmic solutions for typical computer science problems. \n\t\t\t To extend the students' knowledge of the latest advances in understanding the limits of computation and the ways of coping with computational hardness.   Algorithms: approximation, exact, fixed parameter tractable, polynomial \n\t\t\t Input restrictions: hereditary and intersection graph classes \n\t\t\t Graph width \n\t\t\t Graph containment relations \n\t\t\t Graph reconfiguration   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t a comprehensive understanding of how the theory of computation is applied in the design of algorithms \n\t\t\t\t a critical evaluation of different approaches to the algorithmic solution for computationally hard problems \n\t\t\t\t a critical awareness of some of the latest advances in research on theoretical aspects of computation ", "Introduction to Content Creation  \n To introduce students to practical techniques and standard practices associated with professional interactive entertainment development. \n To provide the student with a firm foundation of the fundamental principles and underlying theories behind the planning and creation of immersive environments. \n To allow students to develop a practical development pipeline from conceptualisation through to finished, game-ready assets. \n To equip the student with first-hand development knowledge in both a current modelling suite and a modern games development engine. \n To ensure the students understand the process of developing their skills both inside and outside formal workshops, and tackle formative work as well as assignments to create a final, assessed portfolio of 3D assets. \n  1. 3D game asset creation  \n \n An introduction to 3D asset creation tools in a modelling suite \n Basic components and polygon manipulation \n Preparation of models for their use in game engines \n Unwrapping of models to enable texturing \n Texture creation and techniques \n \n 2. 3D game asset design and engine compatibility \n \n Working to a brief and restrictions on development (e.g. tri/poly counts and dependencies, engine optimisation, and platform specific information and/or restrictions) \n Conceptual designs and sourcing reference material for asset creation \n Considerations on naming conventions and file organisation \n Modelling based on complex concept art \n \n 3. An introduction to a 3D game engine \n \n Core principles of games engine - a development environment for rapid creation \n Introduction to conceptualising game environments within the engine \n Optimisation of assets for use within the engine \n Exporting assets from the modelling suite and importing them into the game engine \n \n 4. Asset portfolio creation \n \n Creation of a set of models suitable for use in a single game environment \n Application of consistency and logic to the assets in an environment \n   \n Develop skills in planning and designing 3D assets, both to an original artistic brief and within restrictions imposed by the game engine or equivalent medium. \n Show the purpose, and illustrate the use of, the content creation pipeline from concept to completion. \n Demonstrate proficiency with a current modelling suite and a modern games development engine. \n ", "Foundations of Cyber Security - Concepts  \n To give a solid&nbsp;whole-picture foundation which can then be harnessed later in CO5606 and CO5607 where the modules build upon challenging concepts \n To empower the students with core understanding of the key terminologies in cybersecurity \n To provide students with the understanding of the common cybersecurity concepts and technical security controls available to prevent, detect and recover from security incidents \n  An introduction to the Cybersecurity realm:  \n \n Foundations of computer systems, software, and networking, with respect to the&nbsp;Cybersecurity perspective \n Threats, resolutions, and auditing, relating to IT systems and&nbsp;governance \n Speaking Cyber - Core understanding of Cybersecurity terminologies \n Implementing secure systems. Illustrative of what may be covered include:\n \n Design and development considerations \n Selecting and applying core technologies \n Cryptography \n Human factors \n Auditing (security audits, logging, digital investigation etc.) \n Defense-in-depth \n Pentesting \n Access control \n \n \n   \n Show clear understanding of key cybersecurity terminologies. \n Discuss common technical weaknesses and security measures. \n Demonstrate a conceptual&nbsp;understanding of threats and resolutions with respect to Information and System Security. \n Demonstrate understanding of knowledge, and a critical awareness of cybersecurity core concepts and techniques. \n ", "Web Services  Content and aims \n                 \n                    Module overview\n                  The web is a vast network of resources. Some of those resources aren't passive media, such as HTML pages or video files. Instead, they are active services that can be invoked to do something useful: post a tweet, lookup a postcode, transfer money, and countless other things.&nbsp; \n\n\n This module discusses such services on the web, aka web services. Why and how to use web services in order to build distributed applications, and what challenges arise from distribution on the web. The module is hands-on, teaching how to use modern web service frameworks to develop, test and deploy web applications.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  discuss the principles and challenges of distributed computation on the web;   explain the key concepts of RESTful web service provision;   have demonstrated the ability to implement, test and deploy simple web applications;   have demonstrated the ability to use a modern web service framework.    ", "Cryptography  \n \nTo develop an understanding of the common algorithms and techniques underpinning cryptography. To understand how symmetric ciphers are designed and used to secure communication. To understand the theory and application of public-key cryptography, including the mathematics that drives it. To understand how other cryptographic primitives such as hash functions and random numbers play a role within secure systems.\n \n   \n \n This course covers the basic theory and practice of cryptographic techniques commonly used in computer security. You will learn the theory and mathematics behind commonly used algorithms, and how cryptographic primitives are used to build modern secure systems. Topics will include both private and public key encryption schemes, common algorithms and cryptanalysis, key exchange, hash functions, and elliptic curve cryptography. Important applications of these techniques such as cryptographic protocols, digital signatures and Public Key Infrastructure will also be covered. Students will learn how to evaluate the strength of algorithms, make informed decisions on their selection, and how to make use of cryptographic techniques in practice. \n \n  Knowledge and Understanding: - Knowledge of the mechanisms, strengths and weaknesses of historic and modern cryptographic techniques. - An understanding of the mathematics behind the implementation of modern algorithms.Intellectual Skills: - The ability to understand complex ideas and relate them to specific situations. - The ability to identify both capabilities and limitations of a cryptographic technique.Professional Skills - The ability to implement selected cryptographic primitives, and apply existing cryptographic algorithms within real-world applications. - The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task.Transferable Skills: - The ability to address real problems and assess the value of their proposed solutions - To communicate effectively in writing (reports, proposals, etc.)", "Computing Science Industrial Summer Placement  Content and aims \n                 \n                    Module overview\n                  This industrial computing science placement module runs in the summer of third year. An industrial placement provides the opportunity to apply the knowledge you have gained in the classroom in a commercial context and gain valuable experiences. &nbsp; \n\n Placements are typically between 8 and 12 weeks long. Most placements are paid, and so the employers will make the final decision on which student they are employing. It is your responsibility to secure a placement, but staff will assist. Placement opportunities will be advertised during the preceding spring semester but you are also encouraged to source opportunities from public job advertisements and your own networks, including friends and family. Placements are commonly advertised on e-Placement Scotland and Target Connect. &nbsp; \n\n Working in an industrial setting will give you valuable skills and make you more employable on graduation. You may also continue working with your placement organisation on a part-time basis during your final year of study or work with them on your final year honours dissertation project. \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate a professional approach to conducting a substantial and largely independent piece of work, including acting with initiative and responsibility in decision-making and accessing support within professional guidelines;   flexibly and creatively apply knowledge gained in the first three years of the degree course in an unfamiliar context, utilising investigative and design methods to synthesise ideas or information, and generate solutions in an industrial setting. This may involve making connections between known and unknown areas, to allow for adaptation and change;   apply analytical and problem-solving skills in an industrial setting, using critical reasoning to select between alternative approaches;   document and verbally present your findings and the solutions.    ", "Single Semester Software Engineering Group Project  \n \nTo give some experience in the various different aspects of software engineering in groups. These include running meetings, making collective decisions, time and people management, giving presentations \u2013 maintaining code and document repositories.\n \n   \n \n Working in groups of around five to six people, you\u2019ll make a pitch for a project and be awarded one with a supervisor who will provide you with description of a computer application to be designed, programmed, and documented during the course of the module. Each group will meet up to twice a week, one of which may be with your supervisor and once without; you\u2019ll also have a number of introductory one hour lectures mostly covering software engineering practice. \n \n   Knowledge and Understanding:  Group projects may address topics in any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  The ability to think independently while giving due weight to the arguments of others. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;The ability to analyse systematically and effectively, substantial quantities of information. Professional Skills:  The ability to understand and make use of software engineering methodologies. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;The ability to evaluate, select and deploy tools and techniques. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;The ability to work effectively and ethically with users. Transferable Skills:  The ability to work effectively in software engineering groups and co-author technical reports. &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; The ability to reflect upon and assess their own progress, strengths and weaknesses.&nbsp;", "Mobile App Development  Content and aims \n                 \n                    Module overview\n                  How do apps get developed? What is special about them? Mobile devices and apps are in everyone's hand. \n\n\n In this module we address the provision of software (apps) by building and deploying Android apps on mobile devices within the laboratory and project work. &nbsp; \n\n\n You\u2019ll study the key differences of mobile apps to desktop applications, and their specific basic parts. The module will use the industry standard development tool Android Studio and its emulator. Android mobile apps are commonly developed using Kotlin, and so in this module you will write mobile applications using the Kotlin language together with Android native libraries.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate critical understanding of the concepts underlying Android Operating System;   critically discuss how applications for mobile phones differ from desktop applications;   be able to design, and implement Android apps in the lab using Android Studio: Activities and Fragments, Intents and Intent Filters, Data Storage and Exchange;   critically evaluate the design and implementation of an Android mobile app.    ", "Horizon CDT Outreach and exhibitions: public engagement (Horizon CDT)  \n \nThis module enables students to undertake and report on public engagement activities such as outreach or exhibitions. All students are expected to participate in and report on public engagement activities by their Year 3 annual review.During Year 1 up to six talks, from people involved in a range of public engagement activities, will be organised by the module convenor. Students are expected to attend these talks. The speakers will be a mixture of University staff and external partners. Students are expected to independently identify opportunities for public engagement and organize their own involvement. Students are not required to undertaken public engagement activities during Year 1, but they must have completed the module by the Year 3 annual review. This module allows students who have successfully undertaken public engagement to obtain 10 credits in recognition of this activity. In order to be awarded credits students must report their public engagement activities in ONE of two ways, EITHER:1) A report published on the student's online profile pageOR2) Participation in a student-led public engagement showcasePreparation for these activities will be supported by the Horizon CDT; students are also encouraged to take general university and graduate school modules that support the preparation of public engagement materials and activities.\n \n   \n \n This module enables students to undertake and report on public engagement activities such as outreach or exhibitions. All students are expected to participate in and report on public engagement activities by their Year 3 annual review.  During Year 1, up to six talks&nbsp;from people involved in a range of public engagement activities, will be organised by the module convenor. Students are expected to attend these talks. The speakers will be a mixture of University staff and external partners.  Students are expected to independently identify opportunities for public engagement and organize their own involvement. Students are not required to undertaken public engagement activities during Year 1, but they must have completed the module by the Year 3 annual review.  This module allows students who have successfully undertaken public engagement to obtain 10 credits in recognition of this activity.  In order to be awarded credits students must report their public engagement activities in ONE of two ways, EITHER:  1) A report published on the student's online profile page  OR  2) Participation in a student-led public engagement showcase   &nbsp; \n \n  Students will be able to:* communicate concepts related to digital identity and personal data to a general audience; * use digital tools to report on outcome and experience of public engagement activity.", "Cyber Security  \n \nTo develop an understanding of the nature and scope of the cyber security and its relevance in protecting data confidentiality, integrity and availability across a range of devices, systems and networks. To understand the nature of attacks and vulnerabilities in principle and in existing systems. To develop core skills to select, apply and implement security controls necessary for the security of a system. To recognise and evaluate the organisational and human impacts of cyber security, and the related impacts of technology choices and decisions in these contexts.\n \n   \n \n Cyber security is an essential consideration for the protection of IT-based devices, systems, networks and data, providing safeguard and reassurance to the organisations and individuals that rely on them. We provide coverage of both technical and human/organisational perspectives. Students gain an understanding the principles of cyber security, including attacks, vulnerabilities and secure designs. You will gain knowledge and practical experience across a range of key cyber security topics, including foundational concepts and principles, access control, device and system security, authentication, cryptographic mechanisms and applications, network and Internet security, security management, risk assessment, cyber-attacks and threat intelligence, intrusion detection and incident response, and human aspects. You will learn about the challenges and attacks that need to be considered when designing and implementing secure systems, along with associated approaches to ensure that security is addressed appropriately.&nbsp; \n \n  Knowledge and Understanding:Knowledge and understanding of the important security properties (Confidentiality, Integrity, Availability, Authenticity, Accountability, Non-Repudiation). Knowledge of security controls and protocols. Knowledge of practical attacks on real systems and an understanding of classes of attacks on generic systems. Knowing and understanding secure practices on a technical, human and organisational level.Intellectual Skills:To understand security controls and protocols on a fundamental level, and an ability to analyse novel controls and protocols. To identify the existence of attacks on insecure systems, and to propose the appropriate security controls to improve the security of the system. To analyse and reflect upon the effectiveness of security and protection decisions in practical contexts.&nbsp;Professional Skills:To design and implement cyber security solutions, taking appropriate account of the context and constraints. To recognise the professional issues involved in the design, development and deployment of cyber security solutions. &nbsp;Transferable Skills:To think independently while giving due weight to the arguments of others. To understand complex ideas and relate them to specific problems or questions. To communicate ideas effectively in writing to specific problems or questions. To communicate ideas effectively in writing.&nbsp;", "C++ Programming  \n \nTo acquire knowledge and practice in programming in C and C++.\n \n   \n \n You will cover the programming material and concepts necessary to obtain an understanding of the C++ programming language. You will spend around four hours per week in lectures and computer classes for this module and will be expected to take additional time to practice and to produce your coursework. The tutorial is held in a lecture room and is a practical session to ask questions, get feedback, practice what you have learned and see examples. \n \n   Knowledge and Understanding:  Understanding of the theory and practice of procedural (C) and object-oriented (C++) programming.  Intellectual Skills:  Understand and logically evaluate program requirements and specifications; \t Understand the complex ideas of programming solutions and relate them to particular problems.  Professional Skills:  The ability to write procedural and object-oriented programs in C/C++.  Transferable Skills:  The ability to solve problems using programming and communicate the results in writing. ", "Fundamentals of Information Visualisation  \n \nTo develop student\u2019s knowledge and comprehension of information visualisations.\n \n   \n \n Information Visualisation is the process of extracting knowledge from complex data, and presenting it to a user in a manner that this appropriate to their needs. This module provides a foundational understanding of some important issues in information visualisation design. You will learn about the differences between scientific and creative approaches to constructing visualisations, and consider some important challenges such as the representation of ambiguous or time-based data. You will also learn about psychological theories that help explain how humans process information, and consider their relevance to the design of effective visualisations.   If you want to learn how to design and implement your own interactive information visualisation, you should also take the linked module G53IVP (Information Visualisation Project). Together, these two modules form an integrated 20 credit programme of study.    \n \n  Knowledge of a broad range of styles, applications and delivery mechanisms for visualisations of information.An understanding of important conceptual challenges in designing visualisations of information.An understanding of how people interact with visualisations, to incorporate important psychological theories of human information processing.&nbsp;", "Horizon CDT Writing Your Thesis  \n \nThe Writing Your Thesis module supports submission of CDT student\u2019s PhD thesis. On top of their individual supervision, this module allows students to compare and contrast approaches to producing a thesis across disciplines, and also to constructively inform the work of others (e.g. through peer literature sharing and critical discussions about ideas, methods and theories). Building on the students\u2019 individual thesis roadmap plans created in the Horizon CDT Planning Your Thesis module, this module starts with a workshop where goals and concerns are shared across peers, supervisors and other academics. This is then is followed by a regular series of progress reporting events and supportive writing retreats.\n \n   \n \n The Writing Your Thesis module builds on students\u2019 existing CDT PhD research and impact plans (i.e. Horizon CDT Impact Plans module) to support submission within the funded period of their CDT programme. On top of their individual supervision, this module allows students to compare and contrast approaches to producing a thesis across disciplines, and also to constructively inform the work of others (e.g. through peer literature sharing and critical discussions about ideas, methods and theories). Building on the Thesis Roadmap plans created in the Horizon CDT Planning Your Thesis module, this module starts with a workshop where goals and concerns are shared across peers, supervisors and other academics. This is then is followed by a regular series of progress reporting events and supportive writing retreats. \n \n  \u2022&nbsp;&nbsp; &nbsp;Awareness and key understanding of how to structure and communicate interdisciplinary PhD research within the bounds of a thesis. &nbsp; \u2022&nbsp;&nbsp; &nbsp;Development of final stage PhD thesis writing and preparation. \u2022&nbsp;&nbsp; &nbsp;Experience in focussed individual work. \u2022&nbsp;&nbsp; &nbsp;Think independently while giving due weight to the arguments and feedback of others; understand complex ideas and relate them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Critically analyse and offer constructive feedback to peers.", "Artificial Intelligence  Content and aims \n                 \n                    Module overview\n                  AI is a large field and this half-module can only cover a small portion of it. The module defines the field and covers its main unifying concepts. \n\n\n In this module you'll explore: \n\n\n \n\t optimisation problems;&nbsp;&nbsp; \n\t metaheuristics;&nbsp;&nbsp; \n\t evolutionary algorithms;&nbsp; \n\t swarm intelligence;&nbsp;&nbsp; \n\t reinforcement learning. \n \n\n\n The module also briefly mentions advanced AI applications such as natural language processing, computer games, autonomous cars, computer vision, and robotics.&nbsp; \n\n\n You are expected to be familiar with programming, as there are programming labs and coursework. We will be using the Python programming language, which has become the preferred tool for AI, data science, and machine learning. Python offers concise and readable code, as well as a vast collection of relevant libraries. If you are not familiar with Python, do not worry. We will give an introduction. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate an understanding of ideas and techniques underlying the design of intelligent computer systems;   model problem solving as search, implement, and apply suitable search methodologies;   recognise different forms of machine learning, implement and apply suitable machine learning techniques;   report results of applying AI algorithms in a scientifically sound manner.    ", "Introduction to Image Processing  \n \nTo introduce the fundamentals of digital image processing theory and practice. To gain practical experience in writing programs for manipulating digital images. To lay the foundation for studying advanced topics in related fields.\n \n   \n \n This module introduces the field of digital image processing, a fundamental component of digital photography, television, computer graphics and computer vision. You will cover topics including: image representation and compression, image filtering, enhancement and analysis and image processing applications. You will spend around three hours in lectures and computer classes each week for this module. \n \n  Knowledge and understanding\u2022&nbsp;&nbsp; &nbsp;Experience implementing programs that manipulate images \u2022&nbsp;&nbsp; &nbsp;Understanding fundamental techniques in image processing and analysis, and their limitations \u2022&nbsp;&nbsp; &nbsp;Appreciation of the underlying mathematical principles of the field. &nbsp;Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;Apply knowledge of image processing techniques to particular tasks \u2022&nbsp;&nbsp; &nbsp;Evaluate different techniques in the context of image manipulation and processing &nbsp;Professional Skills \u2022&nbsp;&nbsp; &nbsp;Evaluate the applicability of various algorithms and operators to particular tasks &nbsp;Transferable Skills \u2022&nbsp;&nbsp; &nbsp;Address real problems and assess the value of their proposed solutions, retrieve and analyse information from a variety of sources and produced detailed written reports on the result &nbsp;", "Mathematics for Computer Scientists 1  \n \nTo provide students with the basic mathematical skills needed within a Computer Science degree course.\n \n   \n \n You'll cover the basic concepts in mathematics which are of relevance to the development of computer software. Topics which will be covered include: boolean algebra; simple number theory; sets, functions and relations; combinatorial counting; and simple induction on natural numbers. You'll spend around three hours per week in lectures and tutorials for this module. \n \n   Knowledge and Understanding  Understanding of basic mathematical concepts, definitions and notation.  Intellectual Skills  The ability to understand and apply simple logical reasoning.  Transferable Skills  The ability to use mathematics to solve problems. ", "Professional Ethics in Computing  \n \nThe module aims to develop knowledge and understanding of the social harms enabled by computing, professional codes of ethics, professional responsibilities, dependability in computing, privacy and data protection, security by design, the ethical challenges posed by contemporary computing, and responsible research and innovation.\n \n   \n \n The module introduces the students to the legal, social, ethical and professional&nbsp;issues&nbsp;(LSEPis) relating to computing, as per BCS accredited programme requirements. \n \n  Knowledge and Understanding: 1.1 Social harms enabled by computing 1.2 Professional codes of ethics 1.3 Professional responsibilities 1.4 Dependability 1.5 Security by design 1.6 Privacy and data protection 1.7 Ethical challenges of contemporary computing 1.8 Responsible research and innovationIntellectual Skills: 2.1 Understanding the nature of ethics in computingProfessional Skills: 3.1 Knowledge, understanding and application of ethical codes in computingTransferable Skills: 4.1 Ability to reason about ethics in a digital world", "Horizon CDT Impact Plans  \n \nImpact Plans is intended to help accelerate the impact of students\u2019 PhD thesis research. Students are expected to independently identify opportunities for future impact and should organise their own involvement in activities that may lay the groundwork for post-PhD impact activities.\n \n   \n \n Impact Plans is intended as a CDT Year 3 module which is designed to help accelerate the impact of students\u2019 PhD thesis research. Throughout the programme the CDT students are encouraged to undertake public engagement activities and many of these have previously led to impact activities beyond the PhD, through start-ups, Knowledge Transfer Partnerships (TKPs), Impact Accelerator Accounts and Digital Economy Telling Tales of Engagement awards. This module places an emphasis on making impact plans to help students prepare for next steps post-PhD submission. Students are expected to independently identify opportunities for future impact and should organise their own involvement in activities that may lay the groundwork for these activities. There is an established impact fund to support the implementation of the best impact proposals. \n \n  \u2022&nbsp;An awareness and key understanding of how to position and promote multi-disciplinary PhD research for public facing / industry engagement activities.\u2022&nbsp;Understand the composition of industry sectors \u2013 and specific organisations and networks \u2013 relevant to the PhD students research agenda.\u2022&nbsp;Undertake self-directed research, including information acquisition, analysis and networking to enable continued professional career development.\u2022&nbsp;Development of a post-PhD agenda for PhD dissemination and public / industry engagement activities.\u2022&nbsp;Prepared an individual impact report that demonstrates a broad range of appropriate impact activities.&nbsp;&nbsp;\u2022&nbsp;Attuned skills in disseminating and communicating academic research to a range of non-academic stakeholders in an appropriate \u2018voice\u2019.\u2022&nbsp;Demonstrate a developing network and visible online presence to promote industry /public engagement activities.", "COMP4187: \nPARALLEL SCIENTIFIC COMPUTING II  Introduce advanced scientific computing techniques \n\t\t\t Familiarise student with distributed memory programming and MPI   Basic spatial discretisation techniques for partial differential equations \n\t\t\t Implicit time discretisation techniques for ordinary differential equations. \n\t\t\t Advanced algorithms of scientific computing \n\t\t\t Distributed memory programming paradigms. \n\t\t\t Advanced parallel data structures.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an in-depth knowledge of the state-of-the-art in scientific computing and accelerator programming \n\t\t\t\t a critical awareness of the main open problems of current interest related to these areas \n\t\t\t\t a comprehensive understanding of the research issues that relate to these problems, including recent developments and research trends, breaking technologies and opportunities for industrial innovation.  ", "Horizon CDT Peer-review Publication  \n \nIn the Peer-reviewed Publication module all students are expected to write an academic paper, have it reviewed by their peers (and contribute reviews to their peers\u2019 papers) and submit it for publication at an appropriate venue. The specific aims are to gain experience of disseminating and communicating research via a standardised publication format and the application of critical analysis skills in the review of other publications; this will include approaches to structuring and writing publications for a particular venues and audiences and how to respond to constructive feedback in a paper\u2019s on-going development.\n \n   \n \n In the Peer-reviewed Publication module all students are expected to write an academic paper, have it reviewed by their peers (and contribute reviews to their peers\u2019 papers) and submit it for publication at an appropriate venue. During the writing process, students can receive feedback not just from their supervisors, CDT cohort and the wider Horizon CDT community, but potentially from students at other national CDTs. \n \n  \u2022&nbsp;&nbsp; &nbsp;Awareness and key understanding of how to structure and write a paper publication for a specific publication venue or research community. \u2022&nbsp;&nbsp; &nbsp;Develop a deep understanding of one own\u2019s research data and its wider contribution to the field, to enable successful communication via a written publication.&nbsp; \u2022&nbsp;&nbsp; &nbsp;Think independently while giving due weight to the arguments and feedback of others; understand complex ideas and relate them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Critically analyse and offer constructive feedback to several paper publications. &nbsp;", "COMP3467: \nADVANCED COMPUTER SYSTEMS  To develop an understanding of current hardware architectures and their interplay with programming models and application performances.   \n\t\t\t To appreciate how performance and security of computer systems are affected by their architecture. \n\t\t\t To develop practical skills in application development, server provisioning and orchestration in the context of large scale computing.    Computer Architecture including current processor characteristics and designs \n\t\t\t System administration \n\t\t\t Parallel programming \n\t\t\t Memory systems: cache design and performance \n\t\t\t Processor architecture and security   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t  The relationship between hardware architectures and High Level Programming Languages;   \n\t\t\t\t  Complex performance issues of current computers, and the selection of processors for specific applications. ", "COMP3697: \nCryptography  To understand: \n\t\t\t  the main cryptographic primitives for secret-key and public-key cryptography;   \n\t\t\t the main security notions for cryptosystems; \n\t\t\t the main kinds of attacks to protect against when using a cryptosystem.      Introduction to cryptography   \n\t\t\t Secret-key cryptography: DES, AES, modes of operation, and attacks against those systems   \n\t\t\t Public-key cryptography: RSA and attacks against it   \n\t\t\t Discrete-logarithm and Elliptic Curve cryptography and attacks against those   \n\t\t\t Lattice-based cryptography   \n\t\t\t Side-channel attacks     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of the key features of secret-key and public-key cryptography primitives;  \n\t\t\t\t an understanding of security concerns for cryptography;  \n\t\t\t\t an understanding of the main kind of attacks against cryptosystems.  ", "COMP4177: \nNETWORKS AND THEIR STRUCTURE  To design structured networks to provide the communications fabric of distributed-memory multi-processors, networks-on-chips and data centre networks. \n\t\t\t To introduce the theoretical and practical tools needed to analyse social and technological networks. \n     Core aspects of interconnection networks: topology; routing; switching; flow control; packets; technology. \n\t\t\t Graph theory: degree; cuts; bisections; paths; diameter; embeddings; automorphisms; symmetry. \n\t\t\t Topologies: hypercubes; tori; k-ary n-cubes; cube-connected cycles. \n\t\t\t Performance: traffic patterns; throughput; latency; path diversity; packaging; routing algorithms. \n\t\t\t Modelling networks to make comparisons and predictions: random graphs; Milgram's small world experiment; Watts-Strogatz model; Kleinberg model.   \n\t\t\t Centrality measures: finding influential nodes in networks; using centrality measures to understand the community structure of networks.   \n\t\t\t Epidemics: how contagions spread in networks; models of diffusion; SIR model; epidemic threshold; SIS model.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an in-depth knowledge of the state-of-the-art in interconnection networks and network science \n\t\t\t\t an awareness of the main open problems of current interest  \n\t\t\t\t an understanding of research issues that relate to these problems, including recent developments and research trends and breaking technologies. ", "COMP3527: \nCOMPUTER VISION  To enable students to critically evaluate the development of computer vision solutions across existing and emerging technology areas.  \n\t\t\t To enable students to understand and evaluate general image and video understanding themes across relevant application areas, focusing on relevant case studies. \n\t\t\t To understand and apply the fundamental principles of applied computer vision solutions to a range of real world problems.   Themes will be chosen from contemporary areas of computer vision including the following: \n\t\t\t edge features, contours and shape fitting.  \n\t\t\t feature points for object detection and classification.  \n\t\t\t stereo vision (3D point clouds and depth images).  \n\t\t\t object classification using distributions of gradient information.  \n\t\t\t background modelling and object tracking.  \n\t\t\t end-to-end image classification and real-time object detection via deep machine learning.  \n\t\t\t image and video mosaicking and 3D scene reconstruction.  \n\t\t\t visual odometry for autonomous navigation.    On completion of this module, students will be able to demonstrate an in-depth knowledge of the contemporary computer vision topics presented,\n\t\t\t\t\thow these are applicable to relevant industrial problems and have future potential for emerging needs in both a research and industrial setting.\n\t\t\t\t ", "COMP3537: \nCONTEMPORARY COMPUTER SCIENCE III  To introduce students to advanced topics in Computer Science that are finding application in modern technology.  \n\t\t\t To introduce students to novel topics in Computer Science that have significant potential to impact upon future applications of Computer Science. \n\t\t\t To study two topics on contemporary aspects of Computer Science.   Topics will be selected that are currently provoking widespread interest as regards applications (current and potential) or research and development. Such topics include: \n\t\t\t GPU computing. \n\t\t\t Quantum computation. \n\t\t\t Algorithmic issues of the World Wide Web. \n\t\t\t Bioinformatics. \n\t\t\t Data mining. \n\t\t\t Multi-agent systems. \n\t\t\t Computer Aided Geometric Design. \n\t\t\t Photorealistic and physically accurate computer graphics. \n\t\t\t Visualising complexity and uncertainty. \n\t\t\t Empirical experiment design for computing. \n\t\t\t Novel high performance computing architectures and systems. \n\t\t\t Security \n\t\t\t Network analysis   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of how Computer Science impacts on emerging areas in Science and Technology \n\t\t\t\t an in-depth knowledge of different paradigms and techniques from two areas of contemporary Computer Science ", "COMP4207: \nCoding and Information Theory  To understand: \n\t\t\t  the main techniques for error correction;   \n\t\t\t the key results of information theory and their relevance to cryptography and data compression.     Linear error correcting codes, including Hamming codes \n\t\t\t Bounds on codes \n\t\t\t Cyclic codes, including Reed-Solomon codes and their decoding \n\t\t\t Code-based cryptography \n\t\t\t Channel capacity and rate-distortion theory \n\t\t\t Information-theoretic security.     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of the key features of error-correcting codes; \n\t\t\t\t an understanding of public-key cryptosystems based on error-correcting codes; \n\t\t\t\t an understanding of the how information theory describes the limits of data compression and cryptography.   ", "COMP3567: \nMULTIMEDIA AND GAME DEVELOPMENT  To introduce students to the methods and techniques of effective game development and the principles and practices of modern multimedia technologies.   Game design and mechanics. \n\t\t\t Game engine and programming. \n\t\t\t Game physics and autonomous object motions. \n\t\t\t Visual and audial media representations. \n\t\t\t Media compression, quality optimisation and assessment.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the technologies used in developing different types of games. \n\t\t\t\t an understanding of using suitable programming tools to implement games. \n\t\t\t\t an understanding of the technologies used in representing, processing and optimizing multimedia contents. ", "COMP4167: \nNATURAL LANGUAGE PROCESSING  Introduce the students to computational linguistics \n\t\t\t Introduce the students to Language models \n\t\t\t Gain experience in working with various textual data \n\t\t\t Gain experience in using advanced techniques to solve natural language tasks such as text parsing, understanding, classification, translation, and generation   Text Pre-processing \n\t\t\t Features Extraction \n\t\t\t Language Modelling and Neural Language Modelling  \n\t\t\t Neural Word Embedding and their interpretation  \n\t\t\t Recurrent Neural Networks (RNN) for Language Models \n\t\t\t Advanced variations of RNNs \n\t\t\t Sequence to Sequence Architectures \n\t\t\t Convolutional Neural Networks for Text Classification  \n\t\t\t Transformers and Attention based Models \n\t\t\t Multitask Learning \n\t\t\t Natural Language Generation \n\t\t\t NLP Ethics and Fairness   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t Understanding of the fundamental concepts of Language Models \n\t\t\t\t Understanding of the mathematical basis of various deep-learning based language models \n\t\t\t\t Understanding of the learning algorithms behind major NLP use cases e.g. Machine Translation, Multi-task Learning, Language Generation, ... \n\t\t\t\t Understanding of the embedded bias in popular language models ", "COMP3637: \nCompiler Design  To understand how a compiler for a high-level programming language works. \n\t\t\t Develop implementation skills for writing practical components of a compiler, including parsing, analysis, code generation, and optimisation. \n\t\t\t Appreciate how the design of programming languages is affected by compiler considerations. \n\t\t\t Implement a compiler for a high-level programming language.   Compiler frontend: Foundations of compiler theory and techniques for lexical analysis,  syntax analysis and semantic analysis. \n\t\t\t Compiler backend: Intermediate representations (IRs), optimisation on IRs, machine  code generation and register allocation.   An understanding of the theory and practice of compiler design. ", "COMP4107: \nADVANCED COMPUTER VISION  To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies.  \n\t\t\t To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.   Themes will be chosen from contemporary areas of computer vision including the following: \n\t\t\t Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D/3D.  \n\t\t\t Computer vision for advanced visual semantic models, attribute learning, zero-shot learning, visual question and answering.  \n\t\t\t Computer vision for advanced object and scene understanding.  \n\t\t\t Computer vision for behaviour understanding.  \n\t\t\t Computer vision for security and biometrics.  \n\t\t\t Computer vision for image manipulation and augmentation.    On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a\n\t\t\t\t\tcritical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.   ", "COMP4227: \nDistributed Network Computing and Algorithms  To introduce students to network based distributed computing paradigms  and algorithm design concepts.   \n\t\t\t To equip students with the ability to design and analyse efficient distributed algorithms and data structures.   Network abstracted as a graph.   \n\t\t\t Distributed computing models and analysis: LOCAL, CONGEST . . .   \n\t\t\t Fundamental and classic distributed algorithms: Flooding, Leader Election, etc.   \n\t\t\t Centralised to distributed via classic graph problems: Maximal Independent Set (MIS), Colouring, Matching, Minimum Spanning Tree (MST), etc.   \n\t\t\t (Advanced) Topics from the following:   \n\t\t\t (Secure) Computation despite faults: Fault-tolerant distributed com\u00acputation despite attacks and/or edge/node insertions/deletions.   \n\t\t\t Byzantine fault-tolerance: Foundations of Blockchain/Cryptocurrency.   \n\t\t\t Autonomous systems: Self-stabilization, Self-healing, Mobile robots.   \n\t\t\t Algorithm complexity and general design techniques: Network Decomposition and Graph Shattering.     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t An understanding of computing, abstraction, and algorithms for networks and decentralised systems; \n\t\t\t\t An understanding of formal concepts for designing and analysing distributed algorithms; \n\t\t\t\t An understanding of fundamental distributed algorithms and distributed variants of classic graph problems; \n\t\t\t\t An understanding of advanced distributed concepts such as fault-tolerant algorithms.   ", "COMP3547: \nDEEP LEARNING  To enable students to be able to approach complex ill-defined problems that require deep layers of learning, and understand how this relates to learning in nature. \n\t\t\t To equip students with the ability to use modern deep learning libraries in order to effectively design, train, and test neural networks in different applications.   Foundations of deep learning and learning in nature \n\t\t\t PyTorch programming \n\t\t\t Designing deep neural network architectures \n\t\t\t Adversarial models \n\t\t\t Energy-based models and Flow models \n\t\t\t Sequential models and Transformers \n\t\t\t Implicit representations \n\t\t\t Generalisation theory \n\t\t\t Meta and manifold learning   On completion of the module, students will be able to demonstrate: \n\t\t\t\t an understanding of state-of-the-art deep neural network architectures and neural network architecture components. \n\t\t\t\t an understanding of statistical learning theory with deep learning approaches. \n\t\t\t\t an understanding of the algorithms and approaches to design and evaluate deep neural networks. ", "COMP3717: \nIntroduction to Music Processing  To introduce students to the: \n\t\t\t computational modelling of music as applied in the field of music information retrieval;  \n\t\t\t basics of representing music as symbolic data;   \n\t\t\t basics of digital signal processing required to extract information from recorded music and sound; \n\t\t\t creative potential for computational modelling of music as data.     Symbolic representations of pitch, rhythm, melodies, and chords   \n\t\t\t Modelling harmony and key-finding   \n\t\t\t Reasoning about music corpora   \n\t\t\t Musical grammars   \n\t\t\t Creative generation of symbolic music data   \n\t\t\t Principles of digital audio   \n\t\t\t Frequency-domain representations of digital audio   \n\t\t\t Percussive onset detection, beat tracking, and tempo detection   \n\t\t\t Pitch detection and chroma feature extraction   \n\t\t\t Structure analysis   \n\t\t\t Source separation   \n\t\t\t Creative sound synthesis     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of common computational techniques for representing, manipulating, and analysing music; \n\t\t\t\t an understanding of the difference between a variety of symbolic and non-symbolic (audio) forms of music representation from a theoretical and practical perspective;   \n\t\t\t\t an awareness of the design and use of mathematical and computational techniques to manipulate and analyse musical data;   \n\t\t\t\t a basic understanding of the relevant musical concepts that inform the design and use of the mathematical and computational techniques covered in the module;   \n\t\t\t\t knowledge of common strategies for the design, implementation, and presentation of creative applications of mathematical and computational techniques to produce new musical art works. ", "COMP3677: \nNATURAL COMPUTING ALGORITHMS  To give students an understanding of how systems and phenomena that occur in the natural world can inspire the development of new computational algorithms relevant to modern-day artificial intelligence.      \n\t\t\t To equip students with a range of natural algorithmic paradigms and techniques that can be widely applied in real-world problem solving.      \n\t\t\t To enable students to implement, apply, analyse and experiment with natural algorithms to solve real-world problems.    An introduction to some of the facets of Natural Computing.      \n\t\t\t Specific algorithms will be drawn from some of the following paradigms (with illustrative examples of the algorithms that these paradigms encompass):      \n\t\t\t evolutionary computing (genetic algorithms, evolution strategies, differential evolution)      \n\t\t\t social computing (particle swarm optimizations, ant colony algorithms, bee foraging algorithms, glow-worm algorithms, bat algorithms)      \n\t\t\t immunocomputing (artificial immune systems, dendritic cell algorithms, clonal expansion algorithms)       \n\t\t\t developmental and grammatical computing (Lindenmayer systems, grammatical evolution algorithms, tree-adjoining grammars)      \n\t\t\t physical computing (simulated annealing, DNA computing, self-assembly systems).    On completion of the module, students will be able to demonstrate:      \n\t\t\t\t an understanding of how systems and phenomena from the natural world inspire new computational algorithms      \n\t\t\t\t an understanding of a range of different paradigms and algorithms inspired by systems and phenomena from the natural world      \n\t\t\t\t an understanding of the data structures and methodologies required to implement these algorithms.  ", "COMP3607: \nRECOMMENDER SYSTEMS  Have you ever wondered how Netflix, YouTube, Amazon or Spotify make suggestions for which content next to view?  \n\t\t\t In this module, we will look at the inner workings of recommender systems; \n\t\t\t explore developing user profiles based on demographics, preferences, context, etc.; \n\t\t\t and put to practice approaches to predict the \"best\" content to recommend to an individual user.   Non-personalised recommenders \n\t\t\t Content-based filtering \n\t\t\t Collaborative filtering \n\t\t\t Context-aware recommenders \n\t\t\t Other RS types, e.g.: hybrid and group \n\t\t\t Evaluation methods \n\t\t\t Ethical issues in recommender systems   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the different types of recommender systems, their purpose and domains of application \n\t\t\t\t an understanding of recommender system users: usage behaviour, demographics, preferences, contextual information \n\t\t\t\t an in-depth knowledge of recommender system algorithms, specifically non-personalised, content-based and collaborative filtering, hybrid techniques and context-aware recommenders \n\t\t\t\t an understanding of recommender system evaluation methods. ", "COMP3487: \nBIOINFORMATICS  To introduce students to applications of Computer Science in Biology. \n\t\t\t To introduce students to some important Statistical methods and algorithms.   Dynamic programming algorithms for sequence alignment. \n\t\t\t Efficient heuristic algorithms for sequence alignment. \n\t\t\t Markov Chains and Hidden Markov Models (HMM).  \n\t\t\t Expectation-Maximisation algorithm with an application to parameter-estimation in HMM.  \n\t\t\t Phylogenetic Trees as a model of Evolution.   \n\t\t\t Maximum parsimony and character-based techniques for tree reconstruction.   \n\t\t\t Distance-based tree reconstruction via neighbour-joining techniques.     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the basic computational problems in Biology.  \n\t\t\t\t an understanding of some fundamental statistical techniques.   \n\t\t\t\t an understanding of basic tree-reconstruction algorithms.   ", "COMP3647: \nHuman-AI Interaction Design  To discuss how the design of Human-AI interactions may affect user experience. \n\t\t\t To introduce methods and tools for designing interactive AI systems. \n\t\t\t To develop ethical and societal principles in the design of interactive AI systems.   AI and User Experience \n\t\t\t Human-Centred AI Design \n\t\t\t Human-AI Communication Channels \n\t\t\t Inclusive Design and Digital Accessibility \n\t\t\t Explainable AI and Building Trust \n\t\t\t Privacy and Security Considerations \n\t\t\t Affective Design for Interactive AI \n\t\t\t Psychophysical Methods \n\t\t\t Ambient Intelligence \n\t\t\t Applications (e.g. gaming, healthcare, education, finance, automotive vehicles, etc.)     An understanding of impacts of interactive AI system design on user experience. \n\t\t\t\t An understanding of concepts and principles of Human-AI interaction design.  ", "COMP4217: \nApplied Cryptography  To understand: \n\t\t\t  the design of cryptographic protocols; \n\t\t\t the security notions for cryptographic protocols.     Hash functions: constructions and security   \n\t\t\t Application of hash functions: MACs, key derivation functions, MFA   \n\t\t\t Signature schemes: constructions, security and threshold signatures   \n\t\t\t Applications of signature schemes: SSL, certificates, key agreement   \n\t\t\t Construction of protocols and proving their security     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of the key features of cryptographic hash functions;   \n\t\t\t\t an understanding of the key features of digital signature schemes; \n\t\t\t\t an understanding of the issues faced in designing and assessing the security of cryptographic protocols.   ", "COMP3517: \nCOMPUTATIONAL MODELLING IN THE HUMANITIES AND SOCIAL SCIENCES  To enable students to understand and critically evaluate the application of computational modelling&nbsp;to problems in the humanities and social sciences. \n\t\t\t To introduce students to algorithms and approaches relevant to the modelling of humanities and social science data.   Computational models of text and language \n\t\t\t Text and data mining \n\t\t\t Critical evaluation of computational models   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of how computational modelling can be applied to humanities and social science research \n\t\t\t\t an understanding of computational approaches to modelling text \n\t\t\t\t an understanding of data mining techniques. ", "COMP4117: \nQUANTUM COMPUTING  To introduce students to Quantum Information Processing and Quantum Computing with emphasis on where these may be advantageous over the classical approach.    Qubits and Quantum Key Distribution      \n\t\t\t Computing with Multiple Qubits      \n\t\t\t EPR paradox and Quantum State Transformations      \n\t\t\t Quantum Gates and Circuits      \n\t\t\t Quantum Algorithms      \n\t\t\t Quantum Networking    On completion of the module, students will be able to demonstrate:      \n\t\t\t\t an understanding of the fundamental notions from Quantum Information Processing      \n\t\t\t\t an understanding of the workings of Quantum algorithms       \n\t\t\t\t an understanding of the principles of Quantum networking  ", "COMP3577: \nPARALLEL SCIENTIFIC COMPUTING I  Introduce scientific computing techniques for the numerical solution of problems in science and engineering \n\t\t\t Introduce and familiarise students with parallel programming approaches in scientific computing   Fundamentals of numerical algorithms for ordinary differential equations. \n\t\t\t Explicit time discretion techniques for ordinary differential equations. \n\t\t\t Notions of error and stability analysis. \n\t\t\t Approaches to programming for multiple processing units using shared memory. \n\t\t\t Data parallel programming paradigms   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of typical approaches to the numerical solution of problems in science and engineering. \n\t\t\t\t a knowledge and appreciation of some of the research challenges in scientific computing  \n\t\t\t\t understanding of basic parallelisation strategies and when to apply them ", "COMP4097: \nADVANCED COMPUTER GRAPHICS AND VISUALISATION  The module focuses on modern, advanced techniques for realistic image synthesis and visualisation, presenting the theoretical background and practical, established algorithms for offline and real-time 3D graphics.   Introduction: basic image generation. \n\t\t\t Physically-based shading. \n\t\t\t Deferred shading, screen space methods. \n\t\t\t Global illumination methods, BRDFs, ray tracing. \n\t\t\t Path tracing, Monte Carlo integration, acceleration techniques, radiosity. \n\t\t\t Tone mapping. \n\t\t\t Shadows. \n\t\t\t Procedural content generation and noise generation. \n\t\t\t Animation. \n\t\t\t Visualisation definitions and rationale, information visualisation, scientific visualisation.  \n\t\t\t Coordinate systems and axes, colour scales, etc.  \n\t\t\t Visualisation pipeline and visualisation architectures. \n\t\t\t Visualisation approaches to scalar, vector and volume data.  \n\t\t\t Multi-scale, multimodal, multidimensional data, uncertain data. \n\t\t\t Data types, signal filtering, major software platforms. \n\t\t\t Perception.    On completion of this module, students will be able to demonstrate a systematic understanding of advanced computer graphics and visualisation algorithms and techniques, and a critical awareness of how they are applicable to both current and emerging needs within the industrial and research environment.  ", "COMP3617: \nVIRTUAL AND AUGMENTED REALITY  This course will introduce the principles of Virtual and Augmented Reality (VR/AR) technologies including optics, displays, rendering techniques, visual perception, tracking, interaction, current challenges, applications and major hardware and software platforms.   Introduction: history of VR/AR development, overview of computer graphics, the graphics pipeline, applications in education, communication, medical, entertainment, manufacturing, shopping. \n\t\t\t VR/AR hardware: displays, physics of light, optics, electronics, microcontrollers, VR head-mounted displays, CAVEs, controllers, interfaces, major hardware platforms. \n\t\t\t VR/AR software: stereo rendering for VR/AR, lens distortion shaders, auditory rendering, major software platforms. \n\t\t\t Human perception: visual, auditory, vestibular, tactile. \n\t\t\t Tracking: head-tracking, inertial measurement units, gyros, accelerometers, magnetometers, sensor fusion, complementary filter, etc. \n\t\t\t Interaction and moving in VR: ergonomics, comfort, 3D interaction design, 3DUIs, perceptual requirements, affordances in VR, user input, physical navigation, redirected walking. \n\t\t\t Presence: virtual embodiment. \n\t\t\t Challenges in VR: simulator sickness, visual discomfort, realism, content, navigation, haptic feedback. \n\t\t\t AR specific topics: object tracking, geolocation.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t An in-depth knowledge of theory and techniques driving the design of Virtual and Augmented Reality hardware and software.  ", "COMP3667: \nREINFORCEMENT LEARNING  To understand computational models of learning in dynamic environments. \n\t\t\t Learning how to plan and design agents with intelligent behaviour, taking actions to control the environment and maximise cumulative future rewards.    Introduction to reinforcement learning. \n\t\t\t Markov decision processes and planning by dynamic programming. \n\t\t\t Model free prediction and control. \n\t\t\t Value-based and policy-based reinforcement learning. \n\t\t\t Scaling up reinforcement learning approaches with deep learning. \n\t\t\t Integrating learning and planning, and balancing exploration/exploitation.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the key features of reinforcement learning and differences with non-interactive learning. \n\t\t\t\t an understanding of state-of-the-art reinforcement learning algorithms.  \n\t\t\t\t an understanding of the issues faced in scaling reinforcement learning approaches using deep learning.  ", "COMP4147: \nCONTEMPORARY COMPUTER SCIENCE IV  To introduce students to advanced topics in Computer Science that are finding application in modern technology.  \n\t\t\t To introduce students to novel topics in Computer Science that have significant potential to impact upon future applications of Computer Science. \n\t\t\t To study two topics on contemporary aspects of Computer Science. \n\t\t\t To enable students to comprehend and develop research relevant to novel applications of Computer Science.   Topics will be selected that are currently provoking widespread interest as regards applications (current and potential) or research and development. Such topics include: \n\t\t\t GPU computing. \n\t\t\t Quantum computation. \n\t\t\t Algorithmic issues of the World Wide Web. \n\t\t\t Bioinformatics. \n\t\t\t Data mining. \n\t\t\t Multi-agent systems. \n\t\t\t Computer Aided Geometric Design. \n\t\t\t Photorealistic and physically accurate computer graphics. \n\t\t\t Visualising complexity and uncertainty. \n\t\t\t Empirical experiment design for computing. \n\t\t\t Novel high performance computing architectures and systems. \n\t\t\t Security \n\t\t\t Network analysis   On completion of the module, students will be able to demonstrate: \n\t\t\t\t a critical awareness of how Computer Science impacts on emerging areas in Science and Technology \n\t\t\t\t a comprehensive understanding of different paradigms and techniques from two areas of contemporary Computer Science \n\t\t\t\t a critical appreciation of recent research applications of Computer Science. ", "COMP4197: \nRANDOMISED ALGORITHMS AND PROBABILISTIC METHODS  The aim of the module is to equip students with the ability to design and analyse efficient probabilistic algorithms.    To be chosen from the following:  \n\t\t\t  basic bounds and inequalities (Markov, Chebyshev, Chernoff)  \n\t\t\t  Martingales  \n\t\t\t  Markov chains and random walks  \n\t\t\t  the probabilistic method  \n\t\t\t  approximate counting  \n\t\t\t  parallel and distributed probabilistic algorithms     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t  a knowledge about various important problem solving paradigms in the broad area of probabilistic methods and algorithms  \n\t\t\t\t  an ability to apply techniques and methods from the relevant topics to tackle fundamental algorithmic problems  \n\t\t\t\t  an ability to conduct review and self-study to further their knowledge beyond the taught material  ", "COMP4137: \nBLOCKCHAIN AND CRYPTOCURRENCIES  To introduce students to an advanced topic in Computer Science that is finding application in modern technology.  \n\t\t\t To give students knowledge and understanding of the theoretical basis, security and history of cryptocurrencies.    Secure hash functions and digital signatures.   \n\t\t\t Simple blockchains.   \n\t\t\t Decentralisation of blockchains.   \n\t\t\t Bitcoin transaction and block details.   \n\t\t\t Bitcoin mining.   \n\t\t\t Anonymity in cryptocurrencies.   \n\t\t\t Ethereum and smart contracts.   \n\t\t\t Recent developments in blockchains and cryptocurrencies.     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the cryptographic protocols underlying blockchain security  \n\t\t\t\t knowledge of the key features and differences between a number of cryptocurrencies   \n\t\t\t\t the structure and use of smart contracts in a blockchain   \n\t\t\t\t an understanding of some recent developments in cryptocurrencies and blockchains   ", "COMP3477: \nALGORITHMIC GAME THEORY   The aim of the module is to introduce the student to the notion of a game, relevant concepts, and other basic notions and tools of game theory, as well as the main applications where such concepts are used and applied.    Introduction to Game Theory: what is a game? Strategy, preferences, payoffs.  \n\t\t\t Bimatrix games: strategies and payoffs; Nash equilibria.   \n\t\t\t Extensive games with Perfect Information.   \n\t\t\t Mathematical and algorithmic foundations of market equilibria.   \n\t\t\t Routing Games on Networks; Congestion Games.   \n\t\t\t Mechanism design and Combinatorial Auctions.     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t An understanding of key game theoretic notions and ideas, and their connections to computer science and economics.  \n\t\t\t\t An understanding of the impact of game theory and mechanism design on contemporary applications.   ", "Project in Advanced Algorithms and Data Structures  \n \nObtain advanced knowledge and practical skills in the analysis, design and implementation of advanced algorithms and data structures.\n \n   \n \n This project builds on the theory presented in COMP4019, and involves a self-guided study of selected advanced data structures and algorithms. The outcome of the project is an implementation of the algorithms and data structures with appropriate documentation. \n \n   Knowledge and Understanding:  Mathematical modelling and analysis of the efficiency of algorithms. \t Advanced implementation techniques.  Intellectual Skills:  The application of mathematical techniques to algorithms and data structures. \t The identification and evaluation of appropriate models of efficiency.  Professional Skills:  The use and selection of appropriate software libraries.  Transferable Skills:  The ability to formulate and construct effective solutions to algorithmic problems. \t Presentation skills. &nbsp;", "Advanced Functional Programming  \n \nTo provide a sound basis in a range of advanced topics in functional programming, including aspects of recent and current research. More generally, the module aims to teach fundamental principles and techniques that can be applied in any programming language, whether it be functional or otherwise.\n \n   \n \n This course builds upon the introductory functional programming course by focusing on a number of more advanced topics, such as programming with effects, reasoning about programs and improving program efficiency. \n \n   Knowledge and Understanding:  A sound understanding of the theory and practice of advanced functional programming.  Intellectual Skills:  The ability to apply mathematical practices and tools.  Professional Skills:   The ability to write and reason about advanced functional programs.  Transferrable Skills:  The ability to use functional techniques to solve problems. ", "Computer Fundamentals  \n \nThe aim of this module is give students a basic understanding of the fundamental architecture of computers above, between and below the CPU:Above the CPU, looking at assembly language and operating systems;below the CPU, looking at how a basic CPU is implemented in digital logic;and between CPUs looking at how computers are networked.\n \n   \n \n This module gives a basic understanding of the fundamental architecture of computers and computer networks. This module will introduce how the simple building blocks of digital logic can be put together in different ways to build an entire computer. It will also show how modern computer systems and networks are constructed of hierarchical layers of functionality which build on and abstract the layers below.&nbsp; \n \n  To have a basic understanding the internal operation and structure of computer and network systems;To have a basic understanding the internal operation and structure of computer and network systems;To understand that hardware and software are often equivalent in this context;To understand that an Operating System is just software run by the CPU like any other software;To be able design hardware logic circuits;To be able to write a simple network sockets program.", "CS323 - Software Engineering for Digital and Technology Solutions The aim of the class is to further the participants\u2019 skills and experience in the design and development of large-scale software systems.&nbsp;  Software process and software process models: Predictive (e.g., waterfall) vs adaptive (e.g., iterative waterfall, spiral and agile methods).&nbsp;  Requirements Engineering: Elicitation, analysis, documentation and validation.&nbsp;&nbsp;  Object-Oriented Goals and Principles: Abstraction, Encapsulation, Inheritance, Coupling, Cohesion, Refactoring and Clean Code.&nbsp;  Object-Oriented Design: UML modelling (e.g., class and use case diagrams) and other Object-Oriented representation techniques (e.g., CRC Cards)&nbsp;  After completing this class participants will be able to:&nbsp; Understanding software processes and commonly used software process models.&nbsp;  Understanding requirements engineering and identifying functional and non-functional requirements.&nbsp;  Identifying the appropriate stakeholders and creating user stories.&nbsp;  Learning how to model the requirements of a system using UML (e.g. use cases and class diagrams).&nbsp;  Working as part of a team to analyse the requirements of a software system.&nbsp; ", "Horizon CDT Responsible Research and Innovation  \n \nThe Responsible Research and Innovation (RRI) module is devoted to RI and human-centred methods for embedding EDI in design, including training in recognising unconscious bias. The module takes the form of a series of activities that explore how societal actors, such as researchers, citizens, policy makers, companies and civil society organisations work together in the whole research and innovation process in order to better align both the process and its outcomes with the values, needs and expectations of society. The module intends that this broad perspective of RRI is integrated into the development of students\u2019 CDT PhD proposal and research activities.\n \n   \n \n The Responsible Research and Innovation (RRI) module is devoted to RI and human-centred methods for embedding EDI in design, including training in recognising unconscious bias. The module which is delivered in collaboration with the Orbit Observatory for Responsible Research and Innovation in ICT takes the form of a series of activities that explore how societal actors, such as researchers, citizens, policy makers, companies and civil society organisations work together in the whole research and innovation process in order to better align both the process and its outcomes with the values, needs and expectations of society. The module intends that this broad perspective of RRI is integrated into the development of students\u2019 CDT PhD proposal and research activities. \n \n  \u2022&nbsp;A broad awareness of issues and principles relating to responsible research and innovation; demonstrate an ability to appreciate competing perspectives and drivers (e.g. industry, consumers and academia).\u2022&nbsp;Awareness and key understanding of responsible research and innovation approaches in applied research.\u2022&nbsp;Communicate with clarity and insight how responsible research and innovation approaches underpin their developing PhD proposal and subsequent PhD activities.\u2022&nbsp;Contextualise and communicate pertinent responsible research concerns and approaches in relation to the Horizon Centre for Doctoral Training\u2019s theme of \u2018Creating our lives in data\u2019.&nbsp;\u2022&nbsp;Awareness and key understanding of techniques for self-assessment, so as to determine the degree to which research activities align with principles and practices of responsible research and innovation; such as recognising unconscious bias in theirs and others research.", "CS254 - Memory and Structure The aim of the class is to develop the participant's understanding of a low-level programming language, its relationship with the underlying instruction set of the computer, and how data is organised within memory.&nbsp;  Introduction to C &amp; Linux: Installing a POSIX environment and using Linux commands, C as a level between Assembly and Java, loops, arrays and scope.&nbsp;  Data organisation in memory: pointers, strings, structs and unions, representing objects.&nbsp;  Memory organisation for programs: Memory hierarchy, Stack and Heap Management, Main memory management, Virtual memory.&nbsp;  From C to the CPU: CPU organisation, Instruction Sets and Assembly, mapping C constructs to Assembly.&nbsp;  After completing this class participants will be able to:&nbsp; Understand the relationship between a low-level programming language with respect to high level languages and assembly languages.&nbsp;  Understand how data is organised in memory.&nbsp;  Have a practical understanding of memory organisation and management within low-level programs.&nbsp;  Understand the mapping between low-level programs and the CPU.&nbsp;  Design and implement a low-level program.&nbsp; ", "Horizon CDT Conference paper  \n \nTo complete a peer-reviewed conference submission\n \n   \n \n This module allows students who have successfully submitted a journal or conference paper to obtain 10 credits in recognition of this research activity. Students will be required to submit:  1) an electronic version of, or externally accessible link to, the full paper, with full details of venue etc. 2) a blog post (linking to the paper itself), describing the following: \u2022 Motivation for paper \u2022 Process of paper preparation (e.g. collaboration with co-authors) \u2022 Details of process of responding to reviewers\u2019 comments (if applicable) \u2022 Reception of paper/poster at conference (if applicable) \u2022 Role of paper within PhD (e.g. follow up work to be completed) \u2022 If appropriate, include any follow up activities or contacts that have resulted from presenting the paper.  The student should obtain approval from one of their supervisors before making the content available online, and confirm this approval when submitting for module credits. Intended audiences: domain experts with an interest in the research and other postgraduate research student wishing to learn about the publication process. \n \n  Students who complete this module will: Be able to demonstrate their ability to communicate research via a peer-reviewed paper or poster submission ", "CS274 - Work Based Learning 1 This class enables degree apprentices to demonstrate the application of aspects of their degree course within an industrial context, to record experience gained in the workplace and to develop their broader professional skills. This is achieved by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet appropriate professional competencies. Participants will undertake the following.&nbsp; Weekly journaling, providing the opportunity to capture their weekly work activities at a high level.  Self-assessment, where they will review their progress with respect to demonstration of a defined set of competencies.&nbsp;  Produce personal development plans that contain objectives to progress competencies identified as requiring development.  Produce&nbsp;evidence documenting workplace activities and upload it to an e-portfolio, clearly linking that evidence with a defined set of competencies.  Upload assets, such as reports and blogs, produced in other modules to their e-portfolio, clearly linking these assets with a defined set of competencies.&nbsp; &nbsp;  After completing this class participants will be able to:&nbsp; Demonstrate reflective work practices.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;  Identify areas and strategies for self-improvement within a professional context. ", "Introduction to Software Engineering  \n \nAn aim of this module is to provide a general understanding of Software Engineering; the typical phases of the software lifecycle with particular reference to practical Requirements and Specification, Software Design, and Implementation &amp; Testing techniques. It serves to prepare students for the various software development projects undertaken throughout their studies.\n \n   \n \n You'll be introduced to the concept of Software Engineering and will be taken through the software development process: deciding exactly what should be built (Requirements &amp; Specification), designing how it should be built (Software Architecture), development strategies (Implementation &amp; Testing), and maintaining change (Software Evolution and Maintenance). \n \n   Knowledge and Understanding:  The different approaches to managing the software engineering process. The practice of producing specifications from informal briefs. Intellectual Skills:  Understand how to determine formal software requirements. Understand how to create and deploy an effective plan for testing software systems. Professional Skills:  The ability to apply software engineering methodologies in practical scenarios. The ability to understand how good software is closely related to the needs of users. The ability to evaluate, select and deploy appropriate tools and techniques. Transferable Skills:  The ability to develop project plans. The ability to produce and critique possible solutions to a design problem.&nbsp;", "Introduction to Human Computer Interaction  \n \nTo introduce students to the study of HCI by examining different design approaches and evaluation methods and to encourage a systematic approach to the design and evaluation of the user interface in contemporary computing systems. Particular attention is paid to the use of prototyping as an aid to interface development through iterative evaluation.\n \n   \n \n This module is part of the Human Computer Interaction theme in The School of Computer Science. This module aims to teach an understanding of people's interactions with technology and how to apply this knowledge in the design of usable interactive computer systems. The module will introduce the concept of usability and will examine different design approaches and evaluation methods. Specifically, this module will cover an understanding of different styles of interaction with technology, an analysis of user needs, design standards, low fidelity prototyping techniques and a comparison of evaluation techniques. \n \n   Knowledge and Understanding:   Understanding the importance of considering the human in the design of interactive computer systems. \t Knowledge of different design and evaluation methods. \t Understanding of the issues and problems facing the interface designer and an appreciation of the relationship between physical and software constraints in device design.  Intellectual Skills:   Think independently while giving due weight to the arguments of others. \t Provide reasoned arguments for and against different solutions.  Professional Skills:  Understand design guidelines and relate them to specific interface requirements. \t Evaluate approaches to the design and evaluation of interfaces and select those that are fit for purpose within a given domain.  Transferable Skills:   Solve problems. \t Retrieve information from appropriate sources (e.g. learning resource centre, internet etc). ", "Malware Analysis  \n \nStudents will acquire knowledge of relevant system internals, and experience in using various malware analysis tools. Students will also acquire insight into emerging trends in malware design, including efforts to deter analysis.\n \n   \n \n This module looks at the practice of Malware Analysis, looking at how to analyse malicious software to understand how it works, how to identify it, and how to defeat or eliminate it. &nbsp;We will look at how to setup a safe environment in which to analyse Malware, as well as exploring both static and dynamic malware analysis. Although malware takes many forms, the focus of this course will primarily be on executable binaries, covering both object file formats, but also the use of tools such as debuggers, virtual machines, and disassemblers to explore them. Obfuscation and packing schemes will be discussed, along with various issues related to Windows internals.  The course will be \u2018hands on\u2019, based around the book, \u2018Practical Malware Analysis\u2019 by Michael Sikorski, and Andrew Honig. Students will be encouraged to (safely) practice the skills they are taught. &nbsp; \n \n  Knowledge and Understanding\u2022 &nbsp; &nbsp;An understanding of the issues associated with malware analysis. \u2022 &nbsp; &nbsp;An understanding of the relevant systems internals exploited by malware. \u2022 &nbsp; &nbsp;An appreciation of the strengths and weaknesses of available security techniques. \u2022 &nbsp; &nbsp;Explain the difference between static and dynamic analysis in reverse engineering software. &nbsp;Intellectual Skills\u2022 &nbsp; &nbsp;The ability to think independently while giving due weight to the arguments of others. \u2022 &nbsp; &nbsp;The ability to understand complex security issues and relate them to specific situations. \u2022 &nbsp; &nbsp;The ability to perform static and dynamic analysis of a computer program to understand and document its function.&nbsp; \u2022 &nbsp; &nbsp;The ability to setup a safe environment for analysing malicious software. \u2022 &nbsp; &nbsp;Ability to relate theory to its real-world applications Professional Skills \u2022 &nbsp; &nbsp;Enhanced systems programming skills. \u2022 &nbsp; &nbsp;The ability to evaluate and select appropriate reverse engineering techniques. &nbsp; Transferable Skills \u2022 &nbsp; &nbsp;An enhanced ability to produce detailed reports.Intellectual Skills\u2022 &nbsp; &nbsp;The ability to think independently while giving due weight to the arguments of others. \u2022 &nbsp; &nbsp;The ability to understand complex security issues and relate them to specific situations. \u2022 &nbsp; &nbsp;The ability to perform static and dynamic analysis of a computer program to understand and document its function.&nbsp; \u2022 &nbsp; &nbsp;The ability to setup a safe environment for analysing malicious software. \u2022 &nbsp; &nbsp;Ability to relate theory to its real-world applications &nbsp;Professional Skills \u2022 &nbsp; &nbsp;Enhanced systems programming skills. \u2022 &nbsp; &nbsp;The ability to evaluate and select appropriate reverse engineering techniques. &nbsp;Transferable Skills \u2022 &nbsp; &nbsp;An enhanced ability to produce detailed reports. &nbsp;", "Industrial Experience  \n \nThe aim of the module is to accredit students that have experienced industry work involving independent self-management, proactive work and the ethical application of their knowledge and skills in areal worldcontext. Students collect evidence of their competence that they will use in their assessedportfolio, andmust reflect on their developed knowledge and understanding of applied software engineering practices in relation to other taught Software Engineering principles taught in their course.\n \n   \n \n Students taking part in activities relating to industrial experience in a Computer Science or Software Engineering enterprise may obtain academic credit for them. Activities will be related to demonstration of involvement in development of complex software in a team situation, subject to quality control procedures of an industrial or business practice. The module, therefore, accredits reflection on practical real-world experience of Software Engineering that cannot be taught with normal university lectures and assessments. The nature of the activities undertaken will be subject to the approval of the module convenor before acceptance on the module. Students must have gained their industry software experience prior to enrolling on the module. \n \n   Transferable, work-related and employability skills:  - knowledge of the language and culture of working environments; - career planning, including occupational awareness and judgement, awareness of work-related personal values, interests and skills, application and selection process skills; - skills and competences specific to Computer Science related roles; - practical skills appropriate to a discipline or profession; - professional communication skills (oral and written). Higher Skills:  - critical thinking and analysis; - project and personal management skills.&nbsp;", "CS362 - Work Based Learning 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, to record experience gained in the workplace and to develop their broader professional skills. This is achieved by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet appropriate professional competencies. Participants will undertake the following. weekly journalling, providing the opportunity to capture their weekly work activities at a high level.  self-assessment, where they will review their performance with respect to a defined set of competencies.  produce personal development plans that contain objectives to progress competencies identified as requiring development.  create evidence, in the form of short written task summaries, that they meet a set of competencies defined by a recognised professional body and clearly link evidence with competencies.  On completion of this class, participants should be able to: demonstrate reflective work practices.  demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.  identify areas and strategies for self-improvement within a professional context. ", "Computer Security  \n \nTo look at a number of security issues associated with computers and computer networks. Students will gain understanding of solutions for avoiding security breaches and other compromises.\n \n   \n \n Spending four hours a week in lectures and computer classes, you will cover the following topics: security of the computer; security management; human aspects of computer security; network security; internet security; software and hardware security; and the application of cryptography in secure systems. \n \n  Knowledge and Understanding\u2022&nbsp;&nbsp; &nbsp;An understanding of security issues associated with computers and computer networks. \u2022&nbsp;&nbsp; &nbsp;An appreciation of the strengths and weaknesses of available security techniques. \u2022&nbsp;&nbsp; &nbsp;Experience of the use of such techniques in a protected networked environment. &nbsp;Intellectual Skills\u2022&nbsp;&nbsp; &nbsp;The ability to think independently while giving due weight to the arguments of others. \u2022&nbsp;&nbsp; &nbsp;The ability to understand complex security issues and relate them to specific situations. &nbsp;Professional Skills\u2022&nbsp;&nbsp; &nbsp;Enhanced systems programming skills. \u2022&nbsp;&nbsp; &nbsp;The ability to evaluate and select appropriate security techniques. &nbsp;Transferable Skills\u2022&nbsp;&nbsp; &nbsp;An enhanced ability to produce detailed reports.", "Introduction to Cyber Physical Systems  \n \nThe aim of this module is to provide a broad understanding of the fundamental theories and techniques and introductory practical skills of cyber physical systems.Given that this is an emerging area, the module will use up-to-date literature to underpin the concepts and present the state of the art in developing physical and computational components and the intersection of these.\n \n   \n \n In this module you will gain a broad overview of the fundamental theories and techniques of cyber-physical systems. You will explore the architecture of cyber physical systems as a network of interacting elements with physical input and output and intelligent mechanisms, and develop an understanding of how to increase their adaptability, autonomy, efficiency, reliability, safety, and usability in different contexts of use.&nbsp; You will explore the various potential applications of cyber-physical systems including autonomous automotive systems, assistive robots to support health and well-being, medical monitoring and process control systems.  This is an interdisciplinary subject area and as such you will gain knowledge and understanding of the following topics: - Cyber-physical system architectures, standards and platforms &nbsp;(including design tools and methodologies that support scalability and complexity management through modularity) - Internet-of-Things networks, sensors and smart devices (including understanding state-of-the art technologies that are being used in various application areas)&nbsp; - Sensor data processing, modelling and management&nbsp; (including an overview of methods and algorithms for real-time feedback systems) - Pervasive computing and real-time automation and control (how sensor data can be used to generate control signals to actuators of the physical components of the cyber-physical system) - Principles of cyber security (Overview of aspects such as resilience, privacy, malicious attacks, as well as issues relating to safety and hazard analysis) - Application domains (eg. Industry 4.0, Healthcare, Robotics and Autonomous Systems \u2013 including Assistive Robots and Autonomous Automotive Systems, Smart Homes and Building Energy Management) \n \n   Knowledge and Understanding:  Students will acquire a broad understanding of the fundamental theories and techniques of cyber physical systems, including the various potential applications of cyber-physical systems in area such as healthcare, autonomous automotive systems, smart home and building automation and energy management. Intellectual Skills:  Students will learn to apply concepts, theories and techniques to critically evaluate and develop the various components of Cyber-Physical Systems. Professional/Practical Skills:  Students will learn practical design and implementation skills and techniques to develop working Cyber-Physical Systems, particularly gaining hands-on skills with integrating Internet of Things sensors and actuators in demonstrator applications. Transferable/Key Skills:  Programming, problem solving.", "Distributed Systems  \n \nTo teach students about the nature and applications of distributed systems, how distributed systems are constructed and the key characteristics and challenges of distributed systems.\n \n   \n \n This module is part of the Operating Systems and Networks theme. This module covers the following topics: overview of parallel and distributed computing; applications of distributed systems; fundamental concepts of distributed systems (processes and message passing, naming and discovery, fault tolerance and partial failure, consistency and cacheing, security); reliable network communication; distributed system design approaches (direct vs indirect communication, client-server vs peer-to-peer, stateful vs stateless interfaces); introduction to distributed data management; introduction to distributed algorithms. \n \n   Intellectual Skills  Think independently while giving due weight to the arguments of others. \t Understand complex ideas and relate them to specific problems or questions  Professional Skills  Evaluate approaches, technologies and algorithms for distributed systems, and select those which are fit for purpose within a given domain.  Transferable Skills  Solve problems. \t Retrieve information from appropriate resources (eg. learning resource centre, internet, etc.). ", "Compilers  \n \nTo provide an understanding of how compilers work and how they are constructed.\n \n   \n \n You\u2019ll examine aspects of language and compiler design by looking at the techniques and tools that are used to construct compilers for high level programming languages. Topics covered include: parsing; types and type systems; run-time organisation; memory management; code generation; and optimisation. You\u2019ll spend around four hours each week in lectures and computer classes for this module. \n \n    Knowledge and Understanding  \u2022&nbsp;&nbsp; &nbsp;Knowledge of language and compiler design; \u2022&nbsp;&nbsp; &nbsp;Understanding of the problems to be faced and the techniques and tools which may be used in the construction of medium sized programs. &nbsp;  Intellectual Skills  \u2022&nbsp;&nbsp; &nbsp;The ability to define and construct syntax-directed translation schemes and specifications; \u2022&nbsp;&nbsp; &nbsp;Understand complex ideas and relate them to specific problems or questions; \u2022&nbsp;&nbsp; &nbsp;The ability to gather information on and analyse the structure of medium sized computer programs. &nbsp;  Professional Skills  \u2022&nbsp;&nbsp; &nbsp;Programming in various paradigms; \u2022&nbsp;&nbsp; &nbsp;Comprehend and apply software engineering methodologies, in particular capturing design through formal specifications and deriving implementations from those; \u2022&nbsp;&nbsp; &nbsp;Evaluate available tools, applications, algorithms and data structures, and select those that are fit for purpose within a given domain, in particular tools for syntax analysis and syntax-directed translation. &nbsp;  Transferable Skills:  \u2022&nbsp;&nbsp; &nbsp;The ability to use mathematics to solve problems and write detailed reports.", "Horizon CDT Planning Your Thesis  \n \nThis module encourages the students to consolidate their PhD work to date and also provide ongoing peer-to-peer support to mitigate the risks of isolation associated with PhD research. Module activities will result in reflection on best multidisciplinary doctoral practice, the production of a research roadmap, and an on-going reflective planning document.\n \n   \n \n This Planning Your Thesis module is intended for year 3 of the CDT training programme. It intends to support students look ahead as they enter a period of sustained data collection and analysis in their individual PhD programmes. This module encourages the students to consolidate their PhD work to date and provide ongoing peer-to-peer support, to mitigate the risks of isolation associated with PhD research. The module begins with a workshop also attended by the current CDT year 4 cohort, where the two cohorts collectively reflect on best multidisciplinary doctoral practice and produce research roadmaps. This is followed by a series of regular CDT year 3 gatherings for staff \u2013 and student \u2013 defined activities. \n \n  Knowledge and UnderstandingKnowledge and Understanding \u2022&nbsp;&nbsp; &nbsp;Awareness and key understanding of multidisciplinary doctoral practice and structuring of an interdisciplinary PhD Thesis. &nbsp;Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;Development of a personal research roadmap.Professional Practical Skills&nbsp; \u2022&nbsp;&nbsp; &nbsp;Think independently while giving due weight to the arguments and feedback of peers; understand complex ideas and relate them to specific problems or questions. &nbsp;Transferable Skills \u2022&nbsp;&nbsp; &nbsp;Critically analyse and offer constructive feedback to peers PhD thesis planning. &nbsp;", "Databases and Interfaces  \n \nTo provide students with a general introduction to the theory and practice of database systems.To enable students to gain experience with a modern database system through the use of the SQL language.To give an understanding of the structure and workings of database systems and provide some insight into recent developments.To enable students to gain experience with design and implementation of GUI interfaces within a database environment.\n \n   \n \n Databases are everywhere and we interact with many different databases every day, using the web, using electronic calendars, diaries or timetables, making appointments, searching for contact details, shopping online, looking up directions, and many more things. These databases need to be both easy to use and fast. This module considers both the structure of databases, including how to make them fast, efficient and reliable, and the appropriate user interfaces which will make them easy to interact with for users. You will start by looking at how to design a database, gaining an understanding of the standard features that management systems provide and how you can best utilise them and then develop an interactive application to access your database. Throughout the lectures and computing sessions you will learn how to design and implement systems using a standard database management system, web technologies and GUI interfaces through practical programming/system examples. You will spend around three hours per week in lectures and two hours per week in organised computer labs studying for this module, and will be expected to spend additional time practising and completing your coursework. \n \n   Knowledge and Understanding  Ability to understand and use SQL; \t An understanding of the ANSI/SPARC and relational models of database systems.  Intellectual Skills  Basic knowledge of the mathematics underlying relational database systems; \t Ability to design and implement database systems; \t Ability to design and implement a simple Web GUI.  Professional Skills:  The use of SQL for database specification and manipulation; \t The use of web technologies and GUI interfaces for database front-end development.  Transferable Skills:  Understanding of the use and administration of database systems; \t Understanding the use of web technologies and GUI interfaces. ", "CS276 - Software Engineering Principles for Businesss The aim of the class is to further the participants\u2019 skills and experience in the design and development of large-scale software systems.  Software process and software process models: Predictive (e.g., waterfall) vs adaptive (e.g., iterative waterfall, spiral and agile methods).  Requirements Engineering: Elicitation, analysis, documentation and validation.  Object-Oriented Goals and Principles: Abstraction, Encapsulation, Inheritance, Coupling, Cohesion, Refactoring and Clean Code.  Object-Oriented Design: UML modelling (e.g., class and use case diagrams) and other Object-Oriented representation techniques (e.g., CRC Cards).  On completion of this class, participants should be able to: understand software processes and commonly used software process models.  understand requirements engineering and identifying functional and non-functional requirements.  identify the appropriate stakeholders and creating user stories.  model the requirements of a system using UML (e.g. use cases and class diagrams).  work as part of a team to analyse the requirements of a software system. ", "CS272 - Introduction to Computer Networks The aim of this class is to equip participants with knowledge and understanding of computer networking. Participants will gain a practical understanding of the topic via assessed programming assignments. The class aims to provide a good grounding in the basics of computer networking. It provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.  It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.  Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas: The role of web services for tactical battlefield communications  Adaptive, user experience driven video streaming in 5G mobile networks  Autonomous network management in virtualised, software defined networks  On completion of this class, participants will be able to: demonstrate a broad knowledge of the area of computer networking and its terminology.  demonstrate an understanding of the operation of a range of networking protocols and devices.  demonstrate an understanding of the TCP/IP model.  demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks). ", "CS259 - Quantitative Methods in Computer Science The class will teach the quantitative and numerical methods needed through practical examples. Teaching these methods through practical examples will both show the relevance of the methods being taught and strengthen the programming skills of the students in this important area.To teach the quantitative and numerical methods that underpin modern Computer Science, such as (but not restricted to) Artificial Intelligence and Data Analytics. The class will also provide students with the numerical methods needed to perform quantitative evaluations of algorithms and software.L Obj 1 : to understand and use linear algebra techniques as used in modern AI and data analytics: scalars, vectors, matrices, tensorsL Obj 2 : to understand multivariate calculus techniques as used in modern AI and data analytics: derivatives, gradients, integrals, convex optimisationL Obj 3 : to understand and apply probability theory as used in modern AI and data analytics: randomness, probability distributions, variance and expectation, expected valueL Obj 4 : understand and apply statistical techniques as used modern AI, data analytics and quantitative evaluation of software and algorithms: basic data analysis, significance tests, basic Bayesian statistics 1. Linear algebra notation is used in Machine Learning to describe the parameters and structure of different machine learning algorithms. This makes linear algebra a necessity to understand how neural networks are put together and how they are operating. This part of the course will cover: Scalars, Vectors, Matrices, Tensors  Matrix Norms  Special Matrices and Vectors  Eigenvalues and Eigenvectors 2. Multivariate calculus is used to supplement the learning part of machine learning. It is what is used to learn from examples, update the parameters of different models and improve the performance. This part of the course will cover: Derivatives  Integrals  Gradients  Differential Operators  Convex Optimization 3. Probability: probability used to make assumptions about the underlying data when we are designing these deep learning or AI algorithms. It is important for us to understand the key probability distributions, and we will cover it in depth in this course. This part of the course will cover: Elements of Probability  Random Variables  Distributions  Variance and Expectation  Special Random Variables 4. Statistics: statistical methods are used in AI to analyse data and quantify the performance of agents.&nbsp; &nbsp; Statistical concepts: mean, standard deviation, variance, confidence intervals.&nbsp; &nbsp; Statistical methods for data analytics&nbsp; &nbsp; Use of statistics in performance measurement&nbsp; &nbsp; Introduction to Bayesian methods L Out 1 : ability to apply basic data analysis to a range of problems in Computer Science and Software Engineering.L Out 2:L Out 3:L Out 4:", "Unix Systems module (CS11005) In this module, you will have the opportunity to delve into the Unix operating system, which is a widely used computing system across industry.By exploring Unix, you will be able to catch a first glance at how an operating system works. It will also teach you valuable skills for your academic and professional career, such as automating tasks using Bash and proficient command-line usage.The module provides a solid foundation in these Unix principles and operations, enabling you to become a more effective and efficient programmer.   study the basic principles and operations of Unix \n learn about the Unix command-line interface, file system, permissions, and processes \n automate tasks using Bash scripting  demonstrate a deep understanding of Unix and its core features \n navigate the command-line interface with proficiency \n use common Unix tools professionally \n be able to develop scripts and programs in a Unix-like environment ", "Front End Website Development module (CS11001) Being able to create modern web experiences is an important part of every Computer Scientist's toolbox.In this module, you will explore how to create front-ends for web experiences. These are the parts of web applications that users interact with directly. They encompass the layout, design, and interactivity of a page.Hypertext Markup Language (HTML) and Cascading Style Sheets (CSS) form the foundation of webpages and are used to create, structure, and style content. Together with knowledge of design principles, they allow you to create rich user experiences on the web.Learning about these core web technologies enables you to develop a better understanding of how websites work and how you can create your own.   learn about core technologies used to create web experiences \n explore HTML and Semantic Web Elements to create and structure web content \n study Cascading Style Sheets (CSS) to format webpages \n work with CSS libraries, such as Bootstrap, to streamline the website design process \n study important design principles such as contrast, repetition, alignment, and proximity \n explore the historical and social aspects of the web  understand and use web-based programming languages \n show your ability to use core web technologies \n reflect on historical, social, and potential future web developments \n consider legal, ethical, social, and accessibility issues in the design of webpages ", "Computing and Society module (CS12003) Computing technologies play an increasingly large role in modern society. It is important to understand the implications the use of technology has on society.In this module, you will learn how to analyse the use of computing technologies in society by working with various case studies.This will provide you with a solid foundation for exploring the relationship between computing technology and those that use computers daily.   explore how computing has developed, from its origins to current applications \n learn about different models of society \n investigate how computing has been integrated into society \n study how computing technology can impact people in various contexts \n explore how computing can benefit society and where it can go wrong \n consider the ethical implications of the use of different technologies in society  show a deep understanding of the use and impact of computing technology in society \n demonstrate your ability to analyse the use of computing technologies and their impact on different groups of people ", "Professional Skills in Computer Science module (CS11004) Being able to work successfully as part of a team is an important skill for every developer.Many tools exist to help teams succeed and work together more efficiently. It is important for developers to know how to use these tools and to be able to assess their usage from a practical and ethical view.In this module, you will explore industry-standard tools and software that are used by development teams to successfully work together.   learn how groups are formed, developed and how to work in them \n develop active listening skills \n learn about version control and study the stages of Git and Git Flow \n learn how to write reports using LaTeX \n explore how to use AI systems and how they can be used to improve software development processes  work successfully as part of a software development team \n utilise version control to collaborate on projects \n appropriately and ethically use AI systems ", "Software Engineering module (CS21005) In this module, you will gain a comprehensive understanding of important software engineering principles and practices. A particular focus is put on software specification and design techniques.Through practical assignments and projects, you will develop the skills necessary to apply these concepts in real-world scenarios.   learn about fundamental principles of software engineering, including standard practices and notations \n study software design principles such as abstraction, modularity, and separation of concerns \n apply software specification and design methods in projects \n learn about software design quality, how to measure and recognise it \n learn how to assess and address qualitative aspects in software engineering, such as maintainability, scalability, and usability \n explore tools to aid in software engineering processes, including design software and version control systems  demonstrate your understanding of software engineering processes \n use industry-standard notation and practices for software engineering \n apply software design principles to create high-quality software designs \n assess the qualitative aspects of software engineering and address them correctly \n appropriately select tools to aid in software engineering processes ", "Constraint Programming (M) COMPSCI5006   We cover Constraint Programming and its use in solving a number of combinatorial problems.  We also c  over the underlying technology, and related combinatorial optimisation approaches.     To enable students to implement constraint programming solutions to a number of combinatorial problems using a state of the art constraint programming toolkit.   To give students a critical appreciation of the fundamental concepts of constraint satisfaction and constraint programming  , and the ability to compare to related search approaches.   To give the student an appreciation of, and exposure to, commer  ci  al applications and the research directions in constraint programming.   To understand the basic mechanics of a constraint programming toolkit (such that they might implement such a toolkit).     By the end of this course students will be able to:    1: Model complex problems (such as scheduling problems, design and configuration problems) as constraint programs, using a state of the art constraint programming toolkit;    2: Implement the algorithms for achieving constraint propagation, and critically appreciate the costs and benefits of different levels of consistency;    3: Demonstrate extensive, detailed and critical knowledge and understanding of constraint satisfactio  n  &nbsp;from a theoretical point of view  , and be able to compare to other combinatorial approaches  ;    4: Implement, the search algorithms typically used in constraint programming;    5: Use various variable and value ordering heuristics;    6: Discuss current issues and research direction in constraint programming.  ", "CS119 - Problem Solving The aim of the class is to provide participants with an understanding of how to decompose a problem into its component parts and abstract these parts to provide a solution. This skill is vital for computer programming.  Algorithms and Problems: What are problems? What properties do algorithms have to have?&nbsp;  Categorise computer programs in terms of their inputs, outputs and process.&nbsp;  Break down problems using stepwise refinement. Learn how to communicate algorithms using pseudo code.&nbsp;  Design of algorithms to solve problems: Creation of test cases; Think like a computer; Flowcharts/pseudo code.  After completing this class participants will be able to:&nbsp; decompose a software engineering problem into its component parts.&nbsp;  abstract or generalise the constituent parts of a problem using pseudo-code/structured English and flowcharts.&nbsp;  demonstrate their understanding of algorithms.&nbsp;  create, test and communicate algorithms to solve problems.&nbsp;  demonstrate an understanding of the relative merits of top down and bottom up approaches to software design.&nbsp; ", "Horizon CDT Summer School Reflection and Participation  \n \nTo successfully undertake a summer school or doctoral consortium/colloquium\n \n   \n \n This module allows students who have successfully undertaken a summer school or doctoral consortium/colloquium to obtain 10 credits in recognition of this research activity. After the event, students should prepare an 800-1000 word description of the summer school or doctoral consortium/colloquium for publication online. The report should be accompanied by at least one visual image of the event or an associated concept. Intended audience: a readership of other postgraduate researchers, whose own research and development it might inform. This module will normally be completed by year 2 or year 3 students, but may be completed by students who have undertaken a summer school or doctoral consortium/colloquium in year 1. \n \n  Students who complete this module will: Be able to demonstrate their ability to participate in a cross programme doctoral event", "Fundamentals of Artificial Intelligence  \n \nTo introduce students to Artificial Intelligence, its history and some key AI techniques.\n \n   \n \n Through a two hour lecture once a week, this module gives you a broad overview of the fundamental theories and techniques of Artificial Intelligence (Al). You will explore how computers can produce intelligent behaviour, and will consider topics such as the history of Al, search techniques, machine learning, game playing techniques, philosophical issues, and knowledge representation and reasoning, etc. \n \n   Knowledge and Understanding:  Knowledge of key AI techniques.  Intellectual Skills:  The ability to think independently while giving due weight to the arguments of others; \t The ability to analyse algorithms.  Professional Skills:  The ability to evaluate available AI techniques and select those appropriate to a given problem.  Transferable Skills:  The ability to solve problems and communicate effectively in writing. ", "CS107 - Fundamentals of Computer Systems To further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.  Introduction to instruction set architecture, micro-architecture and system architecture.  Processor instruction set architecture: instruction types and formats, register sets, addressing modes.  Processor structures: memory-to-register architectures; load/store architectures; overview of Flynn\u2019s classification of computer architectures.  The relationship between low-level and high-level programming languages.  Instruction sequencing, flow-of-control, subroutine call and return mechanisms.  Low-level architectural support for high-level languages.  Low-level architectural support for operating systems.  Low-level architectural support for concurrency.  Memory: types of memory, overview of the memory hierarchy.  Input/Output: types of I/O; overview of common I/O devices and interfaces.  Networks: types of network; overview of common network standards, protocols, and interfaces.  Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments  On completion of the class, a student should be able to: Demonstrate their knowledge of data/number/information representations and the limitations of such representations.  Appreciate how a CPU may be constructed from combinational and sequential logic circuits.  Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.  Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.  Appreciate how conditional operations are implemented at the machine level.  Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.  Appreciate how an ISA has an impact on high-level languages and the design of compilers.  Understand the basic principles of operation of the memory, I/O and network subsystems of a typical computer.  Appreciate how future developments in computer systems may be influenced by current trends and technologies. ", "Cyber Security  Content and aims \n                 \n                    Module overview\n                  Computer security breaches that affect affect computer data systems are becoming increasingly frequent. Many of these breaches are due to a lack of understanding if the implications of user actions. Most of them are easily preventable if proper security principles are effectively followed. This module will present a set of core security principles to follow and will analyse a number of real life security failures that demonstrate how failure to follow these principles caused the breach. The module will highlight the international nature of cyber-security and how a person or organisation may come under cyber attack from anywhere in the world and at any time. The module is designed to prepare you for a future in which computer security plays a significant role in using and designing computer based networked data systems. \n\n &nbsp; \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  Apply the core principles of computer security to design secure computer systems   Critically evaluate the effectiveness of a system and highlight significant security flaws   Critically analyse security failures, highlight the cause of the failures and show how to properly secure them    ", "CS260 - Functional Thinking To introduce the core concepts and methods of modern functional programming, serving as an introduction to our third year class on this topic.Learning Obj 1 : to understand basic functional programming concepts: inductive datatypes, pattern matching, structural recursionLearning Obj 2 : to understand how to transform and interpret languages of expressionsLearning Obj 3 : to understand functional data structures, e.g. search treesLearning Obj 4 : to understand abstraction of type parameters and common interfaces - functions and types; functional composition- inductive datatypes, pattern matching, structural recursion- transforming and interpreting languages of expressions- functional data structures, e.g., search trees- representation of simple computational effects, e.g. failure by Maybe and choice by lists- abstraction of type parameters (parametric polymorphism)- abstraction of common interfaces, e.g., Eq, Ord, Monoid ", "Mathematics for Computer Scientists 2  \n \nAcquire basic mathematical skills and concepts relevant for Computer Science students.\n \n   \n \n You'll cover the following basic concepts in mathematics which are of relevance to the development of computer software. Topics which will be covered include: linear algebra and calculus. You'll spend around three hours per week in lectures and tutorials for this module. \n \n   Knowledge and Understanding:&nbsp;  Understanding of basic mathematical concepts, definitions and notation. &nbsp; Intellectual Skills&nbsp;  The ability to understand and apply simple logical reasoning.&nbsp;  Transferable Skills  The ability to use mathematics to solve problems.&nbsp; ", "CS423 - Cyber Security The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice. By the end of the module students should have developed a security mindset which allows them to consider key elements of cyber security as they apply to a range of computer systems.&nbsp; Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp; After completing this class participants will be able to:&nbsp; Identify and critically assess threats for a given context.&nbsp;  Evaluate an existing or proposed system in terms of potential vulnerabilities and argue appropriate mitigation techniques for a given context.&nbsp;  Design and implement an aspect of technical security which makes use of appropriate techniques.&nbsp;  Compare and contrast aspects of managing cyber security such as cyber security frameworks. ", "Computability  \n \nThe overall aim of the course is to provide an understanding of the concepts of computability and computational complexity.In particular, courseobjectives are as follows: To provide an appreciation of the many attempts that have been made to define the class of computable functions and to indicate that all the sensible attempts to do this have been shown to be equivalent. To appreciate impossibility proofs based upon diagonalisation arguments. To introduce the fact that there are problems that cannot possibly be solved on a computer. To show how, apparently different, computable problems of practical importanceare related in respect of their algorithmic complexity and how this relates to the design and choices of algorithms for solving them.\n \n   \n \n You will begin by considering the attempts to characterise the problems that can theoretically be solved by physically possible computational processes, along with the practical implications. You will then consider the area of complexity theory, looking at&nbsp;whether or not&nbsp;problems can be solved under limitations on resources such as time or space. You will examine the classes P and NP, and how to show problems are NP-complete. You will also consider other practically important classes such as: PSPACE, and its relevance to adversarial games, ontologies, and the semantic web; and&nbsp;also&nbsp;complexity classes such as NC relevant to understanding of parallel computation and the limitations of its effectiveness. You will look at the practical implications of computability and complexity in the context of real-world problems, such as vehicle routing, scheduling, timetabling, and machine learning.&nbsp;&nbsp; \n \n   Knowledge and Understanding  To understand the theory of computation via mathematical methods.  Intellectual Skills  To apply and deploy mathematical ability, practices and tools; \t To understand and logically evaluate the problems in computability and complexity; \t To think independently about the issues while giving due weight to previous work; \t To understand the ideas of the theory of computability and complexity and relate them to particular problems.  Professional Skills  To extend their own abilities by specialising or generalising from their previous knowledge.  Transferable Skills  The ability to solve problems using mathematics, by consulting external sources if necessary. ", "CS120 - Introduction to Software Engineering The aim of this class is to provide a high-level overview of the software engineering lifecycle, software development processes, anatomy of software systems, testing principles and practices, maintenance and evolution.  High level overview of the software lifecycle from initial product conception through to retiral.&nbsp;  Software development processes (waterfall to agile to DevOps etc. and including project management).&nbsp;  Anatomy of a software system. High-level overview of a system (classes, modules, test cases, data files, etc.) and how these relate to each other and are managed (configuration/version control, e.g. Git) and built into a system (build tools like maven etc.).&nbsp;  Testing Principles. Role and purpose of testing. Testing levels (acceptance, system, integration etc.). Principles of designing tests.&nbsp;  Testing Practices. Running tests, testing tools, and handling test results. Filing bug reports.&nbsp;  Maintenance and Evolution. Concept of software maintenance. Filing and responding to feature requests. Regression testing. Making and committing changes. Continuous integration.&nbsp;  After completing this class participants will be able to:&nbsp; understand the software development lifecycle and the role that software development plays in their organisation.&nbsp;  understand the activities involved in and the differences between the major software development paradigms.&nbsp;  demonstrate an appreciation of the main components of a software system and the tools and techniques used to manage these.&nbsp;  understand the role and purpose of testing and the basic principles of test design.&nbsp;  understand the concepts and components of the continuous integration/continuous delivery (CI/CD) pipeline and how these are implemented in their organisation. ", "Artificial Intelligence Methods (10cr)  \n \nTo build on the first year AI module and further an appreciation of various AI techniques.\n \n   \n \n This module builds on the first year Fundamentals of AI, which covers the ACM learning outcomes, and introduces new areas. The emphasis is on building on the AI research strengths in the School. As a launchpad, it gives brief introductions to topics in AI, including fuzzy logic and modern search techniques such as, Iterated Local Search, Tabu Search, Simulated Annealing, Evolutionary Algorithms, Genetic Algorithms and Hyper-heuristics, etc. \n \n   Knowledge and Understanding:   Ability to describe some advanced AI techniques and have a good understanding of AI techniques.  Intellectual Skills:   Understand and describe various AI techniques and where they might be applied.  Professional Skills:   The ability to understand available AI techniques and select those appropriate to a given situation.  Transferable Skills:   Problem solving, ability to compare and contrast AI techniques. ", "Horizon CDT Enabling Technologies  \n \nThe Enabling Technologies module aims to provide students with a broad appreciation of the enabling technologies that underpin digital identity and personal data via an intensive series of topic lectures and hands on workshops led by domain experts. Details for specific topics will be available on Moodle.\n \n   \n \n The Enabling Technologies module aims to provide students with a broad appreciation of the enabling technologies that underpin digital identity and personal data, so as to: - sensitise them to possible design approaches and issues for their subsequent research; - establish a common language across the cohort; - develop their skills in analysing potential digital identity solutions across a variety of sectors of the Digital Economy.  The module combines topics from five key areas (Digital Footprint, Data Capture, Data Interpretation, Digital Architectures and Interaction), which students explore through a purpose-built curriculum led by topic specialists for each area. \n \n  \u2022&nbsp;Appreciate the scope of contemporary and developing enabling technologies.\u2022&nbsp;Awareness and key understanding of enabling technologies in the digital identity and personal data space.\u2022&nbsp;Applied research skills in addressing real world problems and challenges using key enabling technologies.\u2022&nbsp;Synthesis new skills and knowledge to identify how the breadth of enabling technologies relate to their PhD topic and research activities.\u2022&nbsp;Broad understanding of Digital Identity and Digital Economy research field and its underlying technologies.\u2022&nbsp;Experience in focused individual work.\u2022&nbsp;Skill development in core technology areas, the application of technologies and presentation skills.", "CS217 - Agile Software Engineering in Practice The class will enable students to gain practical experience of agile software delivery and developing for the cloud. Students will learn how great teams work together and how robust dynamic software is created in practice.&nbsp; It will provide them with valuable insights into these important areas, knowledge of cutting-edge development processes, and the opportunity to enhance their software development skills. Topics covered will include the following. Introduction to agile development techniques and planning.  Test-Driven Development and group dynamics.  Developer tools and the software development lifecycle.  Continuous integration and continuous deployment: concepts, benefits, tools.  Cloud introduction  Financial trading: what it means for software developers.  Cloud Security: cloud for enterprise.  On completion of the class, a student should: Gain knowledge and understanding of agile software development.  Gain an understanding of developing software for the cloud.  Be able to design, implement and test a software application.  Be able to reflect on the suitability of agile development practices for modern software development environments.  Be able to critically assess the suitability of software engineering practices for&nbsp; complex, large scale problem domains.  Demonstrate an enhanced and broadened programming knowledge and ability.  Demonstrate the ability to engage in development practices used within industry.  Present and communicate effectively on work carried out to team members and others.  Work effectively as a member of a team to build a software-based solution to a problem. ", "Collaboration and Communication Technologies Development Project  \n \nThis module aims to give students the opportunity to apply their understanding of Collaborative and Communication Technology (CCT) theories, learned from the COMP3010 co-requisite, to the development of software. The coursework allows students to develop their software development skills and put CCT theory into practice.\n \n   \n \n In this module you are given the opportunity to combine your developing CCT knowledge with your programming abilities. You have the whole semester to build a working collaborative project, optionally in a team, and produce a report on how it supports collaboration according to CCT theory. The primary focus is on building a working application, and so existing strong programming ability is required to take this co-requisite with COMP3010. \n \n   Knowledge and Understanding  How CCT theory translates to practical implications for software. Intellectual Skills  How to implement software collaborative software, and practical experience of applying theory. Professional Skills  How to support communication in groups. Transferable Skills  How to communicate the benefits of design decisions both within software and in a report. Optionally, how to develop software in a team, if choosing to do so.", "Software Specification  \n \nThis module aims to give students an understanding of the tools and techniques which may be used to design commercial software, manage software development projects and document software to a professional standard. On completion of this module, students will be able to effectively analyse requirements for a range of systems, using appropriate tools and techniques; use project management tools effectively and understand soft issues of project management; document software using appropriate tools.\n \n   \n \n Building on the material presented in the Foundations of Software Engineering module, you will cover two main aspects of the software engineering process in depth: requirements and design. This will cover modern approaches to large scale requirements and engineering and specification, and approaches to systems and architectural design. You will spend around two hours per week in lectures and one hour in labs for practical experience for this module. \n \n  Knowledge and Understanding\u2022&nbsp;&nbsp; &nbsp;Knowledge of the practice of constructing large systems. \u2022&nbsp;&nbsp; &nbsp;Understanding of the strengths and weaknesses of system specification, design and implementation tools and resources. &nbsp; Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;The ability to effectively analyse requirements for a range of systems, using appropriate tools and techniques. Professional Skills \u2022&nbsp;&nbsp; &nbsp;The ability to work effectively and ethically with users. &nbsp; Transferable Skills \u2022&nbsp;&nbsp; &nbsp;The ability to solve hardware/software analysis problems and write detailed reports on the solutions adopted. \u2022&nbsp;&nbsp; &nbsp;The ability to use project management tools effectively and understand soft issues of project management. &nbsp;", "Algorithms Data Structures and Efficiency  \n \nThe aim of this module is to develop mathematical and formal reasoning skills necessary to reason about software systems, and in particular their efficiency. To gain understanding of the issues involved in designing a program for a specific task, and a good working knowledge of some common algorithms and data structures.\n \n   \n \n This module covers important aspects of algorithms and data structures, namely their general principles and efficiency. To address the issue of efficiency we cover the use of mathematical descriptions of the computational resources needed to support algorithm design decisions. You'll study topics such as: sorting algorithms, heaps, binary search trees, hashmaps, and graph algorithms. The emphasis is upon understanding data structures and algorithms so as to be able to design and select them appropriately for solving a given problem. \n \n   Knowledge and Understanding:   The theory and practice of designing algorithms.  \t  To know of and understand the mathematical properties of algorithms, and of the relevant basic mathematical concepts, definitions and notations, with emphasis on their efficiency.  &nbsp;&nbsp; Intellectual Skills:   To be able to apply mathematical techniques to algorithms and data structures.  \t  To be able to understand the specification of data structures and algorithms, and analyse their efficiency.   Professional Skills:  To understand data structures and algorithms and their efficiency, evaluate available tools, applications, algorithms and data structures, and select those that are fit for purpose within a given domain/scenario.  Transferable Skills:   To be able to solve problems using a variety of data structures and algorithms.  \t  To use mathematical techniques when necessary to achieve the above. The ability to use mathematics to solve problems.\"  ", "Employability for Computing Professionals module (CS21001) As a Computing professional, it is important to know how to best present yourself when you enter, work at, and leave a workplace environment.You will explore how to analyse employer requirements and how to best showcase your unique skillset and experience. This includes networking and building an online presence, CV building, professional interview conduct, and more.   explore how to build a professional social media presence that will be attractive to employers and present yourself in the best possible way \n develop an understanding of how to build a CV based on your experience \n learn about the different aspects vital to securing a job interview \n take part in mock interviews to develop your technical and behaviour-based interview skills \n explore how to create a portfolio of your previous work to present to potential employers, showcasing your abilities that will be valued in the workplace  analyse employer requirements from within job advertisements \n articulate your skills and experience in a way that makes you an attractive employee \n engage in the development of a portfolio that demonstrates skills across several computing areas \n participate in an interview and answer interview questions that highlight your experience ", "Collaboration and Communication Technologies  \n \nThis module aims to give students a thorough understanding of various forms of collaboration and communication technologies, in terms of both their design (from a human-centred perspective) and their impact on human collaborative action. The module also aims to give students practical experience of using and evaluating collaboration tools.\n \n   \n \n In this module you will consider the design of collaboration and communication technologies used in a variety of different contexts including workplace, domestic and leisure environments. You will consider the basic principles of such technologies, explore the technologies from a social perspective, consider their impact on human behaviour and critically reflect on their design from a human-centred perspective. You will spend around two hours per week in lectures for this module. \n \n    Knowledge and Understanding   The ability to compare the HCI issues in individual interaction with group interaction; \t The ability to discuss issues of social concern raised by collaborative software; \t The ability to describe the difference between asynchronous and synchronous communication; \t The ability to describe the similarities, differences and requirements of face-to-face and remote collaboration and associated technological tools.   Intellectual Skills   The ability to demonstrate an understanding of the use of collaboration and communication tools in a variety of contexts, and will be able to critically reflect on the issues relevant to their design.   Professional Skills   The ability to design and evaluate collaboration and communication technologies from a human-centred perspective.   Transferable Skills   The ability to work productively as part of a team; \t The ability to demonstrate good written, verbal and non-verbal communication skills; \t The ability to demonstrate critical thinking and make effective use of technology for collaborative working. ", "CS211 - Professional Issues in Computing To ensure that the student is aware of the legal, social, ethical and professional issues commensurate with the practice of Information Systems Engineering.  Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.  ICTs and society: the information society; impact of ICTs on society; cybercrime; digital evidence.  General and Specific Statute Law: including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.  On completion of the class, a student should be able: To appreciate the characteristics of professionalism;  To recognise and appreciate the professional aspects of other engineering and related classes in their curriculum, and how those aspects influence technical practice;  To form a sound basis on which they will subsequently be able to practise Information Systems Engineering with a due regard for legal, ethical and social issues. ", "Development Experience  \n \nThe aim of the module is to recognise the achievements of students who are excellent developers, and have applied these skills during their own time to increase their development experience. Grades are a mark of recognition of having significant development/programming experience.\n \n   \n \n Students taking part in activities relating to Programming experience such as developing apps in their spare time, contributing to open source projects, or building things in hackathons may receive academic credit for showing they have experience and are an excellent developer. The emphasis of this experience module, is that you provide evidence of your significant extra-curricular software development experience. Students will only be able to register for this module with the approval of the convenor/School, once the material for assessment has been checked. Students must gain their development experience, and success, prior to enrolling on this module. \n \n   Transferable, work-related and employability skills:  - Self-motivation, independence/autonomy Higher skills:  - Problem solving - Computational skills - Project management skills - Original thinking, innovation&nbsp;", "Information Visualisation Project  \n \nTo develop student's ability to design, implement and evaluate a distinctive information visualisation.\n \n   \n \n This module provides an opportunity to put into practice knowledge and understanding that you have developed through the linked module G53FIV. You will gain practical experience of how to design and evaluate a distinctive interactive visualisation which presents information gathered from a complex and interesting data source.&nbsp;  Your project will be supported by tutorials that introduce practical topics that are essential to effective visualisation design, and which have not been considered in G53FIV, including specific algorithms for extracting information from data, structured processes for designing visualisations and selected elements of design aesthetics (such as colour choice and typography). You will gain experience in web-based technologies that enable the implementation of multi-layered and interactive information visualisations, supported through lab work that introduces specific features of these technologies.&nbsp;  This module will require some challenging programming work, and assumes some basic knowledge of HTML, CSS and Javascript. Introductory tutorials will be provided to those without this prior knowledge.  &nbsp;  &nbsp; \n \n  Knowledge, understanding and practical experience of the application of technologies that support the design and delivery of information visualisations. Knowledge, understanding and practical experience of the process of designing, implementing and evaluating information visualisations.", "Horizon CDT Literature Review  \n \nThis Literature review module aims to develop students' research, design, evaluation, presentation and scholarly-writing skills. The module activity is a focused and supervised piece of desk research aligned to their emerging PhD proposal (i.e. Horizon CDT PhD Research Proposal COMP4002 module) to produce a report that can be form the beginnings of their PhD literature review, be shared with industry partners and potentially published as a survey paper.\n \n   \n \n This Literature review module aims to develop students' research, design, evaluation, presentation and scholarly-writing skills. The module activity is a focused and supervised piece of desk research aligned to their emerging PhD proposal (i.e. Horizon CDT PhD Research Proposal COMP4002 module) to produce a report that can be form the beginnings of their PhD literature review, be shared with industry partners and potentially published as a survey paper. \n \n  \u2022&nbsp;Acquire, and analyse systematically and effectively, substantial quantities of information.\u2022&nbsp;Think independently while giving due weight to the arguments of others; understand complex ideas and relate them to specific problems or questions.\u2022&nbsp;Obtain information from scientific and industrial literature and from software systems including the internet.\u2022&nbsp;Critically analyse such information.\u2022&nbsp;Organise and manage their own (and others' time) including scheduling tasks and meeting deadlines.\u2022&nbsp;Prepare individual and written reports and oral presentations.\u2022&nbsp;Undertake self-directed study, including information acquisition and analysis to enable continued learning during a professional career.", "Schools Experience  \n \nThe aim of the module is to develop students who can independently self-manage, proactively interact and ethically apply their knowledge and skills in a real world teaching context. The module is aimed to recognise the achievements of students who actively engage with schools to run teaching activities in collaboration with those schools. The grade awarded will depend on the achievement criteria discussed with the module convenor.\n \n   \n \n Students taking part in activities relating to Computing in Schools may obtain academic credit for them. Students taking part in approved activities, such as running code clubs in schools, organising school computing activity days, or becoming active STEM ambassadors, may receive academic credit for demonstrating they have actively contributed. Students will have undertaken an agreed number of hours on the activities, identified personal goals and targets in relation to these activities and maintained a reflective portfolio as a record of evidence of their competence and achievements. Students will only be able to register for this module with the approval of the convenor/School, once the material for assessment has been discussed. \n \n   Transferable, work-related and employability skills:  - time management and the ability to prioritise effectively - team working, interpersonal and networking skills - skills and competences specific to Computer Science related roles - the ability to apply theoretical knowledge in practical situations Higher Skills:   - problem solving - computational skills - time and project management skills - teaching skills - independent thinking&nbsp;", "Horizon CDT Future Products  \n \nWhen developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading to the development of videos of utopian and dystopian visions of the future of digital identity.\n \n   \n \n When developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading tothe development of videos of utopian and dystopian visions of the future of digital identity. All students are required to attend all four theme days of this module, along with sessions dedicated to preparing for and undertaking the assessment. \n \n  By the end of the module, students will be aware of: How we creatively express our digital identities through new forms of television, home entertainment and the arts. \t How digital identity can enable long-term relationships with consumer goods in the home. \t How personal data can enable well-being and new modes of engagement with well being. \t How smart environments, from future energy services to intelligent transportation systems will draw on personal data to provide more adaptive, safe and sustainable services. They will demonstrate this through the production of videos and participation in four one day sessions built around the topics of infrastructure, well-being, culture and the home.", "CS255 - Professional Issues The aim of the class is to ensure that participants are aware of the legal, social, ethical and professional issues commensurate with the practice of Computer Science/Software Development.  Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.&nbsp;  ICTs and society: the information society; impact of ICT on society; cyber crime; digital evidence.&nbsp;  General and Specific Statute Law including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.&nbsp;  After completing this class participants will be able to:&nbsp; Understand the legal and regulatory issues facing information and computing professionals.&nbsp;  Appreciate the characteristics of professionalism.&nbsp;  Understand how their organisation addresses the legal, ethical, social and professional issues that arise within the IT sector. ", "Advanced Algorithms and Data Structures  \n \nObtain advanced knowledge and practical skills in the analysis, design and implementation of advanced algorithms and data structures.\n \n   \n \n We study data structures, efficient algorithms on them and ways to determine their complexity. We also study some modern algorithms that are widely used in contemporary software. The topics covered may include: Binary Search Trees (Red-Black Trees), Dynamic Programming, Graph Algorithms (e.g. shortest path, maximum flows), Amortized Analysis, Priority Queues (Binary, Leftist and Fibonacci Heaps), String Algorithms (string matching, longest common subsequence). Among the special topics relevant to contemporary application, we may study: Public Key Cryptography (the RSA cryptosystem), the Page-rank algorithm (from Google search), Neural Networks and other data structures and algorithms in AI. The theory is practiced in weekly labs where we learn how to implement the algorithms and data structures as functional and imperative programs.&nbsp;&nbsp; \n \n    Knowledge and Understanding  \u2022&nbsp;&nbsp; &nbsp;Mathematical modelling and analysis of the efficiency of algorithms; \u2022&nbsp;&nbsp; &nbsp;Advanced implementation techniques. &nbsp;  Intellectual Skills  \u2022&nbsp;&nbsp; &nbsp;The application of mathematical techniques to algorithms and data structures; \u2022&nbsp;&nbsp; &nbsp;The identification and evaluation of appropriate models of efficiency. &nbsp;  Professional Skills  \u2022&nbsp;&nbsp; &nbsp;The use and selection of appropriate software libraries. &nbsp;  Transferable Skills  \u2022&nbsp;&nbsp; &nbsp;The ability to formulate and construct effective solutions to algorithmic problems. &nbsp;", "Languages and Computation  \n \nTo make the students conversant with central concepts of formal language and automata theory, such as finite automata and context-free grammars, and their applications.To give an introduction to computability theory.\n \n   \n \n Covers classes of formal language and the practical uses of this theory, applying this to a series of abstract machines ultimately leading to a discussion on what computation is, what can and cannot be computed, and computational complexity. Focuses on language recognition, but will study a range of topics including: finite state machines, regular expressions, context-free grammars, Turing machines, Lambda calculus. Practical applications include parsing. Introduces concepts which are important to understand the analysis of algorithms in terms of their complexity. \n \n  Knowledge and Understanding\u2022&nbsp;&nbsp; &nbsp;Construction of finite automata, regular expressions, and context-free grammars and translation between equivalent notions. \u2022&nbsp;&nbsp; &nbsp;Determine a language's place in the Chomsky hierarchy. \u2022&nbsp;&nbsp; &nbsp;Use declarative tools to generate parsers and scanners. \u2022&nbsp;&nbsp; &nbsp;Identify key issues in syntax definitions: ambiguity, associativity, precedence. \u2022&nbsp;&nbsp; &nbsp;Familiarity with notions of general computation, including Turing machines, the lambda calculus, the Church-Turing thesis, decidability, the halting problem \u2022&nbsp;&nbsp; &nbsp;Define the complexity classes P and NP. \u2022&nbsp;&nbsp; &nbsp;Explain the significance of NP-completeness and give illustrative examples of P vs. NP. &nbsp;Intellectual Skills\u2022&nbsp;&nbsp; &nbsp;Apply and deploy mathematical ability, practices and tools; understand complex ideas and relate them to specific problems or questions. &nbsp;Professional Skills\u2022&nbsp;&nbsp; &nbsp;Understanding and ability to apply techniques for language specification. &nbsp;Transferable Skills\u2022&nbsp;&nbsp; &nbsp;The ability to use mathematics to solve problems.", "Horizon CDT Advanced Research Practice  \n \nStudents conduct a pilot study aligned to their CDT PhD topic and then share lessons learned from the practical application of that research methodology in a peer-to-peer training seminar. They will gain experience of study design, deployment and data capture. They will prepare and submit of a University of Nottingham ethics application and in doing so consider the ethical issues of research with participants and how they shape study design, analysis and dissemination. They will develop communication skills in leading their peer group through a research methods training seminar.\n \n   \n \n The CDT Advanced Research Practice module has the overall aims of developing applied research and presentation skills. Students conduct a pilot study aligned to their CDT PhD topic and then share lessons learned from the practical application of that research methodology in a peer-to-peer training seminar.&nbsp;  Students negotiate a suitable pilot study using an appropriate research methodology under guidance from their year 1 supervisor. This offers an opportunity to learn and test out research methodologies in future CDT PhD activities and understand how they are manifested in practice. As with any research study that captures data, the students will need to prepare and submit an ethics application prior to commencing the pilot study.&nbsp;  Following completion of the pilot project, student will prepare and deliver a peer-to-peer seminar on the application of their chosen research methodology. &nbsp; \n \n  Learning Outcomes \u2022&nbsp;&nbsp; &nbsp;Awareness of designing research studies and accounting for ethical concerns. \u2022&nbsp;&nbsp; &nbsp;Applied research skills in capturing user data.&nbsp; \u2022&nbsp;&nbsp; &nbsp;Awareness and understanding of the practical application of different research methods. \u2022&nbsp;&nbsp; &nbsp;The ability to organise and manage their own (and others' time) including scheduling tasks and meeting deadlines. \u2022&nbsp;&nbsp; &nbsp;The ability to undertake self-directed study, including information acquisition and analysis to enable continued learning during a professional career. \u2022&nbsp;&nbsp; &nbsp;Skill development in seminar design and presentation skills. &nbsp;", "Introduction to Formal Reasoning  \n \nThe aim of this module is to develop mathematical and formal reasoning skills necessary to specify and reason about programs and/or mathematical problems.\n \n   \n \n This module is an introduction to formal reasoning with applications in program verification and Mathematics. We will use an interactive proof system like Lean or Coq to learn how to make precise statements and how to verify them using formal proofs. At the same time we develop skills in informal reasoning. Topic covered are: propositional logic, classical principles, predicate logic, the theories of Booleans, natural numbers, lists and trees. Verification of simple algorithms. \n \n  Knowledge and Understanding&nbsp;To understand logical reasoning and proofs and their application in computer science.Intellectual Skills&nbsp;The ability to understand and apply simple logical reasoning. To be able to understand the specification of data structures and algorithms.Professional Skills&nbsp;To be able to use formal reasoning tools to verify the correctness of software systems.Transferable Skills&nbsp; To understand how to specify a problem precisely and how to give evidence for a statement.&nbsp;The ability to use mathematics to solve problems.&nbsp;", "Topical Trends in Cyber Security  \n \nTo give a deeper understanding and appreciation of important topical trends in Computer Security which were introduced in other modules. To expose students to current research in computer security and provide them the opportunity to explain reported results and findings to an audience of fellow students.\n \n   \n \n This module involves exploration of current topics relating to computer security, in order to enable an appreciation and understanding of the state-of-the-art in both cyber security research and professional practice. Relevant issues will be identified and delivered by staff from the cyber security research group (and other relevant areas as appropriate), as well as supplemented where relevant by external guest speakers. While the specifics of the resulting topic coverage is not fixed, the module will ensure focus upon the latest threats and defences, as well as the requirements for and/or application of computer security in the context of emerging technologies. The module will also ensure the coverage of relevant aspects is approached from an interdisciplinary perspective. Each week, a student (or a group of students) will make a one-hour presentation on an assigned topic in computer security followed by a discussion. The student(s) will meet with a member of staff to discuss and plan the form of the presentation. The student(s) should also prepare some questions for the audience and write a concise (10 page) summary of the material. \n \n  Knowledge and Understanding&nbsp; \u2022&nbsp;&nbsp; &nbsp;a deeper understanding and appreciation of important topics in computer security &nbsp;Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;the ability to summarise the contents of an &nbsp;computer science research Transferable Skills \u2022&nbsp;&nbsp; &nbsp;the ability to both use and present material effectively to a peer audience &nbsp;Intellectual Skills&nbsp; \u2022&nbsp;&nbsp; &nbsp;the ability to summarise the contents of any&nbsp;computer science research&nbsp; &nbsp;Transferable Skills&nbsp; \u2022&nbsp;&nbsp; &nbsp;the ability to both use and present material effectively to a peer audience&nbsp; &nbsp;", "Software Quality Assurance  \n \nEncourage students to think about quality issues when developing, and to discuss these challenges in a practical context. To understand the importance of these activities in industry, and the kinds of organisations, tools and standards that are applied.\n \n   \n \n We cover activities and organisation around developing quality software and general quality management. We build this around management, organisation and process, standards and compliance, metrics and measurement, and testing strategies. The course is very practical with students completing a group activity of roleplaying a company and developing a quality assured product. \n \n    Knowledge and understanding:   In depth understanding of the major issues involved in developing high quality software.   Intellectual skills:   The ability to understand and evaluate software quality from both a technical and management perspective.   Professional skills:   The capability of using software engineering tools that are widely used in industry. This includes tools for the debugging, testing, version control, building and deployment of software.   Transferable skills:   Abstract thinking, systematic approach to problem solving. ", "Advanced Systems Programming (M) COMPSCI5083   This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.     The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system.    &nbsp;   The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing  &nbsp;  systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.     By the end of this  &nbsp;course students will be able  &nbsp;to  :    \u25a0&nbsp;  D  iscuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust;   to   d  iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;    \u25a0&nbsp;  D  iscuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;    \u25a0&nbsp;  D  iscuss the advantages and disadvantages of integrating automatic memory management with the operating system/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and/or operating systems;     \u25a0&nbsp;  U  nderstand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and    \u25a0&nbsp;  C  onstruct and/or analyse simple programming to demonstrate understanding of novel techniques for memory management and/or concurrent programming, to understand the trade-offs and implementation decisions.  ", "COMP3687: \nData Compression  To understand: \n\t\t\t  the main techniques for lossless and lossy date compression;   \n\t\t\t the efficiency criteria for data compression.     Huffman coding  \n\t\t\t Arithmetic coding \n\t\t\t Lempel-Ziv and application to ZIP or PNG \n\t\t\t Context-based compression \n\t\t\t Transform domain compression with application to JPEG \n\t\t\t Wavelet-based compression with application to JPEG2000 \n\t\t\t Video compression and MPEG \n\t\t\t Audio compression and MP3   On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of the key features of popular lossless compression techniques for text; \n\t\t\t\t an understanding of the key features of popular lossy compression techniques for images, video, and audio; \n\t\t\t\t an understanding of the performance criteria for lossless and lossy compression.   ", "Undergraduate Course: Natural Computing (INFR11161) This module teaches you about bio-inspired algorithms for optimisation and search problems. The algorithms are based on simulated evolution (including Genetic algorithms and Genetic programming), particle swarm optimisation, ant colony optimisation as well as systems made of membranes or biochemical reactions among molecules. These techniques are useful for searching very large spaces. For example, they can be used to search large parameter spaces in engineering design and spaces of possible schedules in scheduling. However, they can also be used to search for rules and rule sets, for data mining, for good feed-forward or recurrent neural nets and so on. The idea of evolving, rather than designing, algorithms and controllers is especially appealing in AI. In a similar way it is tempting to use the intrinsic dynamics of real systems consisting e.g. of quadrillions of molecules to perform computations for us. The course includes technical discussions about the applicability and a number of practical applications of the algorithms. \n \nIn this module, students will learn about \n \n- The practicalities of natural computing methods: How to design algorithms for particular classes of problems. \n \n- Some of the underlying theory: How such algorithms work and what is provable about them.  \n \n- Issues of experimental design: How to decide whether an metaheuristic algorithm works well.  \n \n- Current commercial applications.  \n \n- Current research directions. The lectures will cover the following subjects: \n \n- Computational aspects of animal behaviour and of biological, chemical or physical systems \n- Genetic and Evolutionary Algorithms: Selection, recombination and mutation, fitness and objective functions \n- Swarm intelligence, particle swarms, differential evolution, robot swarms \n- Theory: the schema theorem and its flaws; convergence, statistical mechanics approaches \n- Comparisons among various metaheuristic algorithms, No-Free-Lunch theorems \n- Hybrid, hyperheuristic, and memetic algorithms \n- Multi-objective optimisation \n- Genetic programming \n- Applications such as engineering optimisation; scheduling; data-mining; neural net design \n- Experimental issues: Design and analysis of sets of experiments \n \nRelevant QAA Computing Curriculum Sections: Artificial Intelligence, Data Structures and Algorithms, Simulation and Modelling On completion of this course, the student will be able to:\n     \n         understand natural computation techniques in theory and in their broad applicability to a range of hard problems in search, optimisation and machine learning  to know when a natural computing technique is applicable, which one to choose and how to evaluate the results  to know how to apply a natural computing technique to a real problem and how to choose the parameters for optimal performance  match techniques with problems, evaluating results, tuning parameters, creating (memetic) algorithms by evolution \n     ", " CM12001: Artificial intelligence 1 You will engage with the fundamental concepts of Artificial Intelligence (AI). You will learn the strengths and limitations of a range of AI techniques, and apply these in solving simple problems, while considering the social, legal, and ethical implications of AI.    CM12001 is Compulsory on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  On completion of the unit, the students will be able to:\n\n1. demonstrate understanding of a range of AI techniques, their strengths, and their limitations, \n\n2. demonstrate understanding of the fundamentals of probability theory and its role in AI, \n\n3. apply various AI techniques to simple problems, \n\n4. identify social, legal, and ethical issues in applications of AI. \n  ", " CM12003: Programming 1 You will write programs in two high-level computer programming styles, functional and imperative. You will learn about fundamental programming concepts such as data structures, loops, recursion, and types. No programming background is assumed.    CM12003 is a Must Pass Unit on the following courses:  \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  By the end of the unit, you will be able to: \n  write programs in a typed functional programming language,  \n write programs in a high-level imperative programming language,  \n use imperative control structures and recursion,  \n use basic inductive data structures and algorithms,  \n use basic higher-order programming constructs,  \n apply basic debugging and testing methods,  \n evaluate the complexity of given algorithms in basic terms.  \n \n  ", "Undergraduate Course: Machine Learning Theory (UG) (INFR11224) This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead. This course follows the delivery and assessment of Machine Learning Theory (INFR11202) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11202 instead. On completion of this course, the student will be able to:\n     \n         interpret and explain rigorous statements about properties of machine learning methods  evaluate properties of learning models through proofs and examples  relate, compare, and contrast the implications of various qualities of machine learning models covered in the course  formulate precise mathematical requirements corresponding to desired properties in real learning problems, and explain their decisions \n     ", "CSC3833 : Data Visualization and Visual Analytics Students will learn and acquire skills in data exploration and visualization. By the end of the module, they will be able to take raw data sets, clean them, structure them and choose suitable methods for visualizing them. They will also acquire theoretical knowledge of the underpinning descriptive statistics and the basics of human perception for cognition. \u2022  Topics from: \n\u2022  Descriptive statistics for data sets. \n\u2022  The visualization pipeline. \n\u2022  Human perception and cognition. \n\u2022  Visualization of numerical data and categorical data. \n\u2022  Visualization of geographical data. \n\u2022  Visualization of time series data. \n\u2022  Interactive techniques for visualization. \n\u2022  Visualization design \n\u2022  What makes a good visualization. ", "Undergraduate Course: Computational Neuroscience (INFR11209) In this course we study computation in neural systems. We will consider problems such as:  \n  \nHow do neurons work and how do they communicate with one another?  \nHow do groups of neurons work together to form representations of the external world?  \nHow are memories stored and retrieved in the brain?  \n   \nWe will employ a combination of bottom-up and top-down approaches, meaning that we study these problems both by modelling and simulating the biological hardware, and by taking inspiration from artificial intelligence to try to build theories of the brain. This course focuses on computation in the nervous system. You will be introduced to basic neuroscience concepts, learn about how computational models are used to simulate processes in the brain, and learn about theories for how the brain processes information and performs computations.  \n \nCourse Content: \n \n1. Introduction to basic neuroscience concepts \n2. Models of neurons \n3. Neural encoding \n4. Neural decoding \n5. Information theory \n6. Network Models \n7. Plasticity/learning \n \nThe course will be delivered through lectures and computer labs. On completion of this course, the student will be able to:\n     \n         describe and critically analyse fundamental concepts and approaches to studying neuroscience and neural computation  abstract neuroscience experimental data into an appropriate computational model and critically evaluate such a model from a biological and/or computational perspective  given a neuroscientific problem, identify an appropriate modelling approach to that problem and compare the strengths and weaknesses of alternative modelling approaches.  apply probabilistic, information-theoretic, and machine learning techniques to model neural function and evaluate the neurobiological implications of such models  implement the models and methods learned in lectures and critically evaluate the results in the context of neural computation \n     ", "Undergraduate Course: Computational Cognitive Science (INFR10054) This course aims to introduce students to the basic concepts and methodology needed to implement and analyse computational models of cognition. It considers the fundamental issues of using a computational approach to explore and model cognition. In particular, we explore the way that computational models relate to, are tested against, and illuminate psychological theories and data. \n \nThe course will introduce both symbolic and subsymbolic modelling methodologies, and provide practical experience with implementing models. The symbolic part will focus on cognitive architectures,while the subsymbolic part will introduce probabilistic models. - An introduction/review of the idea of computational approaches to studying cognition; the mind as information-processing system; Marr's levels of analysis (computational, algorithmic, implementation). \n \n- The general motivations underlying the computational modelling of cognition, and different kinds of questions that can be answered (e.g., why do cognitive processes behave as they do, or what algorithms might be used to carry out this behaviour? What kinds of information are used, or how is this information processed/integrated over time?) \n \n- Mechanistic/algorithmic approaches and issues addressed by these approaches: parallel versus serial processing, flow of information, timing effects. \n \n- Rational/probabilistic approaches and issues addressed by these approaches: adaptation to the environment, behaviour under uncertainty, learning, timing effects. \n \n- General issues: top-down versus bottom-up processing, online processing, integration of multiple sources of information. \n \n- Methodology and issues in the development and evaluation of cognitive models: Which psychological data are relevant? What predictions are made by a model? How could these be tested? \n \n- Modelling techniques: in the assignments, students will experiment with both symbolic (rulebased) and subsymbolic (probabilistic) cognitive models. \n \n- Example models: in a number of areas we will look at the theories proposed and different ways of modelling them. Areas discussed will include several of the following: language processing, reasoning, memory, high-level vision, categorization. Specific models will be introduced and analysed with regard to relevant psychological data. On completion of this course, the student will be able to:\n     \n         demonstrate knowledge of the basic concepts and methodologies of cognitive modelling, by being able to design simple cognitive models for sample problems  demonstrate understanding of the relationship between computational models and psychological theories, by being able to critically assess the psychological adequacy of a given model  qualitatively and quantitatively evaluate computational models of cognition using a range of techniques, when given a model and a set of experimental data that it is supposed to account for  demonstrate an awareness of the most important computational approaches to cognitive modelling, by being able to use these approaches to formalise theories that are couched in potentially vague and ambiguous terms (e.g., natural language)  implement and test cognitive models, including existing models from the literature and simple models they have designed themselves \n     ", "Undergraduate Course: Parallel Programming Languages and Systems (Level 11) (UG) (INFR11226) This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead. This course follows the delivery and assessment of Parallel Programming Languages and Systems (Level 11) (INFR11023) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11023 instead. On completion of this course, the student will be able to:\n     \n         describe generic issues (as discussed in the syllabus) which must be addressed by any parallel programming system  explain, given a description of a previously unseen parallel application, where specific instances of the generic issues will arise  explain, in considerable detail, the ways in which the generic issues are addressed by the MPI and Pthreads programming models and their supporting infrastructure  apply their practical experience with MPI and Pthreads to write clean, adaptable and scalable parallel programs for simple applications  compare the approaches proposed by a range of more speculative programming models \n     ", "Undergraduate Course: Knowledge Graphs (INFR11215) Recent advances in AI have changed the perception of what AI systems can do, from decision sup-port to answering questions. An underlying feature of many AI systems concerns how knowledge is acquired, represented, and reasoned with. Today, knowledge graphs are used extensively by most of the world's leading IT companies, from search engines (e.g., the content of the Google knowledge panel is a tiny fragment of Google's knowledge graph) and chatbots to product recommenders and many applications of AI and data science. This course provides the theory and practice of knowledge graph construction, reasoning, and question answering technologies. The students will analyse case studies to construct knowledge graphs and apply reasoning services on them. In this course, we will cover topics such as: \nKnowledge graph foundation and standards \n - RDF (Resource Description Framework) \n - OWL (Web Ontology Language) \n - SPARQL (Query Language for RDF and OWL) \nKnowledge graph construction, embeddings, and completion \nKnowledge graph reasoning and querying \n - Tableaux algorithm \n - Tractable schema reasoning in EL \n - Tractable query answering in DL-Lite \n - Semantic parsing  \n \nThe students will be expected to prepare for the lectures by reading related textbook chapters and papers. In addition to lectures, there will be some tutorials, helping students to better understand some concepts and theories. On completion of this course, the student will be able to:\n     \n         construct and query over knowledge graphs by applying relevant knowledge graph standards such as RDF, OWL and SPARQL  complete knowledge graphs by applying and evaluating pros and cons of knowledge graph embeddings-based techniques  reason with knowledge graphs by applying and evaluating pros and cons of description logic reasoning algorithms  query over knowledge graphs by applying semantics parsing and query answering the techniques \n     ", "Undergraduate Course: Introduction to Mobile Robotics (INFR10085) A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behaviour strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. \n \nAt the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car. Delivery Method: \n \nThe course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum. \n \nContent/Syllabus: \nThe exact set of methods and algorithms explored in the course will vary slightly from year to year, \nbut will include many of the following topics: \n \n-\tIntroduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots. \n-\tMath refresher: basic operations of matrix, algebra, probability theory, derivatives. \n-\tRobot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics. \n-\tSensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc. \n-\tRecursive State Estimation: Kalman filters, EKF etc.  \n-\tLocalization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc. \n-\tMapping: environment model, grid map. \n-\tRobot Operating System: basic principles, use cases, and examples. \n-\tSLAM: Framework &amp; systems, loop closing, pose graph optimization. \n-\tPlanning and Navigation: Obstacle avoidance, Path planning, receding horizon control. \n-\tSelf-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation. \n-\tBasic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control. On completion of this course, the student will be able to:\n     \n         recall and explain the essential facts, concepts, principles and potential ethi-cal concerns of mobile robotics and related concepts, demonstrated through written answers in exam-ination conditions  describe and evaluate the strengths and weaknesses of some specific sensor and motor hardware; and some specific software for sensory processing and perception, demonstrat-ed through written answers  employ useful software and tools (e.g. robot simulator, robotic operating sys-tem) to solve a core problem of mobile robots, and will show a working system via proof-of-concept simulation environments  in writing a joint report, identify problem criteria and context, discuss design and development, test, analyse and evaluate the behaviour of typical mobile robots they have developed in simulation \n     ", "Text as Data - An Introduction to Document Analytics (H) COMPSCI4074   This course will introduce stochastic notions necessary for analysing text/documents, in both unsupervised and supervised approaches.  &nbsp;  The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka/Spark Mlib).     This course aims to introduce students to   language modelling, geometric interpretations of documents, information theory, network models and in general the use of   stochastic thinking (including building on the probability theory learned during the   Data Fundamentals  &nbsp;c  ourse). This is  &nbsp;illustrated through   a number of  &nbsp;supervised and unsupervised text processing and analytics approaches  &nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics  .   &nbsp;  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka/Spark   Mlib  ).     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the vector space, network graphs, language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document/text analytics tasks.  ", " CM12002: Computer systems architectures You will examine the architecture of modern computer systems and operating systems. Progressing through various hardware layers, you will see the roles of each layer in the representation, storage, and transmission of data and the management of resources.    CM12002 is Compulsory on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  After successfully completing this unit, students will be able to: \n  Write programs in a low-level language such as C.  \n Demonstrate knowledge of computer architectures and their abstractions, from hardware to the interface with operating systems.  \n Identify the machine representation of key data forms and describe their machine level processing. \n Describe the basic building blocks of a computer: arithmetic-logic unit, registers, central processing unit, memory.  \n Demonstrate knowledge of operating systems architectures and their abstractions.  \n Describe concepts and mechanisms for the management, ownership and protection of computer resources.  \n Use of IT (T/F, A), Application of Number (T/F, A).  \n \n  ", "Functional Programming (H) COMPSCI4021   Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.     Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills,   applying  &nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.    The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.     By the end of the course students will be able to:    1.   Write simple programs involving elementary Haskell techniques, including pure function definitions;     2.   Define new algebraic data types and use recursion to define functions that traverse recursive types,   and use common higher-order functions such as map, fold, and filter;    3.   Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;    4.   Understand parametric polymorphism, and ad-hoc polymorphism through   typeclasses  ;    5.   Demonstrate understanding of the differences between strict and lazy evaluation, and the   tradeoffs  &nbsp;of the two approaches;    6.   Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;    7.   Understand and use common functional abstractions such as functors and applicative functors;    8.   Develop substantial functional software applications including external libraries;    9.   Use formal methods   and property-based testing  &nbsp;to reason about the correctness of functional programs;    10.   Construct, adapt, and analyse   code using standard Haskell   tools   such as Stack and   HUnit  ", "Algorithmics COMPSCI2026   This course is intended for Graduate Apprenticeship students only.   &nbsp;   This course   will develop the students' skills in the design and analysis of algorithms, with focus on a range of important standard problems. This course will   introduce students to the   fundamental   concepts of   NP-  completeness, solvability  ,  &nbsp;and computability  ,   and their application in the world of computing.     The aim of this course is to further   develop the student's skills in the design and analysis of algorithms  . The students will study   algorithms for a range of important standard problems  . They will also be introduced   to the theory of NP-completeness   and   fundamental concepts of computability  , t  ogether with   their  &nbsp;practical implications  .     By the end of this course, students will be able to:    1.   Apply s  tandard algorithmic design methods and basic principles of algorithm analysis  .    2.   Describe fundamental graph and string algorithms and be able to apply this knowledge in a program  .    3.   Describe the basic principles and practical implications of the theory of NP-completeness  .    4.   Provide examples of the computability and   unsolvability  , and know some standard examples of unsolvable problems  .  ", "Programming Languages (H) COMPSCI4016   This course aims to:    P  rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;    S  how how the syntax of a programming language can be formalized;    E  xplain the functions of compilers and interpreters, how they interact, and how they work;    S  how how to implement a compiler using compiler-generation tools.     This course aims to:    P  rovide a conceptual framework that will enable students to understand familiar programming languages more deeply and learn new languages more efficiently;    S  how how the syntax of a programming language can be formalized;    E  xplain the functions of compilers and interpreters, how they interact, and how they work;    S  how how to implement a compiler using compiler-generation tools.     By the end of the course students will be able to:    1.   Describe the relationships between the imperative, object-oriented, and functional programming paradigms;    2.   Explain fundamental programming language concepts such as values and types, variables and lifetime, bindings and scope, procedural abstraction, data abstraction, and generic abstraction;    3.   Explain the distinction between syntax and semantics, and read and write syntactic specifications of programming languages;    4.   Explain the functions of compilers and interpreters, and compiler-interpreter interactions such as multi-stage compilers, interpretive compilers, and just-in-time compilers;    5.   Implement a compiler and interpreter for a very simple programming language using compiler-generation tools.  ", "CSC3631 : Cryptography To introduce students to the theory and practice of block ciphers, cryptographic hash functions, \npublic key cryptography and cryptographic protocols. Algorithms \u2013 cryptographic algorithms \n- Historical overview of cryptography \n- Private-key cryptography and the key-exchange problem \n- Public-key cryptography \n- Digital signatures \n- Security protocols \n- Applications (zero-knowledge proofs, authentication, and so on) \nNet-Centric Computing \u2013 network security \n- Fundamentals of cryptography \n- Secret-key algorithms \n- Public-key algorithms \n- Authentication protocols \n- Digital signatures ", "Computational Social Intelligence (H) COMPSCI4080   The course introduces the core methodologies behind automatic approaches   aimed at making  &nbsp;sense of social and psychological aspects of human behaviour.   In particular, the course shows 1) how to design and organise the observation of human behaviour in view of the application of automatic approaches, 2) how to apply psychometric instruments for the quantitative analysis of social and psychological phenomena, and 3) how to apply basic statistical techniques  &nbsp;to human behaviour analysis and understanding  . The course is interdisciplinary and it requires the acquisition of both computing and   social   psychological notions.  &nbsp;  The application areas to which the course is relevant include,   e.g.  , social robotics, user experience analysis, social media analytics, surveillance   and  &nbsp;e-health  &nbsp;(the list is not exhaustive)  .     The aim of the course is to introduce the students to the main computational methodologies   for automatic  &nbsp;  analysis   of human behaviour.   In particular the course teaches how to design and organise the observation of human behaviour in view   of the application of   computational approaches  . Furthermore, it shows how to quantify social and psychological phenomena through the   application  &nbsp;of   standard psychometric questionnaires. Finally, it introduces basic methodologies - based on machine learning and statistics - aimed at mapping beh  avioural observations into high-  level interpretations of human behaviour  &nbsp;that take into account social and psychological   aspects of human-human and human-machine interactions  .     By the end  &nbsp;of this   course, the students will be   able to:    1.   Design and organise the collection of behavioural data in view of the application of statistical and computational methodologies  &nbsp;for human behaviour understanding  ;    2.   Measure social and psychological   constructs  &nbsp;- in quantitative terms - through the adoption of standard psychometric questionnaires;  &nbsp;    3.   Apply   basic   statistical methodologies (  e.g.,   k-Means and Na\u00efve Bayes Classifier) to   automatically   map behavioural observations into social and psychological constructs.  ", "Web Application Systems COMPSCI1023   This course is intended for Graduate Apprenticeship students only.   &nbsp;   This course will introduce students to web application design and the underlying networking concepts which web ap  plications and services rely on.     This course aims to guide students through typical web application design structures and related tools. It will also develop their understanding of networked and distributed systems with respect to communications and protocols involved in their design.     By the end of this course, students will be able to:  &nbsp;    1.   U  se of a variety of development tools and web technologies  .  &nbsp;    2.   Explain and describe the different high-level system architectures common to the web and the role of messaging and protocols within the design of web applications  .  &nbsp;    3.   Describe and understand the opportunities and challenges involved in developing web applications and working in a distributed environment  .  &nbsp;    4.   Understand and interpret the design and specifications of a web application  .  ", "CSC3231 : Graphics for Games To give students an understanding of both the theories and practices that underpin good game design. Through this module, students will develop the knowledge and skills to apply several theoretical game design frameworks to the critical analysis of existing game systems, as well as to design, prototype, and implement their own advanced gameplay mechanic systems History \u2013 how the design of systems of play have evolved through ancient games, sports, tabletop games, early and modern video games.  \nTheory and critical analysis \u2013 understanding theories of play, Ludology and Narratology, Mechanics, Dynamics and Aesthetics, and how to apply them to the analysis of games designs.  \nSystems Design \u2013 combining and balancing multiple complex systems to create a coherent holistic experience.  \nVisual Communication \u2013 world building and level design, including techniques for pre-empting and guiding the player through visual cues.  \nMethodologies \u2013 commonly used approaches for implementing game designs, including iterative, top-down vs bottom-up, and player-centric vs systems-centric design paradigms. ", "Undergraduate Course: Modelling Concurrent Systems (Level 10) (INFR10089) Concurrent and distributed systems are famously hard to analyse. This theoretical course presents state-of-the-art mathematical models and techniques that make understanding concurrency possible. In the process, we will touch on fundamental philosophical, mathematical and computational questions. What does 'concurrency' actually mean? How do we know our concurrent system behaves correctly? What does 'correctly' actually mean? This course is especially relevant to any student with an interest in a scientific career in programming languages, models, or distributed systems, and also to students looking to design or implement distributed systems in industry. Beginning with simple examples and protocols, we will develop a theory to describe models of concur-rent systems of increasing complexity, based on process algebra. We will learn how to compare these models, and the key concepts that describe what it means for systems to be equivalent, such as bisimulation and trace equivalence. We will learn how to specify prove  properties of systems, and the assumptions we must make about the environment in which these systems operate, such as fairness. The course lectures will introduce concepts using standard examples, and students will apply what they have learned to new problems in homework questions delivered weekly. In tutorials, students can discuss solutions to their homework problems and get feedback on their work, developing their solutions into a summative homework portfolio that they submit for grading at two checkpoints throughout the semester. On completion of this course, the student will be able to:\n     \n         construct accurate models of concurrent systems, including protocols and other distributed communicating systems  analyse (models of) concurrent systems and show various notions of equivalence and refinement between them  evaluate the comparative benefits and drawbacks of various concurrency  articulate safety and liveness properties of concurrent systems using temporal logic and other tools  justify the correctness of concurrent systems under various assumptions about their executing context \n     ", "Networks and Operating Systems Essentials 2 COMPSCI2024   The co  urse will introduce students to essential topics in computer networks and operating systems. It has a focus on the underlying concepts, design, and operation of the Internet, and on the   role,   basic features  ,  &nbsp;and principles of computer operating system  s  .  &nbsp;     To introduce students to essential topics in computer networks and operating systems.   &nbsp;   The course   aims to give  &nbsp;an overview of how the Internet works, and the difference between the Internet and the World-Wide Web. It introduces the basic principles of networked systems, the concept of a protocol, and the importance of layering in the design of the network. It discusses how systems are connected together to form a network; how networks are connected together to form an internet; and how data is reliably delivered across the Internet. The web protocols, and HTTP, are briefly introduced, as an example of the type of application that can run on the Internet.    &nbsp;   In addition, the course aims to present the abstractions that underlie traditional operating systems, and to sketch basic implementations for key components including process scheduling, memory management and file systems. Students should gain an awareness of implementation trade-offs and corresponding impacts on system behaviour.     By the end of this course students will be able to:    \u25a0&nbsp;  Understand the principles underlying networked systems, such as the Internet, including the importance of layering in protocol design  ;    \u25a0&nbsp;  Describe the key features of a local-area network technology, such as Ethernet  ;    \u25a0&nbsp;  Explain the concept of internetworking, and how the Internet is built as a network of networks; describe key features of the network layer  ;    \u25a0&nbsp;  Describe what is meant by a best-effort service, and explain why the Internet offers such a service; discuss how the transport layer can enable reliable connections on this substrate  ;    \u25a0&nbsp;  Understand the difference between the Web and the Internet, and be able to describe, in outline, the operation of HTTP  ;    \u25a0&nbsp;  Be familiar with issues around privacy and security of Internet traffic  ;    \u25a0&nbsp;  Use appropriate terminology in correctly explaining the functions of an operating system  ;    \u25a0&nbsp;  Contrast the low-level hardware facilities (e.g., physical memory frames) with the higher-level abstractions provided by an operating system (e.g., virtual memory pages).  ;    \u25a0&nbsp;  Evaluate the relative merits of a range of simple resource allocation algorithms (e.g., for process scheduling)  ;    \u25a0&nbsp;  Implement simple operating system components and basic algorithms (  e.g.,  &nbsp;scheduling, free space management)  ;    \u25a0&nbsp;  Knowledge and understanding of privacy and security issues of Internet traffic  ;    \u25a0&nbsp;  Recognise risk/safety for safe operation of computing systems at the operating system level  .  ", "Cryptography and Secure Development (M) COMPSCI5079   A course on cryptographic algorithms and how to develop code for secure systems.     To develop student's knowledge of cryptographic algorithms, how they can be attacked and how to evaluate how secure they are.    To develop student's practical skills in developing secure systems.     By the end of this course students will be able to:    1.  \tExplain basic cryptographic algorithms, how they can be attacked and evaluate how secure they are.    2.  \tDemonstrate an  &nbsp;advanced  &nbsp;understanding of a range of specialist algorithms, explaining when they are useful.    3.  \tProduce a program that uses a standard  &nbsp;  cryptographic library to solve a security problem.    4.       C  ritically c  ompare and contrast a number of ways of developing secure systems.  ", "Human-Centred Security (M) COMPSCI5060   This course teaches you   the design and evaluation of   usable, secure and privacy aware  &nbsp;systems.     This course aims to:    Foster an appreciation of the vital role played by human factors in securing systems;    Explain and allow students to appreciate the multiple dimensions of the core principles of privacy, authentication, biometrics, risk communication, and the importance of security systems interface usability  .     By the end of the course students will be able to:    1.   E  xplain primary themes and challenges of human centred security  ;    2.   E  xamine a given context and design an appropriate security solution and be able to justify your choices  ;    3.   Identify usability, privacy or security issues in a given system, and make recommendations about how to improve it;     4.   Communicate risks to non-expert users in an understandable way  ;    5.   I  dentify causative effects of   particular human  &nbsp;  behaviours  &nbsp;in a security setting, explain how these can be influenced  ;    6.   Demonstrate an understanding of common threats, and be able to critique and design solutions to mitigate against them;    7.   Design and analyse the results of user studies to evaluate the usability and security of computing systems;    8.   C  ompare and contrast approaches to establishing and maintaining privacy  ;    9.   Demonstrate an understanding of social engineering and its significance  .  &nbsp;  ", "CSC2032 : Algorithm Design and Analysis Knowledge of a range of key application areas where algorithmic solutions are required. \nUnderstand the key issues in algorithm design. \nUnderstand what makes a \"good\" algorithm. \nExplore a range of techniques for algorithm design. \nAbility to analyse an algorithm\u2019s complexity. Introduction to Algorithms: \n\u2022 &nbsp; &nbsp;  &nbsp; Introduce the idea of an algorithm \n\u2022 &nbsp; &nbsp;  &nbsp; Documenting an algorithm and the use of pseudo code \n\u2022 &nbsp; &nbsp;  &nbsp; Introduction to algorithm analysis  \nFundamental Algorithmic Problems: \n\u2022 &nbsp; &nbsp;  &nbsp; Searching \n\u2022 &nbsp; &nbsp;  &nbsp; Sorting  \n\u2022 &nbsp; &nbsp;  &nbsp; String searching  \n\u2022 &nbsp; &nbsp;  &nbsp; Graph problems  \nAlgorithm Analysis: \n\u2022 &nbsp; &nbsp;  &nbsp; Asymptotic analysis of upper and average complexity bounds \n\u2022 &nbsp; &nbsp;  &nbsp; Identifying differences among best, average, and worst case behaviours \n\u2022 &nbsp; &nbsp;  &nbsp; Standard complexity classes \n\u2022 &nbsp; &nbsp;  &nbsp; Using recurrence relations to analyze recursive algorithms \n\u2022 &nbsp; &nbsp;  &nbsp; NP Complete problems  \nAlgorithm Design Techniques: \n\u2022 &nbsp; &nbsp;  &nbsp; General ideas for algorithm development  \n\u2022 &nbsp; &nbsp;  &nbsp; Brute-force algorithms \n\u2022 &nbsp; &nbsp;  &nbsp; Greedy algorithms \n\u2022 &nbsp; &nbsp;  &nbsp; Divide-and-conquer \n\u2022 &nbsp; &nbsp;  &nbsp; Backtracking ", " CM12004: Discrete mathematics and databases You will learn about various elementary structures for mathematical reasoning about computation, such as predicate logic, logic circuits, and simple automata. You will work with databases and queries as a direct practical application.    CM12004 is Compulsory on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  At the end of this unit, you will be able to: \n  calculate and reason with sets, functions and relations using the language of set theory,  \n use formal predicate calculus to express assertions and reason formally,  \n recognise rigorous mathematical proofs and write elementary proofs,  \n work with low-complexity computational models such as logic circuits and finite state machines,   \n write database queries in a formal language,  \n explain the security and ethical, professional, and legal implications of data storage.  \n \n  ", " CM12006: Mathematics for computation You will explore fundamental aspects of analysis and computer algebra, and use appropriate software tools to perform calculations in linear algebra and calculus. You will be introduced to cryptography and its mathematical basis in number theory.    CM12006 is Compulsory on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  At the end of this unit, you will be able to: \n  calculate with the techniques of linear algebra,  \n classify functions as continuous, smooth or analytic,  \n reason about series to the point of Taylor/Maclaurin expansions,  \n use appropriate software tools for linear algebra and calculus,  \n apply elementary methods in number theory,  \n explain aspects of the mathematical basis of cryptography.  \n \n  ", " CM12005: Programming 2 Building on Programming 1, you will learn about the concept of, and write programs in, the object-oriented programming style. You will also learn about and implement advanced programming techniques. Working in a team, you will plan, organise, and implement programs using a modern software engineering paradigm. You will learn about basic data structures and algorithms and implement server-client interaction.    CM12005 is a Must Pass Unit on the following courses:  \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  By the end of the unit, you will be able to: \n  write programs in an object-oriented programming language,  \n design and construct basic data structures and algorithms,  \n understand the basics of, and write programs containing, advanced programming techniques,  \n plan, organise and implement programs to support reuse and maintainability of the software,  \n apply a modern paradigm of software development.  \n \n  ", "Undergraduate Course: Formal Verification (INFR11129) Formal verification is the use of mathematical techniques to verify the correctness of various kinds of engineering systems: software systems and digital hardware systems, for example. Formal verification techniques are exhaustive and provide much stronger guarantees of correctness than testing or simulation-based approaches. They are particularly useful for safety and security critical systems and for when system behaviour is highly complex. The course focuses on automated techniques that are currently used in industry. It gives practical exposure to current formal verification tools, explaining the input languages used and introducing the underlying mathematical techniques and algorithms used for automation. In recent years there have been highly noteworthy cases of the adoption of formal verification (FV) techniques in industry. For example, at Intel, FV has largely replaced simulation-based verification of their microprocessors, at Microsoft, FV is used to certify that 3rd party drivers are free of certain kinds of concurrency bugs. As FV tools and methodologies improve, FV is expected to become more and more widely used in industry.  \n  \nThis course aims to familiarise students with main classes of FV techniques that are likely to become most widespread in industry in the coming years. The intent is to prepare students who might go into industry with sufficient background in FV that they would be aware of when and how they might deploy FV techniques. The course will also be of interest to students who wish to go into research developing techniques for future-generation FV tools and who might need to use FV in their research. To satisfy these aims, the course has a practical focus, giving students hands-on experience with a number of tools and explaining their input languages for specifying systems and desired system properties. The course also introduces the underlying mathematical techniques, which gives students a deeper understanding of the tools and will help them use the tools most effectively.  \n  \nTopics the course covers include the following:  \n*Formal verification in context, its current take-up in industry and challenges to its wider  \nadoption  \n*Syntax and semantics of CTL and LTL temporal logics  \n*CTL and LTL model checking techniques, including automata-based approaches and  \nbounded model checking with SAT solvers  \n*The BDD data-structure used at the heart of many model checkers  \n*Writing models for model checking and phrasing useful properties in CTL and LTL  \n*Operational semantics of a simple imperative programming language, weakest precondition  \noperators and verification condition generation  \n*The capabilities of SMT solvers for discharging verification conditions  \n*Assertion-based software verification  \n  \nOptional topics include:  \n*Industrial temporal logics such as PSL and SVA used in hardware verification  \n*Formal verification case studies  \n*Formal verification of hybrid systems, system with both discrete state changes and  \ncontinuous state changes governed by differential equations  \n*Combining formal and simulation-based verification methods  \n*Dual use of temporal logic properties and assertions in formal and simulation-based  \nverification of hardware and software   \n*Software model checking, focusing on its use for finding concurrency bugs  \n*Pattern-based detection of concurrency bugs On completion of this course, the student will be able to:\n     \n         deploy bounded and unbounded model checking techniques to formally verify temporal logic properties of digital hardware and other finite state systems and protocols  use an assertion-based software formal-verification tool to verify desired properties of computer programs  describe the basic mechanics of SAT/SMT solvers and explain how they can be applied to discharge verification queries  assess the pros and cons of using different automated formal verification approaches on a previously-unseen hardware or software system \n     ", "Undergraduate Course: Types and Semantics for Programming Languages (INFR11114) Type systems and semantics are mathematical tools for precisely describing aspects of programming language. A type system imposes constraints on programs in order to guarantee their safe execution, whilst a semantics specifies what a program will do when executed. This course gives an introduction to the main ideas and methods of type systems and semantics. This enables a deeper understanding of existing programming languages, as well as the ability to design and specify new language features.  The course also introduces relevant parts of logic and discrete mathematics used to describe types and semantics. -\tInductive definitions and proof by induction \n-\tProducts, sums, unit, empty, and implication. \n-\tIntuitionistic and classical logic. \n-\tUniversals and existentials. \n-\tLists and higher-order types. \n-\tSimply-typed lambda calculus. Variable binding. \n-\tCall-by-value and call-by-name. \n-\tSmall-step operational semantics. \n-\tProgress and preservation. \n-\tType inference. \n-\tUntyped lambda calculus. \n \nRelevant QAA Computing Curriculum Sections: Comparative Programming Languages, Compilers and Syntax Directed Tools, Programming Fundamentals, Theoretical Computing On completion of this course, the student will be able to:\n     \n         write inductive definitions and prove properties of them using induction  exploit the connection between logic and type systems, where propositions correspond to types and proofs correspond to programs; understand how conjunction corresponds to products, disjunction to sums, and implication to functions  read and understand the presentation of operational semantics and type systems via inference rules for lambda calculus, and be able to modify such a presentation to include a new language feature, such as exceptions  write a formal semantics for a programming language in the operational style, given a careful informal description of the language  state and prove the preservation and progress theorems that link operational semantics and type systems \n     ", "Undergraduate Course: Algorithmic Game Theory and its Applications (UG) (INFR11218) This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead. This course follows the delivery and assessment of Algorithmic Game Theory and its Applications (INFR11020) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11020 instead. On completion of this course, the student will be able to:\n     \n         understand various models of games, how they are related, and how they arise in various applications in computer science and elsewhere  understand linear programming and some of its broad applicability  understand how algorithms are used to \"solve\" such games and their efficiency  model various scenarios as strategic games, and devise algorithms to solve them  understand the aims of the current research frontier \n     ", "Undergraduate Course: Applied Cloud Programming (UG) (INFR11249) This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead. This course follows the delivery and assessment of Applied Cloud Programming (INFR11245) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11245 instead. On completion of this course, the student will be able to:\n     \n         implement the basic building blocks of cloud programming like containerization, micro-services, event-processing and cloud data storage using standard service offerings by the main cloud providers in combination with several communication protocols  compare / contrast the differences between architecture styles like IaaS, PaaS, CaaS, SaaS, etc  summarize cloud service offerings by the main providers and evaluate the differences  contrast different contemporary cloud runtime environments  differentiate the need and structure of Continuous Integration / Continuous deployment (CI/CD)-chains in cloud programming \n     ", "Postgraduate Course: Human-Computer Interaction (Level 11) (INFR11017) The design and implementation of efficient, effective and user friendly computer systems, including software objects and physical internet-enabled things, depends upon understanding both the technology and its users. Only then can designers be confident that these information appliances will be properly matched to the skills, knowledge and needs of their users. The study of Human-Computer Interaction (HCI) seeks to combine perspectives and methods of enquiry drawn from disciplines such as Interaction Design, Psychology and Sociology with the tools, techniques and technologies of Computer Science to create an approach to design which is both relevant and practical. * Background -- the development and scope of HCI. Practical goals.  \n* HCI relevant issues in human perception, memory and thinking processes.  \n* Approaches to designing information appliances -- software objects and physical things.  \n* Design methodologies and notations -- levels of interface design, evaluation methodologies.  \n* Techniques and technologies -- dialogue styles, information presentation.  \n* The design process -- user involvement, iterative design, prototyping.   \n* Evaluation -- methodologies, formative and summative. Performance analysis.  \n* Specific issues in HCI -- for example: internet of things, novel interfaces, accessibility, and privacy.  \n \nRelevant QAA Computing Curriculum Sections: Human-Computer Interaction (HCI), Information Systems, Systems Analysis and Design. On completion of this course, the student will be able to:\n     \n         demonstrate, in writing, knowledge of the issues and problems in HCI , and an  understanding of human perception and behaviour in analysing their interactions with  technology in their every day lives  use established design principles and methodologies to solve HCI problems  acquire confidence in handling different disciplinary perspectives on HCI and the ability to  apply them to design problems  have the ability to devise, plan and execute task analysis and system evaluation studies from an  HCI perspective, and present findings in a clear and effective manner  demonstrate awareness of current areas of research by locating and summarising examples  of recent progress \n     ", "Undergraduate Course: Computer Graphics: Rendering (INFR11246) This course replaces Computer Graphics (Level 11) (INFR11021) from 2023-2024. \n \nThis introductory course in computer graphics comprises of three parts. The first part of the course presents a bird's-eye view of the current state-of-the-art in the field. The latter two parts cover rendering, which is one of the core topics in computer graphics, in detail. The second part of the course teaches central concepts in rendering, along with the relevant mathematics. Finally, the third part of the course focusses on applications of the theory taught in the second part. SYLLABUS \n \nPart I \n* Introduction [1] \n* Radiometry and photometry [1] \n* Modelling [1] \n* Special effects I: relighting [1] \n* Special effects II: compositing [1] \n \nPart II \n* Raytracing [1] \n* The rendering equation [2] \n* Monte Carlo path tracing [2] \n* Sampling [2] \n* Camera effects [1] \n \nPart III \n* Participating media [1] \n* Acceleration structures [1] \n* MCMC methods for light transport [1] \n* Gradient domain path tracing [1] \n* Overview of current research [1/2] \n* Discussion of open problems in rendering [1/2] \n* Conclusion [1] On completion of this course, the student will be able to:\n     \n         define different sub-topics of Computer Graphics and to identify the focus of each of these areas. The student will also be able to describe the key open (and imminent) problems in each focus area  explain the difference between real-time rendering systems (used in the video game industry) and physically-based rendering (used in cinematic and medical applications)  predict performance and output of state-of-the-art rendering libraries and tools for different classes of input models  design and develop programs to solve specific rendering problems by exploiting features of state-of-the-art rendering libraries  interpret the results of standard algorithms on their respective failure cases, and suggest alternatives \n     ", "Undergraduate Course: Professional Issues (Level 10) (INFR10022) The aim of the course is to highlight and allow students to develop understanding of key aspects of the wider context in which their practice as Informatics professionals will occur.&nbsp; Students will develop individual capabilities that complement the technical capacities developed elsewhere in Informatics programmes.&nbsp; These include communication, reflection, reasoning and analysis skills that consider the broader ethical and social implications of their work. The course will be structured around professional and ethical behaviour, and the wider context in which technologies are developed and deployed. Beginning with the ACM Code of Ethics and Professional Conduct, the course will consider the wider context technologies are developed within and teach students to be considerate in their role as ICT professionals.  \n \nA standard breakdown of the course can be expected to be: \n- Introduction (week 1 - gives an overview of the course) \n- Responsibility (2 weeks, ACM principles 1.1, 1.2, 1.4): this will cover the responsibility of computing professionals. It will explore the notion of harms in the context of complex, multi-stakeholder situations, where benefit and harm are contested. \n- Personal Attributes (2 weeks, ACM principles 1.3, 1.5, 1.6 and 1.7): this will cover personal attributes and why these are important by covering a range of situations that challenge professional integrity and work out how to respond to such challenges. \n- Society (3 weeks, ACM principles 3.1, 3.2, 3.6 and 3.7) this will cover the obligations of computing professionals to recognise broader social requirements on their actions, particularly in areas where decisions involve the creation of new infrastructures that will underpin the delivery of public services or they are likely to be incorporated into widely used privately-owned platforms. \n- Leadership (2 weeks, ACM principles 3.3, 3.4 and 3.5) will cover leadership amongst computing professionals, the obligations on leaders to ensure their leadership is fair and benefits those who are being led. This section will include a reflection on how these materials are taught. \n \nThe course will use articles and research from the social sciences, alongside short case studies drawn from contemporary situations that illustrate how knowledge of the decision-making context influences professional conduct and decision-making. Students will develop analytical skills to identify the critical influences on professionals in a range of real-world situations. On completion of this course, the student will be able to:\n     \n         identify a range of professional and unprofessional behaviour in ICT- related contexts and recommend remedial action  identify broader social and ethical considerations influencing the work of ICT professionals and how their work might be mindful of these  identify legitimate interests of broader society in computing systems and suggest approaches incorporating these into development  identify potential harms and benefits of the interventions of computing professionals, considering different stakeholder viewpoints and frameworks  identify examples of good and poor leadership and suggest leadership approaches which themselves encourage and uphold professional conduct \n     ", "Undergraduate Course: Blockchains and Distributed Ledgers (UG) (INFR11238) This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead. This course follows the delivery and assessment of Blockchains and Distributed Ledgers (INFR11144) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11144 instead. On completion of this course, the student will be able to:\n     \n         explain and Analyze protocols and systems involving multiple participants and their security properties  demonstrate the ability to think critically about cybersecurity  program smart contracts as part of scalable information technology services  analyse and evaluate smart contract code utilizing basic cryptographic primitives such as digital signatures and hash functions \n     ", "Undergraduate Course: Randomized Algorithms (INFR11201) This course is about randomness as a resource in algorithms and computation. The course introduces basic mathematical models and techniques and applies them to the design and analysis of various randomized algorithms. We will also cover a variety of applications of probabilistic ideas and randomization in several areas of computer science. 1) Introduction, review of discrete probability, and elementary examples including randomized algorithms for checking identities, matrix multiplication verification, minimum cut in graphs. \n \n2) Discrete Random Variables, Moments, Deviations and Tail Inequalities; applications, including the coupon collector problem. \n \n3) Chernoff bounds and applications: random sampling and estimation of discrete distributions. The birthday paradox and applications. \n \n4) The Probabilistic Method: random graphs and threshold phenomena. Max-cut approximation. Lovasz Local Lemma and application to boolean satisfiability. \n \n5) Random Walks and Markov Chains: hitting and cover times; stationary distributions, random walks on undirected graphs. \n \n6) The Monte Carlo Method; applications including sampling and approximate counting, the markov chain monte carlo method, the Metropolis algorithm. \n \n7) Coupling of Markov Chains, mixing time, and applications, including card shuffling and sampling of graph colourings and independent sets. On completion of this course, the student will be able to:\n     \n         understand and apply fundamental tools in discrete probability (e.g. expectation, concentration inequalities, the probabilistic method, random walks) toward the design and analysis of randomized algorithms  understand randomized algorithms for selected combinatorial and graph problems  analyze expected running time and error probabilities of randomized algorithms  understand the fundamentals of Markov chains and their algorithmic applications  apply Monte Carlo methods such as MCMC to some discrete algorithmic problems \n     ", "Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059) This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can? \n \nThe course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline. The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is \"no\", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS INFR08026). We then explore some different, but always equivalent, ways of defining \"a computer\". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of \"reduction\" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions. \n \nThe second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS INFR08026 analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are \"hardest\" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP. \n \nThe third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus. On completion of this course, the student will be able to:\n     \n         explain (non-)deterministic finite and pushdown automata and use the pumping lemma to show languages non-regular  explain decidability, undecidability and the halting problem  use reductions to show (un)decidability  explain P and NP and use reductions to show (non)-membership of them  write short programs in lambda-calculus \n     ", "Undergraduate Course: Elements of Programming Languages (INFR10061) Programming languages are unique forms of communication that play a dual role: not only as ways for programmers to instruct machines, but as ways for programmers to talk to each other about computation. Paradoxically, they are among the most permanent features of the computing landscape (Fortran, for example, is still widely used 60 years since its invention), and among the most energetic and innovative, with new programming languages introduced every few months, often aiming to simplify Web programming, parallel, or distributed computing. \n \nAlthough few computer scientists will ever design a new, general-purpose language like Java or C++, all computer scientists need the ability to learn new languages quickly, recognise and use (or avoid misusing) common language features, and even design new domain-specific languages for restricted problem domains. The design of programming languages involves many subtle choices and tradeoffs among performance, convenience, and elegance.  \n \nThis course covers the essential programming structures for managing data and controlling computation, as well as abstractions that facilitate decomposing large systems into modules. The course also covers pragmatics of programming languages, including abstract syntax, interpretation and domain-specific language implementation. You will not learn how to use any one language, but instead you will learn the basic elements you need to understand the next 700 programming languages, or even design your own. * Abstract syntax and name-binding; Lexical vs. dynamic scope \n* Modelling programming language features using inference rules \n* Interpreters as a way of defining and exploring language features \n* Domain specific languages, translators, and pragmatics of language processing \n* A selection of topics illustrated by case studies from current or historically important language designs: \n  - data structures: pairs/record types; variant/union types; recursion \n  - abstracting data: overloading; generics; ad hoc vs. parametric polymorphism \n  - control structures: goto, loops, case/switch, exceptions \n  - abstracting control: procedure call/return; function types; continuations \n  - design dimensions: eager vs. lazy evaluation; purity vs. side-effects; state \n  - object-oriented features: objects, classes, interfaces, subtyping, (multiple) inheritance \n* Advanced topics/guest lectures on concurrent, parallel, distributed programming, security, or verification (linking to UG4 year courses) On completion of this course, the student will be able to:\n     \n         investigate the design and behaviour of programming languages by studying implementations in an interpreter  employ abstract syntax and inference rules to understand and compare programming language features  fesign and implement a domain-specific language capturing a problem domain  understand the design space of programming languages, including common elements of current languages and how they are combined to construct language designs  critically evaluate the programming languages in current use, acquire and use language features quickly, recognise problematic programming language features, and avoid their (mis)use. \n     ", "Undergraduate Course: Quantum Cyber Security (UG) (INFR11227) This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead. This course follows the delivery and assessment of Quantum Cyber Security (INFR11187) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11187 instead. The lecture notes as main source and as supplementary reading: \nQuantum Computation and Quantum Information by Nielsen and Chuang \nQuantum Information by Stephen Barnett \nPost-Quantum Cryptography Editors Daniel J. Bernstein, Johannes Buchmann and Erik Dahmen", "Postgraduate Course: Secure Programming (INFR11098) This course studies the principles and practices of secure programming. Secure programming means writing programs in a safe fashion, to avoid vulnerabilities that can be exploited by attackers. It also means using security features provided by libraries, such as authentication and encryption, appropriately and effectively. A range of programming platforms will be considered, ranging from low-level (e.g. Android OS), through web programming (e.g., JavaScript and Python) to high-level large-scale languages (e.g., Java). New and emerging language-based security mechanisms will be examined, including ways of specifying and enforcing security policies statically and dynamically (e.g., to enforce access controls or information flow policies). - Security maintainance of deployed software systems, including \"penetrate-and-patch\", vulnerability enumeration (CVE IDs) and classification (CWE taxonomy). \n- Secure programming techniques and common pitfalls, covering input validation, output filtering, use of cryptography and authentication. Standards such as the OWASP guidelines and the CERT Secure Coding Standards. \n- Malware (including adware, spyware) and its use of software vulnerabilities as an attack vector. Programming resilience against malware. \n- Low-level programming platforms, VMs and their security provisions, for example including process isolation, capabilities and permissions. Mobile operating system platforms as examples. \n- Web programming platforms and security provisions. HTTP protocol, forms, clientside and server-side threats and their avoidance. \n- High-level and Enterprise security programming, including cryptography via cryptographic libraries, authentication via GSSAPI. \n- Security APIs and their distinction from cryptography APIs. Use and design of security APIs for key management, hashing and encryption. Implementation in hardware and software. \n- Language-based techniques for assisting security programming, using dynamic enforcement via runtime monitoring and static enforcement via program analysis. Example tools. \n- Methods and tools for taint checking and information flow tracking to manage programming with sensitive data. Privacy risks with lack of encapsulation. \n- Methods and tools for controlling resource usage with permissions and capabilities, and static analysis for guarantees in advance. On completion of this course, the student will be able to:\n     \n         know how to respond to security alerts specifying CVE ID numbers which identify software issues  identify possible security programming errors when conducting code reviews in languages such as Java, C or Python  define a methodology for security testing and use appropriate tools in its implementation  apply new security-enhanced programming models and tools which help ensure security goals, e.g.,with access control, information flow tracking, protocol implementation, or atomicity enforcement \n     ", "Undergraduate Course: Standards Compliant Software Development (UG) (INFR11253) This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead. This course follows the delivery and assessment of Standards Compliant Software Development (INFR11214) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11214 instead. On completion of this course, the student will be able to:\n     \n         describe the structure of typical standards and regulation for a range of domains of application  explain and motivate the goals set by regulation and standards and how they influence the requirements for compliant systems  given an example system and standard or regulation, justify what evidence would be needed to comply with the regulation or standard  given an example system development process and standard or regulation, evaluate how effective the process can be in generating evidence of compliance to the standard or regulation \n     ", "Undergraduate Course: Bioinformatics 1 (INFR11160) This is an introductory course for the discipline of Bioinformatics for students from both physical science and life science backgrounds. Bioinformatics is an inter-disciplinary subject that develops and implements novel methodologies and tools for analysing and learning from biological data. These data are increasingly large and complex because of significant technological developments and their application at scale in biological and biomedical application areas. \n \nIn this course, we will cover the fundamental domain knowledge needed from both biological and computational disciplines to enable further study and research in this subject with a strong emphasis on practical applications of the taught methods. In this course, we will introduce key biological concepts including the main types of molecules we study (DNA, RNA, and protein) and the cell biological processes involved in the regulation and function of biological systems. The cornerstone of foundational Bioinformatics lies in the analysis of sequences; strings of characters that encode genetic information in organisms. We will describe the theory and put into practice how we work with and analyse these sequences using a range of databases, algorithms, and tools. You will undertake mini research projects using publicly available data to put your learning into practice. The course is taught using Python; students need to be comfortable with basic coding in Python as this is required to use the course notebooks each week and for the assessed coursework. \n \nTopics change slightly each year, but typically include: \npairwise and multiple sequence alignment, biological databases, ontologies &amp; functional enrichment analysis, network analysis, multi-omics analysis (transcriptomics, proteomics, methylomics), and biomedical text analytics. On completion of this course, the student will be able to:\n     \n         communicate between biological and computational domains to facilitate effective inter-disciplinary working  use and / or implement Bioinformatics tools, services, and software in practical research  have sufficient background knowledge, skills and understanding to discover and apply additional bioinformatics techniques in future work \n     ", "Undergraduate Course: Software Testing (INFR10057) This course further develops the introduction to testing in Informatics 2 - Software Engineering and Professional Practice. The course develops skills to select and apply a testing strategy and testing techniques that are appropriate to a particular development process, software system, or component. Class members will become capable users of test tools; will be able to assess the effectiveness of their testing activity; and will be able provide evidence to justify their evaluation. The course is assessed by portfolio demonstrating the achievement of the learning outcomes. This course is based on the IEEE Software Engineering 2004 Software Testing syllabus. Software testing is embedded in all software development processes and in recent years with the widespread adoption of DevOps and Continuous Integration, Delivery and Deployment, testing tools, automated testing, and the use of operational data in testing have become increasingly important.   \n \nThe course includes the following topics: \n \nTesting techniques and principles: Defects vs. failures, equivalence classes, boundary testing. \nTypes of defects. \nBlack-box vs. Structural testing. \nTesting strategies: Unit testing, integration testing, profiling, test driven development. \nState based testing; configuration testing; compatibility testing; web site testing. \nAlpha, beta, and acceptance testing. \nCoverage criteria. \nTest instrumentation and tools. \nDeveloping test plans. \nManaging the testing process: Development Lifecycles \nProblem reporting, tracking, and analysis.  \nRelevant QAA Computing Curriculum Sections: Software Engineering \n \nClass members will take the development of tests for a small software project as their focus.  For students taking the Informatics Large Practical course we recommend they take the software developed there as their focus.  However, students are free to choose other software projects if they prefer.  The goal is to gain experience of the full spectrum of testing techniques, test planning, testing process and demonstrate that experience on the chosen software project.   \n  \nClass members will work in groups of 10 and will be encouraged to share experience by providing comment and reviews of others work.  Weekly tutorials will be structured around different aspects of the course and the development of a portfolio describing the work done on the selected software project. \n \nEach class member will develop an individual portfolio demonstrating they have achieved the learning outcomes of the course.   This will use work on the testing of their chosen software project as evidence, augmented by appropriate other evidence.  Acceptable kinds of evidence demonstrating achievement of the learning outcomes are diverse so part of the assessment is the design of the portfolio in advance of its construction.  There are two or three \"standard\" portfolio \ndesigns but class members are encouraged to develop their own approaches that take account of their personal strengths and weaknesses.  Portfolio designs will include specific assessment criteria.    \n \nEach week there will be a group meeting, around 1-2 hours of recorded material covering the lecture material in the course.  Guest lectures given by a practitioner on their experience of testing in different contexts will illustrate the application of the concepts covered in the course in the development of a real-world product. On completion of this course, the student will be able to:\n     \n         analyze requirements to determine appropriate testing strategies  design and implement comprehensive test plans with instrumented code  apply a wide variety of testing techniques and compute test coverage and yield according to a variety of criteria  evaluate the limitations of a given testing process, using statistical methods where appropriate, and summarise outcomes  conduct reviews and inspections and design and implement automated testing processes \n     ", "Undergraduate Course: Automatic Speech Recognition (UG) (INFR11219) This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead. This course follows the delivery and assessment of Automatic Speech Recognition (INFR11033) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11033 instead. On completion of this course, the student will be able to:\n     \n         describe the statistical framework used for automatic speech recognition  understand the weakness of the simplified speech recognition systems and demonstrate knowledge of more advanced methods to overcome these problems  describe speech recognition as an optimization problem in probabilistic terms  relate individual terms in the mathematical framework for speech recognition to particular modules of the system  build a large vocabulary continuous speech recognition system, using a standard software toolkit \n     ", "Undergraduate Course: Introduction to Quantum Computing (UG) (INFR11222) This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead. This course follows the delivery and assessment of Introduction to Quantum Computing (INFR11099) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11099 instead. On completion of this course, the student will be able to:\n     \n         Use the mathematical framework of quantum computation to predict outcomes of quantum circuits  Explain and analyse quantum algorithms described in quantum circuit and measurement-based quantum computing models  Discuss the difference of performance between classical and quantum computer for different computational tasks  Master notions of more advanced topics, such as error correction on algorithms for near-term architectures  Critically read and understand scientific literature on quantum computing \n     ", "Undergraduate Course: Security Engineering (UG) (INFR11228) This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead. This course follows the delivery and assessment of Security Engineering (INFR11208) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11208 instead. On completion of this course, the student will be able to:\n     \n         identify ways of attacking a real-world system, leading to a threat model, a security policy, protection goals and assurance targets  use adversarial thinking to analyse the relationships between threats, hazards, actors and defence mechanisms  compare and synthesise the perspectives of different system stakeholders and threat actors, using economic and psychological viewpoints as well as technical ones  demonstrate critical thinking about unsolved problems, residual risk and emerging threats as systems scale or their environment changes \n     ", "Undergraduate Course: Usable Security and Privacy (UG) (INFR11230) This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead. This course follows the delivery and assessment of Usable Security and Privacy (INFR11158) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11158 instead. On completion of this course, the student will be able to:\n     \n         understand key topics in Security, Privacy, and Human-Computer Interaction  identify privacy and security concerns in different contexts  critically evaluate the literature to develop an academically-informed view of proposed security and privacy solutions from a human factors perspective  design studies to rigorously evaluate the usability of a security or privacy tool  apply techniques and design approaches to security and privacy problems to create usable solutions \n     ", "Undergraduate Course: Computer Graphics: Geometry and Simulation (UG) (INFR11247) This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead. This course follows the delivery and assessment of Computer Graphics: Geometry and Simulation (INFR11241) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11241 instead. On completion of this course, the student will be able to:\n     \n         identify and isolate geometric problems and produce an algorithm to fit  implement basic method in geometry and simulation which would be adequate for either further re-search or as an initial knowledge to find work in the relevant industry (example of advanced industry that uses this core knowledge: 3D printing, architectural design, medical imaging, weather simulations, robotics)  use software and tools (e.g., Python and C++) to implement geometric algorithms and test their results  identify, fix, and test for possible issues with geometric algorithms in a way that transcends just 'soft-ware bugs' but rather problems with a geometric context \n     ", "Postgraduate Course: Extreme Computing (INFR11088) Extreme Computing deals with the principles, systems and algorithms behind Web-scale problem solving. This touches upon the technologies and techniques used by companies such as Google, Facebook, Amazon, and Microsoft, using warehouse-scale computing and massive datasets. The course will be in three parts: the principles behind extreme computing (cloud computing, scaling, performance, etc.), supporting infrastructure (distributed file systems, replication, Web services etc.) and algorithms (Map/Reduce, case studies from Natural Language Processing, data processing, machine learning, data streaming). The course is to be conceptually split into three main areas, with each area not necessarily accounting for an equal portion of the syllabus. The three areas and the material covered in each area are as follows: \n  \n* Background: Motivation for new computing paradigms; introduction and differences between cloud and cluster computing; scaling and performance. \n  \n* Infrastructure: Distributed file systems; multi-tier systems, virtualisation; replication; fault tolerance; concurrent programming; web services. \n  \n* Data structures and algorithms: decentralised data structures; programming frameworks; design and implementation of Map/Reduce programs; dealing with massive amounts of data; case studies from natural language processing, data processing, machine and deep learning; and computation over infinite streams. \n \nThe course will also deal with the legal, social, ethical, and professional issues involved in remotely storing data in cloud deployments and will also deal with potential solutions to these problems On completion of this course, the student will be able to:\n     \n         demonstrate knowledge of the need for extreme computing by providing motivating examples of the scale of problems only computing at an extreme scale can solve (e.g., problems motivated by the use of large datasets and complex computation)  demonstrate knowledge of the problems associated with computing at an extreme scale, such as the need for multi-tier systems and programming models  demonstrate knowledge of the infrastructure necessary for computing at an extreme scale through enumerating different file system designs, virtualisation techniques, replication, fault-tolerance paradigms, and alternative system designs  demonstrate knowledge of data structures that can be used to efficiently process large datasets; and cluster-based algorithms for data processing, machine learning, and low latency processing through the use of distributed programming paradigms  demonstrate knowledge of large-scale distributed deep learning systems for the purposes of solving machine learning problems of extreme scale \n     ", "Advanced Topics in Functional Programming   This module exposes students to state of the art functional programming languages and presents unusual or unexpected applications of functional programming, such as system-level programming. Students can expect to develop advanced functional programming skills and awareness of experimental programming languages.", "CSC3121 : Distributed Systems To explain how concepts and techniques from computer networking, operating systems, and object-oriented programming can be combined to develop distributed systems. The course will cover the underlying theory of event ordering, logical and physical clocks, and then the practical aspects of distributed system structuring using the client-server approach. Structuring distributed applications: using client-server and remote procedure calls; also, how atomic transactions, with their 'ACID' properties provide a reliable way of sharing of information; design challenges in remote procedure calls and in realizing ACID properties; the solutions commonly deployed to address these challenges, together with their conceptual underpinnings. \nOrdering of events: using logical and physical clocks. \nPractical aspects: analysing a distributed system design and designing a total order delivery system. ", "Database Systems (H) COMPSCI4013   From the basic skills derived in CS  1F  , to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite.     Understanding of how conventional programming languages   (e.g., Java/JDBC)   interact with databases;    Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;    Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;    Understanding the cost-based query optimization methods;    Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;    Introduction to data analytics tasks and advanced methods &amp; techniques.     From the basic skills derived in CS1  F  , to develop the software engineering and database administration skills required for designing, creating, running and developing a relational database application and its associated application software suite.     Understanding of how conventional programming languages interact with databases;    Understanding of the fundamental concepts, functional dependency and normalization theories and methods of the relational data model;    Understanding the principles of database indexing, file structures, hash-based file structures, tree-based indexes;    Understanding the cost-based query optimization methods;    Understanding the principles of selection selectivity and joint selectivity using histograms in query optimization;    Introduction to data analytics tasks and advanced methods &amp; techniques.     By the end of the course students will be able to:    1.   Demonstrate competence in performing sophisticated queries and updates against an existing RDBMS using most of the advanced features of SQL standard;    2.   Demonstrate skills in designing, writing, changing and testing programs   (  e.g., Java/JDBC  )   that use an RDB  MS  ;    3.   Interpret and optimize SQL queries based on the principles of the cost-based query optimization;    4.   Provide an explanation of the database indexing techniques including File Hashing, Search Trees, Multi-level Indexes, B Trees and B+ Trees;    5.   Specify advanced constraints on the DB scheme   based on Functional Dependencies &amp; Normalization  ;    6.   Appreciate   Data analytics and aggregation tasks and t  echniques  ;    7.   Provide an explanation of the selection selectivity and join selectivity using histograms for query optimization.  ", "Operating Systems (H) COMPSCI4011   To introduce the students to the styles of coding required with an OS;     To give a thorough presentation of the contents of a traditional OS, including the key abstractions;    To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour;     To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.     To introduce the students to the styles of coding required with an OS;     To give a thorough presentation of the contents of a traditional OS, including the key abstractions;    To show the range of algorithms and techniques available for specific OS problems, and the implications of selection specific algorithms for application behaviour;     To develop an integrated understanding of what the computer is doing, from a non-naive view of hardware to the behaviour of multi-threaded application processes; present the alternatives and clarify the trade-offs that drive OS and hardware design.     By the end of this course, students will be able to:     1.   Use current operating system terminology in correctly explaining the functions of an OS;    2.   Relate operating system functions to computer hardware;    3.   Describe the mechanisms of interrupts, context switching and address translation;    4.   Describe the relation of operating system functions to language run-time systems;    5.   Explain the significance of concurrency in operating system design;    6.   Demonstrate an understanding of the semantics of operating system functions, including scheduling and memory management, by being able to describe their functioning;    7.   Implement simple operating system components  &nbsp;and basic algorithms (CPU scheduling, deadlock detection and avoidance algorithms);    8.   Critique designs and implementations of OS components,   eg  &nbsp;the Unix file system;    9.   Illustrate the influence of operating system functions on application behaviour;    10.   Compare and contrast alternative approaches to hardware components such as the CPU and bus;    11.   Engineer medium-sized (multi-file) software components for integration into larger C   and/or Java programs  .  ", "Undergraduate Course: Introduction to Modern Cryptography (UG) (INFR11221) This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead. This course follows the delivery and assessment of Introduction to Modern Cryptography (INFR11131) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11131 instead. On completion of this course, the student will be able to:\n     \n         apply basic number theory, group theory and discrete probability to analyse cryptographic algorithms  understand the notions of pseudorandom functions/generators and their connection with encryption schemes  develop the ability to model security problems and to write security proofs  understand fundamental cryptographic primitives including Key Exchange, Digital Signatures, Oblivious Transfer, Public-Key Encryption, Commitment, and critique or prove the security of candidate cryptographic schemes that are supposed to realize the above primitives  understand basic computational problems that are important for cryptography such as the factoring problem, the RSA problem, the discrete-logarithm problem, and develop the ability to reduce the security of cryptographic schemes to computational problems \n     ", "Programming in Python for Data Science   Summary module description:   \n  The module introduces students to the Python programming language and the Python data science library ecosystem through application of programming fundamentals, data processing, and machine learning techniques.&nbsp; Data manipulation and statistical data science methods are also covered.  \n     Outline content:   \n  The course begins with an introduction to the Python programming language and the Python library ecosystem.&nbsp; Students will perform a series of practical exercises designed to develop skill in Python scripting and wider program development. These will incorporate aspects of data analysis and professional and scientific research techniques.  \n \n The Python language will be covered in depth, including:  \n \n  \n Data types, operators, and flow control  \n Functional and object-oriented programming  \n Using DataFrames to organise and manipulate data with Pandas  \n Working with matrices and arrays using NumPy  \n Data visualisation with Matplotlib  \n Analysing data using scikit-learn  \n Handling data with widely used, open-source Python libraries  \n  \n \n Example application to data science:  \n \n  \n Regression  \n Clustering  \n Classification  \n Network (graph) analysis  \n  \n     Assessable learning outcomes:  \n  On completion of this module, students will be able to:&nbsp;  \n \n  \n Implement common computer science algorithms in the Python programming language;&nbsp;  \n Demonstrate an understanding of the use of functional&nbsp;and object-oriented&nbsp;programming paradigms in Python;&nbsp;  \n Read and manipulate data in several formats to extract specific features;&nbsp;  \n Assemble, implement, and select appropriate data science methodologies in Python;  \n Employ third-party Python libraries appropriately to&nbsp;design and create well-structured programs&nbsp;for practical applications.&nbsp;  \n  \n  ", "Virtual Reality   Summary module description:   \n  To describe virtual reality in terms of the scientific issues, application areas and strengths and weaknesses of the technology. To provide experience of various devices and software.&nbsp;To provide hands-on experience of various devices and software.  \n \n This module also encourages students to develop a set of professional skills, such as creativity (of virtual world), group work, scripting and effective use of commercial software.  \n     Outline content:   \n  In a virtual reality, users can interact within a 3D computer-generated environment through multi- modal displays that support interaction through vision, hearing, and touch. This course will discuss what is (and is not) virtual reality, introduce topics relating to perception of virtual environments (e.g. stereo vision and sound localisation), and introduce a range of display and input technologies (e.g. head-mounted displays, cubic projection displays, and tracking technologies). The course will develop the mathematical and programming framework for highly interactive environments including modelling and animation of 3D objects, and the programming techniques used to render these in real-time.  \n     Assessable learning outcomes:  \n  By the end of the module, the student should be able to demonstrate an understanding of the techniques used in Virtual Reality and 3D modelling skills. The student will be able to compare the applicability of various VR technologies to given applications and be able to apply their understanding to the design of an entire VR system, composing display technology and software.  \n  ", "Blockchain Computing   Summary module description:   \n  The advent of Blockchain technologies as a confluence of distributed systems for transferring value, asymmetric encryption and consensus seeking algorithms has evolved through a trend from web2.0, web3.0, and crowdsourcing promising computing for decentralisation and democratisation of transaction processing.&nbsp;  \n \n The increasing number of potential application domains being considered for the take-up and scale-up of this technology makes a compelling case for the provision of this course.&nbsp; &nbsp;This is to ensure that our Computer Science graduates\u2019 awareness of latest technological developments and their employability prospects are enhanced through gaining a sufficiently deep understanding of this emerging technology.  \n&nbsp;&nbsp;  \nThis modules will deliver a theoretical and practical implementation level understanding of the various layers of the Blockchain technology stack including asymmetric encryption, mining (Proof-of-Work), Proof-of-Stake&nbsp; consensus algorithms, Blockchain validation and integration as well as the potential Ethical, Legal and Societal issues arising from failure to incorporate the appropriate security-privacy safeguards.  \n     Outline content:   \n   \n Introduction to the fundamental concepts of a distributed trustless ledger such as immutability, irreversibility, the layers of Blockchain technology stack; including overview of the architectural layers of a Blockchain, network (peer-to-peer) and the data structures  \n Transactions processing, hashing, asymmetric encryption  \n Digital signature, consensus algorithms  \n Consensus reaching using variants of Proof-of-Work &nbsp;and Proof-of-Stake algorithms  \n Smart contracts&nbsp;  \n Concepts re integrity and resolution of Blockchain, avoiding duplication of work  \n Byzantine Fault Tolerance: fault tolerance amongst the peer-to-peer network of nodes  \n Merkle root algorithm, forks resolution, interoperability  \n Security &amp; privacy, public versus private (Permissioned, Permissionless) Blockchain  \n Ethically and socially responsible design of Blockchains&nbsp;  \n  \n     Assessable learning outcomes:  \n  At the end of the module studies, students should be able to:  \n \n  \n Conceptualise the distributed ledger architecture at various levels of abstraction  \n Understand the theoretical underpinning of Blockchain architectural layers  \n Understand the issues relating to the efficient, secure and privacy-aware deployment of Blockchain layers  \n Implement the primary layers of a Blockchain as a laboratory simulation of a small-scale Blockchain. This will help the students assimilate the subject more deeply and gain a systemic understanding of the Blockhain architecture through experience in analysing and building the primary Blockchain components and their integration.&nbsp;  \n  \n  ", "Research and Professional Skills (M) COMPSCI5092   This course covers the fundamental principles of the scientif  ic method, and   the core skills of planning, designing, executing, evaluating and presenting research.   In addition, it introduces the social, ethical, legal, and professional issues involved in the widespread deployment of information technology     Introduce students   to critical research techniques, core scientific principles,   methods for conducting and evaluating scientific investigations  ,  &nbsp;  and   important techniques for planning and managing a research project  .  &nbsp;  To stimulate thinking about the social and ethical implications of the widespread and sustainable use of IT  ;  &nbsp;  develop students' awareness of the laws and professional codes of conduct governing the IT industry;  &nbsp;  encourage students to adopt principled, reasoned stances on imp  ortant issues in the topic area.     By the end of this course students will be able to:    1.   Identify the principal social, ethical, legal, a  nd professional issues in information technology (IT);    2.   Explain the laws and codes of conduct relevant to the IT industry, and relate them to examples of IT in practice;    3.   Constructively criticise the arguments of others  ;    4.   Critically review research papers;     5.   Perform a comp  rehensive literature search and write a comprehensive literature survey;    6.   W  rite an appropriate study design  &nbsp;for a chosen CS research problem;    7.   Perform cri  tical analysis of experimental designs;    8.   Discuss issues relating to the  &nbsp;ethics approval of experiments.  ", "Data Science Algorithms and Tools   Summary module description:   \n  Automated data collection and mature database technology lead to tremendous amounts of data stored in databases, data warehouses and other information repositories. In this context, automated data analysis and data modelling tools and algorithms (Data Mining) are becoming essential components to any information system. Application areas of these techniques include scientific computing, intelligent business, direct marketing, customer relationship management, market segmentation, store shelf management, data warehouse management, fraud detection in e-commerce and in credit card transactions, etc.  \n     Outline content:   \n   \n Introduction to Data Mining;  \n Introduction to Data Science and Machine Learning platforms  \n KNIME  \n Data preprocessing;  \n Proximity measures;  \n Regression, Classification and model evaluation;  \n Clustering and cluster validity;  \n Decision Tree Induction;  \n Association Rule Mining;  \n  \n     Assessable learning outcomes:  \n  Students are expected to understand the general Data Mining principles and techniques, and to be able to apply them in different contexts. In a practical project a data workflow is designed and developed using advanced tools for data science to combine data mining algorithms and analyse real-world datasets.  \n  ", "Service-Oriented System Applications   Summary module description:   \n  The module aims to adopt service-oriented concepts and principles for developing and integrating software applications and technology. This approach represents business operations in \u201cbusiness services\u201d and breaks down a software application into common repeatable \u201capplication services\u201d and \u201ctechnology services\u201d. Using this approach, enterprises can configure and reconfigure these sets of services for conceptualising service-oriented systems applications which are aligned with business structure and goals. In order to represent the architectural requirements, the enterprise architecture and ArchiMate can be employed for modelling service-oriented systems applications.  \n     Outline content:   \n   \n Fundamentals of a service-oriented business application  \n Service-oriented functional components for building and integrating the business applications (e.g. CRM, ERP, and SCM);  \n The enterprise architecture methodology with its techniques through the modelling language of ArchiMate;  \n Modelling of enterprise architecture elements and aligning the system application elements with their influential enterprise elements from the business layer and technology layer;  \n Validation of the architecture design through a given scenario.  \n  \n     Assessable learning outcomes:  \n  After completing the module, a student should be able to:  \n \n  \n Understand the service orientation paradigm and the enterprise architecture theory to aid enterprise analytics;  \n Apply the enterprise architecture theory to specify key business and technical elements, and the alignment between these elements in an enterprise;  \n Use the modelling language of ArchiMate to model an enterprise architecture to reveal business strengths and weaknesses, and sustainability which are largely determined by an integration of business operations, applications, and technologies;  \n Use the enterprise architecture model to support decision making on improvements and predict the future business.  \n  \n  ", "Distributed Systems and Parallel Computing   Summary module description:   \n  This module introduces concepts, principles, tools, techniques and algorithms for distributed systems and parallel computing, and examines the deployment of relevant applications in Cloud, big data analytics, and massive-parallel environment. In this context, this module covers the topic ranging from hardware and software architectures and algorithms in the development of distributed systems, MapReduce program paradigm and Hadoop ecosystems, and in-memory and stream computing tools such as Spark, Storm, and Flink; to parallel programming paradigms for relevant hardware and software applications, such as OpenMP and MPI, and massive parallelism provided by GPUs. Talks from academia and industry will be incorporated in teaching for value adding in learning.  \n     Outline content:   \n   \n Overview to distributed and parallel computing; hardware and software architectures  \n Use-cases for distributed and parallel applications from industry and science  \n Issues in designing of distribution and parallel systems and algorithms  \n Industry relevant processing models for big data and tools like Hadoop and Spark  \n Relevant algorithms and data structures  \n Introduction to scientific computing  \n Parallel programming paradigms and concepts with a focus on OpenMP and MPI  \n  \n     Assessable learning outcomes:  \n  Students completing this module should be able to:  \n \n  \n characterize distributed systems and parallel computing  \n understand how to solve parallel problems via distributed and parallel algorithms  \n implement solutions for easy distributed and parallel problems  \n harness the capabilities of distributed and parallel environments including on personal devices assess the characteristics of distributed applications and systems  \n  \n  ", "Compilers   Summary module description:   \n  This module presents&nbsp;the theory and practice of compilers, including how to write a compiler and introductory computation theory. A compiler turns source code written by a human into machine code executable by a computer. Thus knowing how a compiler works allows one to understand the connection between programming and computer architecture. The module also considers broader issues in programming language design and implementation.  \n     Outline content:   \n   \n The typical structure of a compiler and how it enables code reuse;&nbsp;  \n Different ways of specifying a programming language;  \n Regular expressions and grammars in Backus Naur Form (BNF) for specifying programming language tokenisation and syntax;  \n Lexical analysis and syntax analysis using parser generators, such as lex/yacc or ANTLR;&nbsp;  \n Writing a simple lexical analysis engine or recursive descent parser by hand;  \n Finite state automata and their relevance to lexical analysis;  \n Earley\u2019s parsing algorithm (or some other parsing algorithm) for context free grammars;&nbsp;  \n Semantic analysis : the roles of variable scoping, storage allocation and types in a programming language;  \n Intermediate code generation for a variety of common programming language constructs, such as assignment, compound expressions, conditionals, loops, functions, arraysand objects;  \n Machine code generation;  \n Goals of program optimisation and the importance of considering side effects in ensuring safe optimisation;  \n Some common program optimisations;  \n Fundamental limits of optimisation, as imposed by the Halting Theorem.  \n  \n     Assessable learning outcomes:  \n  On completion of this module, students will be able to:  \n \n  \n Write a compiler for a simple programming language, or modify an existing one;  \n Use a parser generator to create a parser for a programming language;  \n Describe and explain the purpose of each stage in a typical compiler;  \n Compute whether a finite state automaton recognises an input word;  \n Convert descriptions of regular languages between naturallanguage, regular expressions and finite state automata;  \n Suggest a rule in Backus Naur Form (BNF) for a particular programming language construct;  \n Draw a parse tree or left-most derivation for a sentence, given a grammar in BNF;  \n Describe how a parsing algorithm works and trace its execution for a simple example;  \n Demonstrate that a given grammar is ambiguous;  \n Rewrite an ambiguous grammar to enforce the correct precedence or associativity;  \n Explain the role of types in a programming language;  \n Suggest what type checks are necessary for a programming language construct or fragment of code;  \n Write intermediate code corresponding to high-level language code;  \n Describe common programming language optimisations and apply them to high-level language code or intermediate code;  \n Critically analyse the correctness and effectiveness of unfamiliar optimisations;  \n State the Halting Theorem and its relevance to program optimisation;&nbsp;  \n Informally prove the Halting Theorem;  \n Critically analyse decisions in programming language design and implementation.  \n  \n  ", "Social, Legal and Ethical Aspects of Computing   Summary module description:   \n  This module provides students with a sound grounding in a range of social, legal, ethical and professional (SLEP) issues that might arise in their possible roles as working in technology related disciplines.  \n     Outline content:   \n  The social impact of technological change will be taught using interactive lectures, presenting a topic to the class and giving a starting point from which the students can give their own ideas and reasoned arguments. Encouragement will be given for students to continue these discussions outside lectures both in person and using online discussion tools such as Blackboard.  \n \n Assignments (requiring self-directed research) will support the aims of the module, in the form of assessment for learning.  \n     Assessable learning outcomes:  \n  By the end of the course, students should be able to:  \n \n  \n Understand the impact that new technologies have on individuals, businesses, communities and globally;  \n Present compelling arguments about the social impact of new technological developments;  \n Understand the legal and ethical implications of providing a service or product;  \n Understand the legal and ethical issues of holding and using data.  \n  \n  ", "Text Mining and Natural Language Processing   Summary module description:   \n  This module introduces both the theory and practice of Text Mining and Natural Language Processing (NLP).  \n     Outline content:   \n  This module will provide an overview of the field of Text Mining and NLP and its sub-areas, and will introduce and explain its key techniques, including their applicability and limitations. Topics covered will include:  \n \n  \n Regular expression, Text Normalization  \n N-gram and language model, part-of-speech tagging  \n lexical semantics, Word Senses and WordNet  \n Syntactic and Semantic parsing  \n Text classification, sentiment analysis  \n Information extraction including name entity recognition and relation extraction  \n Advanced topics: Machine learning for NLP, Word embedding, Hidden Markov model and Viterbi algorithm  \n  \n     Assessable learning outcomes:  \n  By the end of this module, students should be able to  \n \n  \n Understand and apply the fundamental principles of text mining and natural language processing;  \n Apply methods and algorithms to process different types of textual data;  \n Empirically evaluate the performances of methods and algorithms by using accuracy and efficiency metrics; and  \n Apply analytical and programming skills through using the existing NLP methods andtools such as NLTK and scikit-learn (python)  \n  \n  ", "LF Elementary Computer Programming To introduce basic concepts of computer programming in a procedural language.  In so doing, students will both gain practical experience in programming, use some of the basic structures of concepts of procedural programming and have an insight into some of the capabilities and limitations of programming.  By the end of the module students should be able to:   Identify data types and be able to manipulate them   Identify basic programming constructs such as sequence, branching and iteration and construct programming code using these constructs   Reason using Boolean logic, both in in constructing conditional expressions and with truth tables   Understand and use simple problem decomposition in designing programs, particularly in the use of functions and procedures.  ", "Software Engineering: Quality and Testing   Summary module description:   \n  Exploring software testing in the context of overall quality and competing commercial pressures, the module develops the knowledge and skills required for planning and executing comprehensive testing, including static and dynamic approaches, and methods of automation.  \n     Outline content:   \n   \n Introduction to requirements, testing and quality systems;  \n The fundamental test process;  \n Testing throughout the lifecycle, acceptance and regression testing;  \n Testing techniques;  \n Test management;  \n Designing practical testing systems;  \n Testing in Agile projects;  \n Introduction to the Capability Maturity Model.  \n  \n     Assessable learning outcomes:  \n  By the end of the course, students should be able to:  \n \n  \n Explain why testing is necessary;  \n Create a quality plan for the lifecycle of development;  \n Define test cases for black and white box problems;  \n Manage and execute static tests; with particular attention to requirements and design documents;  \n Present a systems view of preparing and executing, managing and reporting tests;  \n Explain the challenge of testing in agile environments;  \n Relate the test activity to the Capability Maturity Model (CMM).  \n  \n  ", "Visual Intelligence   Summary module description:   \n  This module covers the topics of visual perception and computer vision.  \n     Outline content:   \n  The module includes the following: introduction to natural vision (human perception); theory of image-based pattern classification; geometric-based vision; appearance-based vision; object recognition; applications of computer vision.  \n     Assessable learning outcomes:  \n  Students who complete this module will have:  \n \n  \n basic knowledge of human perceptual skills relating to vision;  \n the ability to address high level issues relating to computer vision including pattern classification, knowledge of geometric-based vision and appearance-based vision;  \n knowledge of application of computer vision including generic object recognition, cognitive computer vision and computational visual surveillance.  \n  \n  ", "Software System Design with UML   Summary module description:   \n  This module delivers the Unified Modelling Language (UML) methodology and its selected techniques which aid to articulate system users\u2019 needs and then transform the needs on to software application solutions. Students will be engaged in an interactive learning environment in that they develop professional application design knowledge and skills.  \n     Outline content:   \n   \n OO design theory and process;  \n UML design methodology;  \n UML techniques with their concepts and principles;  \n Requirement specifications modelling in both static and dynamic perspective in a given context; and  \n Validation of the models and their input and output.  \n  \n     Assessable learning outcomes:  \n  A student completing the module should be able to  \n \n  \n Understand the object-oriented (OO) systems theory;  \n Establish a \u201cSystems Thinking\u201d approach for conducting requirement analysis and software design;  \n Master the UML methodology including its techniques to modelling requirements specifications; and  \n Apply the UML techniques in a context domain and evaluate design decisions.  \n  \n  ", "Image Analysis   Summary module description:   \n  &nbsp;The module delivers a set of topics involved in image analysis, such as image enhancement, image compression, image segmentation, and colour image processing. Relevant techniques are introduced in lectures and practised in assigned lab-based coursework.&nbsp;  \n     Outline content:   \n  This module covers the following topics:  \n \n  \n digital image fundamentals;  \n image enhancement in the spatial domain;  \n image enhancement in the frequency domain;  \n colour image processing;  \n mathematical morphology in image processing;  \n image compression;  \n image segmentation.  \n  \n     Assessable learning outcomes:  \n  Students who complete this module will have:  \n \n  \n basic skills for image analysis;  \n the ability to address issues associated with image transformation, histogram analysis and modification, image morphological operations and colour image manipulation;  \n skills to develop algorithms for digital image enhancement, image compression and texture-based image segmentation.  \n  \n  ", "Fundamentals of Network and Cloud Computing This module introduces students to the fundamental aspects of networks of computer systems, including systems that provide services in the cloud. The content covers the architecture, structure, functions, components and models used by the internet and other computer networks. The OSI and TCP/IP layered models are covered, including the protocols involved and the devices and services present in each layer. The module also covers the architecture of the cloud service models available on the internet when compared to those available on a local system or network, together with the fundamental capabilities of the major platforms that support provisioning of these services. The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 72%. The percentage of Work Based Assessment for this module is 0%.  Principles of communications and how networks and cloud computing have changed our lives  Network computing: Introduction to the concepts of networks, data, local area networks (LANs), wide area networks (WANs), internetworks. -The OSI and TCP/IP layered models of networks and the process of data encapsulation -Network layers and their associated protocols and standards, protocol data units, hardware and software, including (OSI layers listed, but also refer to TCP/IP equivalents): oApplication layer: protocols such as HTTP(S), DNS, FTP oTransport layer: TCP, UDP oNetwork layer: IP, network addressing, packets, path determination, NAT oData link layer: LLC, MAC, frames, Ethernet oPhysical layer: LAN media and standards  Cloud computing: -Virtualisation -Cloud architecture and cloud service models: IaaS, PaaS, SaaS -Cloud services, such as computation, storage, security, applications and data  -Services provided by cloud platforms such as Amazon Web Services, Microsoft Azure, Google Cloud, IBM Cloud       On successful completion of this module, students should be able to:  1 - Demonstrate an understanding of computer networks, network communication and the importance of standards and protocols in computer networks.  2 - Explain how the internet and the cloud are used to support business activities. 3 - Make use of appropriate cloud services in the solution to a problem.     ", "Data Integration and Visualisation   Summary module description:   \n  This module focuses on key aspects of data integration and data visualisation, covering concepts, principles, techniques and tools for the effective analysis of data. Students will learn techniques for processing various types of data for information visualisation. The students will be encouraged to test their technical abilities for data integration and develop their creative skills in visualising data to support data-driven decision making.  \n     Outline content:   \n   \n Context: Importance of data visualisation and its historical account.  \n Nature of data and data sources diversity  \n Data integration methods and technologies, e.g. ETL (extraction, transformation and load)  \n Data warehousing strategy, architecture and design (star schemas, temporal dimensions, cubes, etc.)  \n Critical analysis using multidimensional datasets  \n Types of data visualisation methods (e.g., distribution correlation, ranking) and charts  \n Data visualization design techniques and effective presentation (e.g., understanding data statistics)  \n Interactive Dashboards  \n Impact of designs on the presented statistics Type of tools (e.g., Tableau)  \n Real-world application domains and requirements (e.g., financial trends, genetics, regression)  \n  \n     Assessable learning outcomes:  \n  On successful completion of the module, students will be able to:  \n \n  \n Critically choose and then apply appropriate methods to conduct data integration and data visualisation;  \n Have a sound understanding of the essential concepts and principles of data integration and data visualisation techniques;  \n Develop data-driven approaches for information discovery and processing in a domain context through data integration and data visualisation;  \n Design and implement a data integration and visualisation tool which can perform a set of functions, such as ETL, multidimensional datasets, data warehouse, and interactive dashboards;  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n  \n  ", "Fundamentals of Computer Systems This module introduces students to the fundamental aspects of computer systems: architectures applications and data. The content will include an examination of computer systems from the very small (bits and bytes), through data representation (binary), to instruction sets, the fetch and execute cycle and computer memory organisation. The module will also include working with an operating system using a command line, and controlling a computer using assembly language. Additional hardware topics such as peripherals and embedded systems will be introduced. Students will gain practical experience in the investigation of computer systems and architecture through a programme of laboratory work and tutorial study.  Data representation and manipulation binary, hexadecimal, floating point number representation and negative numbers The architectural building blocks of a simple CPU including registers, ALU, control unit and data-paths.  The fundamentals of instruction fetch, interpretation and execution.  Introduction to assembly language: vs machine language, derivation of control steps for assembly instructions How a program works and how it is stored on hard disc, high level languages, compiling a program, bootstrap process.  Operating systems, software and applications: Linux, command line and basic scripting.  File systems and directories: Mapping files onto disc blocks, file structures and their advantages and disadvantages.  Systems organization including distributed-systems, parallel and multi-core techniques.  Organisation and performance of the memory/storage hierarchy. This overview ranges from CPU-based memory technology through to network-attached storage technologies. Overview of hardware elements: embedded systems, peripherals  Client/Server architectures, N-Tier architectures      On successful completion of this module, the student should be able to:  1 - Describe the key components of computer system hardware, operating system and software architectures used to provide computer system functionality 2 - Explain how data is represented and manipulated by a CPU instruction set within a computer system. 3 - Explain low level control of hardware by assembly language  4 - Demonstrate the use of command line input to an operating system and create a short script.     ", "Artificial Intelligence   Summary module description:   \n  The main goal of this module is to familiarise students with fundamental methods in Artificial Intelligence such as supervised, unsupervised, reinforcement and deep learning. The students will learn how to apply these methods to real-life problems.  \n \n The module aims to provide students with theoretical and practical knowledge of Artificial Intelligence from various techniques and applications.  \n     Outline content:   \n   \n Nature and goals of artificial intelligence, its application areas  \n Training machine learning models  \n Natural language processing  \n Image processing  \n Deep learning  \n Reinforcement learning  \n  \n     Assessable learning outcomes:  \n  By the end of the module, students should be able to:  \n \n  \n understand the basic algorithms and techniques of artificial intelligence;  \n apply state-of-the-art artificial intelligence algorithms and methods to real-world problems to create a small-scale AI project.  \n  \n  ", " CM50109: Software engineering (a) to develop an understanding of how the principles behind software development are much more important than the chosen programming language, and how specification, design choices and development methodology may have a major impact on the correctness and suitability of the final software solution; \n (b) to develop a systemic understanding of  software development paradigms for complex software system building;\n (c) to develop skills in critically analysing problems for appropriate software solutions;\n (d) to develop the ability to contrast the various software development paradigms.   The building blocks of software. Software design paradigms: Waterfall, Iterative, Agile, (for example: Scrum, XP, Kanban), Test-Driven Development (TDD). \n Software engineering concepts: abstraction, modularisation, encapsulation, data hiding, reuse, white-box and black-box inheritance, refactoring, smells, mocks, stubs, design patterns, formal verification, automated testing and property-based testing. Principles for engineering complex software systems. The effect of the programming language on design and implementation issues. Team structures. Tie vs. feature boxing. Pair working.   After taking this unit the student should be able to: \n (a) identify issues and appropriate solutions for the design and implementation of  complex software problems;\n (b) perform evaluations of design solutions to determine their fitness for purpose;\n (c) demonstrate an understanding of the principles of  software development paradigms and their relationship to the appropriateness of an eventual software solution;\n (d) critically evaluate and contrast contemporary software engineering paradigms for defined software engineering problems, given a set of relevant development constraints;\n (e) compare and contrast the roles, responsibilities, benefits and drawbacks of different team organization structures for software development, given a set of relevant development constraints. \n  ", " CM20314: Experimental systems project To facilitate students' development of skills and understanding of the collaborative, creative and rigorous aspects of innovative software systems design.   Review of key concepts for the control of software development. \n Quality assurance and software testing. \n Documentation. \n Tool support for the systems design and development process. \n Software project management and team approaches to software development. \n Ethical issues and codes of conduct in professional computing.\n Security as a system-wide consideration.\n Experiment design.   1. Adopt and adhere to an incremental software process, supported by appropriate tools, to manage risk in the context of group-based production of an experimental system and within a frame of software quality management.\n 2. Systematically test functional and non-functional aspects of a software  system based on an evolving software requirements specification.\n 3. Demonstrate awareness of cyber-security  and ethical issues as system-wide considerations, based on recognised standards in science and engineering, including team responsibilities, data ownership, research with human participants and public deployment of interactive systems.\n 4. Use empirical methods and review of authoritative information sources as support for creative design thinking.\n 5. Design and prototype an experimental system with high- and low-level software engineering models, prototyping techniques and proof-of-concept software.\n 6. Perform, analyse and report analytic and empirical evaluations of designed software. \n  ", " CM20315: Machine learning To provide an overview of the theory and practice of machine learning.   Topics covered by this unit will typically include central concepts and algorithms of supervised, unsupervised, and reinforcement learning such as support vector machines, deep neural networks, regularisation, ensemble methods, random forest, Markov Decision Processes, Q-learning, clustering, and dimensionality reduction.   On completion of the unit, the students will be able to: \n 1. distinguish between different formulations of the machine learning challenge such as supervised and reinforcement learning,\n 2. demonstrate understanding of a wide range of machine learning techniques, their strengths, and their limitations,\n 3. write code in a relevant programming language (e.g. Python) and employ software libraries to solve problems in machine learning. \n  ", "Database Systems This module assumes an understanding of fundamental relational database design, implementation, and use. It will introduce other database paradigms including, but not limited to Business Intelligence and Data Warehousing, \"Schema-free\"/NoSQL databases and Graph Databases. Teaching will be directed at both the practical design, implementation and use of these systems as well as understanding the key advantages of each, providing an ability to compare and critique their appropriateness in a range of scenarios. In using these systems, the module will consider the limitation and appropriateness of query languages and the interaction between query languages and programming languages.\nThe module will also provide insights into the key functional requirements of various database management systems covering topics such as Data Consistency, Transaction Management, Query Optimisation, Security and Scalability/Distribution.\nThis module will involve a large practical component, with a range of tools and case studies being utilised to develop practical skills and theoretical understanding.  ", "Algorithms and Data Structures This module focuses on the pre-coding stage of the programming process, studying and developing algorithms and data structures appropriate for a range of different types of problem. The module emphasises throughout the role of problems as an essential driver in the programming process and the design of algorithms and data structures in particular.  ", "Team Software Project This module is designed to develop a range of employability skills using a guided project, undertaken as a team, as the vehicle. Each student will work on the project within their team. Project specifications will be provided that ensure the students have an opportunity to develop project and time management, professional, team communication and reporting, risk, presentation, and self-evaluation skills. \n\nThe projects are to be based on typical commercial/industrial scenarios and incorporate the concepts of specification, design, implementation, and testing. Where possible, the guided projects will be constructed with reference to the United Nations Sustainable Development Goals.  ", "CS356 - Group Project To extend and deepen the participant's understanding of the analysis, design and implementation of a medium-sized software system; to provide further experience in the activity of designing and implementing non-trivial systems; and to enable the participant to demonstrate practical competence in a group environment.&nbsp; Participants will undertake a group project which enables them to apply the knowledge and skills gained in the classes CS351 Programming 3, CS353 Fundamentals of Data Analytics, CS354 Computer Networks, CS355 User-Centred Design, and CS352 Software Engineering 3. After completing this class participants will be able to:&nbsp; Understand the need for working effectively within a team environment on practical software engineering problems, including planning and managing a group\u2019s workload.&nbsp;  Appreciate the importance of organisation, management and professionalism in the development of large-scale software.&nbsp;  Analyse, design, implement, verify and validate a medium-sized software system.&nbsp;  Effectively employ a range of software development tools e.g. IDEs, configuration management, version control, testing and issue tracking tools.&nbsp;  Display a disciplined approach to good practices in the general area of software engineering, and to apply software engineering techniques to practical problems.&nbsp; ", "Operating Systems and Networks This module covers both theory and significant practical content in the design, installation and configuration of operating systems and network services. The module helps to develop problem-solving skills in working with operating systems and networks, and builds confidence in using command line tools and configuration files in other areas of computer science and information technology.  ", "CS6053 - Artificial Intelligence and Machine Learning (2023/24)  \nThis module surveys essential principles, methods, and techniques in AI and machine learning. It covers a broad range of AI topics such as problem solving, knowledge representation, logical and probabilistic inference, and machine learning using methods of automata theory, logics, probability theory and statistics. It discusses examples of intelligent systems and studies how to develop applications that can learn from experience such as expert systems, automatic classifiers and autonomous systems planning their actions and communicating in natural language. Students will be offered lectures, which introduce key concepts, explain main principles and techniques in AI, and demonstrate how to apply them in areas such as image recognition and price forecasting. \n \nThe workshop will provide practical sessions to help students understand the content of the lectures and build the necessary skills to develop AI-applications using suitable problem descriptions and datasets.   \nThe main topics of the study will include: \n \n1. Introduction to Artificial Intelligence and Machine Learning. Rational reasoning and intelligent behaviour. Human and Artificial Intelligence. Examples of AI systems. (LO1) \n \n2. Rational Agents. Conceptual model of rational agents. Environment types and agents classification. (LO2, LO3) \n \n3. Problem Solving in State Space. Uninformed search and Heuristic Search. Comparison of the search algorithms. (LO2, LO3) \n \n4. Knowledge Representation and logics. Facts, heuristics, assumptions, conditions, and conclusions. Logical modelling and logical inference. Logical theories and ontologies. (LO2, LO3) \n \n5. Actions and Knowledge-based Planning. Linear, hierarchical and non-linear planning. Continuous planning and replanning. (LO2, LO3) \n \n6. Uncertainty and Probabilistic Reasoning. Decision making under uncertainty. Probabilistic space and degree of truth. Probabilistic distributions. Conditional, prior and posterior probability. Bayes Rule. (LO2, LO3) \n \n7. Learning Agents. Conceptual model. Supervised and unsupervised learning. Learning from observations. Decision tees, space of hypotheses and performance measurement. (LO2, LO3) \n \n8. Statistical Learning. Classification, approximation and prediction. Probabilistic inference. Parameters learning using Bayes nets. Linear regression. (LO2, LO3) \n \n9. Neural Networks. Computation in the brain and artificial neuron models. Linear neural networks, multi-layer networks. Backpropagation. Application to image processing. (LO2, LO3) \n \n10. Natural Language Processing. Communication and language. Language structure and linguistic data. Parsing and syntactic processing of written texts. Problems. (LO2, LO3) \n \n11. Legal, Social, Ethical and Professional Issues in AI. AI and explanation. AI and law. Ethics of AI and impact of AI on society. (LO4)   \nOn completing the module, the student will: \n \n- LO1: Understand the principles of rational reasoning and intelligent behaviour, the similarities and the differences between natural and human intelligence. \n \n- LO2: Know the most popular models, methods and algorithms for building and operation of rational and learning agents and processing information. \n \n- LO3: Be able to develop basic AI programs which demonstrate intelligent behaviour and rational thinking in typical environment using available data sets. \n \n- LO4: Understand the Legal, Ethical &amp; Professional Issues brought by AI and the impact of AI on individuals, organisations and the society as a whole. ", "Data Modelling for Databases This module introduces the concept of the relational model of database systems introduced by Codd [1]. It will focus on the principles of data modelling, from conceptual modelling through to physical, it will introduce techniques and tools to possibly include but not be limited to Requirements Gathering, Whiteboarding, Entity-Relationship Modelling, Normalisation, Relational Algebra, Physical Design and Querying via SQL.  The module also introduces some of the basic operational requirements of a modern enterprise RDBMS with topics supporting the students understanding of the physical design of the database, hence subjects such as Query Optimisation and Transaction Processing will be introduced.  ", "Computing Things The presentation will focus on the macro architecture of an IoT device, processing of digital and analogue signals on GPIO pins, use of standard interfaces, such as UART, SPI, I2C with interrupts and processor sleep modes. Several sensors will be studied to demonstrate the data gathering facilities available.\n\nOne inexpensive and well-supported IoT platform will be chosen by the module leader as a running example for the content delivery. This can be ESP32 or Arduino or any similar evaluation module available at a small cost (the price of a good textbook), and which can be interfaced with a PC via a USB port. All teaching will be accompanied by exercises on the chosen platform.  ", "Software Development for Data Science This module will focus on the development of software programming skills used for data science using an appropriate programming language such as Python or R. Implementation methods for the foundation topics in data science such as data capture, wrangling, analysis, processing, visualisation and reproducible reports will be covered. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.  Data Science Ecosystem Introduction to the software development libraries available for data science vectors, matrices and data representations. Fundamentals of Data Science Software Development Sequence, selection and iteration in a suitable programming language for data science. Data Preparation Data collection, pre-processing, cleaning, wrangling, transformation and integration. Exploratory Data Analysis Basic statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance. Hypothesis testing Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value, Bayes factor, test for the mean, comparing two means (dependent and independent samples). Linear Regression Simple linear regression, multiple regression, forecasting, classification and clustering. Data Visualisation Visualisation of large and small data sets using open source software libraries.      On successful completion of the module, students should be able to:  1. Demonstrate a detailed understanding of the available tools within the data science software ecosystem. 2. Demonstrate a detailed understanding of software development processes for data science. 3. Analyse and evaluate data analysis modelling methods. 4. Develop software applications to conduct data analysis and visualisation. 5. Critically interpret and evaluate the outputs generated by analysis techniques.    ", "CS351 - Programming 3  The aim of this class is to develop an understanding of highly concurrent software systems. This understanding will be enhanced through significant practical work which consolidates the class content.  Concurrency: processes &amp; threads, thread synchronisation and thread safety, thread monitoring, testing for concurrency, building object-oriented concurrent applications. After completing this class participants will be able to:&nbsp; Understand the concepts of software design for multiprocessing, OS process and thread models, process and thread scheduling, and inter-process communication.&nbsp;  Appreciate the problems of process and thread synchronisation and understand concurrency mechanisms.&nbsp;  Appreciate the issues that affect the design, implementation and performance of multiprocessor systems and to understand current approaches to ameliorate these.&nbsp;  Demonstrate an understanding of OS protection and security mechanisms.&nbsp;  Display practical skills necessary to develop thread-safe concurrent applications.&nbsp; ", "CS5071 - Professional and Ethical Issues (2023/24)  \nThis module focuses on professional, social, ethical issues within the context of social responsibility and covers relevant computer laws (LSEPI) underpinning the Computing discipline.&nbsp; The focus of the module is empowering student to take their place in society as socially responsible professionals and allowing the exploration of self-awareness, empathy, self-efficacy and engagement in students \n \nAssessment: Coursework (100%) \n \nThe aims of this module are to: \n\u2022 Expose students to a range of professional and ethical issues to prepare them to develop their own response to working with a professional outlook. \n\u2022 Prepare students for the world of work and equip them with the knowledge and appreciation of professional bodies, code of conducts and professional certifications. \n\u2022 Provide students with knowledge and understanding of the regulations governing the digital environment (e.g. Internet) and social, ethical and professional issues (LSEPI) underpinning the Computing discipline. \nIntroduce students to academic research and research ethics, and to academic writing.   \n\u2022 Professional Issues (LO1,LO2) \n\u2022 Regulating the digital environment \n\u2022 Professional bodies\u2019 Codes of Conduct \n\u2022 Electronic Information, risks, misuse and criminal activity \n\u2022 Social &amp; Ethical issues (LO1) \n\u2022 Current issues, AI, Big Data, Cyber Security etc \n\u2022 Professional ethics and responsibilities \n\u2022 Social and Environmental concerns \n\u2022 Legal Issues (LO3,LO4) \n\u2022 An understanding of current laws regulating computing (e.g. Computer Misuse act and others) \n\u2022 Digital content and intellectual property rights \n\u2022 Introduction to research (LO5) \n\u2022 Research ethics and the University code of conduct \n\u2022 Literature search and review, academic writing, referencing and avoiding plagiarism   \nLO1 Demonstrate an awareness of the importance of Legal, social, ethical and \nprofessional issues (LSEPI) underpinning the computing discipline, and present a piece of \ncritical analysis of their relevance to a topic of current importance. \nLO2 Appreciate and explain current regulations, and professional body guidelines (such \nas BCS Code of Conduct) governing the computing discipline. \nLO3 Provide evidence of personal reflection and evaluation on the importance of \nacademic, professional and technical skills, their relationship to employability and the \nneed to plan for improvement and continuing professional development. \nLO4 Demonstrate an awareness of the importance of ethical issues underpinning \nacademic research and professional accountability. \nLO5 Effectively research, plan, structure and deliver an academic report. ", "CS355 - User-Centered Design The aim of this class is to introduce participants to the principles, tools and techniques for developing good user-centred systems. Furthermore, participants will become familiar with various evaluation techniques with respect to usability and accessibility.&nbsp;  Human Computer Interaction&nbsp;  Usability and Accessibility&nbsp;  Modelling user requirements&nbsp;  Designing inclusive user interfaces&nbsp;  Testing and Debugging&nbsp;  Evaluation studies: user and expert&nbsp;  Iterative interface prototyping, rapid prototyping&nbsp;  After completing this class participants will be able to:&nbsp; Understand the fundamentals of usability.&nbsp;  Understand users and their context and how these should be considered in the context of user interface design and evaluation.&nbsp;  Select and employ appropriate design methods for an interactive system.&nbsp;  Conduct low and hi fidelity prototyping techniques to develop an example interactive system.&nbsp;  Assess interactive systems for usability using appropriate evaluation techniques, justify the choice of techniques.&nbsp;  Understand and discuss future research directions in interface design and evaluation.&nbsp; ", "CS273 - Introduction to Databases The aim of the class is to provide participants with a conceptual and practical understanding of data modelling, database design and database technology. The class then builds on a basic understanding of the relational database approach, covering more complex SQL query design and efficient execution. 1. Introduction to the Database Environment: functions of a database management system; 2. Entity Relationship modelling. 3. The Relational Data Model, relational algebra, integrity constraints. 4. Relational query languages. 5. Normalisation. 6. JDBC 6. NoSQL On completion of this class, participants should be able to: show an appreciation of the facilities and services which should be provided by a fully featured database management system.  demonstrate knowledge of commonly occurring data models.  display knowledge of the process of designing a database system, starting from an informal specification.  display skill in formulating database queries using SQL.  demonstrate ability to utilise triggers / stored procedures, and understand the importance of indexing.  display knowledge of potential future developments in database technology. ", "Data Visualisation This course aims to equip students with knowledge and skills required for successful data visualisation. The goal of data visualisation is to expose the underlying structure of a dataset using visual representations which are targeted towards the human visual perceptual system. Students will gain experience in the theory, design, implementation and evaluation of data visualisation systems. Appropriate software tools will be utilised throughout the module to create effective visual representations to translate complex data into clear information, allowing the target audience to extract value from it. Students will learn how to use advanced visualisation techniques such as data storytelling and interactive visualisations to communicate information clearly. By the end of this module, students will be capable of analysing the appropriateness of a given visualisation in relation to a problem, select and implement appropriate data visualisation systems for a given dataset and evaluate the effectiveness of this system.  -Fundamentals of data visualisation: data, information, visual representation, perception   -Understanding differences between data visualisation, infographics, scientific visualisation and information visualisation  -Types of data visualisations: graphs, statistical/temporal/multivariate data visualisation, hierarchies and networks  -Effective data visualisation: good/bad data visualisation design, evaluation of visualisation techniques   -Storytelling using data visualisations  -Interactive and immersive visualisation techniques  -Industry standard tools and technologies      On successful completion of this module a student should be able to:  1. Discuss the main methods and tools for data visualization, including the underlying fundamental concepts 2. Differentiate between different types of data and identify appropriate visualisation solution based on the data and task 3. Implement an appropriate data visualisation solution, justify its design in relation to a specific problem and evaluate its effectiveness 4. Develop advanced data visualisations such as data stories or interactive visualisations     ", "CS352 - Software Engineering 3 The aim of the class is to equip participants with the knowledge and understanding of how to manage and execute a collaborative software project.  Collaborative working&nbsp;  Project management approaches and methodologies&nbsp;  Project planning&nbsp;  Project execution&nbsp;  Risk assessment and management  After completing this class participants will be able to:&nbsp; Be familiar with project management techniques and processes.&nbsp;  Understand how to conduct risk assessment and mitigate against those risks.&nbsp;  Know and understand configuration management processes and tools.&nbsp;  Be aware of a range of software development tools that can be deployed when developing a medium sized software application.&nbsp; ", "CS353 - Fundamentals of Data Analytics The aim of this class is to provide participants with: a) Python programming skills; b) an understanding of the challenges posed by the advent of big data (e.g. its modelling, storage, and access); an understanding of the key algorithms and techniques which are embodied in data analytics solutions.&nbsp; Introduction to Python: simple data types (numbers, strings, simple list data structures and booleans); simple operators (assignment, arithmetic and string manipulation); control flow (conditional and iteration); manipulating simple data structures (lists, sets, and dictionaries); structuring code (functions); error handing (exceptions); library classes and documentation; testing and debugging.&nbsp;&nbsp;Data Analytics: Quantitative methods for data analysis and knowledge extraction including classification, clustering, association rules, Bayesian approaches, decision trees. After completing this class participants will be able to:&nbsp; Understand and implement main control and flow structures of an imperative programming language (e.g. Python).&nbsp;  Understand and implement simple data elements, basic data structures, and the main code structure constructs of an imperative programming language (e.g. Python).&nbsp;  Understand how to use Python to enable the use of various big data technologies.&nbsp;  Understand how classical statistical techniques are applied in modern data analysis.&nbsp;  Understand the potential application of data analysis tools for various problems and appreciate their limitations.&nbsp; ", "Software Engineering Techniques The following is an indicative list of topics. \n\n\u2022 Distributed version control: principles of distributed versioning, core operations, concurrent and collaborative workflows.  Concrete practice: e.g., Git \n\n\u2022 Practical software verification techniques \u2013 fundamental concepts: static/dynamic, syntactic/semantic, decidability/soundness/etc. trade-offs. \n- Static code analysis: syntactic analysis, design patterns and SE principles. Concrete practice: e.g., SpotBugs, Pmd \n- Static type checking: type safety (memory safety), subtyping, (subtype) polymorphism.  Concrete practice: e.g., Java \n- Testing (dynamic verification)\n\n\u2022 Black-box testing: specification-based (functional) testing, BB techniques (e.g., Boundary Value Analysis, Equivalence Class Partitioning). Concrete practice: e.g., JUnit \n\n\u2022 White-box testing: complementary to BB testing, Control Flow Graphs, code coverage metrics (e.g., Statement/Branch Coverage), \"complexity\" metrics.  Concrete practice: e.g., JaCoCo \n\n\u2022 Further programming topics:  concrete practice, e.g., Java using IntelliJ\n- Generics: collections, subtype/parametric polymorphism, implementations (e.g., erasure) and consequences.\n- Modern data processing patterns: first-class functions and lambdas.  E.g., Java Stream API. \n- Reflection: run-time introspection and modification of a program.  ", "Robotics This module will provide an in-depth introduction to Intelligent Adaptive Systems (IAS) and the AI notions, methods, techniques, and algorithms underlying the design and implementation of a variety of artificial IAS. IAS can be defined as systems that adapt (change, improve) autonomously their sensorimotor, morphological,\nfunctional and/or cognitive capabilities as they interact with their environments to face in advantageous ways the dynamic changes and challenges that those environments pose.  ", "Software Quality This module provides both a theoretical and practical introduction to quality both in terms of the software development process and the products of that process. It also investigates how quality can be defined and measured, and by analysing actual program code to determine its quality according to pre-determined quality metrics.  ", "Advanced Database Topics This module builds upon knowledge and skills acquired in the context of relational databases studied at Level 5.  Issues of complexity in databases arise when the scale of the database increases and the focus here is on firstly the design and implementation in a large multi-user database and secondly, selected current and emerging topics in databases. This module provides an in-depth study of the design and implementation of relational databases using a top-down approach.  There is a large practical element using a popular market leading product in the roles of database designer, database administrator and end user.  The module also raises awareness of areas where new types of database are emerging and provides practical experience in these areas.  ", "Advanced Programming Paradigms This module exposes students to the wide range of programming concepts beyond simple procedural programming using conditionals, loops, functions, and objects.  Concepts will be illustrated using languages such as Haskell, Scheme, and Prolog, but examples and exercises will focus on solving practical problems.\n\nThis module is based on a set of practical examples and exercises that show how to apply advanced programming paradigms to solve problems, and compare those solutions to the typical approach taken in Python, Java, or C.  ", "Data Ethics and Research Methods This module seeks to develop understanding and practical skills in advanced research methods which are in line with industry regulations, standards and practices and are applicable to complex Data Science projects. Study is undertaken in an integrated fashion to ensure that the professional framework within which such projects are developed, deployed and managed are fully understood.  -Ethical Considerations in research: Research involving human subjects, using minors and vulnerable people in research activities applicability of professional body codes of practice  -Ethical frameworks for the Data Science and AI professional: underlying ethical concepts and ethical theories - Professionalism within Data Science and AI role of professional bodies codes of ethics/conducts responsibilities of a data professional and ethical decision making - Societal issues of Data Science and AI, algorithm fairness, misinformation. -Security of AI, privacy and data protection Data legislation and regulations, industry standards and practices -Data governance, risk and compliance -Research problem definition  - Critical analysis on state of the art  - Hypothesis and research questions - Research issues -Critical thinking - Research evaluation - Quantitative and qualitative methods - Practical work based evaluation - Evaluation scenarios  Examples of tasks undertaken by students in practical sessions are: -Presentation and demonstration of practical work based evaluation -Group discussion and argumentation for contemporary topics and case studies -Critical reviews of reference and online resources      On successful completion of this module a student should be able to:  1. Critically evaluate the techniques of advanced research methods, applicable to complex Data Science projects. 2. Critically evaluate major legal, social and professional issues applicable to the development and use of Data Science and AI technologies and systems within society. 3. Demonstrate an in-depth understanding of the ethical responsibilities of a Data Science and AI professional. 4. Apply the key elements and techniques of an advanced research methodology appropriately in the development of a complex Data Science project.     ", "Machine Learning and Neural Computing This module uses contemporary machine learning and neural network techniques to aid in the understanding and analysis of real world data and neural systems. Topics include supervised and unsupervised learning, data visualisation, and error-correction-based learning.  ", "CS6055 - Formal Languages (2023/24)  \nFinite automata or finite state machines (and their languages) are structures that can be used as abstract models for computational devices, capturing many of their essential features without the complications of hardware considerations. This module will enable students from the mathematics and computing areas to appreciate the powers and limitations of computers and will introduce them to some of the factors in complier design through development of some of the standard mathematical models of computational devices. \n \nThe aims of this module are: \n \n\u00b7To introduce a range of models of computational devices. \n\u00b7To investigate the expressive power of different models. \n\u00b7To introduce the idea of decision problems in mathematics. \n\u00b7To demonstrate that interesting decision problems in computer science will often be unsolvable.   \n\u2022 Words, alphabets and languages. Operations on words and languages. Closure of languages. (LO1, LO2, LO4) \n \n\u2022 Deterministic finite automata. DFAs as language recognisers. Equivalent DFAs. Completion of DFAs. The DFA Pumping Lemma. Simplification and minimisation of DFAs. (LO2, LO3) \n \n\u2022 Non-deterministic finite automata. Algorithm for converting NFAs to DFAs. (LO2,&nbsp; LO3, LO4) \n \n\u2022 Distinguishable and indistinguishable states. Union, concatenation, and closure of&nbsp; finite automata. Intersection of two FAs. (LO1, LO2, LO5) \n \n\u2022 Introduction to regular expressions. Examples and notation. Converting FA to&nbsp; regular expressions and vice versa. Expressive power and equivalence of regular expressions and FAs. Using regular expressions in programming. (LO1, LO2,&nbsp; LO3) \n \n\u2022 Context free grammars. Introduction and notation. Derivations and syntax trees.&nbsp; Ambiguity in CFGs. Expressive power of FAs and CFGs. PDA implementation. (LO2, LO3) \n \n\u2022 Simplification of CFGs. Binary Form, Chomsky Normal Form. (LO1, LO2, LO3,&nbsp; LO4) \n \n\u2022 Universal computational machines. Turing machines and the Halting Problem. (LO2)   \nOn completing the module, the student should be able to: \n \nLO1&nbsp; Demonstrate understanding of the advantages of using formal specification and&nbsp; understanding of specifications written by others. \n \nLO2&nbsp; Develop formal specifications from informal problem statements. \n \nLO3&nbsp; Describe and recognise the characteristics of major established architecture styles. \n \nLO4&nbsp; Evaluate the quality of their specification and implementation, and their experiences of group work, the processes of producing their coursework and the product produced. ", "CS354 - Computer Networks The aim of this class is to equip participants with a knowledge and understanding of computer networking. Participants will gain a practical understanding of the topic via assessed programming assignments.  Basic components of a computer network and their functions&nbsp;  Common communications protocols&nbsp;  TCP/IP Model&nbsp;  Client/Server communication (sockets)&nbsp;  Building a basic virtual network  After completing this class participants will be able to:&nbsp; Demonstrate a broad knowledge of the area of computer networking and its terminology.&nbsp;  Demonstrate an understanding of the operation of a range of networking protocols and devices.&nbsp;  Demonstrate an understanding of the TCP/IP model.&nbsp;  Demonstrate a broad knowledge of socket programming and the client/server model.&nbsp;  Design and implement a basic communications network in a virtual&nbsp;  environment.&nbsp; ", "Artificial Intelligence and Machine Learning This module covers the fundamental concepts, theory and techniques that enable artificial intelligence (AI). It focuses on the history, basic and advanced methods of AI and their practical uses in today's society and businesses. Students will learn the role of machine learning and deep learning in modern AI and will apply and implement traditional and modern AI methods based on real world examples. By the end of this module students will have gained an advanced understanding in the core concepts of AI and are able to determine whether a problem-solving approach using AI is appropriate, how to implement it and then evaluate it efficiently using local as well cloud-based tools.  1.Introduction, history, and basic concepts in AI 2.Intelligent agents, problem solving, search methods 3.Machine learning: introduction, features, tasks, traditional and modern machine learning models 4.Types of machine learning (supervised, unsupervised, semi-supervised), generalization, transfer learning, active learning, ensembling 5.Tools, programming languages, libraries and hardware for AI and machine learning 6.Deep learning: loss functions, optimization, backpropagation, and neural networks 7.Training neural networks: activation functions, hyperparameters, training procedures, learning rates, augmentation 8.Reinforcement learning 9.Machine learning pipelines 10.Applications and modern examples or AI: machine vision, natural language processing, data mining, robotics) 11.Ethics and bias in AI      On successful completion of the module, the student should be able to:  1. Demonstrate in-depth knowledge of the concepts, requirements and principles of artifical intelligence and machine learning. 2. Develop approaches that apply AI principles, algorithms and models for problem solving. 3. Demonstrate proficiency in implementing AI solutions using relevant programming languages and tools. 4. Demonstate a detailed understanding of the classical and modern techniques of AI. 5. Demonstrate a detailed understanding of how AI applications can be used to add value to businesses and society. 6. Critically appraise the shortcomings and ethical issues of AI.    ", "Software Architecture This module explores software architecture by examining architectural design patterns.  Using a conceptual definition as an anchor, the module examines different approaches to solving design problems, with practical examples and implementation exercises.\n\nThis module is based on a set of practical examples and exercises that show how to apply architectural patterns to design software systems.  ", "Responsible Computing This module is concerned with legal, social, ethical and professional issues that may affect the work of professionals in the computing and technology sectors.\n\nThe module is designed to enable students to make informed judgements in computing practice based on legal, social and ethical principles.  ", "Artificial Intelligence This module will give a first introduction to the aims, scope, paradigms, notions, methods and algorithms of Artificial Intelligence (Al), enabling students to program basic Al algorithms and systems.\nIndicative topics include:\n\u2022\tLogic-based reasoning and representation extending to knowledge-based systems and probabilistic reasoning.\n\u2022\tProgramming for Al: recursion and recursive problem specification.\n\u2022\tBasic representation- and search-based problem-solving techniques\n\u2022\tIntroduction to systems that plan and act logically: making plans to achieve goals; making simple decisions\n\u2022\tIntroduction to Al systems that make decisions in interaction with the world: simple Embodied Al systems that make decisions based on limited sensorimotor information.\n\u2022\tBio-inspired computing methods and algorithms.  ", "Accessibility and Usability This module is concerned with the accessibility and usability of computing applications. It presents these core\nconcepts in the broader context of legal, social, ethical and professional issues in computing and grounds them\non practical work. Concepts and theories on these themes will be presented and supported by examples to\ndemonstrate how they occur in practical scenarios. Students will be encouraged to identify existing problems,\nevaluate potential solutions, and communicate these in computing contexts.  ", "Security (COMP0141)   Aims:  \n\n The module aims at giving students a foundation in computer security, cryptography and human aspects of security. After taking the module students should be able to identify risks and security sensitive aspects of systems, where a system can range from a small and simple solution for a specific task to a full organisation including IT infrastructure and users. They will be taught this from the experience of how systems have failed in the past and by analysing systems from an adversarial viewpoint. \n\n Students should also know core defensive techniques to prevent or mitigate attacks. They should be able to formulate a threat model for a system and reason about whether it is secure or insecure, Students should be able to deliver effective security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how to formulate a threat model including the assets to be protected, the capabilities of the adversary, and reason about whether the probability the adversary may succeed. \n\t Know core cryptographic methods to protect communication such as message authentication codes, digital signatures, encryption, and key exchange. Understand the security guarantees cryptographic tools provide and conversely how inappropriate use lead to vulnerabilities. \n\t Understand key principles and concepts related to computer and systems security. Understand the complexities of building flexile and correct access control and authentication systems, from a technical and HCI perspective. Recognize and exploit common security vulnerabilities on hosts and networks. \n\t Know that security involves people, processes and technology. Understand how security needs to fit with business goals and organisational processes to work effectively&nbsp;rather than disrupt, create friction, and drain resources. \n\t Know the basics of how to influence and manage security behaviours of a range of organisational stakeholders, employees, managers, developers, security specialists. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n The module gives students a foundation in computer security, cryptography and human aspects of security. Students will study attacks against system and analyse systems from an attacker\u2019s perspective. The module will also cover core defensive techniques and develop threat models that can be used to analyse the security of a system. The module studies specific cryptographic systems, core computer security, and security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "CS4051 - Fundamentals of Computing (2023/24)  \nStudents will receive an introduction to the principles of information processing and an overview of the information technologies for digital data processing using computational and communication devices, including an initial understanding of the requirements for usability, quality, complexity, security and privacy of the developed solution. The students will obtain initial practical skills in modelling, design, implementation and testing of software systems for real-world application using a suitable programming language.   \n\u2022 Logical organisation of the information and physical data representation LO1 \n\u2022 Digital representation of numerical information and numerical data processing LO1 \n\u2022 Digital representation of text information and text data processing LO1 \n\u2022 Digital representation of multimedia information and multimedia operations LO1 \n\u2022 Introduction to digital data processing using software programs LO2 \n\u2022 Data structures for digital representation of the information LO2,LO3 \n\u2022 Control structures for program execution LO3,LO4 \n\u2022 Algorithmic operations for data processing LO1,LO2,LO3 \n\u2022 File operations and data file processing LO2,LO3 \n\u2022 Program design and implementation LO3,LO4 \n\u2022 Program execution, testing and error handling LO2,LO5   \nLO1: understand and formulate the main requirements for developing digital solutions for the business and enterprise by analysing and modelling the logical organisation of the business information using variety of modelling languages and tools \nLO2: obtain initial knowledge and practical skills in using second programming language \nLO3: exercise the process of designing of data structures and algorithms for digital information processing using sequential, iterative and recursive algorithms for solving typical problems in numerical and text processing \nLO4: use appropriate design methods for producing modular software systems using appropriate programming language \nLO5: understand the concepts of usability, quality, complexity, security and privacy of the information ", "CC5067 - Smart Data Discovery (2023/24)  \nThis module will enable students to understand the fundamental concepts of data science and appreciate key techniques of data science and its applications in a wide range of business context. Students will be exposed to data understanding, preparation, modelling, results evaluation and data visualisation techniques that can assist businesses in making effective data-driven decisions to improve productivity and consumer satisfaction. Students will be introduced to the practical application of tools and techniques required to perform data science projects in a modern business environment.   \n\u2022 Introduction to key concepts in data science: data science tools, approaches, techniques and application scenarios. [LO1] \n \n\u2022 An overview of data mining process for business: business understanding, data understanding, data preparation, data modelling, results evaluation and deployment. [LO1, LO4] \n \n\u2022 Business data environment: operational database, data warehouse, web and big data platform.[LO2, LO5] \n \n\u2022 Data understanding and preparation: data measurement, statistical summaries, transformation, cleaning, and graphical visual exploration. [LO3, LO4] \n \n\u2022 Data science business applications: credit scoring, fraud detection, customer relationship management, associated products detection, correlation and identification. [LO2, LO5] \n \n\u2022 Web data analysis: Social network analysis, affiliation prediction and recommendation. [LO2, LO5]   \nOn successful completion of this module, the student will be able to: \nLO1: Understand fundamental concepts and techniques of data science. \nLO2: Appreciate the business context in which the analysis of data can be fruitful and effective for decision-making and creating value. \nLO3: Understand and compare the techniques and tools for analysing and visualising data. \nLO4: Develop the practical skills in preparing, modelling and visualising data. \nLO5: Gain exposure to the practice of formulating and structuring problems and identifying the relevant tools to aid problem-solving. ", "CS6051 - Mobile Applications (2023/24)  \nThis module introduces a range of specialist programming techniques as applied to mobile platforms. Specific areas of study will include: programming strategies for resource-limited portable devices \u2013 including reviewing key components through the development of exemplar applications using an appropriate mobile-based programming platform such as Java ME and Google Android. \n \nThe key skills and knowledge to be gained are: \n \n\u2022Understanding theoretical concepts related to the work of software in wireless networks and the use of different protocols, frameworks and tools for building mobile applications \n \n\u2022Learning techniques for programming mobile applications using standard technological frameworks, development tools, mobile device emulators and handsets \n \n\u2022Acquiring practical skills in developing mobile applications which utilize wireless services and mobile Internet \n \n\u2022Applying analytical knowledge and practical skills for building typical mobile applications \n \n\u2022Developing ability to compare protocols, models and paradigms for mobile applications and estimate trade-offs during design using different design patterns, development frameworks and programming techniques \n \n\u2022Building professional competence and increasing the employability through the use of industrial standard technologies and tools for software development   \n\u2022Introduction to Programming Mobile Devices, Android operation system.&nbsp;LO1, LO2 \n \n\u2022Mobile Platform Fundamentals and Android Studio.&nbsp;LO1, LO4 \n \n\u2022Mobile User Interface and eventing handling Programming.&nbsp;LO1, LO2, LO4 \n \n\u2022Android Fragments, Activity Lifecycle, and intent programming.&nbsp;LO1, LO2, LO3, LO4 \n \n\u2022Multithreading Requirements.&nbsp;LO1, LO2, LO4 \n \n\u2022Mobile Services Programming.&nbsp;LO1, LO2, LO3, LO4 \n \n\u2022Persistent Data Storage and SQLite database for Mobile Devices.&nbsp;LO1, LO2, LO3, LO4 \n \n\u2022Web Connectivity, Internetworking and integrate PHP and MYSQL.&nbsp;LO1, LO2, LO3, LO4 \n \n\u2022Android animation and text to speech programming.&nbsp;LO1, LO2, LO3, LO4 \n \n\u2022Deployment Strategies.&nbsp;LO1, LO2, LO3, LO4   \nOn successful completion of this module the student should be able to: \n \n- LO1: Develop mobile applications that meet business needs for typical mobile devices. \n \n- LO2: Integrate existing software components, wireless and Internet services for implementing distributed mobile systems using suitable frameworks, development tools and software APIs. \n \n- LO3: Deploy mobile software applications to mobile devises running typical operating system such as Google Android. \n \n- LO4: Use industrial IDE for development, integration, testing and deployment of mobile applications on mobile devices. ", "CS5053 - Cloud Computing and the Internet of Things (2023/24)  \nThis module will enable students to understand the Internet of Things (IoT) and Cloud Computing concepts, building blocks, ecosystems, infrastructure,&nbsp; and&nbsp; applications.&nbsp; This will enrich their knowledge and understanding of the core technologies and platforms for IoT and Clouds, that allows digitally enabled&nbsp; devices&nbsp; or&nbsp; objects&nbsp; to&nbsp; collect,&nbsp; gather,&nbsp; and&nbsp; transfer&nbsp; data&nbsp; over&nbsp; a&nbsp; network&nbsp; without involving human-to-human or human-to-machine interaction. \n \nThe module will place emphasis on IoT components and delivery models, IoT system architecture, key wireless/mobile/sensor technologies, IoT communication protocols, issues of privacy and trust, cloud platform, and virtualization technologies in the development of IoT cloud infrastructure and applications. \n \nStudents will be supported with a series of exercises performed using a powerful network simulation tool, that will cover the range of basic principles to more advanced IoT system design. This will allow students to get real world experience in building IoT system by integrating sensor devices and cloud for creating interconnected solutions to smart cities, homes, and enterprises.&nbsp; Some basic knowledge of Python will be used throughout. By the end of the module, you will get experience in solving real-world problems (IoT and Cloud&nbsp; system&nbsp; implementation)&nbsp; efficiently&nbsp; using&nbsp; simulation modelling.   \n1.Introduction to IoT\u2013Theory, Evolution, Elements of an IoT Ecosystem, Applications, and Implications. [LO1] \n \n2.Sensors &amp; Actuators for IoT Systems. [LO1] \n \n3.Communication Protocols and Networks\u2013Wireless Technologies, Protocol Stacks for the Edge Devices, Wireless Sensor Networks. [LO1] \n \n4.IoT Networking and Messaging Protocols \u2013CoAP, MQTT, REST, AMQP, WebSocket. [LO1] \n \n5.Cloud Computing -Architecture: Infrastructure, Virtualisation, Platforms and Software. [LO1, LO2] \n \n6.Cloud Platform and Management for IoT\u2013Application Development and Integration, Hardware Development Boards and Software Platforms for IoT, Issues and Challenges, Security, trust and Privacy Issues. [LO2, LO3, LO4, LO5] \n \n7.Design a simple IoT system by integrating sensor devices, data processing units,&nbsp; wireless networks, and&nbsp;&nbsp;&nbsp; cloud-based&nbsp;&nbsp;&nbsp; analytics&nbsp;&nbsp;&nbsp; for&nbsp;&nbsp;&nbsp; creating interconnected solutions. [LO1, LO2, LO3, LO4] \n \n8.IoT Case Studies:&nbsp;&nbsp; Industrial&nbsp;&nbsp; IoT, Business&nbsp;&nbsp; Impact&nbsp;&nbsp; of&nbsp;&nbsp; the&nbsp;&nbsp; IoT/Cloud Computing. [LO3, LO5]   \nOn successful completion of this module, the student will be able to: \n \n- LO1: Understand the core IoT concepts, system components, infrastructure, and applications. Understand the key components that make up an IoT system, including (passive and active) sensors, actuators, physical communications layer, and message protocols. Know the key wireless technologies used in IoT systems, such as WiFi, 6LoWPAN, Bluetooth and ZigBee. \n \n- LO2: Evaluate the strengths and weaknesses of different types of cloud-based architectures. Analyse and critically assess the link between IoT, cloud computing, and data analytics. \n \n- LO3: Express a critical understanding of how IoT concept fits within the industry (Industry 4.0) and future trends.&nbsp; Appraise the potential of Internet of things (IoT) in&nbsp; an&nbsp; industrial&nbsp; context&nbsp; (also known as Industrial IoT or IIoT) for automating specific tasks, through drawing case studies from the industrial applications of IoT and Cloud Computing. \n \n- LO4: Gain real world experience in designing and building a simple IoT system by integrating sensor devices, data processing units, wireless networks and&nbsp; cloud-based&nbsp; analytics for&nbsp; creating interconnected solutions. \n \n- LO5: Apply broad skill in writing a report as a tool to communicate the results or findings of the case studies. Gain exposure to the practice of formulating and structuring problems. ", "CS6W50 - Career Development Learning (2023/24)  \nThe module enables students to undertake an appropriate, short professional activity related to their course at level 6 with a business or community organisation and to gain credit for their achievements. The activity can be professional training or certification, a volunteering activity, employment through internal or external work-based placements, research-related activities, business start-up projects, entrepreneurship programs and more. Please see the complete list of accepted activities on WebLearn. \n \nStudents are expected to engage in any one or combination of career development learning activities for a total of ~70 hours which should be recorded clearly in a tri-weekly learning log \u2013 part of the portfolio. The ~70 hours can be completed in ~30 working days in FT mode or spread over a semester in PT mode. \n \nStudents are expected to complete a total of ~150 hours, 70 hours of which is direct engagement in any one or combination of career development learning activities. Progress should be recorded clearly in tri-weekly learning logs which are part of the portfolio. The ~150 hours can be completed in ~35 working days in FT mode or spread over a semester in PT mode. \n \nStudents should register for the module to be briefed, undergo induction and module planning and have their career development learning activity approved before they take up the opportunity. Students must be made aware that both the \"Learning Agreement\" (LA) and relevant \"Health and Safety (H&amp;S) checklist\", where applicable, must be approved before starting the learning activity. Activities started without prior explicit supervisor approval will not be accepted. \n \nThe module aims to provide students with the opportunity to: \n\u2022 Gain a valuable experience of the working environment and the career opportunities available upon graduation. \n\u2022 Sharpen critical thinking, creative problem-solving and the ability to articulate solutions correctly to decision-makers and budget-holders alike. \n\u2022 Undertake a career development learning activity appropriate to their academic level to gain exposure and access to professional networks. \n\u2022 Extend learning experience by applying and building on their academic skills and abilities by tackling real-life problems through enrichment and extracurricular programs related to student subject areas. \n\u2022 Enhance existing skills and master new ones through a structured personal and Professional Development Plan (PDP).   \nThere is no standard syllabus for the module; the learning outcomes will be developed in the subject-based context of Career Development Learning. A \"Learning Agreement\"(LA) produced and approved before the activity begins will specify how the outcomes will be developed and how they will be evidenced. Depending on the chosen activity, students may work on real external client projects with agreed deliverables specified by the client. Students will be expected to work individually, in teams or a combination of the two. \n \nSpecific emphasis should be placed on enhancing existing and gaining new skills, professional conduct, self-management, teamwork, and understanding of business and client requirements where applicable. A suitable career development learning activity should offer students an opportunity to build on their achievement-based CVs and must be related to their degree subject.&nbsp; \n \nStudents are expected to \"learn by doing\" and place emphasis on developing new skills and sharpening their existing skill set vis-a-vis soft/transferable skills as well as technical skills. The learning activity chosen should enable the student to build on previous experiences and learning gained within their academic course and elsewhere. \n \nLO1-5   \nAt the end of this module, students should be able to: \n \nLO1 \u2013 Demonstrate that they can function effectively as independent learners in supervised and unsupervised learning environments, including selecting and applying appropriate methods and procedures to accomplish the required tasks. \n \nLO2 \u2013 Communicate effectively with internal/external teams, clients, colleagues, decision-makers and budget holders. \n \nLO3 \u2013 Apply analytical, creative and advanced problem-solving skills relevant to the subject. \n \nLO4 \u2013 Critically evaluate skills and performance and plan for their systematic improvement. \n \nLO5 \u2013 Evidence an enhanced understanding and awareness of important commercial, social and professional factors and their impact on society as a whole and business in particular. ", "CC5051 - Databases (2023/24)  \nIntroduces techniques for analysing, designing and implementing database systems. An understanding of data modelling and design concepts is provided and database programming language skills are taught. The practical aspect of developing database systems is emphasised and use is made of a widely-used commercial database system (e.g. Oracle) for this purpose.&nbsp; \n \nThe module will enable students to give an introduction to the issues governing the design and implementation of database systems. Theoretical aspects of designing sound database systems, as well as the practical aspects of implementing such systems are presented. This therefore allows students to understand, and put into practice, the techniques available for analysing, designing and developing database systems.   \nThe main areas of the module syllabus include: \n \nDatabases and Database Management Systems: architectural framework, data independence. LO5 \nData analysis and modelling: conceptual data model notation, Entity-Relationship modelling, normalisation theory. LO1, LO2, LO3 \nDatabase models: historical background, hierarchical, network, relational models. LO3, LO5 \nRelational database theory: the model and its terminology, primary/foreign keys, integrity constraints, logical schema transformation. LO2, LO3 \nRelational Database languages: querying, insertion, deletion, update, views and reporting with SQL. LO4, LO5 \nRelational Algebra: algebraic operations, reference to SQL. LO4, LO5 \nCase study: practical application of database design and implementation. LO1, LO2, LO3, LO4   \nOn successful completion of this module, the student will be able to: \nLO1: Produce an Entity-Relationship model from a realistic problem specification \nLO2: Use formal design techniques (e.g. normalisation) to produce a database schema \nLO3: Design and implement a database system from a conceptual data model \nLO4: Manipulate and extract data stored in a database using relational algebra and SQL \nLO5: Discuss the relative merits of the relational environment ", "Information Security Management This module develops the concepts and principles of information security management including its organisational aspects such as security governance, policy procedures and security standards. It covers the relevant methods associated with risk assessment and management. In this module, various issues associated with information assurance, incident management and government legislation on data protection will be presented. This module introduces security controls that are used to protect information and underlying IT systems and infrastructure. Disaster recovery, business continuity management, investigation and digital forensics which are important aspects of information security management will be discussed in this module.  ", "CC4057 - Introduction to Information Systems (2023/24)  \nStudents will receive an introduction to the business environment and the role of information management and information systems within business. \nThe module develops an understanding of the Information Systems, the Software Development process and the basic technology underpinning these systems. This will include database management systems and the Internet. Students which will develop key skills and knowledge in the aspects of an information system, including databases, websites, and scripts with particular regard to usability. \n\u2022 The module aims to provide an overview of the nature of organisations, their business models, and how key areas operate to meet business objectives.&nbsp; It introduces students to organisational culture, data, information and knowledge management, and the role of information in organisational decision making. \n\u2022 Within the module the students will be given an appreciation of the effect of ICT on organisational performance, and a basic understanding of the processes of developing and maintaining information systems, software products and services. \n\u2022 An introduction to underlying technologies (e.g., databases, Internet and Web) is embedded in the module, which also seeks to develop basic competence and confidence in the use of appropriate tools, techniques and academic and communication skills, with an underlining awareness of legal, social, ethical and professional issues.   \nBusiness Organisations and Business Processes&nbsp; LO1 \nInformation Systems and Information Strategy&nbsp; LO2 \nInformation and Communication Technologies&nbsp; LO2, LO3 \nInformation Systems and Applications&nbsp; LO4 \nWebsite/Application Design&nbsp; LO4, LO2 \nSystem Development Lifecycle and Project Management&nbsp; LO3 \nE-Business, E-Commerce, and m-Commerce LO2, LO6 \nIntroduction to UML and User Interface Design&nbsp; LO5 \nWebsite/Application Design and Prototyping&nbsp; LO5 \nUML &amp; User Interface Design and Website/Application Prototyping&nbsp; LO3, LO5 \nKnowledge Management and e-Learning&nbsp; LO2, LO6   \nLO1: describe the main models of business organisations, typical internal structures together with their rationale in terms of business aims, business practices and business culture; \nLO2: explain the role of information processing and knowledge management within businesses, information and knowledge management in management decision making; and the relationship between business strategy, organisational decision making and ICT provision; \nLO3: apply a range of information systems modelling techniques to explain the processes involved in information systems development as part of a team; \nLO4: explain the tasks required when undertaking the establishment of a new information systems and be able to contract alternative approaches to development; \nLO5: demonstrate, though project work, understanding of the analysis and design of small projects using UML design and user interface programs, and the ability to write brief but informative reports on such work; \nLO6: demonstrate an awareness of key legal requirements related to information systems and relevant professional and ethical issues and standards; reflect on the learning experience; ", "Intermediate Mathematics for Computer Science (COMP0199)   Aims:  \n\n This module aims to provide a grounding in mathematics and statistics most relevant to a Computer Science undergraduate degree.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Reason about series of functions and multivariate functions. \n\t Employ numerical methods to solve mathematical problems. \n\t Decompose and study the properties of matrices and vector spaces. \n\t Model probabilities using measure theory. \n\t Use advanced statistical methods to reason about hypotheses. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Mathematics: \n\n  Sequences and Series of Functions. \n\t Multivariate Differential Calculus. \n\t Optimisation. \n\t Numerical Methods. \n\t Eigenvalues and Matrix reduction. \n\t Euclidian Spaces and Orthogonal Matrices. \n  Statistics: \n\n  Continuous Random Variables. \n\t Joint Probabilities and Marginal Distributions. \n\t Hypothesis Testing, Bootstrapping. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is formally available.   ", "Quantum Information and Communication (COMP0196)   Aims:  \n\n In this module, students will develop their understanding of the fundamental concepts and techniques of quantum information science, building on those covered in Quantum Computation (COMP0157). The aims are to capacitate students to understand and reason with quantum mechanics, and to introduce the basics of quantum cryptography, fault-tolerant quantum computation and quantum communication networks. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the mathematical structure of quantum mechanics and perform calculations with it. \n\t Analyze some of the building blocks of quantum information (teleportation, no-cloning, dense coding, and Bell inequalities) and understand the advantages that they provide over classical information. \n\t Analyze and prove the security of some quantum key distribution protocols. \n\t Analyze some quantum error correction codes and understand the basics of fault-tolerant quantum computation. \n\t Understand how to reliably send classical and quantum information through quantum networks. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Quantum mechanics. \n\t Quantum teleportation and dense coding. \n\t Quantum cryptography. \n\t Quantum error correcting codes. \n\t Quantum communication networks. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Quantum Computation (COMP0157) with a mark of 40% or greater.   ", "Machine Learning for Visual Computing (COMP0169)   Aims:  \n\n The module aims to equip students with knowledge of how to apply AI to problems from the creative industry; familiarity with basic ML-based algorithms and data structures to process digital media; ability of dealing with large scale data and training of machine intelligence; knowing rephrasing of existing concepts from digital media with tools from AI; and awareness of the difficulty of computed results and artistic freedom. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Formulate the diversity of image analysis and synthesis tasks as a machine learning process. \n\t Understand theoretical and practical concepts allowing image processing and generation to become learnable and basic understanding of how to execute that learning. \n   Indicative content:  \n\n Creative industries such as print, feature films, music, fabrication or interactive media increasingly make use of multiple machine learning driven tools. This module enables students to contribute to a new shift of paradigm, where such tools become increasingly intelligent of the content being designed and the users designing them. This is enabled by machine learning, a new way of dealing with data and new forms of algorithms. We will cover an applied background of machine learning and focus on data structures particularly relevant for creative content such as images and video and focus on learnable algorithms that allow to machines to process them intelligently, such as convolutional neural networks. \n\n The following are indicative of the topics the module will typically cover: \n\n  Basic regression: Ability to explain basic (1D) data with a linear model and to make predictions. Knowledge of how what a linear model entails, also in higher dimensions. The resulting attitude could be both that a surprisingly simple thing can explain complex visual phenomena, yet others it cannot. \n\t Understanding of linearity and non-linearity: Participants will be able to judge if a linear or nonlinear model is adequate and how important non-linearity is for Visual Computing. They should have knowledge of how to represent such models. The key change in perspective is that almost all non-trivial processes are nonlinear. \n\t Classification: Ability to formalize a problem as classification code a simple classifier in. Knowledge that classification is regression over probabilities to be from a class. \n\t Neural networks: Students should be able to code up a simple perceptron from scratch and manipulate its parameters (e.g., number of units and layers), as well as control the non-linearities. They would understand that NN is just matrix multiplications followed by non-linearities. \n\t Audio/2D/3D images and pixel processing: Load and stored images/3D data, audio in the coding environment they use. Understand basic issues of sampling and representations like colour and luminance. The attitude should be changing such that not only the algorithm matters, but also the right representation is critical. \n\t Tunable image filters; convolutional neural networks: Participants will learn how to execute convolutions on images and how to set up their environment to optimize the parameters of the convolutions. The key knowledge is that learning convolutions allows to share learned parameters across the image. \n\t 3D meshes and point clouds: Until now data structures were regular, but now students will learn how to load irregular data (3D graphs, 3D meshes, 3D point clouds) into their environment and also how to process them as well as to learn tunable filters for them. They will deepen their knowledge of convolution by seeing how it extends to unstructured data, a generalization. The resulting attitude should be, that a well-defined convolution works on regular data as well as irregular ones. \n\t Ambiguity and style: Students will be explained, that under some conditions, multiple solutions are valid and that it can be adequate to report any of these. They will see how to change their code from working on paired data matching an output to a reference, it can be sufficient to match only statistics. The required skill is to change the loss and choose the right representation of these statistics. \n\t Generative modelling: We will first introduce the concept of a generative model, which takes simple parameters in low dimensions and maps them to complex objects in millions of dimensions. Using this requires the skill to load many exemplars and encode and decode them, which students can compose from components from before. The change of attitude should be, that a generative model is a very abstract way to \u201caddress\u201d objects in a family of natural instances: images of faces, houses, cars, etc. \n\t Levels of supervision; Adversarial training: Students here will acquire the skill to replace the supervision in form of pairs that are mapped to each other by a paradigm where only random samples form a target distribution are given. To this end they have to understand that the loss is replaced by another network. \n   Requisites:  \n\n To be eligible to select this module an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "Research Methods (COMP0030)   Aims:  \n\n The aims of this module are to: deepen the student's appreciation of what research in computer science is and how it is carried out; teach students how to read research publications critically; teach students how to evaluate research ideas; teach students how to perform a literature survey; outline the work needed to produce a research paper; and introduce the students to both seminal papers and cutting-edge research in computer science.   Intended learning outcomes:  \nOn successful completion of the module, a student will be able to: \n\n  Identify seminal and cutting-edge topics in computer science. \n\t Distinguish research topics from engineering tasks. \n\t Know how to go about evaluating the novelty and contribution of a research idea. \n\t Write a critical survey; students should also gain a good knowledge of a number of areas of research carried out in the department. \n   Indicative content:  \n\n Students are split into groups, and each assigned a supervisor who will give them a batch of research papers and help to answer questions on those papers. Students will receive guidance from the module lead and their supervisor on how to write a literature review.   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "Computer Architecture and Concurrency (COMP0008)   Aims:  \n\n The module aims to provide a working knowledge of the hardware and architecture of a modern computer system, particularly focusing on concurrency aspects and those that have an impact on writing multithreaded software. Students will gain a fundamental understanding of the concurrency abstraction and how it impacts both computer architecture and software design. We will look at computer architecture aspects that directly impact multithreaded software such as the memory hierarchy, cache coherence/consistency and hardware multithreading. We will learn how to design correct multithreaded Java software based on a solid theoretical understanding of concurrency principles and the Java Memory Model. The module will cover an understanding of concurrency from low-level aspects (such as spin locks implemented in assembly language) to high-level design patterns used within the Java concurrency package.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Use the concurrency abstraction to reason about concurrent systems. \n\t Write and understand modern assembly language programs. \n\t Describe how high-level languages are translated to assembly language and subsequently machine code. \n\t Describe the internal structure of processors and different forms of parallelism employed. \n\t Describe how modern computers handle memory and input/output including key concurrency aspects such as cache coherence, memory consistency/visibility and interrupt-driven thread switching. \n\t Describe how operating systems schedule application level threads onto the CPU resources. \n\t Describe how synchronization mechanisms in high-level languages are implemented in terms of more primitive hardware concurrency instructions. \n\t Reason about and resolve safety aspects of multithreaded Java including interference and visibility issues. \n\t Write safe and efficient multithreaded Java code using the monitor design and other patterns. \n\t Compare and contrast the traditional Java concurrency mechanisms with those of the new Java concurrency package mechanisms. \n\t Correctly and safely use the thread-safe data and control structures within the new Java concurrency package. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Top-down high level overview of a computer: the main components making up a computer and how they interact. \n\t The concurrency abstraction. \n\t Assembly language and machine code. \n\t Translation of high-level languages into machine code. \n\t Internal structure of a processor: the control unit (CU) and datapath. \n\t Parallelism within the CPU. \n\t Key aspects of how operating systems handle application-level threads. \n\t Memory hierarchy, cache structure and cache coherence mechanisms. \n\t Creating and managing Java threads. \n\t Understanding and reasoning with the Java Memory Model (JMM) specification. \n\t Java traditional synchronization mechanisms (and how they relate to low-level hardware instructions) \n\t Monitor design patterns and conditional variables. \n\t Reasoning about the correctness of concurrent programs: safe data structures. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; (2) understand basic computer arithmetic (binary/hex manipulation, fixed-size arithmetic, 2s- and 16s-complement forms, etc.); and (3) have strong Java programming skills.   ", "Group Research Project (COMP0031)   Aims:  \n\n The aim of the module is to give undergraduate students exposure to cutting-edge research undertaken in the department and enhance student awareness of the range of research in computer science. The module will allow undergraduate students to develop research skills in computer science and its specific sub-disciplines, by means of an actual research project, conducted in small groups and under the direct supervision of an active academic researcher.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Formulate research questions. \n\t Plan and execute research activities in a systematic and organized way. \n\t Critically evaluate and review their work and the work of others. \n\t Effectively communicate their research work and findings. \n   Indicative content:  \n\n Students will work in groups to conduct a research project and produce a report/ paper presenting their results, under the supervision of a member of research/ academic staff. \n\n This will build on work previously undertaken in Research Methods (COMP0030) for MEng Computer Science students or Directed Reading (COMP0007) for MEng Mathematical Computation students. \n\n The following is indicative of the topics the module will typically cover:&nbsp; \n\n  Module introduction, team formation, and assignment to research supervisor:\n\t  For MEng Computer Science students, the team and research supervisor will be the same as for Research Methods (COMP0030). \n\t\t For MEng Mathematical Computation students, team formation and assignment to research supervisor will occur late in Term 1. \n\t  \n\t Definition of scope of the projects and agreement of the steps to be undertaken (project specific.) \n\t Research is undertaken under the guidance and supervision of the research supervisor, and tutorials will run on a weekly basis. \n\t Preparation of final deliverables. Each team is required to submit a paper/ report, presenting the results of the project (e.g., hypothesis/ research idea, methodology followed, experiments conducted, analysis of results). Each student is also required to submit a personal report giving (a) a critical assessment of the project results, (b) a detailed assessment of their own role, including a summary of what they contributed, and (c) a brief assessment of each group member. \n\t Reading lists are project-specific and will be provided on a per-group basis. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must either (1) be registered on MEng Computer Science and have taken Research Methods (COMP0030) in Term 1; or (2) be registered on MEng Mathematical Computation and have taken Directed Reading (COMP0007) in Year 2.   ", "Graphical Models (COMP0080)   Aims:  \n\n The module introduces probabilistic modelling, covering the broad theoretical landscape, and aims to cover much of the first 12 chapters of the  core textbook . The emphasis is on probabilistic modelling of discrete variables.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Construct probabilistic models, learn parameters and perform inference. This forms the foundation of many models in the wider sciences and students should be able to develop novel models for applications in a variety of related areas. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Bayesian Reasoning. \n\t Bayesian Networks. \n\t Directed and Undirected Graphical Models. \n\t Inference in Singly Connected Graphs. \n\t Hidden Markov Models. \n\t Junction Tree Algorithm. \n\t Decision Making under uncertainty. \n\t Markov Decision Processes. \n\t Learning with Missing Data. \n\t Approximate Inference using Sampling. \n  If time permits, we will also cover some deterministic approximate inference. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is&nbsp; formally available; (2) have understanding of and abilities with Linear Algebra, Multivariate Calculus and Probability at mathematics FHEQ Level 4 or above; and (3) have familiarity with coding a high-level language in order to complete assessments (strongly recommend that students are skilled in Python) (some tools in Matlab and Julia are provided).   ", "Reinforcement Learning (COMP0089)   Aims:  \n\n The module aims to introduce students to the foundations of reinforcement learning, and to equip students with the ability to successfully implement, apply and test relevant learning algorithms.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the basics of reinforcement learning paradigms. \n\t Understand the theoretical foundations, formalisms and algorithms in reinforcement learning. \n\t Understand how to apply reinforcement learning algorithms to environments with complex dynamics. \n\t Understand how to combine reinforcement learning with function approximation, and specifically with modern deep learning methods (deep reinforcement learning). \n   Indicative content:  \n\n The module is about prediction and control using reinforcement learning, including aspects of deep reinforcement learning, i.e., the application of neural networks-based functional approximation to reinforcement learning problems. \n\n The following are indicative of the topics the module will typically cover: \n\n  Markov decision processes. \n\t Planning by dynamic programming. \n\t Model-free prediction and control. \n\t Value function approximation. \n\t Policy gradient methods, Actor-critic algorithms. \n\t Integration of Learning and Planning. \n\t Exploration vs exploitation trade-offs. \n  For these topics we will discuss theory and concrete algorithms and applications. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have a strong understanding of probability, calculus, and linear algebra; (3) have knowledge of coding skills in Python (in order to complete assessments); and (4) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module). \n\n It is recommended that students have taken either Bayesian Deep Learning (COMP0171), or Applied Deep Learning (COMP0197) (or be concurrently enrolled in such a module).   ", "Advanced Topics in Machine Learning (COMP0083)   Aims:  \n\n The module aims to introduce the students to some of the more advanced and technically challenging topics in Machine Learning, typically including the theory and applications of kernel methods and another topic of choice selected for the given year (such as convex optimisation, statistical learning theory, transfer learning, meta learning, online learning.) \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Gain in-depth familiarity with the selected research topics;&nbsp;understand how to design and implement learning algorithms. \n\t Individually read, understand and discuss research papers in the field. \n   Indicative content:  \n\n The module consists of two parts; each part is organised around a research topic in Machine Learning. The following are indicative of the topics the module will typically cover: \n\n Part 1: \n\n Advanced introduction to kernel methods - \n\n  Definition of a kernel, how it relates to a feature space, The reproducing kernel Hilbert space. \n\t Simple applications: kernel PCA, kernel ridge regression. \n\t Distance between means in RKHS, integral probability metrics, the maximum mean discrepancy (MMD), two-sample tests. \n\t Choice of kernels for distinguishing distributions, characteristic kernels. \n\t Covariance operator in RKHS: proof of existence, definition of norms (including HSIC, the Hilbert-Schmidt independence criterion). \n\t Application of HSIC to independence testing. \n\t Feature selection, taxonomy discovery. \n\t Introduction to independent component analysis, kernel ICA. \n\t Large margin classification, support vector machines for classification. \n  Part 2: \n\n  A second research topic of research, such as convex optimisation, statistical learning theory, transfer learning, meta learning, online learning. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have high competency with Multivariable Calculus, Probability and Combinatorics, and Linear Algebra such that they can reprove basic results as well as novel results; and (3) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module).   ", "Malware (COMP0060)   Aims:  \n\n The module aims to&nbsp;provide students with specialist understanding of the issues and techniques in malware detection and classification; and broad understanding of the human, social, economic, and historical context in which malware occurs. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Have specialist understanding of the nature of malware, its capabilities, and how it is combatted through detection and classification. \n\t Understand what the underlying scientific and logical limitations on society\u2019s ability to combat malware are. \n\t Have an appreciation and broad understanding of the social, economic and historical context in which malware occurs. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction: \n\n  The taxonomy of malware and its capabilities: viruses, Trojan horses, rootkits, backdoors, worms, targeted malware. \n\t History of malware. \n  The social and economic context for malware: \n\n  Crime, anti-malware companies, legal issues, the growing proliferation of malware. \n  Basic Analysis: \n\n  Signature generation and detection. \n\t Clone detection methods. \n  Static analysis theory: \n\n  Program semantics. \n  Static Analysis: \n\n  System calls: dependency analysis issues in assembly languages. semantic invariance of system call sequences. \n\t Taint-based analyses. \n\t Semantic clones. \n  Dynamic Analysis: \n\n  Virtualization- semantic gap. \n\t Reverse engineering. \n\t Hybridisation with static analysis. \n  Similarity metrics: \n\n  (Kolmogorov Complexity.) \n\t Association metrics. \n\t Other entropy-based metrics. \n  NLP based approaches. Problems in large scale classification: \n\n  Scalability. \n\t Triage methods. \n\t Required FP rate. \n  Hiding: \n\n  Polymorphism. compression, encryption, virtualization. \n\t Metamorphism. high level code obfuscation engines, on-board metamorphic engines, semantics-preserving rewritings. \n\t Frankenstein. \n  The theory of malware: \n\n  Rice\u2019s theorem and the undecidability of semantic equivalence. \n\t Adleman\u2019s proof of the undecidability of the presence of a virus. \n\t Cohen\u2019s experiments on detectability and self-obfuscation. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken modules in logic and discrete mathematics, assembly, and imperative programming at FHEQ level 4 or higher.   ", "People and Security (COMP0056)   Aims:  \n\n Students will be able to specify usability criteria that a security mechanism has to meet to be workable for end-user groups and work contexts. They will know the strengths and weaknesses of particular security mechanisms in practice, and hence be able to choose and configure mechanisms for best performance in a given organisational context. Students will be able to specify accompanying measures (policies, training, monitoring and ensuring compliance) that a user organisation needs to implement to ensure long-term security in practice. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Apply their knowledge of human factors and behavioural economics to specify and implement workable and effective security solutions and manage security behaviour. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Understanding Human Behaviour in Security: \n\n  Systems thinking and design. \n\t Usability: Users, tasks and context. \n\t Performance and Workload. \n\t Productivity and performance vs risk and security. \n  Economics: \n\n  Humans and Risk. \n\t Risk Biases and Decision-making. \n\t Friction and the Compliance Budget. \n  Authentication: \n\n  Authentication tasks:\n\t  enrolment, verification, recovery. \n\t  \n\t Knowledge-based authentication:\n\t  Passwords, \n\t  \n\t phrases, PINs, graphical Authentication. \n\t Token-based authentication. \n\t Biometric authentication:\n\t  physical and behavioural. \n\t  \n\t Continuous authentication via devices, sensors, and biometrics. \n\t Payment systems and transaction authentication. \n  Access control: \n\n  Different access control models, organisational impact and user workload. \n\t Attacks and attackers (and how to counter them): \n\t Types of attacks (Guessing, observation, capture and coercion). \n\t Types of attackers: motivation, resources risk propensity. \n\t Social engineering attacks. \n\t Insider attacks. \n  Identity: \n\n  Online identity vs identity in the physical world. \n\t National identity vs socially constructed systems. \n\t Digital footprints, shadows and super-identities. \n\t Identity as currency. \n  Privacy: \n\n  Data protection and user perception. \n\t Delivering privacy: Privacy by Design, the PST model. \n\t Surveillance, dataveillance and sousveillance online and in the physical world (CCTV). \n  Trust: \n\n  Model of trust in online interaction. \n\t Incentivising trustworthy behaviour. \n\t Reputation systems and their application in online systems. \n  Influencing user behaviour: \n\n  Security awareness, education and training. \n\t User interface design and influencing techniques. \n\t Values, attitudes, security culture and security behaviour. \n\t Responsibility and communication. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have knowledge of basic information security principles; and (3) have good essay-writing skills.   ", "Introduction to Data Science and Systems (M) COMPSCI5089   To give students   a grounding  &nbsp;in foundational elements of data science theory and systems, including Data transformations, Database Systems, and practical data processing pipelines.     This course will give students a grounding in foundational elements of data science theory and systems, including:     1.   Data transformation fundamentals  : working with array data, implementation of linear algebra, visualisation, probabilistic concepts.     2.   Database Systems Fundamentals:  &nbsp;To introduce students to physical DB design (storage, indexing), fundamental query processing algorithms based on file organization, basic indexing methods, practical query optimization, and transactional semantics.     3.    Practical data processing pipelines:  &nbsp;Give students experience of data cleaning and integration with modern tools (e.g. pandas,   numpy  ,   scikit  -learn).  This includes handling incomplete and noisy data from diverse sources. Representing diverse types of data (including text), creating vector representations of data, measuring item similarity, clustering and linking data objects, and then visualising the results using modern algorithms.       By the end of this course students will be able to:  &nbsp;    1.   formulate problems in tensor form and fluently manipulate tensors;    2.   efficiently run   vectorized  &nbsp;code;  &nbsp;    3.   apply matrix decomposition to practical problems;    4.   be able to   vectorise  &nbsp;data, and measure distances between items  &nbsp;(including text data)    5.   formulate and understand problems with stochastic elements;    6.   discuss   the impact of storage and indexing decisions on database performance    7.   explain the impact of optimisation choices on query processing performance    8.   create effective, clear, and precise visualisations of scientific data;    9.   demonstrate  &nbsp;proficiency  &nbsp;in the application of common tools in a pipeline to   process, filter,   integrate, analyse,   summarise and   visualise   data.  ", "Supervised Learning (COMP0078)   Aims:  \n\n This module covers supervised approaches to machine learning (ML). Our goal will be to gain intuition about a number of ML methodologies, how they function, where they perform well, poorly and so forth. These intuitions will be given as mathematical results which will be supported by proof. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Gain in-depth familiarity with various classical and contemporary supervised learning algorithms. \n\t Understand the underlying limitations and principles that govern learning algorithms and ways of assessing and improving their performance. \n   Indicative content:  \n\n The module consists of both foundational topics for supervised learning such as Linear Regression, Nearest Neighbours and Kernelisation as well contemporary research areas such as multi-task learning and optimisation via proximal methods. \n\n The following are indicative of the topics the module will typically cover: \n\n  Nearest Neighbours. \n\t Linear Regression. \n\t Kernels and Regularisation \n\t Support Vector Machines. \n\t Gaussian Processes. \n\t Decision Trees. \n\t Ensemble Learning. \n\t Sparsity Methods. \n\t Multi-task Learning. \n\t Proximal Methods. \n\t Semi-supervised Learning. \n\t Neural Networks. \n\t Matrix Factorization. \n\t Online Learning. \n\t Statistical Learning Theory. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have high competency with Multivariable Calculus, Probability and Combinatorics, and Linear Algebra such that they can reprove basic results as well as novel results. \n\n The module is mathematical in nature. As such there is a significant proportion devoted to formal theorems and proofs.   ", "Engineering Challenges (ENGF0001)  The challenges of the 21st century require more than just theoretical knowledge in order to solve them. Design, professional and technical skills are sorely needed to help communities tackle big problems in crucial areas such as energy, infrastructure and security, as well as health and sustainability. \n\n The aim of the Engineering Challenges module is to introduce you to real-world project-based working as well as some of the techniques and skills that you will need both in the rest of your degree and beyond. The module is split into two design projects, known as Challenges. Each Challenge is designed to address part of the design process and provide you with opportunities to integrate knowledge and skills developed in other modules such as experimental methods, modelling and prototyping as well as developing and improving skills such as creative thinking, critical thinking, decision-making, problem-solving, designing, effective team working, self-directed learning, technical writing, and communication. \n\n Challenge 1, the first design project, is a department-based individual project on a topic relevant to the research conducted within the department of your chosen degree programme. The aim here is to introduce you to your department and give you a sense of the wider context and application beyond the classroom. You will also start to learn skills like information gathering, giving and receiving feedback and presenting your work. Challenge 2, the second design project, is interdisciplinary, with departments paired up or grouped together to work on aspects of one large project where you will also start to think about the social impact of your engineering solutions, whilst designing it to technically work. In this hands-on and active module, you will learn to apply teamwork and communication skills as well as basic project management tools/practices.&nbsp; \n\n This Engineering Challenges module is part of the Engineering faculty\u2019s cross-faculty teaching framework called the Integrated Engineering Programme (IEP) and is designed to be integrated with the ENGF0002 DPS and ENGF0003 MMAI modules taught in parallel during the same term. This means that material and skills will be referenced and referred to across the three modules.&nbsp;&nbsp; \n\n  Intended Learning Outcomes&nbsp;  \n\n Throughout this module you\u2019ll gain a better understanding of your discipline and its context within the wider world, the design process and the interaction between society and engineering. You will start developing your skills and abilities in information gathering, engineering design, communication, creative and critical problem solving, decision making and teamwork in groups that are multi-disciplinary in addition to those that only comprise colleagues from your chosen discipline.&nbsp;   ", "Information Retrieval and Data Mining (COMP0084)   Aims:  \n\n The module is aimed at an entry level study of information retrieval and data mining techniques. It is about how to find relevant information and subsequently extract meaningful patterns out of it. While the basic theories and mathematical models of information retrieval and data mining are covered, the course is primarily focused on practical algorithms of textual document indexing, relevance ranking, web usage mining, text analytics, as well as their performance evaluations.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the common algorithms and techniques for information retrieval (document indexing and retrieval, query processing, etc). \n\t Understand the quantitative evaluation methods for the IR systems and data mining techniques. \n\t Understand&nbsp;the popular probabilistic retrieval methods and ranking principles. \n\t Understand&nbsp;the techniques and algorithms existing in practical retrieval and data mining systems such as those in web search engines and recommender systems, including the recently popular topic of deep learning. \n\t Understand&nbsp;basic algorithms that can be used to make predictions out of data. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Overview of the fields: \n\n  Study some basic concepts of information retrieval and data mining, such as the concept of relevance, association rules, and knowledge discovery. Understand the conceptual models of an information retrieval and knowledge discovery system. \n  Indexing and Text Processing: \n\n  Introduce various indexing techniques for textual information items, such as inverted indices, tokenization, stemming and stop words. Techniques used for text compression, such as the Lempel-ziv algorithm and Huffman Coding will be covered. \n  Retrieval Methods: \n\n  Study popular retrieval models (boolean, vector space, binary independence, language modelling). Probability ranking principle. Other commonly-used techniques such as relevance feedback, pseudo relevance feedback, and query expansion will also be covered; \n  Measurements: \n\n  Online and offline Evaluation techniques to evaluate retrieval quality. Commonly used evaluation metrics such as average precision, NDCG, etc. Cranfield Paradigm and TREC conferences, as well as some recently popular techniques such as interleaving will be discussed; \n  Data Mining: \n\n  Study basic techniques, algorithms, and systems of data mining and analytics, including frequent pattern and correlation and association analysis, basic machine learning algorithms such as linear regression and logistic regression. Discussion on basic personalisation and usage mining techniques. \n  Emerging Areas: \n\n  Study new emerging areas such as learning to rank, deep learning, word embeddings and topic modelling. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have an understanding of probability and statistics; and (3) have proficiency in Java or Python programming (as demonstrated by a least one programming project in the past).   ", "Practical Program Analysis (COMP0174)   Aims:  \n\n Program analysis is widely used in industry to ensure software quality and security on various stages of software development process. This module covers both theoretical and practical aspects of modern program analysis. First, the module introduces static program analysis techniques such as data flow analysis and abstract interpretation. Second, the module demonstrates dynamic analysis techniques such as taint analysis and race detection. Third, the module shows how these techniques are used in practice to ensure software quality and security. Finally, the module discusses the implementation of program analysis techniques.&nbsp; \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to:&nbsp; \n\n  Rigorously reason about software properties.&nbsp; \n\t Choose appropriate program analysis techniques in different stages and contexts of software development. &nbsp; \n\t Apply modern program analysis tools to real-world software and correctly interpret their output. &nbsp; \n\t Implement custom program analysis tools.&nbsp; \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Introduction to program analysis. \n\t Pattern-based analysis. \n\t Lattice theory. \n\t Data-flow analysis:\n\t  Constant propagation. \n\t\t Live variables. \n\t\t Reaching definitions. \n\t  \n\t Abstract Interpretation. \n\t Dynamic analysis:\n\t  Dynamic race detection. \n\t\t Buffer overflow detection. \n\t\t Dynamic taint analysis. \n\t\t Application of dynamic analysis (fuzz testing, web security). \n\t  \n\t Program analysis in practice. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "Affective Computing and Human-Robot Interaction (COMP0053)   Aims:  \n\n The module targets students who have no previous knowledge in cognitive science and emotion theory and therefore the aim of Part A of the module is to give a basic introduction to the theory of emotion from physiological and psychological viewpoints and to understand its importance in human decision and communication processes. Part B will concentrate on the application of machine learning techniques to automatic emotion recognition by looking at current applications (e.g., in entertainment, education, and health) and available sensing technology. Part C will focus on the challenges in designing robots that are capable of socially interacting with humans. Examples of current applications (e.g., in entertainment, health, rehabilitation, service robotics) will be used to identify problems and discuss affective computing challenges and approaches for the topics taught in Parts A and B. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Have basic knowledge of emotion models and of how technology (e.g.,&nbsp;robot) can be endowed with the ability to affectively and socially interact with its user. \n\t Understand the challenges that affective computing and social HRI pose to the machine learning field and identify the advantages and disadvantages of different approaches to address those issues. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Emotion theory: \n\n  What is affect, emotion, mood? \n\t Why do we have emotions? \n\t Neurological and psychological perspectives. \n\t How do humans express and recognise emotions? \n\t Emotion expression models, appraisal theories. \n\t Affective and social interaction. \n  Affective computing: \n\n  Definition. \n\t Aims and current challenges. \n\t Applications; emotion recognition. \n\t How to select and use sensors for data collection. \n\t How to build an automatic emotion recognition system from: single modality,&nbsp;facial expressions, body expressions, touch expressions, voice, bio-signals and multimodal fusion. \n  Introduction to Physiological computing: \n\n  Key concepts (physiological sensing, affect recognition, biofeedback). \n\t How to build low-cost physiological computing systems (e.g. emergent wearable devices, low-cost cameras). \n\t Types of affect-related physiological signals and how to obtain features (cardiovascular, respiratory, perspiratory etc). \n  Human-Robot Interaction (HRI): \n\n  Social robotics: motivation and emotions in robot. \n\t Emotion based architecture. \n\t Ethical issues in Affective Computing and HRI research. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have some machine learning background, for example from Supervised Learning (COMP0078), or Introduction to Machine Learning (COMP0088); and (3) have some programming skills (for example, Python, MATLAB, Java, C, C++). \n\n There is no imposed programming platform.   ", "Perception and Interfaces (COMP0160)   Aims:   \n\n The aims of the module are to: (1) provide&nbsp;students with an understanding of the underlying theories and methods of measuring human perception and its uses within computing; and (2) provide&nbsp;students with the knowledge of how to use perceptual principles in the design of interfaces/environments. \n\n  Intended learning outcomes:   \n\n On successful completion of the module, a student will be able to: \n\n  Explain how humans perceive and interpret sensory information. \n\t Understand the relevance of perception in computing (e.g., robotics, virtual environments, machine learning, sensor design, interfaces). \n\t Appreciate the importance of perception in the design of interfaces/environments. \n\t Apply perceptual techniques to both the design and evaluation of interfaces/environments. \n   Indicative content:  \n\n The following is indicative of the topics the module will typically cover: \n\n The module covers how we interact with our immediate environment and interfaces through our senses. The module provides students with an understanding of the theoretical principles underlying human perception that can be used in the design and implementation of interfaces and environments. This involves understanding how core perceptual principles are used in the design of displays, sensors and virtual environments. The module also introduces students to software and experimental techniques to monitor and measure how effectively we interact with such interfaces. Not all topics will be covered to the same depth. \n\n  Requisites:  \n\n To be eligible to select this module, a student must be registered on a programme and year of study for which it is formally available. \n\n There may be an element of maths and/ or coding involved in the understanding of the concepts, practical work or assessments. Coding may use the following languages: Python, MatLab, C#.   ", "Auditory Computing (COMP0161)   Aims:  \n\n The module aims to introduce the perceptual principles underlying auditory computational modelling and applications. In particular, principles and theory of sound detection, selection and organization underlying computational auditory scene analysis, speech recognition and sound and music computing. \n\n  Intended learning outcomes:  \n\n On successful completion of this module, a student will be able to: \n\n  Understand the basic principles of auditory processing, acoustics, the design of auditory filters and applications in computing. \n\t Explain the fundamentals of auditory processing, modelling, and its applications. \n\t Understand and appreciate the contribution of low-level auditory processing and the development of computational models of binaural hearing, pitch perception, and speech recognition models \n\t Understand some key principles of music computation involving representation, sonification, and algorithmic design.    \n   Indicative content:  \n\n The following is indicative of the topics the module will typically cover: \n\n An introduction to the perceptual principles underlying auditory computational modelling and applications. This module will complement other module content such as machine learning (auditory filters, non-linear models), machine vision (spectro-temporal processing, organization, representation), speech recognition (spectrograms, time-series analysis), neural computing (cognitive systems), and virtual environments (binaural and spatialized sound presentation). Not all topics will be covered to the same depth. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is formally available. \n\n There may be an element of maths and/ or coding involved in the understanding of the concepts, practical work or assessments. Coding may use the following languages: Python, Java, MatLab, C#.   ", "Computer Security II (COMP0055)   Aims:  \n\n Providing an advanced understanding of network and computer security vulnerabilities and countermeasures in real-world systems. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Think critically and creatively about advanced security topics. \n\t Understand how, when, and why to apply security technologies for the most benefit, vis-\u00e0-vis advanced network, software, and system issues. \n\t Design of attacks and defences to networks, systems, and software, both from a theoretical and a practical point of view. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Network protocols and vulnerabilities. \n\t Network defences. \n\t Network security tools. \n\t Intrusion and anomaly detection. \n\t Advanced software and system security: threats, vulnerabilities, and countermeasures via real-world examples. \n\t Malware and botnets. \n\t Denial of service. \n\t Advanced Web security. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken Computer Security I (COMP0054) or an equivalent module in Term 1.   ", "Financial Institutions and Markets (COMP0105)   Aims:  \n\n The module exposes participants to an overview of the Financial Markets and its key participants and products.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the function of financial markets and their key participants. \n\t Have an overview of the main exchanges and the different ways that their indices are calculated. \n\t Understand the fixed income market and its major products. \n\t Understand the FX market and its major products. \n\t Understand the equity market and its major products. \n\t Understand the derivative market and its major products. \n\t Understand credit risk, its effect on the pricing of financial assets and credit related financial products. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Exter\u2019s inverted pyramid. \n\t Public and private sector institutional participants. \n\t Major exchanges and indices. \n\t Overview of consumer, corporate and investment banking financial services. \n\t Fixed income market and products. \n\t FX market and products. \n\t Equity market and products. \n\t Derivative market and products. \n\t Credit risk and derivatives. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have an understanding of the fundamental macroeconomics and software services.   ", "Object-Oriented Programming (COMP0004)   Aims:  \n\n This module provides a thorough introduction to object-oriented (OO) programming. The key object-oriented concepts such as class design, inheritance, dynamic binding and interfaces, are introduced along with design strategies for smaller sized object-oriented programs. Material is also included on data representation, the implementation of common data structures such as lists, trees and hash tables, basic cloud-based applications, and on development tools and practices. To learn how to apply object-oriented design concepts, and practice programming skills, the module has a substantial practical element, with weekly lab classes, sets of exercise questions, and an individual programming coursework. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Design and implement smaller-scale object-oriented programs. \n\t Have a good knowledge of key object-oriented principles and design strategies. \n\t Read, write, and process data sets using object-oriented techniques. \n\t Understand how core data structures are implemented using classes. \n\t Develop basic object-oriented&nbsp;applications that run in a cloud environment. \n\t Use programming tools such as an integrated development environment (IDE), debugger, and version control. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Object-Oriented Principles: \n\n  Taking an object-oriented approach to software development. \n\t Classes and the use of abstractions. \n\t Key design principles and development practices. \n  Object-Oriented Programming: \n\n  Designing and implementing classes. \n\t Identifying and implementing class relationships. \n\t Using abstract classes, interfaces and inheritance. \n\t Developing smaller-scale programs taking an object-oriented approach. \n\t Effective object-oriented design and programming practices. \n\t Documenting designs using class diagrams. \n\t The design of basic cloud-based applications. \n  Data Representation: \n\n  Implementing common data structures. \n\t Storing data in files. \n\t Processing data to extract information. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) \u200bbe registered on a programme and year of study for which it is a formally available; and (2) have taken Principles of Programming (COMP0002) in Term 1.   ", "Statistical Natural Language Processing (COMP0087)   Aims:  \n\n The module introduces the basics of statistical natural language processing (NLP) and machine learning techniques relevant for NLP.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand relevant ML techniques, in particular in deep learning, what makes NLP challenging (and exciting), how to write programs that process language, and how to address the computational challenges involved. \n   Indicative content:  \n\n NLP is domain-centred fields, as opposed to technique centred fields such as ML, and as such there is no \"theory of NLP\" which can be taught in a cumulative technique-centred way. Instead, this module will focus on NLP applications and the machine learning techniques used to solve them. Through these applications the participants will learn about language itself, relevant linguistic concepts, and Machine Learning techniques. For the latter an emphasis will be on deep learning prediction. \n\n Topics will include (but are not restricted to) machine translation, sequence tagging, constituent and dependency parsing, information extraction, semantics. The module has a strong applied character, with coursework to be programmed and lectures that mix practical aspects with theory and background. \n\n The following are indicative of the topics the module will typically cover: \n\n NLP Tasks: \n\n  Language Models. \n\t Machine Translation. \n\t Text Classification. \n\t Sequence Tagging. \n\t Information Extraction. \n\t Machine Reading Comprehension. \n  NLP and ML methods: \n\n  Encoder/Decoder Architectures. \n\t Feature Engineering. \n\t Deep Neural Networks. \n\t RNNs, CNNs. \n\t Attention. \n\t Word Vectors. \n\t Pretraining. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; (2) have an understanding of Basic Probability Theory (e.g., Bayes Rule), Linear Algebra and Multivariate Calculus; (3) have proficiency in programming; (4) have the ability to install libraries on a computer; and (5) have taken at least one introductory machine learning module, for example Supervised Learning (COMP0078) or Introduction to Machine Learning (COMP0088) (or be concurrently enrolled in such a module).   ", "Requirements Engineering and Software Architecture (COMP0101)   Aims:  \n\n The module will train students in the fundamental principles and latest techniques in systems requirements engineering and software architecture.   Intended learning outcomes:  \n\n On successful completion of this module, a student will be able to: \n\n  Discover, model, analyse and communicate requirements for software intensive systems. \n\t Design, evaluate and communicate software architecture that meet these requirements. \n  The module emphasis will be on developing the students' modelling skills and their ability to communicate requirements and architectures with clarity and precision to business stakeholders and software developers. \n\n  Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  System Requirements Engineering: Goal-oriented requirements engineering, requirements engineering in agile projects. \n\t Software Architecture: Architecture modelling, architectural styles, quality requirements. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have strong knowledge and practical experience of software engineering at least equivalent to FHEQ level 5.   ", "Computer Security I (COMP0054)   Aims:  \nThis module aims to introduce computer security concepts and techniques. It covers core security principles to engineer systems that provide properties like confidentiality, integrity, or availability, despite the efforts of malicious entities to subvert them.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Recognise security properties of systems, as well as formulate security policies, and model the threats they may face. \n\t Select appropriate controls to guarantee that the security policies are implemented robustly and may resist efforts to subvert them, through exposure to a number of established industry and government security mechanisms and design patterns. \n\t Analyse&nbsp;computer systems&nbsp;and develop&nbsp;strategies to bypass security controls. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n The module provides strong foundations in security engineering and enables students to more easily follow other modules in Information Security and in Applied Cryptography. \n\n The first half of the module covers topics which underpin security of systems: \n\n  Basic principles. \n\t Security policies. \n\t Access control (theory and practice). \n\t Hardware, \n\t OS security fundamentals. \n  We will then dive into the details of various technical protection mechanisms and computer attacks including hardware, operating system, and side channel attacks. We will also learn about defensive technology in high-integrity systems both from a theoretical and a practical level. We will study user authentication and identification. The module provides strong foundations in security engineering and enables students to more easily follow other modules in Information Security and in Applied Cryptography. \n\n  Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have taken the equivalent of the core modules of a UK-equivalent honours degree (or higher) in the field of computer science (in particular, operating systems, networking, computer architecture.) \n\n Some mathematics are useful to know, e.g., discrete mathematics, probability, logic, partial orders, entropy.   ", "Acquisition and Processing of 3D Geometry (COMP0119)   Aims:  \n\n The module aims to expose students to the challenges and potential of geometry processing in relevant application areas. To explain how to use acquire 3D model, and subsequently process, analyse, and manipulate the data. To familiarize students with handling real data sets and apply machine learning algorithms in the context of 3D geometric data.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Read and understand recent advancements in this area (theory). \n\t Obtain a grasp of the key tools in geometry processing (theory) and understand current machine learning approaches in the context of geometry processing. \n\t Gain necessary coding and practical skills to work directly with real-world 3D data (practice). \n\t Learn to formulate and solve problem using the geometric tools they learn as part of the module (practice). \n   Indicative content:  \n\n The module introduces basics of geometry processing covering important aspects of acquisition, analysis, and manipulation of 3D data. The module will consist of a mix of theory and applications to real-world scenarios. \n\n The module intends to introduce students to the various stages of a typical geometry processing pipeline. With the recent growth in popularity of 3D acquisition devices (e.g., depth cameras) and modeling frameworks, geometry processing now plays a central role in a diverse set of applications including city planning, architectural geometry, reverse engineering, interactive modeling, etc. \n\n Topics will include but not restricted to mesh representations, mesh smoothing, remeshing, mesh reconstruction, and shape analysis. Necessary topics in differential geometry will be covered in the module. \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction: \n\n  Applications. \n\t Surface representations. \n  Geometry Registration: \n\n  Local and global registration (ICP, branch-and-bound). \n\t Geometry Acquisition. \n\t 3D acquisition using laser scanners. \n\t Structure from motion-based acquisition. \n  Differential Geometry: \n\n  Introduction to curves and surface. \n\t Mesh Smoothing and Decimation. \n\t Parametrization and Remeshing. \n\t Mesh Deformation. \n\t Laplace Beltrami Operator. \n\t Shape Analysis. \n\t Shape Synthesis. \n\t ML in the context of geometry processing. \n   Requisites:  \n\n To be eligible to select this module as an option or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) should have an understanding of linear algebra; and (3) have coding experience.   ", "Computational Modelling for Biomedical Imaging (COMP0118)   Aims:  \n\n To expose students to the challenges and potential of computational modelling in a key application area. To explain how to use models to learn about the world. To teach parameter estimation techniques through practical examples. To familiarize students with handling real data sets.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the aims of biomedical imaging. \n\t Understand the advantages and limitations of model-based approaches and data-driven approaches. \n\t Have knowledge of standard techniques in modelling, experimental design and parameter estimation. \n\t Understand the challenges of data modelling, experiment design and parameter estimation in practical situations. \n\t Handle real-world data in computer programs. \n   Indicative content:  \n\n The module introduces the basics of mathematical modelling: the distinction between models and the real world; when and how models are useful; advantages and disadvantages of explicit model-based approaches. \n\n The module covers a range of model-based approaches to biomedical imaging and image analysis and basic computer science techniques that underpin them. The intention is to introduce the students to standard techniques of parameter estimation in a hands-on practical way within the context of model-based imaging and image-based modelling. \n\n The module also gives exposure to common applications and challenges in biomedical imaging. It uses several example applications (including microstructural MRI and disease progression modeling) to introduce different kinds of model and, more fundamentally, new algorithms and techniques for parameter estimation, optimization, sampling and validation. \n\n  Requisites:  \n\n To be eligible to select this module as an option or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n The module courseworks involve mathematical programme for which we recommend Matlab or python. Familiarity with such environments is helpful, although a strong programmer in other languages will pick up the necessary syntax during the course. It also assumes a strong grasp of general engineering mathematical concepts, in particular linear algebra (intermediate), probability and statistics (intermediate), geometry, and calculus. \n\n Students familiar with statistical modeling, parameter estimation, and machine learning will pick up the content fairly easily; those less familiar with such concepts sometimes find the workload heavy. To get an idea of the content, have a look at section IV (Probabilities and Inference) of the  Mackay Information Theory, Inference and Learning Algorithms book .   ", "Validation and Verification (COMP0103)   Aims:  \n\n The module will train students in the principles and techniques of validating and verifying software systems. The training will be intellectually demanding and will cover not only the state-of-the practice in validation and verification, but also the most significant trends, problems and results in validation and verification research.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand correctness, consistency, faults and failures, static analysis and testing \n\t Understand the use of logic as a formal language for the specification of systems. \n\t Understand the use of symbolic execution. \n\t Verify simple systems. \n\t Understand the range of approaches to testing that can be applied to software systems. \n\t Undertake both black-box and white-box (unit-level) testing. \n\t Appreciate the limitations of the current tools and have insights into ongoing research topics to overcome them. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Basic concepts: \n\n  Software engineering lifecycle context. \n\t Correctness. \n\t Soundness and completeness. \n\t Faults. \n\t Errors. \n\t Failures. \n\t Static and dynamic analysis. \n  Validation: \n\n  Kinds of testing (unit, functional, integration, system, acceptance, regression). \n\t Black box and White box testing. \n\t Input partitioning and Random Testing. \n\t Coverage and Structural Testing. \n\t Mutation Testing. \n\t Regression Testing. \n  Verification: \n\n  Propositional and Predicate Logic. \n\t Specifying and verifying programs. \n\t Symbolic Execution. \n\t Hoare Logic. \n  Reading: Selected surveys, research papers, and book chapters.   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have a background equivalent to Years 1 and 2 of BSc/ MEng Computer Science at UCL.   ", "Principles of Programming (COMP0002)   Aims:  \n\n This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.   Learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Design, implement, and debug small programs using two different programming paradigms, given straightforward specifications. \n\t Develop straightforward algorithms to solve a range of common programming problems. \n\t Compare and contrast the different paradigms, understanding the relative advantages and disadvantages of each. \n\t Use common programming tools such as compilers, editors and debuggers. \n\t Gain a basic understanding of how programs use computer memory, memory management, and the binary representation of data values. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Core Programming Concepts: \n\n  What is programming? \n\t Programming languages. \n\t Programs and algorithms. \n\t Compilers and tools. \n\t Running and debugging programs. \n  Introduction to Imperative Programming: \n\n  Core imperative programming ideas: sequence, selection, iteration, recursion, assignment and variables. \n\t Types and type checking. \n\t Functions, parameters, scope and lifetime. \n\t Arrays and files. \n\t Pointers, memory allocation, and memory management. \n  Introduction to Functional Programming: \n\n  Core functional programming ideas. \n\t Recursion and recursive data structures such as lists. \n\t Lazy evaluation. \n\t Role of types. \n\t Higher order functions. \n\t List comprehension. \n\t Recursive functions. \n  Program design in the small: \n\n  Designing and implementing small programs. \n\t Implementing and using basic algorithms and data structures. \n\t Good programming and design practice. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.   ", "Image Processing (COMP0026)   Aims:  \n\n This module focuses on digital image processing. It first introduces the digital image, with a description of how digital images are captured and represented. It then goes on to cover algorithms for image segmentation and feature extraction in direct space. The module then proceeds to cover image filtering techniques with some indication of the role and implications of Fourier space, and more advanced characterisation and feature detection techniques such as edge and corner detection, together with multi-resolution methods, template matching and optical flow techniques. \n\n The module has a strong practical component that allows students to explore a range of practical techniques by implementing their own image processing tools using Matlab or Python. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  \n\t Understand (i.e., be able to describe, analyse and reason about) how digital images are represented (in the spatial and frequency domain), manipulated, encoded and processed, with emphasis on algorithm design, implementation and performance evaluation. \n\t \n   \n\t Implement a variety of image processing algorithms including image manipulation, segmentation, filtering, blending, feature extraction and description, edge detection, template matching and image editing. \n\t \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction to digital image processing: \n\n  \n\t Digital image capture. \n\t \n\t \n\t Data types and 2D representation of digital images. \n\t \n\t \n\t Discrete sampling model. \n\t \n\t \n\t Noise processes. \n\t \n  Segmentation: \n\n  \n\t Thresholding and thresholding algorithms. \n\t \n\t \n\t Performance evaluation and ROC analysis. \n\t \n\t \n\t Connected components labelling. \n\t \n\t \n\t Clustering algorithms. \n\t \n\t \n\t Graph based methods. \n\t \n\t \n\t Image transformations: \n\t \n\t \n\t Grey level transformations. \n\t \n\t \n\t Histogram equalization. \n\t \n\t \n\t Geometric transformations. \n\t \n\t \n\t Affine transformations. \n\t \n\t \n\t Warps. \n\t \n  Image filtering: \n\n  \n\t Fourier analysis. \n\t \n\t \n\t Linear and non-linear filtering operations. \n\t \n\t \n\t Image convolutions \n\t \n\t \n\t Separable convolutions. \n\t \n\t \n\t Aliasing, sub-sampling and interpolation. \n\t \n\t \n\t Laplacian pyramids. \n\t \n  Edge and corner detection: \n\n  \n\t Edge detection. \n\t \n\t \n\t Image structure tensor. \n\t \n\t \n\t Image auto-correlation. \n\t \n\t \n\t Harris corner detector. \n\t \n\t \n\t Sift corner detector/descriptor. \n\t \n  Template matching and advanced topics: \n\n  \n\t Similarity and dissimilarity matching metrics. \n\t \n\t \n\t Template matching. \n\t \n\t \n\t Optical flow. \n\t \n\t \n\t Non-local means filtering. \n\t \n\t \n\t Poisson image editing. \n\t \n   Requisites:  \n\n To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have a bachelor\u2019s degree or higher in a physical science or engineering subject with significant mathematical and programming content.   ", "Theory of Computation (COMP0003)   Aims:  \n\n The module aims to introduce students to formal logical reasoning and to fundamental concepts in the theory of computation and formal languages.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Identify and reason with the logical content of arguments. \n\t Recognise, write down and reason about automata and language grammars. \n\t Carry out standard proofs and refutations involving logic and computational models. \n   Indicative content:  \n\n This module introduces students to the theory of computation. The first half of the module will focus on mathematical logic, including: propositional logic, first-order logic, proof by induction and modal logic. The second half will focus on fundamentals of computation, automata and language theory.   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; and (2) have A-level Mathematics (or equivalent).   ", "Algorithms (COMP0005)   Aims:  \n\n The aim of this module is to provide students with an introduction to data structures and algorithms that are fundamental to programming and to understand computation. We will apply these techniques to computational problems, with the aim to develop problem-solving skills, to develop the ability to analyse the efficiency of algorithms, and to encourage a thoughtful approach to the analysis and design of computational problems.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand a variety of fundamental data structures and be able to use them effectively in the design and implementation of algorithms. \n\t Understand a variety of fundamental algorithmic problems and algorithms for solving them. \n\t Analyse the space and time efficiency of algorithms and understand how to design efficient algorithms. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Analysis of algorithms \n\t Abstract Data Types \n\t Sorting Algorithms \n\t Searching Algorithms \n\t Graphs Algorithms \n\t String-processing Algorithms \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n Students are expected to have basic experience of programming in Python. Resources for self-study and Programming Tutor support will be provided in advance of the module.   ", "Artificial Intelligence and Neural Computing (COMP0024)   Aims:  \n\n This module introduces artificial intelligence and neural computing as both technical subjects and as fields of intellectual activity. The overall aims are to introduce basic concepts of artificial intelligence for reasoning and learning behaviour; and to introduce neural computing as an alternative knowledge acquisition/representation paradigm, to explain its basic principles and to describe a range of neural computing techniques and their application areas.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Identify problems that can be expressed in terms of search problems or logic problems, and translate them into the appropriate form, and know how they could be addressed using an algorithmic approach. \n\t Identify problems that can be expressed in terms of neural networks, and to select an appropriate learning methodology for the problem area. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Artificial intelligence: \n\n  Nature of artificial intelligence. \n\t Searching state spaces. \n\t Utility theory. \n\t Logic for artificial intelligence. \n\t Argumentation. \n\t Reasoning about concepts. \n\t Reasoning about uncertainty. \n\t Machine learning. \n\t Common-sense reasoning. \n  Neural Computing: \n\n  Overview of network architectures and learning paradigms. \n\t Fully connected networks. \n\t Convolutional Neural Networks. \n\t Networks Dealing with Sequential Data. \n\t (Deep) Reinforcement Learning. \n\t Meta-Learning. \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed a module in propositional and predicate logic at FHEQ level 4 or higher. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have a bachelor\u2019s degree or higher in mathematics or philosophy; (3) have passed a module in propositional and predicate logic at FHEQ level 4 or higher; and (4) have pre-approval to select the module from the Module leader.   ", "Machine Learning &amp; Artificial Intelligence for Data Scientists (M) COMPSCI5100   A   basic introduction to the field of artificial intelligence focusing on an   introduction to the foundations of machine learning, based around a series of   practical   case studies using data from a range of research areas.     To present students with   an  &nbsp;  introduction to the   field of artificial intelligence   giving the students an overview of intelligent agent design   with focus on m  achine learning  &nbsp;with application to data science  .   &nbsp;   The course will present the   context and history of AI   and   present the   general theory   of   learning from data   and decision making   presented in the   context of p  opular Machine Learning methods.     &nbsp;   The module   is f  ocussed on practical application of   AI and   Machine Learning techniques from standard libraries   (e.g.   scikit  -learn  )  &nbsp;in a variety of domains as well as   providing   good practice in training and validating Machine Learning models.    &nbsp;   The course will   include  &nbsp;practical   AI/ML   case studies from e.g. Human Computer Interaction, Information Retrieval, Bioinformatics and Computer Vision and Graphics.     By the end of this course students will be able to:   &nbsp;   1.   Demonstrate familiarity with the history of   artificial intelligence  &nbsp;  and machine learning  ,   ethical and   philosophical debates, and understand the potential and limitations of the subject in its current form;    2.   Explain the   computational   process of learning from   data  &nbsp;for  &nbsp;example   regression, classification  ,   clustering   and   decision-making  &nbsp;problems  .  &nbsp;    3.   Explain  &nbsp;and  &nbsp;  demonstrate  &nbsp;  the strengths and weaknesses of common algorithms and propose appropriate choices for specific problems;    4.   Analyse   and formulate a  &nbsp;learning problem   as   an optimisation problem  &nbsp;  and   d  iscuss the impact of the choice of loss function  ;    5.   Demonstrate knowledge of the major   artificial and   machine learning application areas in, for example Physics, Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    6.   Implement, customise and apply   AI  /ML   algorithms in Python using existing libraries (e.g.   scikit  -learn) to regression, classification, clustering, probability density estimation and dimensionality reduction;    7.   Demonstrate proficiency in the data-driven modelling process  &nbsp;  from data collection to decision-making  &nbsp;(  b  e able to setup a machine learning project, organise data and code, develop and apply a model, visualise and analyse the results, and communicate them in a coherent   document  ).  &nbsp;  ", "Introduction to Cryptography (COMP0025)   Aims:  \n\n Cryptography is the practice and study of techniques for secure communication in the presence of adversarial entities. For many centuries the goal of cryptography was the protection of privacy of communications. However, computers, digital communication and in particular the Internet have brought an abundance of new security objectives such as anonymity, authenticity, non-repudiation, authorized wiretapping (called law enforcement), or traceability. These developments have turned cryptography into an indispensable tool to protect the information in computing systems and it is utilized nowadays by billions of people on a daily basis to safeguard their data at rest and in transit. \n\n The goal of this module is to make students familiar with the basic paradigms and principles of modern cryptography. In particular, students will be confronted with a range of security objectives, different levels of security that can be achieved, and some of the available cryptographic techniques that can be used to achieve these goals.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Model security precisely and formally in terms of adversarial objective and system access. \n\t Explain and reason about basic cryptographic tools to protect and authenticate data. \n\t Suggest security parameters that protect against standard attacks. \n\t Read scientific articles and international standards in the field of cryptography. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Classical ciphers: \n\n  Cryptanalysis of classical ciphers. \n\t Probability theory. \n\t Perfect security; Block ciphers. \n\t DES. \n\t AES. \n\t Block cipher modes of operation. \n  Private-key encryption: \n\n  Chosen plaintext attacks. \n\t Randomised encryption. \n\t Pseudorandomness. \n\t Chosen ciphertext attacks. \n  Message authentication codes: \n\n  Private-key authentication. \n\t CBC-MAC. \n\t Pseudorandom functions. \n\t CCA-secure private-key encryption. \n  Hash functions: \n\n  Integrity. \n\t Pre-image resistance. \n\t Collision-resistance. \n\t SHA-256. \n\t NMAC/HMAC. \n  Key distribution: \n\n  Key distribution centres. \n\t Modular arithmetic and group theory. \n\t Diffie-Hellman key exchange. \n  Public-key distribution: \n\n  EIGamal encryption. \n\t Cramer-Shoup encryption. \n\t Discrete logarithm problem. \n  Digital signatures: \n\n  RSA signatures. \n\t RSA-FDH and RSA-PSS signatures. \n\t DSA signatures. \n\t X.509 certificates. \n\t Certification paths. \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 7) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have successfully completed a module in mathematics or probability theory at FHEQ level 6 or higher. \n\n The module is theoretically and mathematically demanding.   ", "Technology Entrepreneurship (COMP0039)   Aims:  \n\n This is UCL Computer Science\u2019s principal entrepreneurship module for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to thousands of students, resulting in the launch of several innovative businesses. \n\n The module covers the new business lifecycle (selecting and testing a moneymaking idea, preparing a business plan, raising finance, the Exit),&nbsp;aspects of new business operation (registering a company, setting up your office, understanding financial statements),&nbsp;and exploiting new e-commerce tools and techniques (doing business electronically, company web sites, online business software and services.)   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Apply first-hand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Invention and innovation, finding and qualifying new opportunities. Business Model Generation. \n\t Confirming customer needs and testing market demand. Customer development. \n\t Lean Start-ups: what is your minimum viable product? The value of prototyping. \n\t Delivery channels and customer relationships. Business Plan and Preparing a Pitch. \n\t Financial Forecasting, Costing and Pricing. Management accounts. Cash-flow and profit and loss. \n\t Developing sustainable competitive advantage.&nbsp;Intellectual Property Rights. \n\t Corporate form and structure. Founder dilemmas - team, equity, remuneration etc. Developing your brand. \n\t Defining and testing critical business model uncertainties. Measuring progress. \n\t Common start-up metrics. \n\t Sources of Funding.&nbsp;Presenting to VCs. \n\t Class presentations, conclusions and next steps. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "Computability and Complexity Theory (COMP0017)   Aims:  \n\n The module addresses the theoretical and practical limitations of computation and provides a mathematical framework for proving properties of programs. The concepts of undecidability and intractability are formally introduced and discussed through a number of examples. The module will convey the proof techniques that are used to classify problems. It is intended that students learn how to apply them to classify unfamiliar problems for themselves. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Analyse the complexity of a variety of problems and algorithms. \n\t Prove that a problem is undecidable. \n\t Prove the equivalence of different models of computation. \n\t Find a polynomial time reduction from one problem to another. \n\t Determine the complexity class of a decidable problem. \n\t Categorise the complexity of a language. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Models of Computation: \n\n  Deterministic Turing machines. \n\t Alternative models: variations of the concept of Turing machine. \n\t Alternative models: register machines, imperative programming languages. \n  Languages: \n\n  Language acceptance. \n\t Language recognition. \n\t Decidable and Recognisable languages. \n\t Closure properties of languages. \n  Undecidability: \n\n  The Halting Problem and other unsolvable problems. \n\t Problem reduction. \n\t Rice\u2019s Theorem. \n\t Cantor\u2019s diagonal argument and the cardinality of unrecognisable languages. \n\t Undecidability of the tiling problem. \n\t Undecidability of first-order logic and incompleteness of arithmetic. \n  Basic Concepts of Complexity Theory: \n\n  Tractable and intractable problems and algorithms. \n\t Definition of Time Complexity. \n\t Decision vs Optimisation Problems. \n\t Travelling Salesman and its variants. \n  Polynomial-time reduction: \n\n  Definition and properties. \n\t Lemmas and proofs. \n\t Hamiltonian Graphs and Travelling Salesman. \n  Complexity classes: \n\n  Non-deterministic Turing machines. \n\t P, NP, and NP-complete classes. \n\t Complement and Co-Complete Classes. \n  Proving NP-hardness: \n\n  Cook\u2019s theorem. \n\t Satisfiability and its variants. \n\t Reductions between variants. \n  Other Complexity Classes: \n\n  Space complexity, PSPACE, and PSPACE-Completeness. \n\t Savitch\u2019s theorem. \n\t Logarithmic space. \n\t Time and space hierarchy theorems. \n\t Exponential time and hardness. \n\t Probabilistic classes. \n\t Approximation algorithms and hardness. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Theory of Computation (COMP0003), Algorithms (COMP0005), and Logic and Database Theory (COMP0009).   ", "Discrete Mathematics for Computer Scientists (COMP0147)   Aims:  \n\n The module aims to equip first year computer science students with knowledge of foundational mathematics and logic that will be needed for future computer science modules. To provide students with basic tools and skills for mathematical problem solving, proof and refutation.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Analyse and solve typical problems in discrete mathematics and logic. \n\t Identify and reason with the logical content of arguments. \n\t Carry out standard mathematical proofs and refutations. \n   Indicative content:  \n\n The following is indicative of the topics the module will typically cover: \n\n The first part of the module will focus on foundational discrete mathematics, including but not necessarily limited to: functions and relations, permutations, group theory, set theory, cardinalities, diagonalisation, linear algebra and combinatorics. The module continues with mathematical reasoning, logical notation and proof by mathematical induction.   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed A-level Mathematics (or an appropriate equivalent).   ", "Logic (COMP0009)   Aims:  \n\n The module aims to introduce and familiarise students with logical and mathematical inference. Students learn a number of logical inference methods for classical logics and for non-classical logics. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how axiomatic systems can be used for propositional and predicate logic. \n\t Understand the notions of soundness and completeness. \n\t Understand how propositional and predicate tableaus work. \n\t Have familiarity with other logics, including modal and temporal logics. \n\t Analyse algebras of relations. \n   Indicative content:&nbsp;  \n\n The following are indicative of the topics the module will typically cover:&nbsp; \n\n Propositional logic, Predicate logic, Modal Logic and Temporal Logic: \n\n  Review of syntax and semantics. \n\t Deduction and Inference. \n\t Truth tables. \n\t Decidability of propositional logic. \n  Mathematical proofs: \n\n  Proof by contradiction. \n\t Induction and structured induction. \n\t Hilbert systems. \n\t Axioms and inference rules for propositional logic. \n\t Axioms and inference rules for predicate logic. \n\t Axioms and inference rules for modal and temporal logics. \n\t Tableau construction for propositional logic, predicate logic, modal logics. \n\t Soundness and completeness theorems for first order logic. \n\t Semi-decidability of first order logic. \n\t Undecidability of arithmetic. \n  Algebras of Relations: \n\n  Algebras of binary relations \n\t Kleene Algebra \n\t Relation Algebra \n\t Other Algebras of Relations. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; (2) have taken Theory of Computation (COMP0003) and Algorithms (COMP0005); and (3) have some programming experience (as the assessment will require them to implement a program in C).   ", "Database and Information Management Systems (COMP0022)   Aims:  \n\n Students will learn fundamental theories and methods of database systems: what they are, how they are developed and how they function to achieve their purposes. The module will exemplify these constructs with contemporary database technologies and students will learn how these technologies are exploited to build effective information systems of different scale. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the theories and methods of database systems. \n\t Apply the theories and methods of database systems in creating effective information systems. \n\t Understand current and emerging database technologies and the application settings in which they are used. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  The Database Management System. \n\t Transaction management and failure management. \n\t Query processing and optimization. \n\t Distributed databases. \n\t Data warehousing. \n\t Data mining and online analytic processing. \n\t Semi-structured data databases. \n\t Emerging database models and technologies. \n\t Database implementation and optimisation. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.   ", "Design and Professional Skills I (Computer Science) (ENGF0034)  This module is intended to introduce you to engineering, design, technical communication and academic writing, as well as other engineering professional practices and skill sets necessary for your future employability. Technical communication in most cases can be broken down into writing, technical argument, and explanation, data visualisation as well as presentation. Specific components will include (but are not limited to) the following: an introduction to your chosen engineering discipline, the design process, critical and creative thinking, decision-making, problem solving, ethics and sustainability, industry standards and professional conduct, teamworking, leadership, project management, career preparation and employability. It will aim to deliver these through instruction, engagement, practice, and feedback. The module is taught through the context or application of your own chosen engineering discipline, computer science, which is supported through the teaching of technical skills required by the profession and industrial practices. Moreover, this module includes two intensive team-based projects, known as Scenarios, which are designed to help you practice the aforementioned technical and professional skills alongside developing your technical understanding and practice of computer science.\u202f&nbsp; \n\n This Design and Professional Skills I module is part of the engineering faculty\u2019s cross-faculty teaching framework called the Integrated Engineering Programme (IEP) and is designed to be integrated with the ENGF0001 Engineering Challenges module taught in parallel during Term 1. This means that content and skills will be referenced and referred to across these two modules.\u202f&nbsp; \n\n  Intended Learning Outcomes&nbsp;  \n\n By the end of the module, you should be able to:&nbsp; \n\n  \n\t outline the basic elements of the design cycle, understand the underlying processes, and use these to tackle real engineering problems&nbsp; \n\t \n\t \n\t describe an engineering problem and its constraints in a concise written or spoken report.&nbsp; \n\t \n   \n\t give examples of ethical issues related to engineering and recall tools that can be used to analyse future problems as they arise&nbsp; \n\t \n\t \n\t give examples of how your specific discipline interacts with sustainability and describe their responsibilities as an engineer in this regard\u202f&nbsp; \n\t \n\t \n\t acknowledge the basic tools for critical thinking and problem-solving and use these to tackle real-world problems, whether engineering or otherwise&nbsp; \n\t \n\t \n\t identify and describe the utility of important structural features in writing and presentation (such as introductions, conclusions, and topic sentences), use these effectively, and evaluate your use in others\u2019 work \u202f&nbsp; \n\t \n\t \n\t analyse the audience for a given communication (report, video or talk/presentation) and determine the appropriate point of view, level of detail, and jargon\u202f&nbsp; \n\t \n   \n\t describe and practice basic concepts in team-working, project management and engineering leadership, and recall the facilities available to you to develop your abilities in this area \u202f&nbsp; \n\t \n\t \n\t recognise the level of conduct expected of them by the body governing their profession, explain why such codes of conduct are necessary; and recall where they are provided for all to witness\u202f&nbsp; \n\t \n\t \n\t report/present on discipline specific material such as programming with Python&nbsp; \n\t \n  \u202f&nbsp; \n\n \u202f&nbsp; \n\n &nbsp; \n\n &nbsp;   ", "Introductory Mathematics for Computer Science (COMP0011)   Aims:  \n\n The module aims to provide a grounding in mathematics and statistics most relevant to a Computer Science undergraduate degree.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Apply concepts in mathematics and statistics to frame problems&nbsp;and reason about them. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Mathematics: \n\n  Trig, exp and log. \n\t Polynomials. \n\t Limits and continuity. \n\t Differential calculus of one and two variables. \n\t Integration. \n\t Series summation and power series. \n\t Complex numbers. \n\t Vector spaces. \n\t Matrices. \n\t Linear Algebra. \n  Statistics: \n\n  Probability, descriptive statistics. \n\t Discrete random variables. \n\t Continuous random variables. \n\t Statistical estimation. \n\t Hypothesis testing. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.   ", "Enterprise Cyber Security (M) COMPSCI5077   This course  &nbsp;will focus on cyber security management within   an organisation  .   It  &nbsp;will ensure that students will know how to satisfy legislation related to securing personal and sensitive information and how to manage data correctly.     To develop students'  &nbsp;  knowledge of key concepts in   cyber security management  &nbsp;  in  &nbsp;  a  &nbsp;business   context  &nbsp;and   an awareness of the management imperatives thereof  ;    To emphasise the importance  &nbsp;and wherewithal  &nbsp;of   information security  &nbsp;  provision to meet legislation imperatives  ;   To   explore  &nbsp;  the advanced security  &nbsp;  management   issues   related to  &nbsp;IT   usage   within  &nbsp;and outside  &nbsp;the enterprise  , the challenges of ensuring information security and the tools available to managers to assure this;  &nbsp;    Encourage the acquisition of analytical, management and communication skills to identify enterprise assets and threats, argue mitigation actions and communicate such complex concepts to key-decision makers within an enterprise.     By the end of this course students will be able to:    \u25a0&nbsp;  describe different deployment concerns for a specific context.     \u25a0&nbsp;  design security policy to address perceived concerns for a specific context.     \u25a0&nbsp;  argue appropriate approaches to business continuity and resilience.     \u25a0&nbsp;  predict legal, social and ethical concerns in the secure management of information.     \u25a0&nbsp;  effectively communicate cyber security imperatives to decision makers in an organisation.     \u25a0&nbsp;  identify and critically assess threats in a specific context     \u25a0&nbsp;  critique security policy and justification for a given context.  &nbsp;  ", "Networked Systems (COMP0023)   Aims:  \n\n The module offers a rigorous introduction to the problems that arise when networking computer systems, and algorithms and systems design that solve these problems. The architectural principles and protocols that underlie the internet will be explained in detail. Topics to be taught will include the physical layer, widely used link layers (wired and wireless), MAC protocols, internetworking, intra-domain routing, reliable transport, congestion control, wide-area (policy) routing, naming, network security, the end-to-end principle, and network applications.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the nuances of interactions between a network's distributed entities. \n  This is a vital skill, without which one cannot truly be said to understand networking. To help students develop this skill, the module incorporates significant programming courseworks in Python and Java, in which students build or interact with working implementations of network protocols. \n\n  Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Introduction to Networking; Information, Error Control Coding, and Compression. \n\t Medium Access Control: CDMA, ALOHA, and Ethernet; Link Layer Addressing and Forwarding; Spanning Trees. \n\t Achieving Reliability; Stop-and-Wait, Go-Back-N. \n\t Achieving Reliability (cont); Selective Repeat; Intro to Internetworking; Network Address Translation; Inside Internet Routers. \n\t The Domain Name System; Multi-hop Networks and end-to-end Arguments. \n\t Reliable Transport and TCP. \n\t TCP and Congestion Control. \n\t Intra-Domain Routing; Introduction, Distance-Vector, Link-State. \n\t Inter-Domain Routing; BGP. \n\t Wireless Networks; 802.11 MAC. \n\t Security: Firewalls, Worms and IDSes; Content Delivery HTTP, Web Caching, and Content Distribution Networks. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must \u200bbe registered on a programme and year of study for which it is a formally available.   ", "Interaction Design (COMP0021)   Aims:  \n\n The module covers advanced topics in interaction design, informed by current research in user experience, human-computer interaction and interaction design. A central theme is how to design technologies to meet people\u2019s needs.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Have knowledge and understanding of research in interaction design. \n\t Have knowledge and understanding of methods used in interaction design. \n\t Reflect critically on the appropriateness of different interaction design methods. \n\t Conduct basic user research. \n\t Design, prototype and evaluate a novel ubiquitous computing technology. \n  And will have developed the following transferrable skills: \n\n  Information gathering and organising skills. \n\t Critical reading skills. \n\t Argumentation skills and the ability to synthesis information from multiple sources. \n\t Written, visual and video presentation skills. \n   Indicative content:  \n\n The module is separated into two related streams.&nbsp;The following are indicative of the topics the module will typically cover: \n\n Research (weekly): This series of e-lectures will introduce students to core (current and historical) and nascent interaction design methods and technologies, including approaches to conducting user research, designing, prototyping and evaluating user-centred systems reviewing evolving interaction technologies. \n\n Workshops (weekly): These more practical sessions will give students an opportunity to put interaction design methods into practice. They will link closely to the coursework.   Requisites:  \n\n To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have some prior knowledge of HCI or interaction design.   ", "Computer Systems (COMP0019)   Aims:  \n\n The aim for this module is to have our advanced undergraduates develop a \u201cwhole-stack\u201d understanding of the complex interactions among modern computer system hardware (specifically, a modern, multi-core CPU and its memory hierarchy), a modern operating system, and the applications that run atop them. These interactions dictate application correctness and performance. These fundamental principles will be taught in the concrete framework of the x86 CPU architecture and the Linux/UNIX operating system. Students should not only understand these fundamental principles, but be able to put them into practice in real C programs.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the C and Linux/UNIX programming environment, from the hardware (memory hierarchy, memory model between cores) to low-level operating system functionality (file and network I/O, process management, virtual memory system, program linking and loading). \n\t Understand the interactions between hardware and the C and Linux/UNIX programming environment that affect application correctness and performance. \n\t Design correct applications that perform well in the C and Linux/UNIX programming environment. \n   Indicative content:  \n\n The module teaches students topics in computer systems design and systems programming, with an emphasis on the C programming language, Intel CPU architecture, and UNIX/Linux operating system architecture.&nbsp;The following are indicative of the topics the module will typically cover: \n\n  Machine-level representation of code and data (assembly language; how C constructs are compiled into x86 assembly language; machine-level representations of data types and machine and C arithmetic; stack frame structure in C on the x86; array layout in memory; pointer arithmetic). \n\t Use of the gdb debugger on C code in the Linux/UNIX environment. \n\t Undefined behaviour in the C language specification and real C programs, and its consequences. \n\t The memory hierarchy: registers, L1 caches, L2 caches, L3 caches, DRAM, SSD, disk; cache architectures; performance implications of caches on program performance. \n\t Linking: static linking, relocatable object code, symbol resolution, loading executables, dynamic linking and shared libraries, position-independent code, interposition. \n\t Processes, signals, context switches, exceptions, system call error handling, job control, process creation and management. \n\t Virtual memory: address translation, memory mapping, dynamic memory allocation, memory-related bugs in C; \n\t System I/O: filesystem I/O, system call interface and semantics. \n\t Concurrent systems programming: threads in C on Linux/UNIX, x86 memory consistency model, races, deadlocks. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) have basic proficiency in C programming (including dynamic memory allocation); (3) have basic knowledge of computer arithmetic (e.g., two's complement integer representation); and (4) have prior exposure to assembly language for some CPU. \n\n UCL Computer Science undergraduates will normally have met these prerequisites by having passed the relevant compulsory modules in prior years.   ", "Quantum Computation (COMP0157)   Aims:  \n\n The aim of the module is to introduce the students to the principles of quantum mechanics from a computer science perspective, and to the field of quantum computation and algorithms. \n\n  Intended learning outcomes:   \n\n On successful completion of the module, a student will be able to: \n\n  Understand (i.e., be able to describe, analyse and reason about) quantum computation, and how it differs from classical probabilistic computation. \n\t Analyse the behaviour of simple quantum circuits. \n\t Understand how quantum superposition and interference can give quantum speedups over classical algorithms in certain cases and apply these concepts to the design of quantum algorithms. \n\t Derive the Quantum Fourier Transform, and apply it to the design of quantum algorithms \n\t Derive Grover\u2019s unstructured search technique and apply it to the design of quantum algorithms. \n   Indicative content:  \n\n The module provides a first course on quantum computation. The following is indicative of the topics the module will typically cover: \n\n The basic mathematical formalism of quantum mechanics is be introduced from a computer science perspective, assuming no prior knowledge of quantum mechanics or physics. Building on this, the module develops the standard circuit model of quantum computation and basic quantum complexity theory. Most of the module is devoted to quantum algorithms, including rigorous derivations and algorithm analysis. This section of the course starts from simple examples, and builds up to the major quantum algorithms, such as Shor\u2019s quantum factoring algorithm and Grover\u2019s unstructured search algorithm. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ", "Software Engineering (COMP0010)   Aims:  \n\n This module focusses on designing and building software systems, which these days are often large, complex and long-lived. They are worked on by teams of engineers and changed constantly over their lifetimes. We will look at principles and patterns of software design, where to apply them, and how they may inform our design choices. We will also look at techniques for ensuring that systems you build behave correctly. We show how the application of these makes it possible to evolve systems effectively in a rigorous way.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Appreciate the wider engineering context that forms the background to developing complex, evolving software-intensive systems. \n\t Apply a range of design patterns and principles to solve particular design problems. \n\t Apply a range of refactoring techniques to improve code quality. \n\t Use a range of tools and techniques for automated software testing, including test-driven development. \n\t Manage risk in making changes to an existing software system through rigorous engineering practices. \n\t Reflect on the appropriateness of different software engineering techniques in different circumstances, and on the quality of the design of an application. \n   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Object Oriented Design Principles. \n\t Design Patterns. \n\t Software Architecture. \n\t Testing. \n\t Tools and Processes. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; and (2) have taken a module or course in Java programming.   ", "Computer Graphics (COMP0027)   Aims:  \n\n Understanding the theoretical concepts behind computer that generate pictures from virtual worlds and teaching practical skills to implement them.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Perform operations to 3d primitives using linear algebra. \n\t Write a simple ray-tracer to intersect primitives with rays through pixels. \n\t Understand how all steps of rasterization work and being able to code that from scratch. \n\t Understand the concept of Monte Carlo simulation and how it relates to image synthesis. \n\t Implement Monte Carlo simulations. \n\t Use scene graphs, including light, material and textures to describe virtual 3D worlds. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction: \n\n  The painter\u2019s method. \n  Creating an image using ray tracing: \n\n  Ray casting using a simple camera. \n\t Local illumination. \n\t Global illumination with recursive ray tracing. \n  Specifying a general camera: \n\n  World / image coordinates. \n\t Creation of an arbitrary camera. \n\t Ray tracing with an arbitrary camera. \n  Constructing a scene: \n\n  Scene hierarchy. \n\t Transformations of objects / rays. \n\t Other modelling techniques. \n  Acceleration Techniques: \n\n  Bounding volumes. \n\t Space subdivision. \n  From ray tracing to projecting polygons: \n\n  Graphics pipeline. \n\t Transforming the polygons to image space. \n\t Sutherland-Hodgman clipping. \n\t Scan conversion. \n\t Z-buffering. \n\t Interpolated shading. \n\t Texture mapping. \n\t Back-face culling. \n  Shadows: \n\n  Shadow volumes. \n\t Shadow buffer. \n\t Shadow mapping. \n\t Soft shadows. \n  The nature of light: \n\n  Transport theory, Radiance, luminance, radiosity. \n\t The radiance equation. \n\t Photon mapping. \n\t Monte Carlo integration. \n  Parametric curves and surfaces: \n\n  Bezier Curves. \n\t B-Splines Curves. \n\t Parametric surfaces. \n   Requisites:  \n\n To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming. \n\n To be eligible to select the module delivery Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming.   ", "Functional Programming (COMP0020)   Aims:  \n\n This module explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management. \n\n The module explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the module students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to (at a level commensurate with FHEQ level 6): \n\n  Understand the basics of the lambda calculus and combinators and how they are used in the implementation of functional languages. \n\t Understand the main features of a lazy functional language. \n\t Understand type checking, type-inference and the operation of the Miranda (Hindley-Milner) type system. \n\t Write and understand non-trivial functional programs in Miranda. \n\t Understand the computation and memory management issues affecting the sequential implementation of lazy functional languages. \n\t Solve problems relating to any aspect of the module's syllabus, under examination conditions. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Classification of programming languages:\n\t  Distinctive features of Functional Programming Languages. \n\t  \n\t The Lambda Calculus and Combinators:\n\t  Versions of the Lambda Calculus. \n\t\t Syntax and semantics. \n\t\t Reduction orders, strong normalisation. \n\t\t Combinators and computationally complete sets. \n\t  \n\t Introduction to Miranda:\n\t  Programming environment. \n\t\t Types and simple polymorphic types. \n\t\t Recursion. \n\t\t Pattern-matching. \n\t\t Lists. \n\t\t Higher-Order functions. \n\t\t User-defined types. \n\t  \n\t Type polymorphism and type systems. \n\t Recursive programming techniques. \n\t Introduction to implementation techniques:\n\t  Strict evaluation and lazy evaluation. \n\t\t The need for automatic memory management. \n\t  \n\t Automatic memory management:\n\t  Garbage collection techniques. \n\t  \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must both: (1) be registered on a programme of study for which it is formally available; and (2) have either taken all Term 1 modules of the MSc Computer Science programme at UCL or have studied the following at FHEQ level 6 or higher: \n\n  Programming in one high-level programming language and one assembly language. \n\t Formal systems of logic such as Boolean algebra, propositional logic or predicate calculus. \n\t Virtual machines, virtual memory and memory paging. \n\t Compilers, including lexical analysis, parsing and code generation. \n\t Dynamic data structures and abstract data types. \n\t Models of storage in computer systems. \n\t Algorithmic complexity. \n  Students must be proficient in the English language to UCL's Level 4 standard or better.   ", "Machine Learning for Domain Specialists (COMP0142)   Aims:  \n\n The module aims to Introduce students to the basics of machine learning while giving class-based examples of applications to areas of domain specialisation.   Intended learning outcomes:  \n\n On successful completion of the module a student will be able to: \n\n  Understand elements of the fundamental concepts and mathematical basis of machine learning; apply practical machine learning software to perform data analysis tasks. \n   Indicative content:  \n\n General theory and mathematical foundations are presented in lectures while practical applications are presented in classes. \n\n The following are indicative of the topics the module will typically cover: \n\n  An introduction to machine learning tasks (unsupervised, supervised, reinforcement). \n\t Mathematical foundations (linear algebra, calculus, probability, statistics). \n\t Supervised Learning: including an exploration of some of the following: linear and polynomial regression, logistic regression, Naive Bayes, kernel methods, SVMs, decision trees, ensemble learning, neural networks, Gaussian processes. \n\t Unsupervised Learning: including an exploration of some of the following: PCA, manifold learning, k-means, Gaussian mixture models, EM algorithm. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) should have experience of rudimentary programming and an awareness of standard results in fundamentals of linear algebra (vectors, matrices, eigenvectors /eigenvalues etc.), elements of probability theory (random variables, expectation, variance, conditional probabilities, Bayes rule etc.), elements of statistics (sample statistics, maximum likelihood estimation etc.), and calculus (real-valued functions, derivatives, Taylor series, integrals etc.). Results from these areas will be used, often without proof, throughout the module. \n\n  Self-assessment test:  \n\n Students should take  a self assessment test , to assess their ability against the level of the module.   ", "Advanced Mathematics for Computer Science (COMP0238)   Aims:  \n\n This module aims to provide students with advanced mathematical tools and to (1) consolidate knowledge in Algebra analysis, Differential Calculus, Integral Calculus, Probabilities and Statistics; (2) introduce advanced methods making use of this knowledge in a practical manner; and (3) connect these notions with subsequent Computer Science modules. \n\n  Intended l  earning outcomes  \n\n On successful completion of this module, a student will be able to: \n\n  Know and understand key results in the areas of Algebra, Calculus, Probability and Statistics. \n\t Apply problem solving methods which make use of the key results in the areas of Algebra, Calculus, Probability and Statistics. \n\t Apply these methods in modern areas of Computer Science such as: Artificial Intelligence, Computational Finance, and Computer Graphics. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Optimisation. \n\t Convexity. \n\t Advanced Linear Algebra and Matrix Reduction. \n\t Number Theory and Arithmetic. \n\t Statistics and Sampling. \n\t Probabilistic Processes. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.   ", "Programming 1 This module will provide an introduction to the principles and practice of object-oriented programming. It will also introduce the process of developing programs using an appropriate high level managed object-oriented programming language such as Java or C#. It will enable students to develop and test a software solution given a simple set of program requirements. The student will be introduced to the fundamental concepts of object-oriented programming, the basic practical knowledge and skills required to implement programs and a range of program development and testing techniques and practices.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Object-oriented programming concepts - Classes and Objects - Object interaction - Fields - Constructors - Encapsulation - Methods, parameters and messages - Scope and access modifiers - Static methods and variables - Class hierarchies and inheritance - Interfaces and abstract classes - Polymorphism  Program Implementation  - Data types - Variables, operators and expressions - Selection and Iteration - Constants - Arrays - Casting and type Conversion - Simple exception handling - Formatting I/O - Building graphical user interfaces  Program Development Techniques - Problem solving and algorithm design - Implementing a conceptual model - Updating existing software - Program testing and debugging - Unit testing - Documenting classes - Finding appropriate library classes from documentation - Using appropriate library classes in own programs - Command line compilation and running - Use of an Integrated Development Environment      On completion of this module, students should be able to:  1 - Describe the fundamental principles of object-oriented programming.  2 - Demonstrate an understanding of simple data types, control structures and the object-oriented features provided by modern object-oriented languages.  3 - Demonstrate the ability to develop and test a simple object-oriented application making use of standard class libraries.     ", "Introduction to Computing Science  Content and aims \n                 \n                    Module overview\n                  This module is intended for students who wish to acquire skills in computer programming and an understanding of the principles underlying computer systems and networks. It is compulsory for&nbsp;students entering degree programmes involving Computing Science, Software Engineering, Information Systems or Business Computing, but is available to all students.&nbsp; \n\n\n The goal of the module is to give you confidence in computational thinking and problem solving via programming.&nbsp;Lectures cover the basic principles of computer architecture, operating systems, and networks, and build an understanding of the multiple layers and levels of abstraction that allow computer systems&nbsp;to work. \n\n\n Computational thinking and computer programming are taught through a combination of lectures and extensive practical problem-solving exercises using the Java programming language. You'll also gain a broader view of the role of computer systems in society through group discussions on social, ethical, legal and professional issues arising in Computing.&nbsp; \n\n\n Although the module has no prerequisites, we are aware that many students are likely to have studied Computing Science at Higher or Advanced Level. The module includes advanced topics such as computational intelligence and limits of computation that are designed to engage experienced students while consolidating and extending your understanding of the fundamental topics.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate an understanding of computer structure and functioning;   critically discuss the relevance of computers and computing in society;   apply theory and techniques to unseen problems, while working independently, under time constraints, without reference to notes, and demonstrating a knowledge of expected professional and academic conduct;   demonstrate an understanding of fundamental imperative programming constructs and their use by creating simple algorithms in a high-level programming language;   use abstract, language-independent computational thinking to solve problems in a structured and analytical manner.    ", "Machine Learning and Data Analytics This module will introduce the challenges and possible solutions around manipulating and analysing various datasets of different shapes and formats. The module is designed to help students learn to build and apply tools that are required to derive business value from data. The tools will range from data preprocessing, analysis to visualization tools.  Overview  Introduction to Artificial Intelligence (AI) and Machine Learning Introduction to supervised learning Introduction to unsupervised learning  Introduction to other types of learning (reinforcement, transfer, etc) Business intelligence    Basic Data Analytic and Machine Learning Techniques  Loading/importing data for analysis from various sources Data preparation and pre-processing Exploratory Data Analysis (EDA) Feature engineering Linear Regression Logistic Regression Decision Trees Association Rules Cluster Analysis  Advanced Data Analytic and Machine Learning Techniques  Support Vector Machines Bayesian Network Classifiers Ensemble methods (bootstrapping, bagging, boosting). Parameter optimization Neural Networks Text Analysis Deep Learning  Model Evaluation, and Comparison and Deployment  Quantify model performance (e.g. accuracy, precision, lift curves, ROC curves, etc.) APIs for model deployment e.g. REST API, pickle, etc.      On completion of the module the student should be able to:  1 - Demonstrate an understanding of the scope and methodology of artificial intelligence (AI) by applying it to different types and sizes of data 2 - Build or apply existing state of the art tools to prepare data for analysis or visualization 3 - Demonstrate an understanding of the role of machine learning and different algorithms and approaches to address different data analysis goals and the application of these algorithms to real-world problems to datasets of varying size. 4 - Critically appraise the strategic importance of data and analytics in a business sense       ", "Programming and User Interface Design  Content and aims \n                 \n                    Module overview\n                  This module extends and deepens the study of Java programming, started in Introduction to Computing Science (CSCU9P1). &nbsp; \n\n\n You\u2019ll explore topics including: &nbsp; \n\n\n \n\t the design of interactive graphical user interfaces (GUIs);&nbsp; \n\t testing and debugging practices; &nbsp; \n\t sorting and searching algorithms of arrays; &nbsp; \n\t exception handling process; \n\t data structures and object orientation in Java. &nbsp; \n \n\n\n You\u2019ll also learn how to develop a good user interface design for desktop applications and for web sites covering principles, practical guidelines and the legal, ethical and practical issues of accessibility for the disabled. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  explain the principles of programming in a general-purpose, high level, imperative programming language (Java) with emphasis on data structures, algorithms and object-orientation;   be able to write, compile and test small/medium-sized Java applications using the BlueJ integrated development environment (or another IDE, as appropriate), applying good practice in program construction and program documentation;   have a practical knowledge of programming graphical user interfaces and explain the basic principles of usability and good design including the basics of computing accessibility for the disabled.    ", "Fundamentals of Software Engineering This module will provide students with an introduction to the fundamental concepts, processes and practices in software engineering. This includes business analysis, requirements engineering, the software lifecycle and the software development process, developing secure systems, testing software systems, software documentation, as well as the challenges of dealing with legacy systems. It will also provide the student with an introduction to key professional practices in relation to the initial analysis and modelling of the development of commercial computer-based software systems.  Systems and Software Engineering Processes and Activities: The systems development process: Basic stages in the systems development lifecycle: project initiation and definition, user and system requirements definition, analysis and design, implementation and testing, deployment (including user documentation and training) and maintenance, developing secure systems Conceptual foundations of OO systems modelling: use case model, design model, deployment model, implementation model, test model The role of ethics and professional issues in software engineering processes The role of DevOps in the Software Lifecycle Software testing concepts: testing stages, acceptance and system testing principles: functional testing, usability testing, reliability testing, security testing, performance testing Software maintenance and evolution: the nature of software maintenance, maintenance activities and managing the maintenance process, the software re-engineering process and common approaches such as business analysis and as-is process model creation legacy system maintenance Software Life Cycles: Principles that characterise successful software development practice Traditional (waterfall) lifecycle model verses Agile approaches Agile life cycles: principles and concepts agile process models, e.g. DSDM, SCRUM,FDD Agile methods and practices, e.g. extreme programming/XP Requirements Engineering: The role of the requirements engineer The requirements engineering process System stakeholders Requirements elicitation Requirements classification: functional non-functional requirements classification frameworks, e.g. FURPS+ Requirements modelling: the use of use case analysis to capture and document requirements Use case descriptions, specifying test criteria in use cases  Initial domain modelling      On successful completion of the module the student should be able to:  1.Understand the nature of the key systems and software engineering processes and activities necessary for the development and deployment of successful commercial computer systems including the need for security 2.Compare the characteristics of the range of modern software lifecycle models and approaches in relation to the suitability of each for different types of computer system development 3.Understand the basic processes involved in software maintenance and evolution (including for legacy systems) 4.Apply basic requirements engineering techniques to the development and documenting of the specification and high-level modelling of functional and non-functional computer system requirements      ", "Natural Language Processing and Computer Vision  Content and aims \n                 \n                    Module overview\n                  Deep learning-based computer vision (CV) and natural language (NLP) have emerged as major driving forces in AI-based technology development. \n\n Usage scenarios include a range of applications such as robotics, autonomous driving, medical imaging, remote sensing for environmental monitoring, security and surveillance and many more. This module will present the understanding of the deep learning-based CV and NLP algorithms that are core to many real-life examples. &nbsp;&nbsp; \n\n You'll explore topics including:&nbsp; \n\n \n\t basic concepts of CV and NLP;&nbsp; \n\t fundamentals of deep learning in particular convolutional neural network (CNN);&nbsp; \n\t various deep learning architectures to carry out core CV and NLP tasks;&nbsp; \n\t application development and hardware acceleration using GPUs. \n \n\n The practical sessions will provide hands-on experience with various deep learning frameworks. This module includes some key mathematical concepts and uses Python as the main programming language for both lab exercises and the assessment. &nbsp;&nbsp; \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  assess a computer vision or natural language processing problem and identify a suitable solution to the problem;   choose appropriate technologies with which to build a solution;   apply the correct methodology to use machine learning to build a solution;   implement a solution using the appropriate software tools;   critically assess the legal, social and ethical issues of a machine learning project.    ", "Group Project The module offers students the opportunity of working through technologies and organisational issues to design and prototype a professionally viable solution to a real-world problem relevant to the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current and previous levels of study in producing an appropriate solution. The emphasis of this module is on innovation relevant to the student's chosen study pathway. The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into their intended career pathway within a professional working environment, and develop their competence to operate successfully.  It is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. Project groups are normally formed to be multidisciplinary and to be able to blend different professional working practices. Project groups are expected to be able to conceptualise and deliver innovative solutions to the problem challenge and apply appropriate professional practices. Students are expected to demonstrate significant exploration in planning, selection of technologies and (within set guidelines) defining the deliverables that demonstrate their concept and evaluate its viability. Project groups are expected to exercise self-governance, developing their own code of conduct that members will follow, and to document the working practices they have followed in support of evidencing the group's professionalism.  As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also undertake peer assessment with regards to the group work. The primary assessable outcome of the project will be an artefact appropriate to the problem set, delivered through professionally coordinated practical work, together with supporting documentation and demonstration. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.  Innovation Innovation and creativity theory and practice  Ethical and societal issues in the age of information  Project management  Project lifecycle  Project planning  Agile Technologies Risk management  Teamwork  Effective team working  Team working in projects and organisations  Communication and collaboration       On successful completion of the module, student should be able to:  1. Use a selection of advanced skills and practices, some of which may be at the forefront of the Programme of Study.  2. Manage a targeted project of information technologies and define and implement the goals and milestones, critical evaluations of project outcomes and deliverables.  3. Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a real-world problem relevant to the Programme of Study.  4. Demonstrate a critical understanding of the innovation processes involved in creating and providing products/services and the innovative impacts functioned by information technologies in sustaining economic growth and societal prosperity.  5. Evidence career societal readiness and professionalism.  6. Demonstrate the ability of teamwork and professionalism required in workplace and society.    ", "CS313 - Computer Systems and Concurrency To enable the student to develop a deeper understanding of highly concurrent hardware and software systems. The class will also further the student\u2019s knowledge of the need for, and the design and implementation of, those other vital hardware and software components of a concurrent system, namely multiprocessors and their interconnections, operating systems and networks. The interactions between many of these components will be investigated by means of significant practical work that consolidates the lecture content in the context of: (i) multiprocessor architectures, (ii) concurrency, (iii) protection and security and (iv) networked and concurrent applications. Software developed in appropriate programming languages will form the basis of much of the practical work thus enabling the student to enhance their software design and implementation skills in this domain.  Multiprocessing: shared memory multiprocessors; message-passing multiprocessors; hardware multithreading; graphics processing units; multiprocessor network topologies; multiprocessor benchmarking and performance models.  OS process management: process and thread models; inter-process communication; CPU scheduling; scheduling of multiprocessor systems, process synchronisation (critical sections, semaphores, monitors, atomic transactions); deadlocks.  System protection (access control, capability- and language-based protection)  Security: threats; cryptography and data encryption; authentication and user authentication; non-repudiation; certification authorities; security defences; email privacy; network security (IP security, wireless network security); web security  Client/Server communication (sockets)  Building object-oriented concurrent applications   To understand the concepts of software and hardware design for multiprocessing, OS process and thread models, process and thread scheduling, and inter-process communication  To appreciate the issues that affect the design, implementation and performance of multiprocessor systems and to understand current approaches to ameliorate these  To appreciate the problems of process and thread synchronisation and understand concurrency mechanisms  To demonstrate an understanding of OS protection and security mechanisms, and network security techniques  To display practical skills necessary to develop networked, and thread safe concurrent applications ", "NoSQL Databases and Data Warehousing  Content and aims \n                 \n                    Module overview\n                  NoSQL (generally interpreted as \"not only SQL\") is a generic term that refers to a new generation of databases that differ from the relational model. These new and diverse databases do not store data in the traditional tables and they do not use the SQL query language. &nbsp; \n\n NoSQL is used for big data and real-time web apps. For example, companies like Twitter, Facebook and Google collect terabytes of user data every single day.&nbsp; \n\n Nowadays many other companies have similar requirements for dealing with data that is bigger in volume, changes more rapidly, and is more structurally varied that can be dealt with by traditional relational databases.&nbsp;NoSQL databases are a response to these challenges and you will come to understand their nuances in this module.&nbsp; \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  explain the differences between a relational database and a non-relational (NoSQL) database;   evaluate the needs of an application and choose a suitable database for that application, justifying the choice;   program a number of NoSQL databases to store and retrieve data and perform aggregation functions;   explain the concepts of replication, distribution, sharding, and resilience in a NoSQL database;   explain the concepts of data warehousing in an organisation, and discuss applications of data warehousing.    ", "Mathematics for Computer Games This module provides an introduction to the mathematics underpinning the computing engines and graphics libraries used in games technology. Students will be able to formulate and solve simple one and two dimensional problems of the type arising in games programming environments.  Solving equations: linear systems quadratics. Sets: definition operations representations of objects. Vectors: definition operations, mechanics dynamics. Basic geometry: angle trigonometry Pythagoras distance symmetry. 2D coordinate systems: Polar and Euclidean Galilean transformations. Matrices: definition operations inversion of a 2x2 matrix representing transformations investigation of the isometries of the plane (translation, rotations and reflections) Composing transformations. Wire frame models: point matrix adjacency matrix applying transformations. Differential equations: differentiation and partial differentiation Newton's second law Solving first and second order constant coefficient differential equations. Modelling applications Integration: definition simple examples numerical approximation methods The Euler method and Backwards Euler Methods comparison Time evolution in a games environment.      On successful completion of this module, students should be able to:  1. Formulate and solve linear and quadratic equations. 2. Formulate and solve mechanics problems in 2D. 3. Construct and manipulate 2D planar wire frame models. 4. Construct algorithms incorporating time stepping procedures. 5. Perform transformations between 2D coordinate systems.     ", "Data Structures, Objects and Algorithms  Content and aims \n                 \n                    Module overview\n                  As we move from basic elements of programming towards building fully-functional industrial software, we need to take a structured approach to design that scales successfully. &nbsp; \n\n\n In this module, you\u2019ll learn about the fundamental building blocks of computer science, and problem solving more generally. Data structures organise data in a well-defined manner, while algorithms process the data efficiently. The choice of structure or algorithm has benefits and consequences that largely determine if, and how fast, a problem can be solved. These concepts are a crucial foundation underpinning the design of more complex software.&nbsp; \n\n\n You\u2019ll explore topics including:&nbsp; \n\n\n \n\t how to modularise software using object-oriented approaches like inheritance;&nbsp; \n\t abstract data types and structures including lists, stacks, queues, maps, sets, trees, hashtables, and heaps;&nbsp; \n\t algorithmic concepts including recursion and greedy methods;&nbsp; \n\t algorithms including searching and sorting;&nbsp; \n\t computational complexity. \n \n\n\n You'll be given practical experience of these topics using current software tools, with a solid understanding of where the techniques work best and their limitations. There is a strong emphasis on practical programming exercises.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  develop skill in using objects and modularization to build larger pieces of software;   apply appropriate fundamental data structures and algorithms across a range of computational problems;   explain, for fundamental data structures and algorithms how they work and their benefits and consequences;   be able to apply recursion as well as divide &amp; conquer as two in a larger set of tools;   explain and contrast complexity and efficiency of fundamental algorithms using standard algorithmic analysis techniques;   demonstrate skills in computational thinking by applying related theory and techniques to unseen problems, working independently.    ", "Mathematics and Statistics of Experimentation This first year module is designed to provide a basic introduction to the theory and application of mathematical and statistical methods within the chemical sciences. Practical statistical work will be carried out using an appropriate statistical package.  Mathematics:  Algebra: Linear equations in one and two unknowns. Quadratic equations. Changing the subject of a formula. Indices. Logarithms. Exponential and logarithmic functions, and their application.   Statistics:  Descriptive statistics: Types of variable. The frequency distribution and its diagrammatic representations. Measures of location and dispersion. The shape of distributions. The Normal distribution. Analysing data from simple experiments.  Probability: Definition and simple examples. Tables of the Standard Normal Distribution.  Sampling theory: Definitions (random samples, population). Sampling distribution of the sample mean. The standard error of the sample mean.  Estimation and confidence intervals: Estimating the mean of a Normal population, with a confidence interval. Estimating the difference between the means of two Normal populations, with a confidence interval, for independent and paired samples.  Hypothesis testing: One- and two-sample tests of means, for independent and paired samples.  Regression and correlation: Descriptive methods. The method of least squares. Coefficient of determination. Correlation coeficient.  Introduction to calculus: Basic differentiation, basic integration with application to elementary rates of change problems.      On successful completion of this module students should be able to:  1.graph mathematical functions, manipulate mathematical expressions, and apply mathematical models to practical problems;  2.collate experimental data and present them graphically, and calculate appropriate summary statistics; 3.use tables of the Standard Normal Distribution to calculate probabilities.  4.use statistical methods to analyse and interpret data arising from simple experiments; 5.apply simple linear regression analysis; 6.use a statistical package to aid the analysis, interpretation and presentation of experimental data.      ", "CS366 - Data Analytics The aim of this class is to provide participants with: an understanding of the challenges posed by the advent of big data (e.g. its modelling, storage, and access); an understanding of the key algorithms and techniques which are embodied in data analytics solutions; an understanding of the principles of Machine Learning and a range of popular approaches, along with the knowledge of how and when to apply the techniques.  Data Analytics: Quantitative methods for data analysis and knowledge extraction including classification, clustering, association rules, Bayesian approaches, decision trees.  Machine learning basics: Overview of the machine learning process; Classifiers and classification measures; Training models; Support Vector Machines; Decision trees; Ensemble Learning; Dimensionality Reduction (Principal Components Analysis).  On completion of this class, participants should be able to: understand how to use Python to enable the use of various big data technologies.  understand how classical statistical techniques are applied in modern data analysis.  understand the potential application of data analysis tools for various problems and appreciate their limitations.  understand the aims and fundamental principles of Machine Learning.  understand a range of the essential core algorithms and approaches to Machine Learning. ", "Programming 0 The purpose of this module is to introduce students to core programming concepts and tools. A core language will facilitate the understanding of coding techniques common to all high-level languages. The aim is to equip students with the knowledge and skills to help them develop (and organise) code effectively. Basic programming structures, use of variables, statements and expressions, will be an early focus. As code becomes more complex, programming principles e.g., modularity, the use of functions and classes are introduced to support skills in code organisation. The importance of using libraries will be featured throughout the course, as will the use of real-word data sets.  Software and the machine, parallel vs serial execution.  High-level programming language comparisons (such as Python, Java, C#, C, C++).  Development environments (command-line, Desktop and Cloud IDEs, Notebooks).   Numerical / non-numerical data types.  Variables, operators (logical and arithmetic), statements and expressions  Conditional structures  Iteration   Processing real-word data: files and data formats (CSV, JSON, XML, HTML)  Object-Orientated  Programming Program crashes, bugs and debugging  Simple 2D graphics      On successful completion of this module, the student should be able to:  1. Demonstrate an understanding of data types and control structures 2. Develop code, and exploit the software ecosystem, to solve problems 3. Demonstrate an understanding of basic modular approaches to code organisation 4. Understand that real-word data can be read, processed and exploited creatively 5. Understand the role of software and different forms of execution    ", "CS312 - Web Applications Development To help the student gain an understanding of the technologies used in the development of N-tier Internet-based applications. Web application design with reference to alternative architectures;Client-side technologies: Page mark-up and visual styling (HTML5 and CSS)  Form verification and checking (JavaScript)  Simple image handling (JavaScript, HTML5, DOM, CSS)  Asynchronous communication with the server-side (AJAX) Server-side technologies: Dynamic page generation (CGI, PHP)  Handling client-side submissions (PHP)  Database integration (MySQL, PHP) Integration of client and server-side applications that exploit databases;Developing realistic web applications that combine a range of client-side technologies and server-side programming with database management, taking account of: software engineering practices (design and maintenance issues, team-based development)  web interface design issues (for example, the separation of content from functionality, cross-platform considerations);  human-computer interaction / usability considerations  accessibility guidelines (ability to deliver information in a clear and concise fashion; consideration of special needs and internationalisation);  web security, privacy and legal aspects (common privacy and security attacks (e.g. cookies; injection attacks)) Awareness of the role of Web development platforms and content management systems (e.g. Drupel, WordPress and Angular) On completion of the class, a student should be able design and develop realistic web-based applications that include client-side programming and server-side functionality with database components.In particular, the student should learn: to understand the typical topology of internet applications  to develop accessible and secure internet-based applications that make use of:  client-side technologies  server-side technologies  back-end technologies for storing server-side data  distributed web applications   ", "IT Professional Issues and Project Methods This module seeks to develop understanding and practical skills in advanced project research methods which are in line with industry regulations, standards and practices and are applicable to complex IT projects. Study is undertaken in an integrated fashion to ensure that the professional framework within which such projects are developed, deployed and managed are fully understood.  IT Professional Issues: -Ethical Considerations in research projects and activities: Research involving human subjects, using minors and vulnerable people in research activities applicability of professional body codes of practice  -Ethical frameworks for the computing professional: underlying ethical concepts and ethical theories - Professionalism within computing role of professional bodies codes of ethics/conducts responsibilities of a computing professional and ethical decision making. -Cyber crimes privacy and data protection IT legislation and regulations, industry standards and practices, e.g., PCI DSS, HIPAA, GLBA, SoX, etc. -IT governance, risk, auditing and compliance -Research methods  - Critical analysis  - Problem formulation - Research evaluation -Project definition -Critical thinking -Technical justification -Project management methodologies e.g. PRINCE2, RUP, PMI, Agile. -Quality management - Configuration management  - Risk management   Examples of tasks undertaken by students in practical sessions are: -Presentation and demonstration of technical work. -Group discussion and argumentation for key subject topics. -Critical reviews of seminars.      On successful completion of this module a student should be able to:  Critically evaluate the techniques of advanced research and project methods, applicable to complex IT projects. Critically evaluate major legal, social and professional issues applicable to the development and use of computer technologies and systems within society. Demonstrate an in-depth understanding of the ethical responsibilities of an IT professional. Apply the key elements and techniques of an advanced research methodology appropriately in the development of a complex IT project.     ", "CS310 - Foundations of Artificial Intelligence To help the student to a broad appreciation of the scale and nature of the problems within Artificial Intelligence and to a detailed understanding of some of the fundamental techniques used to address those problems. The class will cover the first 12 chapters of the 3rd edition of AI: A Modern Approach by Russell and Norvig. The topics to be covered will include: Introduction: What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing.  Constraint satisfaction problems: defining CSPs, constraint propagation, backtracking search in CSPs, local search in CSPs, exploiting problem structure.  Logical agents: propositional logic for agent behaviour, propositional theorem proving, propositional model checking and SAT solving, agents based on propositional logic.  First-order logic: syntax and semantics, knowledge engineering in first-order logic.  Inference in first-order logic: unification and lifting, forward chaining, backward chaining, resolution.  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches.  Planning and acting in the real world: time, schedules and resources, hierarchical planning, planning and acting in non-deterministic domains, multi-agent planning.  Knowledge representation: ontological engineering, events, mental events and objects, reasoning with default information, an example application. The class will focus on the practicalities of using these techniques to build intelligent agents. Practical work will be set, including the programming of an intelligent agent for a specified task. On completion of the class, a student should be able: to understand the modern view of AI as the study of agents that receive percepts from the environment and perform actions  to demonstrate awareness of the major challenges facing AI and the complexity of typical problems within the field  to exhibit strong familiarity with a number of important AI techniques, including in particular search, knowledge representation, planning and constraint management  to assess critically the techniques presented and to apply them to real world problems ", "Object Oriented Analysis and Design This module provides a detailed coverage of object-oriented analysis and design of software systems. It provides coverage of the Unified Modelling Language (UML) notation and the practical application of UML in the development of information systems using currently available software modelling tools. It will also provide coverage of the use of Analysis and Design Models  Object Oriented Analysis And Design. An overview of the conceptual foundations of Object Oriented Analysis and Design.  Class Diagrams Objects, classes, attributes, operations, inheritance, aggregation, association, and generalisation. The development of class diagrams. The role of 'class diagrams' in analysis and design models.  Component Diagrams Components, component interfaces. Modelling system components using component diagrams.  Interaction Diagrams Modelling object interaction using interaction diagrams (sequence diagrams, communication diagrams, interaction overview diagrams and timing diagrams).  Activity Diagrams Activities, actions, edges, decision nodes, merge nodes, partitions, fork nodes, join nodes, objects in activities The development of Activity Diagrams during business analysis to model workflow and business processes  Dynamic Modelling States, transitions, actions and events  Traceability  from Requirements through to Implementation      On successful completion of this module, students should be able to:  1. Understand and apply object oriented techniques to the analysis and design of software systems 2. Develop object oriented specifications using the Unified Modelling Language (UML) 3. Develop UML models using currently available software modelling tools 4. Understand the integration between the design models and implementation      ", "Integrated Project 2 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current level of study in producing an appropriate solution  The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study (e.g. the software application development lifecycle and its constituent parts the game development process) to frame and follow a project plan that leads to a solution for a given project specification/design brief relevant to the student's chosen study pathway.  The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. It is a group-based project and the work completed within this module by an individual student will require the student to work as part of a team within the workplace.. Project specifications/design briefs are expected to be derived from the student's workplace. At this programme level the group are expected to develop and follow a project plan framed around a relevant development process for a well-defined problem area as a group with the assistance of, and under the supervision of, a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.  Students require working in a self-motivated, coordinated way within collectively defined schedules and further developing confidence in their ability to work with others on analysing and creatively solving problems. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also participate in peer reflection and evaluation, and reflect upon relevant professional and ethical issues introduced.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.   The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team dynamics, personalities and traits Meeting participation skills Listening, questioning skills Negotiation and assertiveness skills Critical thinking and decision making Giving and receiving feedback Coping with pressure Working with different cultures Stakeholder relationship management Landscape of legislative frameworks governing work and enterprise in the digital economy.   Project Lifecycle Management Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities Mapping lifecycles to plans Project lifecycle management resources and tools relevant to the programme of study (e.g. software engineering tools to support verification, testing, configuration and release management, deployment and maintenance).  Careers and Employability Recruitment and selection processes Career planning Professional profile, digital Identity and the role of social media Professional bodies and societies Business and workplace ethics and professional issues - differentiating between good and bad employers and employees Internships and Placements Guest external speakers and Guru seminars      On successful completion of this module, students should be able to:  1 - Develop a project plan that applies an appropriate development lifecycle process (e.g. the software application development lifecycle and its constituent parts; the game development process) and supporting developmental resources and tools (e.g. testing, versioning) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study.  2 - Develop and demonstrate appropriate competence in, and an understanding of, the roles and transferable skills required in the project's development, and the constraints under which work is undertaken.  3 - Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making. 4 - Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.     ", "Machine Learning This module will provide the fundamental techniques used in Machine Learning and how they can be applied to Data Analysis. It will introduce the basic building blocks of modern Machine learning including Perceptrons and Fully Connected/Convolutional Neural Networks. The Student will be given an introduction into Deep Learning methods to perform such tasks as image classification, image segmentation and natural language processing. After this module  students will have sufficient knowledge to be able to format data to be suitable for Machine Learning and be able to successfully train their own AI models with focus on solving relevant real world data science problems.  PRE-REQUISITE KNOWLEDGE: Introduction to Data Science, Probability and Statistics,  Decision Trees - K-Nearest Neighbour - K-means - Support Vector Machines - Training - Evaluation - Testing - Performance Evaluation - Perceptrons - Multi-layer Perceptrons - Fully Connected Neural Networks - Convolutional Neural Networks - Back-Propagation - Stochastic Gradient Descent - Activation Functions - Momentum - Learning Rates - Dropout - Overfitting - Hyperparameter Optimisation - Image Classification - Object Detection - Image Segmentation - Text Analysis - Natural Language Processing       On successful completion of the module the student should be able to:  1. Understand the principles and goals of Machine Learning   2. Understand the basic techniques used in ML algorithms   3. Be able to select appropriate ML approaches to a given problem   4. Be able to evaluate the effectiveness of an ML algorithm   5. Understand how to train ML algorithms and how to prepare data for training   6. Implement and test ML algorithms in a suitable programming language         ", "Mathematics for Data Science This module aims to study the following mathematical topics which are fundamental to the application of mathematics in an engineering context. Basic algebraic manipulation, basic concepts of vectors and matrices, functions, complex numbers with applications, calculus with applications, numerical methods and an introduction to Python.  Algebra: Partial fractions, Inequalities, Binomial expansion, Vector algebra-vectors and scalars, Cartesian components, scalar and vector products and their applications. Trigonometry: Angles, radian measure, trigonometric identities, solutions of trigonometric equations, trigonometric functions, engineering waves, angular frequency, amplitude, period and frequency, adding waves of the same frequency, phase angle, phase-shift of a wave, Asin ( x+a ) form and the oscilloscope trace. Complex Numbers: Rectangle form, addition, subtraction, multiplication, division of complex numbers, graphical representation (the Argand diagram), polar form (multiplication and division), De Moivre's theorem, roots, exponential forms, phasors. Matrices &amp; Determinants: Basic operations of matrices, determinants, inverse of a matrix, solving simultaneous linear equations using Cramer's rule and inverse technique. Co-ordinate Geometry: Equations of straight lines and circles, equations of tangents and normal, determination of points of intersection, polar form. Differentiation: Derivatives of standard functions Product, quotient and chain rules equations of tangents and normal to a curve maximum, minimum and points of inflection curve sketching using the second derivative optimisation problems. Partial differentiation of 2 variables functions, Del operator. implicit functions and logarithmic differentiation, Tangent and normal, velocity, acceleration, turning points, maxima and minima. Integrations: Standard integrals involving algebraic, trigonometric, exponential and logarithmic functions integration by substitution, integration using partial fractions, integration by parts, definite integrals, the link with integration as area, integration as the limit of a sum.      On successful completion of the module the student should be able to:-  1. understand, manipulate and apply algebraic functions to data problems  2. describe and manipulate complex numbers in Cartesian and polar forms, phasors  3. describe and manipulate matrices, determinant of matrices, inverse of matrices  4. understand and apply differential calculus change and use it to solve selected optimisation problems  5. describe and use integral calculus analytically and numerically and apply it to physical expressions    ", "Data Strategy  Content and aims \n                 \n                    Module overview\n                  Over recent years, many organisations have come to view data as a valuable commodity. Businesses, governments, sports teams and charities have all been transformed by the ability to capture, store and analyse data to generate informed decisions.&nbsp; \n\n\n Like any valuable asset, care must be taken over how data is stored. Just as we need our money to be stored securely but with ease of access, companies also need data to be both secure and accessible. What\u2019s more, there is no point in keeping secure, accessible data if you don\u2019t make use of it, so the final aspect of data strategy is concerned with how an organisation makes use of its data.&nbsp; \n\n\n Broadly speaking, data strategy covers data security, data access and data utilisation. Getting these things right allows an organisation to become more effective and exposed to less risk. You might have heard it said that data is the new money, and it is certainly true that data should be treated with the same care and attention that is given to money.&nbsp; \n\n\n In this module you will learn how organisations protect and use data, how they build data teams and encourage a good data culture, and how ethics is at the heart of good data governance. You\u2019ll learn about good business practice, some aspects of the law such as GDPR, some cyber security tools such as encryption, and some data tools such as data management software. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  develop and assess a data strategy for an organisation, taking into account governance, security and utilisation;   assess the legal, social and ethical issues of storing and handling data, including sensitive commercial or personal data;   design a data team for an organisation with reference to its size, goals and structure, including: a detailed understanding of the roles and skills associated with each member of a data team.    ", "CS113 - Information and Data 1 The aim of the class is to give participants a practical high-level understanding of web systems and the languages and tools that can be used for their creation.&nbsp; The course will provide a brief introduction to databases, the Web, security and usability:&nbsp; Web Systems 1&nbsp;  Data, information and knowledge, the Web, web-based systems, web-based architectures (front-/back-end, data stores), Web-based development (languages, framework, CMS)&nbsp;  Introduction to HTML5 and CSS&nbsp;    Data management &amp; databases&nbsp;  Different types of data, managing data with files and databases, relational databases&nbsp;  SQL queries&nbsp;  Database access with php&nbsp;    Usability &amp; human factors&nbsp;  Usability, accessibility, understanding user needs &amp; limitations, usability design, usability assessment&nbsp;  Screen mocking and navigation design&nbsp;    Web Systems 2&nbsp;  Introduction to Javascript, input validation, responsive design&nbsp;  Website management, web analytics, and web logs&nbsp;    Security&nbsp;  CIA, Threats, Access control, User authentication (passwords and PINS), Security policies, computer hygiene, role of encryption and hashing&nbsp;  Web site security, user authentication, protecting user data&nbsp;    Presentation&nbsp;  Good presentation design, data visualisation principles&nbsp;  Collecting (user surveys), analysing (summary statistics), generating reports and presenting data (graphs)&nbsp;    After completing this class participants will be able to:&nbsp; describe the components of a web system.&nbsp;  understand how to store and access data.&nbsp;  understand how to make web systems usable and accessible.&nbsp;  understand and describe security threats and how to mitigate these.&nbsp;  construct a create a simple web system with a back-end database.&nbsp; ", "Integrated Project 3 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current and previous levels of study in producing an appropriate solution. The emphasis of this module is on innovation relevant to the student's chosen study pathway.  The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into their intended career pathway within a simulated working environment, and develop their competence to operate successfully. It is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. Project groups are normally expected to be multidisciplinary and to be able to integrate different professional working practices. At this programme level the group are also expected to be able to develop innovative solutions to a problem challenge and apply appropriate professional practices. Students are expected to demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. By prior agreement with module tutors, students on certain pathways may be permitted to work individually on responses to external competition briefs but will still be expected to engage in peer assessment and critiquing activities. Groups are expected to develop their own code of conduct that members will follow and choose their own documentation and management standards, and to document the working practices they have followed in support of evidencing the group's professionalism. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also undertake peer reflection and evaluation. The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.  The cumulative engagement of students on the ITMB and SDfB e-skills accredited pathways with external e-skills events will be assessed as part of the Individual Reflective Report.  The percentage of Work Based Learning for this module, as represented by the Independent Learning 'Activity Type', is 82%. The percentage of Work Based Assessment for this module is 100%.  Innovation and Entrepreneurship Innovation and creativity theory and practice, including disruptive innovation through digital technologies {generation and evaluation: sources of information, market characterisation, sales volume prediction financial evaluation (e.g. ROI) technical evaluation practicality of a concept from the viewpoint of functionality  Careers and Employability Students will have access to specialist materials on key aspects of career development and employability.       On successful completion of this module students should be able to:  1 - Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a realistic problem relevant to the domain of the student's programme of study. 2 - Demonstrate a critical understanding of the entrepreneurial and innovation processes involved in creating and providing products and professional services and the important role played by digital technologies in sustaining economic growth across a range of organisations and sectors. 3 - Develop a business case and project plan. 4 - Evidence career readiness.     ", "Integrated Project 1 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current level of study in producing an appropriate solution.  The emphasis of this module is on: understanding the contribution which digital technologies and skills relevant to the student's area of study are making to current global business and society, and how these are changing and developing understanding the development lifecycle practiced by professionals in their area of study (e.g. the software application development lifecycle and its constituent parts the game development process) gaining an insight into the organisational structures and business functions within which the modern professional associated with their intended career pathway are likely to operate, and their possible roles. Students are also introduced to behaviours and issues associated with the contemporary, local and global workplace, the changing nature of work and working practices, and how individuals function either as part of an organisational workforce, or as self employed professionals. The balance of activities will depend on the specific objectives of the project and problem set. The focus for most activities is a group-based project and the work completed within this module by an individual student will require the student to work with other students following the same module. At this programme level the group are expected to follow a given project plan and its constituent processes and activities under direct supervision from a module tutor and work in a self motivated way within defined schedules. Students are expected to develop confidence in their ability to work with others on analysing and creatively solving problems, and evaluating their work within the context of the original project requirement. This module will ground students in team building and team working skills, and the use of reflective practices to support personal and professional development.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation.  The Individual at Work Team working Time management Independent working and self-reliance Communication skills Presentation skills Personal reflection and review  Work and the Workplace The 21st Century Workplace Professional practices and life cycles Enterprise and organisational types and structures Business functions Corporate values and responsibilities Diversity at work and mobility considerations  Digital Technologies and Society Digital Enterprise, Digital Culture and Digital Society Case Studies Trends and Developments  Introduction to Careers and Employability Careers profiles and pathways Graduate Attributes and Enhancing Employability Careers information sources and resources Guest external speakers and Guru seminars from industry practitioners and employers       On completion of this module, students should be able to:  1. Use relevant defining technical and enabling soft skills to follow a project plan and appropriate lifecycle process within a team based environment to solve a problem relevant to the programme of study. 2. Develop an understanding of the structure, function and operation of the modern workplace, the opportunities and roles available to graduates of their programme of study, and technical and transferable skills required for success. 3. Demonstrate an awareness of how digital technologies and know how relevant to the student's programme of study interact with business, society, and culture. 4. Utilise reflective practices to support personal and professional development and demonstrate the ability to effectively communicate in both written and oral form.     ", "IT Project Management 1 This module provides a solid foundation in Project Management within the context of IT Systems development and deployment. It provides coverage of basic project management concepts and principles (including project planning, scheduling, control and configuration management and techniques for cost estimation, quality and risk). The module will also include coverage of the human aspects of information security and client data protection as well as key related software project management standards, such as PRINCE2, the software development process (ISO 12207), and software project quality (SEI CMMI model).  PROJECT MANAGEMENT AND IT CONTEXT  Project characteristics  Triple constraint  Project stakeholders  Project success definition  Project manager skills/role  Systems view - systems approach - systems philosophy, systems analysis and systems management.  3 sphere model for systems management (business, organisation, technology)  Stakeholder management and top management role in project success.  Systems life cycle v project life cycle and software development process (ISO 12207).  Diverse nature of IT projects, including the implications of using open source software  Stage gates, delivering a project in incremental iterations  Organisational structure - Functional, Project, Matrix - and implications for project management.  Standards in software project management, PRINCE2: 5 project management process groups-project initiation, project planning, project execution, project monitoring and controlling, project closing  PROJECT PLANNING AND PROJECT SELECTION  Financial analysis of competing projects - Average gross annual rate of return, NPV, ROI, Payback, IRR  Project Scope Management: WBS, work package specifications, Gantt charts. Project Time Management: Network activity diagrams, critical path(s), float table, milestones. Using the critical path to shorten a schedule - crashing, fast tracking, project buffers, PERT  Project Cost Management: Monitoring and Controlling the cost of a project - Earned value analysis.  Considerations for terminating a project, i.e. 'pulling the plug' on a project.  QUALITY MANAGEMENT  - Quality Management Frameworks  - Quality Planning  - Importance of quality management, quality planning, quality assurance, quality control, including techniques, e.g. SEI CMMI model.   RISK MANAGEMENT  - Risk Identification and Analysis  - Risk Management Strategies   Importance of risk management, positive and negative risks, response strategies for negative risk (risk avoidance, risk mitigation, risk transference, risk acceptance), risk register, probability/impact risk analysis, risk response strategies for positive risks (risk exploitation, risk sharing, risk enhancement, risk acceptance).  Information security including client data protection. The risk of using externally developed software, including open source software and free software  CHANGE CONTROL  Controls  Configuration Management  Change control system, baseline, configuration item, version control, configuration diagram, advantages and disadvantages of using configuration management, CCB, authorised changes.  PROFESSIONAL ISSUES in IT PROJECTS  - Professional Competence, Codes of Conduct, Codes of Practice  - Relevant Statute law, e.g. Computer Misuse Act, Data Protection Act, Regulation of Investigatory Powers (RIP) Act, Software Licenses - Social and Ethical Issues      On successful completion of this module students should be able to:  1 - Compare and apply techniques and tools for estimating, scheduling and monitoring a software project 2 - Appraise the role of Quality Management within the management of IT projects 3 - Examine the role of verification in ensuring that IT Project requirements specifications comply with organisational business requirements 4 - Analyse Change Management and Risk Management principles and techniques 5 - Examine the professional framework within which IT Projects operate    ", "IT Project Management 2 This module covers advanced Project Management techniques. The processes, principles and themes of the industry standard PRINCE2 Project Management Methodology are covered in detail. The module also provides coverage of frameworks for the management of enterprise-wide IT Service Management Delivery, such as ITIL.  The percentage of Work Basded Learning for this module, as represented by the Independent Learning 'Activity Type' and on-line lectures, is 73%. The percentage of Work Based Assessment or equivalent activity for this module is 40%.  IT Service Management (ITSM) Framework and IT Infrastructure Library (ITIL):  Overview of ITSM &amp; ITIL Supporting the users of IT Services Service desk Incident Management  Problem Management Control processes Configuration, change and release management Service risks and compliance Service Delivery building blocks Availability management Capacity management Service Level Management and Services Financial Management Protecting Business and IT Services Service Level Management IT Service Continuity Management    ADVANCED PROJECT MANAGEMENT METHODOLOGY: Use of PRINCE2 project management methodology to implement ITSM framework in key areas of service support and service delivery Approaches for managing projects in an IT environment Overview of key elements of PRINCE2 PRINCE2 best practice approach for projects PRINCE2 principles, processes and themes PRINCE2 scalability &amp; tailoring (size, complexity and skills) Management by exception PRINCE2 Business Case Benefits of using PRINCE2 project management methodology Controlled start, progress and closure to the PRINCE2 project PRINCE2 Issue and Change Control PRINCE2 Plans PRINCE2 Quality, Risk, Communications and Configuration Management Strategies       On completion of this module the student should be able to:  1 - Examine the key ITSM processes, roles and responsibilities and the interfaces between them 2 - Evaluate the philosophy and structure of PRINCE2 and understand the benefits that can accrue from the implementation of a structured project management method such as PRINCE2  3 - Critically evaluate PRINCE2 as a methodology in ITSM in key areas of service support and service delivery  4 - Apply PRINCE2 principles, processes and themes in the construction of a PRINCE2 Project Plan  4 - Evaluate the PRINCE2 Quality Management, Configuration Management and Risk Management themes.     ", "Mobile Platform Development This module introduces students to the specific requirements of developing an application which runs on a mobile platform such as Android, iOS, Windows Phone, Blackberry. Students will make use of an appropriate programming language and programming tools to develop a working application for a mobile device. Students investigate the HCI issues that are specific to a mobile application and utilise appropriate communication technologies to transfer data between mobile devices when appropriate.  The ubiquitous landscape  Tabs, Pads and Boards Utilise design specifications and design notations  UML Notation  Storyboards Investigate basic design issues in Mobile Computing  Screen size/Resolution  Screen Navigation  Menu utilisation Threading on Mobile devices  UI Thread  Background Thread  Communication between threads  Utilise communication technologies  Wi-Fi  Bluetooth  Utilise appropriate design patterns  Model/View/Controller Utilise pre built graphical components  Labels/Edit Boxes/Spinners/Radio Buttons/Check Boxes Animation Techniques  Frame Animation/Tweened Animation Develop components for mobile applications  Graphical components  Model Components Testing mobile applications  Testing techniques  Testing environments Debugging Applications  Utilise Debug environments Device Storage  Reading/Writing to removable memory Structured Data   Data Structures and Collections  Database Storage Internet of Things Sensors and Sensor Networks Wearable Technology      On successful completion of this module, students should be able to:  1. Develop mobile applications using a suitable programming language and programming environment 2. Discuss and apply appropriate testing procedures to mobile applications 3. Compare and contrast alternative connection and communication technologies for mobile platforms. 4. Understand and critically evaluate the usability concerns and design heuristics that application development on mobile platforms     ", "Data Science Applications  Content and aims \n                 \n                    Module overview\n                  Data science is a rapidly emerging discipline at the intersection of computer science, statistics, and substantive application domains. From computer science comes machine learning, cloud computing, and databases; from statistics, a long tradition of exploratory data analysis, modelling, inference, hypothesis testing and visualisation; from application domains in business and science, comes the challenges to tackle, the questions to answer, and the evaluation standards to assess the relevance of the insights and results obtained.&nbsp; \n\n\n The main goal of data science is to extract knowledge and insight from data, which can then be turned into positive action. There is a multitude of data science applications in science, industry, and society. &nbsp; \n\n\n Data Science Applications starts by setting the scene and discussing what data science and big data are and why they matter. It then moves on to describe the data science process and how it is applied in a variety of contexts from scientific to commercial. This is supported by specific case studies and a set of invited talks by data science designers and practitioners from science and industry.&nbsp; \n\n\n The module does not cover computer programming or hands-on data analysis. This is left to other modules in the programme. The idea is instead to provide a high-level discussion of important principles and study the conceptual steps of the data science process, with more in-depth coverage of some relevant techniques and case studies. The module is assessed by a critical assessment and an oral presentation of a specific data science case study (from a recent selection of journal articles). \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  evaluate data science projects in commerce, in science and in academia;   understand the stages of a data science project;   critically assess the stages of a data science project.    ", "Probability and Statistics This module aims to provide students with a solid foundation in Probability and Statistics which are used  extensively in Data Science. Students will be introduced to an appropriate statistical software package such as R.  This module will provide students with the understanding of probability theory and how to apply statistics to real  world examples. It will cover a range of topics and methods such as probability distributions, Bayes theorem,  hypothesis testing and statistical inference, linear and multivariate regression analysis. Students will be able to  apply statistical methodologies and techniques to solve Data Science problems.  Probability  - Axioms basic laws of probability, Bayes theorem.  Probability Distributions  - properties discrete and continuous distributions central limit theorem.  Exploratory Data Analysis  - numerical and graphical summaries - measures of location, robust statistics, expectation confidence intervals.  Hypothesis testing  - Experimental design, null and alternative hypothesis, type I and II errors p-values anova, t-tests, A/B testing.  Regression and correlation  - Correlation, linear regression, multivariate regression  Software implementation  - Statistical software packages      On successful completion of the module the student should be able to:-  1. Understand basic probability theory and its application  2. Understand joint and conditional distributions  3. Apply exploratory data analysis techniques  4. Understand hypothesis testing and statistical inference  5. Utilise linear and multivariate regression on datasets    ", "Scripting for Data Science  Content and aims \n                 \n                    Module overview\n                  Are you interested in data science or numerical analysis but lack the coding skills to analyse data effectively? Then this module is for you! Python is a versatile programming language with a wide range of applications in various fields. \n\n\n Some of the most common applications of Python include web development, data science, machine learning, scientific computing, and automation. Additionally, Python is popular among beginners and experts alike for its readability, ease of use, and extensive libraries that make coding simpler and faster. \n\n\n This module is designed to equip you with the foundational Python coding skills necessary to excel in data science and numerical analysis. \n\n\n In this module, you will learn: \n\n\n \n\t basic programming concepts and constructs in Python; \n\t data types, data structures, and control flow in Python; \n\t functions and modules in Python; \n\t Python libraries for data science and numerical analysis, such as NumPy and Pandas. \n \n\n\n Upon completion of this module, you will have gained a fundamental understanding of Python programming and be able to apply these skills to data science and numerical analysis tasks. With the increasing demand for data-driven decision-making in today's workforce, this module is an excellent opportunity to enhance your employability and gain a competitive edge. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  write short Python programs to load, store, manipulate, analyse, present and save data from a variety of sources;   choose appropriate Python libraries for different tasks;   choose appropriate representations for data from different sources;   implement simple numerical algorithms, given the mathematical description;   choose an appropriate scripting tool for a given task.    ", "Undergraduate Course: Computing in the Classroom (INFR10077) This course will give fourth year students the opportunity to make a positive contribution to the local community by sharing the knowledge of Informatics with school pupils and teachers. They will work with teachers to design appropriate teaching material and practical projects for computing education in schools, communicate effectively with young people and instil in them passion for computing disciplines, and support them in developing skills necessary in an increasingly digital society. Students will gain a critical understanding of the theory and practice of computer science pedagogy as appropriate for different stages of school learners. In addition, studying this course will enable students to develop a range of communication and organisational skills in a high pressure but supported real world setting.  \n \nThe course offers an in-depth, sustained experience in the classroom to students contemplating a career in education. Students will contribute to the teaching of computer science and data science in primary / secondary / special schools in Scotland. This could include a diverse range of activities including creating online materials, teaching classes online, developing software to support live events, and where appropriate, visiting classrooms. They will be supported by primary and secondary teachers and by academic mentors from the School of Informatics and School of Education. \n  \nThe aim of the course is for the students to design and deliver a project based on discussions with academic staff and classroom teachers, analysis of the appropriate school curricula, assessment of pupil's interests, and feedback received from an academic mentor. Students will receive formative feedback from an academic mentor based on observation notes and reflective writing recorded throughout the year. \n  \nCourse topics include: \n* Computer science in schools curricula in Scotland and other countries \n* Good practice in computer science pedagogy research evidence \n* Effective teaching techniques \n* Giving and receiving feedback \n* Lesson planning \n* Child protection and appropriate measures for risk management (e.g. infection control) Grover, S., &amp; Pea, R. (2013). Computational Thinking in K-12: A Review of the State of the Field. Educational Researcher, 42(1), 38-43. doi:10.3102/0013189X12463051  \n \nGrover, S., Cooper, S., &amp; Pea, R. (2014). Assessing computational learning in K-12. Proceedings of the 2014 Conference on Innovation &amp; Technology in Computer Science Education - ITiCSE 14, (June), 57-62. doi:10.1145/2591708.2591713  \n \nIsrael, M., Pearson, J. N., Tapia, T., Wherfel, Q. M., &amp; Reese, G. (2015). Supporting all learners in school-wide computational thinking: A cross-case qualitative analysis. Computers and Education, 82, 263-279. doi:10.1016/j.compedu.2014.11.022  \n \nThe Primary Teacher's Guide to Teaching Computer Science available at www.teachcs.scot", "Mathematics for Computing This module introduces elements of discrete mathematics underpinning the study of both hardware and software systems. The techniques developed in this module will be practically based with an emphasis on problem solving. The material will be accessible to students with a limited mathematical background.  Solving equations:  - systems of linear equation  - quadratics - applying logarithms - the standard functions - the graphical method for finding roots - interpreting equations as mathematical models.  Matrices and Vectors: -Definitions, addition, multiplication, matrix inversion -Modelling: error detection, Hill ciphers, network connectivity. Logic: -Sets: union, intersection, complement, Cartesian products, Venn diagrams -Relations: order relations, introduction to equivalence relations, composition, inversion functions. - logic operators: and, or, not, implication and equivalence  - truth tables - examples of proof - introduction to Formal System Specification  Graphs: -Definition, Diagrams, Adjacency and Incidence Matrix, vertex degree, degree sequence, Handshaking Lemma -Types: Bipartite, Cubic, Complete, Petersen etc. -Paths, Cycles (including Euler and Hamilton cycles), Connectedness -Applications: Petri Nets Gray's codes, Compatibility graphs  Trees and Digraphs: - Trees: Definition, Binary, Breadth first search, Depth first search, Stacks - Directed graphs: Definition, Representations, acyclic and weighted (networks) - In-degree, Out-degree, Handshaking Lemma, Cycles - weighted digraphs (Networks) - Applications: tournaments, max-flow min-cut.  Finite State Automata: - definition - modelling states and transitions using a digraph - pattern recognition.  Number Modular Arithmetic: the concept and basic operations, applications to cryptography. Number systems: binary, decimal, hexadecimal and changing between bases Bitwise logical operations on binary numbers      On completion of this module, students should be able to:  Use graphs and digraphs to model and solve problems; Apply simple finite state machines and simple algorithms, including recursion; Solve simple equations and carry out basic algebraic operations on matrices and vectors, simple mathematical transformations as used in elementary Cryptography; Calculate in a range of number systems associated with computer applications; Represent statements using logical operators and use them in deductive arguments and work with finite relations.      ", "Research Skills and Professional Issues (CSN) This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.  The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.      On successful completion of this module, students should be able to:  1. Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools. 2. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study. 3. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies. 4. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives. 5. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study. 6. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.     ", "COMP3421: \nCOMPUTER SCIENCE INTO SCHOOLS  To develop a range of key skills in the student and to offer an early taste of teaching to those interested in pursuing it as a career or for other career pathways where public understanding of science is required. \n\t\t\t To help students gain confidence in communicating Computer Science, develop strong organisational and interpersonal skills, and understand how to address the needs of individuals. \n\t\t\t To learn to devise and develop Computer Science projects and teaching methods appropriate to engage the relevant age group they are working with. \n\t\t\t To help inspire a new generation of Computer Scientists as prospective undergraduates by providing role models for school pupils. \n\t\t\t To help teachers convey the excitement of their subject to pupils by showing them the long-term applications of school studies, especially the cross disciplinary relationships of Computer Science. \n\t\t\t To help teachers by providing an assistant who can work with and support pupils at any point on the ability spectrum.   A competitive interview system will be used to match students with appropriate schools and a specific teacher in the local area, and each student selected will be given a chance to visit the school they will be working in before commencement of the placement.   \n\t\t\t One day training course on working in schools and with pupils.   \n\t\t\t Series of lectures on key transferable skills.   \n\t\t\t The student will be required to spend half a day (approx 4hrs) a week in the school every week for at least 10 weeks.   \n\t\t\t Tutorials which will provide an opportunity for students to share their experiences.   \n\t\t\t The students will be involved in the following activities in support of their learning and teaching:   \n\t\t\t Classroom observation and assistance: Initial contact with the teacher and pupils will be as a classroom assistant, watching how the teacher handles the class, observing the level being taught and the structure of the lesson, and offering practical support to the teacher.   \n\t\t\t Teaching assistance: The teacher will assign the student with actual teaching tasks, which will vary dependent on specific needs and the student's own ability as it develops over the term. This could include for example offering problem-solving coaching to a smaller group of higher ability pupils, or taking the last ten minutes of the lesson for the whole class. The student will have to demonstrate an understanding of how the level of the knowledge of the pupils they are teaching fits in to their overall learning context in other subjects.   \n\t\t\t Whole class teaching: Students will typically be offered, in collaboration with their teachers, at least one opportunity to undertake whole class teaching, albeit that it may be only for a small part of the lesson.   \n\t\t\t University awareness: Students will represent and promote their academic discipline as a potential university choice to pupils across the social and academic range represented at their partner schools.   \n\t\t\t Special projects: The student will devise a special Computer Science project on the basis of discussion with the teacher and module co-ordinator and their own assessment of what will interest the particular pupils they are working with. The student will implement the special project and evaluate it. The student will be required to show that they can analyse a specific teaching problem and devise and prepare appropriately targeted teaching materials, practical demonstrations and basis 'tests' where appropriate.   \n\t\t\t Extra-curricular projects: The student may be supervised by the teacher in helping to run an out-of-timetable activity, such as a lunchtime club or special coaching periods for higher ability pupils. The student will have to demonstrate an ability to think laterally in order to formulate interesting ways to illustrate more difficult scientific concepts.   \n\t\t\t Written reports: The student will keep a journal of their own progress in working in the classroom environment, and they will be asked to prepare a written report on the special project.   \n\t\t\t The teachers will act as the main source of guidance in the schools but, in addition, the students will also be able to discuss progress with the module co-ordinator or a member of the Science Outreach and Engagement Team whenever necessary. \n\t\t\t Solutional methods for computational problems.   On successful completion of this module students:  \n\t\t\t\t Will be able to assess and devise appropriate ways to communicate a difficult principle or concept. \n\t\t\t\t Will have gained a broad understanding of many of the key aspects of teaching in schools. \n\t\t\t\t Will have an advanced understanding of Computer Science through having to explain to others. \n\t\t\t\t Will have an advanced understanding of the problems of public perception of science.   ", "Programming 2 This module builds on the object-oriented concepts and programming language features covered in the 'Programming 1' module and provides a solid grounding in the principles and practice of object-oriented programming, and the use of the Unified Modelling Language (UML) for code visualisation. Students will learn to use a range of capabilities provided by a modern object-oriented programming language, along with techniques and practices for the development of robust and secure code. On completion of this module students will be able to develop and test complex object-oriented applications. The percentage of Work Based Learning for this module represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Fundamental Principles: -Encapsulation and modularity -Coupling and cohesion  Class Relationships: -Association, dependency, composition, aggregation, inheritance -Visualisation using UML -Implementation in program code  Using Object-oriented Programming Language Features: -Packages/namespaces and access modifiers -Interfaces -Enumerations -Collections  Writing robust and secure programs: -Testing: unit testing, system testing, refactoring  -Assertions -Exception handling -Logging -Using security APIs for tasks such as: cryptography, digital signing, authentication, access control, identity management   Persistence: -File I/O -Connecting to databases -Software patterns such as Repository, Data Access Object (DAO) - Object-Relational Mapping      On successful completion of this module students should be able to:  1 - Demonstrate an understanding of the fundamental principles of object-oriented programming and class relationships. 2 - Apply a range of object-oriented principles and programming language features to the development of applications.  3 - Apply techniques and practices for writing robust and secure code to the development of applications.  4 - Develop and test a complex object-oriented application that uses appropriate software patterns and persistent storage.      ", "Software Processes and Practice The relevant knowledge and understanding addressed by this module being a detailed coverage of the processes and practices used in the development and evolution of software systems. Coverage includes modern approaches to the software process such as Agile development. The importance of configuration management, source code control and the automation tools used to provide continuous integration is also covered along with the key role played by software testing in the creation of quality software systems. The module also covers software quality and process improvement issues.  The Practice of Software Development and Software Processes - The need for process and the history of software development processes - Principles that characterise successful software development practice - Factors that affect the choice of appropriate Quality Assurance methods that suit the organisation and the relevant projects - Hardware and software evolution cycles in the context of software often being an integral part of Engineering applications  Configuration Management and Source Code Control - The role of configuration management - Defect Tracking, Management and supporting tools  Software Testing - Testing techniques and practices  - Automated testing and test frameworks  - Integration of testing with automated build and defect tracking systems  - Software security testing tools and techniques Process Improvement Approaches and Quality Schemes  - Software Process Improvement concepts and frameworks - Software Quality, Quality Assurance, Assessing System Quality and the relationship to testing      On successful completion of this module the student should be able to:  1. Evaluate the processes and practices that are applied in the development and evolution of software systems 2. Examine the role of configuration management, continuous integration and the use of automation tools 3. Assess the importance of software testing in the development of quality systems 4. Analyse the concepts underlying software quality schemes and process improvement     ", "Secure Software Development Poor software design is at the core of many software vulnerabilities. This module equips students with deep knowledge and understanding of the risk to information security and the principles and skills of building secure software systems. Security is considered throughout the software development life cycle. Students examine the technologies that underpin software security and develop advanced skills in testing software for vulnerabilities and applying secure programming techniques.  Security objectives including authentication, authorization, access control, data integrity and non-repudiation.  Fundamentals of cryptography: symmetrical and asymmetrical encryption, e.g. Diffie-Hellman, Station-to-Station, Needham-Schroeder, Kerberos key exchange protocols, public key infrastructure (PKI) systems, digital signatures, Transport Layer Security, secure hash algorithms.  Secure Software Development Lifecycle: secure software requirements, secure software design, secure programming principles, security testing and secure deployment.  Secure Software Design Principles: securing the weakest link, defence in depth, diversity in defence, failing securely, least privilege, economy of mechanism, complete mediation, open design, separation of privilege, least common mechanism, psychological acceptability, fail-safe defaults.  Secure Programming Practices: input validation, output encoding, authentication and password management, session management, access control, cryptographic practices, error handling and logging, data protection, communication security, system configuration, database security, file management, memory management.  The use of off-the-shelf tools to analyse and secure software.   Trends in software security.      On successful completion of this module students should be able to:  1. Explain and discuss security objectives.  2. Explain and critically evaluate the technologies that underpin software security.  3. Critically analyse the software development life cycle and explain and discuss how security assurance can be incorporated into the software development life cycle.   4. Critically analyse security design principles.  5. Critically analyse the security of software systems and apply secure programming practices.     ", "COMP1111: \nPROGRAMMING (GOLD)  To introduce the theory, principles and practice of programming by means of the JavaScript programming language. \n\t\t\t To use JavaScript in the wider context of problem solving and software development.   The construction of simple programs in JavaScript. \n\t\t\t JavaScript for client-side and server-side web scripting \n\t\t\t Awareness of intellectual property issues for software including copyright, patents and open source licensing.   Interaction between JavaScript progams and the Document Object Model (DOM) \n\t\t\t\t Using control statements to loop and make decisions. \n\t\t\t\t Building collections of data within a program and using JavaScript Object Notation (JSON) \n\t\t\t\t Making programs robust through the use of exceptions and exception handling \n\t\t\t\t An understanding of the nature of imperative programming in the object-oriented style. \n\t\t\t\t A knowledge and understanding of good programming practice (for example, reuse, documentation and style) ", "Research Skills and Professional Issues This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.  The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.      On completion of this module the student should be able to:  Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.     ", "Systems Programming This module investigates the knowledge and skills necessary to program multi-module application and systems programs using operating system and API libraries. The syllabus covers Linux shell script programming, programming operating system features using standard libraries and basic network programming. The material is supported by systems programming exercises including the coding of operating systems utilities and the use of sockets programming to code a client-server application.  Operating System Commands and Shell Script Programming  Overview of mainstream operating system commands available from a command shell on Linux. Commands to access system documentation, administer file systems, administer processes, administer users and groups and search for data in files and a file-system. Programming with a mainstream operating system command shell to write system management utilities e.g. Bash. Constructs including wildcards, redirection, piping, signals, variables, command line variables, control structures  Low-Level Programming in C  Pointers and memory management  Unmanaged data-structures  Use of GNU C standard library  GNU C compiler options including linking API libraries   Operating Systems Programming  files and directory management inter-process communication process and thread management  Network Programming TCP synchronous sockets for a client-server architecture Approaches to the message boundary problem      On completion of this module, students should be able to:-  Use and program with an industry standard shell script language to automate system administration tasks and tasks related to software development.  Develop programs using an appropriate un-managed low-level compiled programming language.  Program features associated with modern operating systems i.e. files and directories, inter-process communication, processes and threads and network programming.     ", "COMP2181: \nTHEORY OF COMPUTATION  To introduce students to: important models of computation and how they are related. \n\t\t\t fundamental notions of computation such as 'computable' and 'efficiently computable'. \n\t\t\t and the design and analysis of efficient algorithms.   Models of computation \n\t\t\t Basic computability theory \n\t\t\t Algorithm design \n\t\t\t Computational complexity   To have an understanding of different models of computation and their relevance to computer science. \n\t\t\t\t To have an understanding of how algorithms can be used to solve fundamental problems within Computer Science. ", "Programming Paradigms Programming paradigms provide a way to classify programming languages based on their features. This module is concerned with the nature of programming languages and the appropriate uses of a range of languages, including their use in concurrent applications. It will equip students with a broad understanding of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module will focus in greater depth on the principles and techniques of functional programming, and on low-level programming using the capabilities available in an appropriate compiled language. The module also introduces a range of concurrent programming techniques and the support provided for these at operating system level and in high level languages. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.  Comparison of programming languages Type systems Parameter passing Paradigms: Imperative, Object-oriented, Procedural, Declarative, Functional, Logic, Concurrent  Code translation: Compilation, Interpreters Execution: Native code, Virtual machine Memory management: Manual, Automatic Constructs and core data structures  Functional programming Functional principles: Immutability, Pure functions Recursion and tail-recursive calls Functions: First-class functions, Lambda, expressions, Higher-order functions, Composition, Partial application, Closures, Currying, Folding, Streams and lazy evaluation Types Algebraic Data Types including option types and lists, Pattern-matching, Functors, Monads  Low level programming  Pointers and memory management Unmanaged data structures Using Operating System Libraries and functions: programming with standard libraries, calling from high-level code Network socket programming  Concurrent programming Processes and threads Controlling access to shared resources using mechanisms such as synchronized methods, mutexes and semaphores  Inter-process communication using shard memory and message passing. Concurrent programming models, e.g. futures/promises, actor model  Emerging trends in programming      On completion of this module, students should be able to:  1 - Explain the nature and applicability of a range of programming paradigms (including object-oriented, functional, procedural, declarative, concurrent) and programming language features (including type systems, constructs, compilation, execution, memory management)  2 - Demonstrate an understanding of the principles of functional programming and the use of techniques associated with these  3 - Demonstrate an understanding of the use of low level programming techniques in an appropriate compiled programming language.  4 - Demonstrate an understanding of the issues involved in concurrent programming including access to shared resources and message passing.  5 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques covered in this module     ", "Web Design Technologies The module builds on the concepts introduced in Web Design Fundamentals to provide students with the technical and software skills required to support the development of interactive data driven systems using a combination of server side and client side technologies.  Overview of Web services. Purpose and definition of Web services ( REST, SOAP) Consuming Web Services  Ajax Javascript, CSS and DOM  Asynchronous requests and callbacks Working with XML and JSON Server-side scripting. . Data binding  Connecting, building and accessing data sources / formats / services: ODBC/JDBC  SQL &amp; XML technologies  JavaScript Object Notation (JSON)   Overview of techniques and technologies required to integrate and display data: advanced CSS features media queries and alternate style sheets use of proprietary widgets  use of code libraries e.g. jQuery, Dojo, Twitter Bootstrap  Web application architectures 2/3 tier architectures MVC  Overview of Web frameworks and templates purpose of Web development frameworks  critical comparison of current frameworks purpose of Web templates critical comparison of current templates  design issues in working with framework and templates  Fundamentals of Security e.g. Client-side and Server-side programming based security (e.g. data validation / encryption) Database security inc. authentication and authorization      On completion of this module, students should be able to:  Critically compare a range of technologies for implementing data driven web sites  Apply appropriate client and server side tools and technologies to develop an interactive website which incorporates information from external source  Compare and contrast contemporary web development frameworks and Web templates     ", "Web Platform Development 2 This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.  Web platform architectures -n-tier-architectures -scalable/distributed architectures -RESTful architectures  Design patterns relevant to web applications, -Model-View-Controller -Dependency Injection   Server-side application design: -Business logic -Routing and URL design -Handling requests -Using MVC frameworks: models, views and templates, controllers -REST APIs: using request methods and headers, content negotiation including serialisation and de-serialisation, formatting responses  Client-side application design -Review of HTML, CSS, JavaScript and JavaScript libraries, DOM and event handling -View generation  Interfacing with external data sources and services -Database interfaces -Data in JSON format -Data from web services  The use of third party services, e.g. for authentication.  Testing, debugging and error handling. The use of test frameworks.  Web platform frameworks.   Session management, including distributed session management.   Performance management. -DNS management -Scaling -http cache specification -memcached (distributed in-memory cache) -edgecaching/CDN  Tool chains in the context of web application development.   Web application specific security vulnerabilities and their prevention. -Injection (SQL, JavaScript) -Cross-site scripting -Cross-site request forgery -Broken authentication and session management  Deployment and hosting.  Architectural comparison of large scale web application such as YouTube, Facebook or Twitter.      On completion of this module, students should be able to:  Critically appraise different web platforms.  Critically appraise different web architectures.  Critically appraise design patterns relevant to web applications and their components. Design, develop and deploy a web application with a web browser client, application logic implemented using the capabilities of a scalable web server platform and a database-driven backend leveraging external services such as authentication using appropriate tools and frameworks. Analyse web application security vulnerabilities and their prevention.     ", "Web Platform Development 1   ", "Work Based Project 2 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution  The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study to frame and follow a project plan that leads to a solution for a given project specification/design brief relevant to the student's chosen study pathway.  The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. The project will be undertaken on an individual basis, however, the work completed within the module is likely to require the GA to work with groups of individuals within the organisation. Therefore, the GA can assume the role of a project leader or significant project member carrying out a role of responsibility on the project. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project. Project specifications/design briefs are expected to be derived from the student's workplace. At this programme level the GA is expected to contribute significantly to the development and conduct of a project plan framed around a relevant development process for a well-defined problem area under direct supervision of a work based supervisor and a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.  The GA requires to work in a self-motivated way, coordinated with colleagues and within collectively defined schedules ,further developing confidence in their ability to work with others on analysing and creatively solving problems. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), GAs will also reflect upon strengths and weakness of the team and relevant professional and ethical issues introduced.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.   The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 62%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team dynamics, personalities and traits Meeting participation skills Listening, questioning skills Negotiation and assertiveness skills Critical thinking and decision making Giving and receiving feedback Coping with pressure Working with different cultures Stakeholder relationship management Landscape of legislative frameworks governing work and enterprise in the digital economy.   Project Lifecycle Management Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities Configuration Management and Source Code Control: the role of configuration management defect Tracking, Management and supporting tools  Software Testing:testing techniques and practices automated testing and test frameworks integration of testing with automated build and defect tracking systems software security testing tools and techniques Process Improvement Approaches and Quality Schemes Software Process Improvement concepts and frameworks Software Quality, Quality Assurance, Assessing System Quality and the relationship to testing  Careers and Employability Recruitment and selection processes Career planning Professional profile, digital Identity and the role of social media Professional bodies and societies Business and workplace ethics and professional issues - differentiating between good and bad employers and employees Internships and Placements      On successful completion of this module students should be able to:  1. Develop a project plan that applies an appropriate development lifecycle process and practices, and supporting developmental resources and tools (e.g. testing, versioning, configuration management, continuous integration and automation) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study.  2. Analyse the concepts underlying software quality schemes and process improvement.   3. Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making.  4. Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.    ", "COMP2211: \nNETWORKS AND SYSTEMS  To extend students' understanding of the principles and practices of programming and using different computer systems.   Distributed Systems: Technologies for coordinating a collection of networked systems and resources to work as a single large system, which include system architectures, distributed system programming, data replication, fault tolerance and load distribution. \n\t\t\t Networks: Technologies in supporting data communications, which include network architectures, protocols, and standards, addressing and routing methodologies, socket programming, and multimedia content transmission. \n\t\t\t Security: Fundamental principles of secure computing required to minimise the impact of adversaries against software systems and communications. \n\t\t\t Databases: Advanced design and query of databases across both structured and semi-structured data (XML), in addition to aspects of transaction and concurrency control.   On completion of the module, students will be able to demonstrate:   \n\t\t\t\t an understanding of the technologies used in setting up, supporting and using various computer networks and systems \n\t\t\t\t an understanding of using suitable programming principles and applications in computer networks and systems to solve practical problems \n\t\t\t\t an understanding of the core concepts of computer security, common attack vectors and appropriate countermeasures \n\t\t\t\t an understanding of the core principles of a good database construction, common concurrency issues and methods to guarantee correctness in concurrent transactions. ", "Web Design Fundamentals The aim of this module is to provide students coming from a digital design background with the knowledge, understanding and skills required to design interactive web sites and to implement these sites with respect to current publishing standards.  User needs analysis techniques: identifying target audience user centred web design concepts. Web design planning and documentation: site structure diagrams, wireframes. Technical fundamentals: HTML syntax CSS purpose and syntax including the box model, styling, layout and positioning of elements. Client / Server architecture Forms and form processing, basic server side scripting. Principles of good web authoring: separation of content from presentational attributes progressive enhancement authoring for accessibility, responsive design.  Design for interactivity Introduction to javascript syntax data types logic Document Object Model (DOM). The W3 DOM. Accessing, traversing and modifying documents via the DOM. CSS and event handling. Changing the presentation layer Changing the document's behaviour with event handling. Using 3rd party code libraries. Using libraries, such as jQuery, Dojo. Critical Review of current and emerging Web standards e.g. markup html 4.0, xhtml, html 5 styles CSS 2, CSS3 data interchange formats xml, json Contextual Issues: e.g. legal and copyright restrictions data protection accessibility Design Issues: graphic design techniques for web navigation models choice of file formats. Web authoring: using both simple text editors and industry standard authoring tools. Use of appropriate tools to support development and debugging.       On completion of this module, students should be able to:   1. Conduct a user needs analysis to inform the design of an appropriate solution to a project brief.  2. Construct a website using standard mark-up, which displays well across a range of devices.  3. Apply client side sampling to the development of interactivity.  4. Demonstrate an understanding of the systems technologies used to develop contemporary websites.      ", "Web Application Development 2 This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.  Web platform architectures and architectural styles: - n-tier-architectures - communication over HTTP - front-end and back-end functionality - REST - cloud functions  Web application architecture, including Model-View-Controller  Server-side web application design issues: - server-side scripts - request handling - business logic - validation - using MVC frameworks: models, views, controllers, routing and URL design, dependency injection  - session management - error handling and logging   Interfacing with data sources   Implementing web APIs   Web application security: - authentication and authorisation in web applications  - web application specific security vulnerabilities and their prevention, including injection (SQL, JavaScript), cross-site scripting, cross-site request forgery  Testing and debugging web applications  Deployment and hosting      On successful completion of this module, students should be able to:  1 - Demonstrate an understanding of web application architectures, frameworks and design 2 - Demonstrate an understanding of web application security vulnerabilities and their prevention 3 - Critically evaluate the use of the Model View Controller architecture in the development of web applications  4 - Design, develop, test and deploy a robust data driven web application utilising appropriate tools and frameworks 5 - Implement authentication to secure a web application using appropriate schemes and services       ", "Research Skills and Professional Issues (COM) This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.  The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection /DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.      On successful completion of this module the student should be able to:  1. Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools. 2. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study. 3. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies. 4. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives. 5. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study. 6. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.     ", "Introduction to Machine Learning  Content and aims \n                 \n                    Module overview\n                  The study and use of machine learning has enjoyed a huge increase in popularity in recent years and can be found in systems as diverse as medical diagnosis systems and self-driving cars. Many modern artificial intelligence systems are driven by machine learning algorithms. &nbsp; \n\n\n This module teaches the theory and practice of machine learning (also known as data mining or data analytics). You\u2019ll learn the best practice for running a machine learning project and learn the theory behind the most common techniques from regression to neural networks. &nbsp; \n\n\n Systems that automatically make decisions (often about people) based on historical data need to be transparent and fair. This module will also consider the ethical aspects of modern machine learning and how to apply it without bias or inequality.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  follow the correct methodology for building a machine learning solution;   evaluate machine learning algorithms to optimise their use for a given problem;   consider ethical and legal implications when implementing a machine learning solution.    ", "COMP1081: \nALGORITHMS AND DATA STRUCTURES  To introduce the theory and practice of problem solving in computing through the development of algorithms, and their associated data structures, for common computer science problems.     Machine models.   \n\t\t\t Pseudocode and control flow structures.  \n\t\t\t Basic data structures.   \n\t\t\t Paradigms and techniques.   \n\t\t\t Analysis of algorithms.   \n\t\t\t Basic sorting and searching algorithms.   \n\t\t\t Basic graph theory and graph algorithms.     On completion of the module, students will be able to demonstrate:  \n\t\t\t\t a knowledge of common data structures and their relative advantages and disadvantages   \n\t\t\t\t familiarity with common algorithmic techniques   \n\t\t\t\t an appreciation and knowledge of asymptotic notation.   ", "Programming 3 This module develops an understanding of common ways of structuring data to suit the needs of an application.  Standard algorithms are investigated and a range of functional programming ideas are utilised. An introduction to simple cipher algorithms is included.  The module aims to develop students as programmers who can select appropriate data structures, algorithms and techniques to best meet the requirements of a specific programming problem.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.  Data Structures: lists stacks queues sets maps trees graphs design patterns  Algorithms: searching sorting hashing traversal shortest path recursive compression Big O ciphers: e.g. substitution and transposition types  Design patterns: singleton builder factory adapter iterator locator comparator decorator template method Comparison of programming paradigms: Object-oriented Functional Procedural Declarative Logic Classifying languages  Functional programming: Lambda expressions first-class functions higher-order functions closures folding pattern matching Algebraic Data Types      On successful completion of this module, students should be able to:  1. Demonstrate an understanding of fundamental data structures 2. Demonstrate an understanding of algorithms commonly used when developing software systems 3. Develop and test an application which uses appropriate algorithms and data structures and applies suitable design patterns to implement specified requirements 4. Develop and test an application which uses a range of functional programming techniques to implement specified requirements    ", "Computer Security &amp; Networks  Content and aims \n                 \n                    Module overview\n                  Many of us use communications in our daily lives: from sending emails to sending pictures on WhatsApp; searching the web to streaming videos and music. How is this facilitated?&nbsp; \n\n\n A consequence for computer scientists aiming to develop modern secure software systems is that we are very likely to include a networking aspect to our code. This module aims to enable computer scientists to design appropriate network and protocol support into systems that will work in our increasingly networked world. &nbsp; \n\n\n Crucially, you\u2019ll learn how to write robust distributed software systems that operate correctly, with an expected level of performance and accuracy while maintaining secure communications.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  understand and know how to apply the key principles of computer security: confidentiality, privacy, authenticity, integrity, accountability and availability;   understand data communications principles;   open communications architectures;   understand communication services and protocols in current use, particularly on the internet.    ", "Operating Systems Concurrency and Distribution  Content and aims \n                 \n                    Module overview\n                  Computer Scientists developing software systems are often required to build systems that have concurrent and distributed components. Examples are everywhere - from high-performance computing, to cloud computing, and client/server architectures (much popular on the web) to automotive systems, to cite but a few. \n\n\n Rarely do we write code to operate in isolation. Our code must communicate and interact with other software components - often across the internet. \n\n\n Problems such as deadlock and synchronisation issues arise that cause faults to occur that you do not see in isolated working. This module aims to allow Computer Scientists to identify and apply appropriate techniques to design concurrent and distributed systems, mitigating the issues they present and write concurrent and distributed software systems that operate correctly. \n\n\n This module has a strong practical component, illustrating the theory. Assessment is through practical test and assignments, to be demonstrated and discussed with lecturers and the class. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate understanding of the concepts underlying concurrent systems;   demonstrate understanding of the concepts underlying distributed systems;   be able to construct concurrent &amp; distributed systems using a variety of tools and approaches, including distributed communications (sockets), remote procedure call mechanisms, and JAVA RMI;   being able to demonstrate the application of recognised best practices in concurrent and distributed system programming, autonomously, applying critical evaluation, when working under pressure or subject to time constraints, and being able to explain and justify your design and programming choices.    ", "Computer Architecture and Network Systems COMPSCI2027   This course introduces students to low level systems, particularly focusing on computer architecture and network communication levels. Their understanding of low-level systems should be used to bridge the gap between hardware operations and running code, which will strengthen their understanding of how computers work in general.     This course aims to develop the student's understanding of low-level systems and communications with the understanding that a deeper, richer understanding of these elements of computing will strengthen their understanding of the   high level  &nbsp;day-to-day systems that they are likely to encounter.     By the end of this course, students will be able to:  &nbsp;    1.   Define the structure and functionality in a computer system at range of levels  .  &nbsp;    2.   Describe how high-level language constructs run in assembly language and computer operating systems  .  &nbsp;    3.   Define the basic principles of network systems, the concepts of a protocol, and the importance of layering in the design in a network  .  &nbsp;    4.   Discuss how systems are   connected together  &nbsp;to form a network, how networks form an internet and how data is reliably delivered across the internet  .  &nbsp;    5.   Define common web protocols  &nbsp;  and how they run on the internet  .  ", "Computer Games Development  Content and aims \n                 \n                    Module overview\n                  Computer game development makes a large contribution to global economies. Most people in the developed world spend hours a week playing games of some form. &nbsp; \n\n This module provides an overview of 2D game development techniques such that by the end of the module, you\u2019ll be able to develop your&nbsp;own 2D games using core code libraries. &nbsp; \n\n The module allows free rein to your creativity: as long as you can back it up with programming skill. By the end of the module you\u2019ll be a much stronger programmer and those skills are transferrable into many different applications.&nbsp; \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  incorporate graphics, animation and sound components in the development of a playable 2D game;   use and extend the core elements of a 2D game engine;   integrate game components with the animation Loop;   use a tile map based approach to display and control user interaction across multiple levels;   make use of threads and sprites to drive the animation process.    ", "Introduction to Data Science  Content and aims \n                 \n                    Module overview\n                  Data flows around us all the time: how can we learn from this data, how are companies using it, and how does this affect our lives? \n\n\n In this module, students will start covering the principles of data science, learn how to apply such principles to solve data science problems, and, consequently, further develop your problem-solving skills.&nbsp; \n\n\n Precisely, you'll:&nbsp; \n\n\n \n\t learn about the CRISP-DM, a popular methodology for guiding data science projects;&nbsp; \n\t investigate the different types of data and data storage;&nbsp; \n\t look at the distinct possible problems related to the data and how to solve them (pre-process the data);&nbsp; \n\t learn how to actually process the data, which includes covering some machine learning approaches, such as decision trees and neural networks;&nbsp; \n\t look at different data visualisation, applications of data science, and data ethics.&nbsp; \n \n\n\n You'll be given practical experience of these topics using current software tools (such as Orange).&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  efficiently approach a data science problem using popular project methodologies;   critically analyse the best data format and storage for a given data science problem;   identify data-related issues (such as missing data) and solve them (pre-process);   extract useful information from the data using machine learning techniques;   use data visualisation approaches appropriately;   discuss the power of data analysis approaches and ethical issues related to data handling and analysis.    ", "Database Principles and Applications  Content and aims \n                 \n                    Module overview\n                  Most websites are about presenting information in a structured way to the user: think about, for example, any news website. The articles with their associated text and pictures are most likely stored in a database. You can search for items by keywords, and you get a list of all related articles: the system has matched your search text to article content. \n\n\n How is this achieved? Usually, there is a structured information source, and a scripting language to present the content. This module introduces you to two of the most popular technologies for creating such a website. \n\n\n Relational databases are ways of organising information. You\u2019ll cover ways to design a good structure, theories that confirm the structure is good (normalisation), practical implementation using SQL, including using this query language to retrieve the information. \n\n\n To create the web-based interface you\u2019ll meet PHP, a scripting language. PHP allows you to create web pages, to connect to databases and send instructions such as queries, and to display the information returned from queries. These are key skills for web implementation roles, but are also useful in many other technology careers. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate a practical and theoretical knowledge of Database Management Systems and their role in Information Systems in any context;   demonstrate the ability to design and implement a practical relational database using entity-relationship modelling and normalisation to give the data a regular structure;   demonstrate the ability to implement a practical relational database using SQL with a PHP interface;   demonstrate an understanding of the general principles of database management, including distributed databases and transaction processing;   be able to specify how the storage and processing of data is affected by data protection legislation, such as GDPR and FOI.    ", "Web Application Development 1 This module will provide students with the knowledge, understanding and skills required to develop Web Platform applications. A range of standards associated with Web development will be covered as well as the client server architecture specific to Web development.  Fundamental principles and concepts of the World Wide Web (Client Server architecture, browsers, HTTP protocol). Web Standard Technologies (such as, HTML5, CSS3) Website Content  Website Styling  Website Usability and Responsive Design Document Object Model (DOM) Client-side programming (JavaScript and JavaScript Libraries) Overview of Web Templates Web Application Security, Testing and Debugging Understanding of Data Formats (e.g. text, CSV, XML and JSON) Use of 3rd Party APIs (e.g Facebook, Google, Twitter)      On successful completion of this module, student should be able to:  1. Demonstrate a broad understanding of standard web technologies and protocols 2. Demonstrate an understanding of web application security, vulnerabilities and mitigations 3. Apply current and emerging web standards to the creation of a website 4. Apply client-side scripting in the development of interactive web pages      ", "Software Engineering II  Content and aims \n                 \n                    Module overview\n                  Modern societies and economies rely on computer software in order to function effectively. Sofware Engineering involves the practical application of the principles of computer science to develop high-quality software that is reliable, efficient, and meets the needs of its users. \n\n As a core third year Computing Science module, you\u2019ll explore topics including:&nbsp; \n\n \n\t object oriented software implementation; \n\t software engineering mathematics and specification; \n\t software project management. \n \n\n A key feature of the module is a group software implementation project. The module also includes student-led presentations on selected topics in Software Project Management. \n\n The module is taught in person on campus with some online sessions. There will be a mix of pre-recorded lecture videos; in-person lectures, tutorials, practical classes and online drop-in sessions for getting extra help. \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  understand and apply the principles and practice of large scale software implementation, including the translation of software design notations into code, software refactoring, and software testing;   understand and apply the principles and practice of using design patterns in software implementation;   understand and apply the principles and practice of collaborative software development;   understand the principles of Formal Specification and have a basic ability to use a Formal Specification notation and tool;   be aware of current ideas and good practice regarding Project Management and Quality Assurance in the context of software development.    ", "Distributed Data Science Systems  Content and aims \n                 \n                    Module overview\n                  When the size of a data collection exceeds the capacity of a single computer, the choices are to scale up by buying a bigger computer or to scale out, by adding more cheap computers to a cluster and distributing the data across them. &nbsp; \n\n This module covers methods for how this data is split up across a cluster and how it can be subsequently processed as a single task across the cluster using tools such as Hadoop and Spark. It will involve understanding and developing solutions to typical concurrent and distributed data processing tasks using the Map/Reduce design pattern and the Python programming language. &nbsp; \n\n At the end of the module, you will have a better understanding of how companies such as Google, Facebook and Spotify process and analyse vast data repositories using these distributed processing frameworks.&nbsp; \n\n The module is delivered via lectures that will cover the core principles and practicals that put this theory into practice. These classes are further supported by live Q&amp;A sessions that enable the class to come together and discuss general points regarding both theory and practice. &nbsp; \n\n You\u2019ll be assessed via a practical programming assignment in Python that requires you to propose solutions to novel distributed data processing problems. \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  discuss the need for distributing processing across a cluster of computers;   discuss the difference between distributed data processing and distributed computation;   use HDFS and program Map/Reduce jobs for Hadoop related to a data science problem.    ", "Code Analysis and Performance  Content and aims \n                 \n                    Module overview\n                  Creating good software is not just about writing code. It's also about understanding how that code executes, identifying errors, pitfalls and bottlenecks, and using tools to analyse software performance. &nbsp; \n\n\n This module will explore several important concepts that will underpin more advanced topics later on, and provide a solid foundation for implementation of real-world software.&nbsp; \n\n\n You\u2019ll explore topics including:&nbsp; \n\n\n \n\t compilers&nbsp;\u2013&nbsp;how code is scanned and parsed, how it's mapped to machine code and allocated to physical memory, and optimisations that are applied at compile-time;&nbsp; \n\t performance profiling&nbsp;\u2013 how we can inspect running code and determine where it consumes the most CPU time and memory;&nbsp; \n\t build tools and version management;&nbsp; \n\t comparing the performance of different languages;&nbsp; \n\t writing more readable, maintainable code.&nbsp; \n \n\n\n You'll be given practical experience with industry standard tools such at Git, Gradle, and VisualVM; the compiler parts of the course will focus on a toy language designed for learning. Practical exercises largely focus on Java, but other languages will be brought in occasionally for comparisons.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  use appropriate tools to find and fix code errors (compile and execution);   interpret and act on error messages given by software development tools;   use appropriate tools, analyse the performance of a software programme;   use performance appropriate code constructs when writing software;   discuss the applicability of different programming languages to different types of problems.    ", "Managing Information  Content and aims \n                 \n                    Module overview\n                  Are you interested in learning how to manage information using Java object-oriented programming? Want to gain practical knowledge data representation with JSON and XML? \n\n Managing Information is an exciting module that will equip you with the essential skills to manage information in today's fast-paced digital world. \n\n In this module, you'll cover a wide range of core subjects, including: \n\n \n\t object-oriented concepts and their practical use such as inheritance, polymorphism, and dynamic binding; \n\t writing simple programs that manipulate files and strings in Java; \n\t searching and utilising the Java collections framework; \n\t common threats to data security, and approaches to improving security including symmetric and public key cryptography; \n\t understanding the nature and purpose of markup languages generally; \n\t demonstrating the use of XML and JSON for data representation.&nbsp; \n \n\n By the end of this module, you'll have a solid understanding of the key concepts and practices of managing information through object-oriented programming in Java, and be well-equipped to manipulate, represent, and secure data effectively in any professional context. \n&nbsp; \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  display understanding of object-oriented concepts and their practical use such as inheritance, polymorphism and dynamic binding;   write simple programs that manipulate files and strings in Java, and search and utilise the Java collections framework;   describe common threats to data security, and approaches to improving security including symmetric and public key cryptography;   discuss the nature and purpose of markup languages generally;   demonstrate the use of XML and JSON for data representation.    ", "Systems  Content and aims \n                 \n                    Module overview\n                  This module presents an overview of the various layers that allow a modern computer to work. You\u2019ll look at the design of logic components that allow the elementary steps of computation, the structure of hardware, the organisation of the operating system as a manager of a computer and its resources. &nbsp; \n\n\n Crucially, you\u2019ll explore the C programming language, that is one of the closest to the actual working of a computer, forcing the programmer to \"think\" similarly to what a computer would do.&nbsp; \n\n\n Systems and the C programming language underlie a great deal of computer work \u2013 this ranges from dedicated computers in equipment like cars, washing machines and radios to smartphones, or more traditional laptops or desktop machines, right through to supercomputers. Professionals in the computer industry need this knowledge to function effectively. &nbsp; \n\n\n The module requires some basic understanding of how a computer works and programming language operates. Assessment includes tutorials and guided exercises, according to a practical hand-on approach, and more extensive assignments (which may include written exams and/or short projects).&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  develop simple programs in C, focussing on lower-level systems details;   explain the connection and constraints imposed between hardware and software;   explain foundational concepts of computer organisation and operating systems;   discuss and explain developed solutions to programming problems and evaluate those solutions.    ", "CS322 - DTSP Work Based Learning 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Participants will undertake the following.&nbsp; Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Produce personal development plans.&nbsp;  Maintain a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp; Produce evidence that they meet a set of competencies defined by a recognised professional body.  After completing this class participants will be able to:&nbsp; Demonstrate reflective work practices.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate their understanding and application of digital and technology solutions concepts within their work-place.&nbsp; ", "Programming Language Paradigms  Content and aims \n                 \n                    Module overview\n                  There are hundreds of programming languages, and new ones being developed all the time. A key skill for tech employees is to be quick to learn new languages, both for reading and fixing existing code and writing new code. This module will help you develop that skill. \n\n You\u2019ll explore the core concepts underlying programming language design, including practical experience across several language types. Concepts include: \n\n \n\t Data types \n\t Storage allocation and pointers \n\t Procedure calls \n\t &nbsp;Concurrent processes \n\t Syntax and semantics \n \n\n You\u2019ll develop a deeper understanding of how programming languages work, and think critically about how language design supports programming. \n\n Knowing more about the fundamentals of programming languages will improve your own programming skills, in languages you already know as well as languages you are about to learn. \n\n Practical labs explore basic concepts in several programming languages, exposing you to some unfamiliar languages. Seminars train critical thinking through guided discussions. The module challenges students to become confident and independent learners. \n\n Learning materials are available on Canvas and include slides, lecture videos, guides to reading material, seminar and practical worksheets. In addition to the weekly in-person seminars and practical labs, there are weekly drop-in sessions for support. \n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  explain the principal programming language concepts and the way they are dealt with in the imperative, declarative and concurrent language paradigms;   explain underlying principles behind language design and interpret their application in a range of programming languages;   demonstrate how implementation arises from those underlying principles, or vice versa, including an explanation of the runtime system of common languages and memory allocation techniques;   describe the central role of data structures in language design, and illustrate how data structure interfaces provide abstraction, information hiding and encapsulation;   employ regular expressions and formal grammars (context-free and regular grammars) for sentence generation and parsing.    ", "UX Design  Content and aims \n                 \n                    Module overview\n                  Have you ever used a computer and not been able to make it do what you wanted? Perhaps you couldn't find the right button or tool? Or maybe what you thought was the right action did something you didn't expect. User Experience (UX) Design is all about how we build computer interfaces that work for humans in all their wonderful diversity. &nbsp; \n\n\n You\u2019ll learn the design theory behind how computers and people communicate (human-computer interaction) as well as consider the quirks and limitations of human perception. Everyone has examples to illustrate the theory: start thinking now about the best and worst interface design you've encountered. &nbsp; \n\n\n The theoretical work underpins practical exercises in designing, building and testing an interface. Our goal should always be to facilitate easy and successful interactions between people and their computing devices. This module shows you how. \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  demonstrate critical knowledge of the core concepts in user experience design, also known as human-computer interaction (HCI), and basic cognitive psychology topics relating to HCI;   analyse the user interface needs for general and specialised real-world software systems and interactive multimedia;   design user interfaces with a strong focus on the visual aspects of information presentation and satisfying, error-free, user experience, critically-relating design decisions to user characteristics;   design and justify a broad range of appropriate user testing of an interface, and identify and implement a practical subset of those tests;   demonstrate integrated knowledge of the common techniques and tools for representing and manipulating multimedia components (audio, visual, interaction) on digital computers and the relative advantages of each approach;   synthesise practical skills and knowledge by designing and implementing a multimedia user experience.    ", "Software Engineering I  Content and aims \n                 \n                    Module overview\n                  Modern societies and economies rely on computer software in order to function effectively. Software Engineering involves the practical application of the principles of computer science to develop high-quality software that is reliable, efficient and meets the needs of its users.&nbsp; \n\n\n This module gives an introduction to:&nbsp; \n\n\n \n\t software engineering; &nbsp; \n\t requirements capture and analysis; &nbsp; \n\t object-oriented development in UML; &nbsp; \n\t project management;&nbsp; \n\t professional issues. &nbsp; \n \n\n\n The module focusses on a practical understanding of the Software Engineering life-cycle and how software projects are planned and managed, together with practical skills in methods and tools for software design and testing. Particular attention will be given to object-oriented development using UML for information and system modelling. Crucially, you\u2019ll become familiar with the issues and consequences of being a professional software engineer, including aspects related to team work and risk management.&nbsp; \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  understand the software engineering life-cycle;   know how software projects are planned and managed;   have practical skills in methods and tools for software design, with particular reference to object-oriented development using UML for information and system modelling;   understand what it means to be a professional software engineer and the role of professional societies and Codes of Conduct;   appreciate issues around team working and gain practical experience of working as part of a team.    ", "COMP1051: \nCOMPUTATIONAL THINKING  To introduce students to fundamental concepts from Computer Science and give students an appreciation of the breadth of Computer Science and how different topics relate to one another. \n\t\t\t To give an awareness of the importance of computation and computational thinking in the modern world and the impact it has on technology advances and areas not immediately associated with Computer Science.   \n\t\t\t To introduce students to the application of computational thinking in a range of settings across Computer Science.   Basic architectural components of a PC. \n\t\t\t Different programming paradigms and how high-level programs are converted into machine code. \n\t\t\t Basic operations of the operating system. \n\t\t\t Propositional logic. \n\t\t\t Different computational problems, some solution methods to common problems and the notion of an algorithm. \n\t\t\t The notion of a computer and its formalism. \n\t\t\t The measurement and efficiency of solutions. \n\t\t\t Intrinsic complexity barriers and how to cope with them in practice. \n\t\t\t Ethical aspects of computing. \n\t\t\t A basic general-purpose high-level programming language and the implementation of programs in this language to implement examples of computational thinking in a variety of settings.   On completion of the module, students will be able to demonstrate: an appreciation of how hardware and software combine so as to execute compute programs \n\t\t\t\t an understanding of fundamental notions relating to problems and their solution in Computer Science  \n\t\t\t\t an appreciation of the role of Computer Science and computational thinking in the modern world \n\t\t\t\t an understanding of several approaches to solving fundamental computational problems \n\t\t\t\t an appreciation of the practical limitations of computers and computation. ", "COMP2281: \nSOFTWARE ENGINEERING  To gain a detailed understanding of the phases of the software development lifecycle; appreciate the problems that are associated with each of the phases, and be able to identify best practice for their solution. \n\t\t\t To understand the issues surrounding the project management activities required for the development of a significant piece of software within a team environment and gain an appreciation of the complexities and impact of legislation on the professional work environment.   Software development practices: development models including Agile \n\t\t\t Requirements discovery and analysis \n\t\t\t Software Design \n\t\t\t Software Testing \n\t\t\t Human Computer Interaction \n\t\t\t Software Quality and Process \n\t\t\t Project Management \n\t\t\t Legal and Social Issues   To have knowledge of current software development practices that is relevant and applicable to software development in industry \n\t\t\t\t An appreciation of the challenges facing the software development industry in terms of the software development practices, processes and management \n\t\t\t\t Have an understanding of basic project management theory and techniques \n\t\t\t\t Be able to describe and analyse how each of the issues within software engineering interrelate \n\t\t\t\t Have a detailed understanding of the important legal, ethical and moral issues relating to the building and use of computer applications ", "Introduction to Data Science This module will introduce the development of software programming skills used for data science using an appropriate programming language. The module will give the student the opportunity to explore software development methods for the key aspects of data science such as data capture, wrangling, analysis,  processing and data visualisation. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.  Data Science basics - Matrix and Vector Representations Python Data Science Software Ecosystem: Numpy - SciPy - SciKitLearn - Matplotlib - Pandas  Exploratory Data Analysis Basic Statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance. Hypothesis testing, Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value Data Manipulation: Software implementation using Pandas Data Visualization: Software implementation using Matplotlib Data Science Applications - Statistical Models - Analysis Techniques - Line Fitting - Prediction - Applying Algorithms - Forecasting Introduction to Machine Learning - Classification and Regression       On successful completion of this module students should be able to:  1. Demonstrate familiarity with the problems and issues surrounding real world data sources 2. Apply filtering, cleaning and transformation techniques to data 3. Understand how probability theory and statistical methods are applied to data 4. Detail how the output of statistical models are interpreted to form an insight into data 5. Understand the basics of Machine Learning including Classification and Regression 6. Implement Data Science methods in an appropriate software programming language     ", "CS103 - Machines, Languages &amp; Computation To help students to achieve a broad knowledge of the essence of computation and computational systems, as embodied by the notions of computable functions, formal languages and recursion, logic and computability and abstract machines.  Computable and Non-Computable Functions: an introduction to the ideas of functions, computable functions, infinite sets of different cardinalities and the symbolic derivation of theorems, leading up to a proof of the existence of non-computable functions; an introduction to symbolic systems and the notion of theoremhood in such a system; the idea of lambda-calculus as a notation for computable functions; the relationship between computable functions and computer programs.  Recursion and Languages: a first look at context-free grammars and the idea that finite grammatical rules can capture infinitely many strings through recursion; the idea that recursion can be used in functions and in logical rules and definitions; an introduction to formal languages and the specification of grammatical rules to capture the structure of a given language; recognising and understanding recursive definitions; proof by structural induction.  Logic and Computability: introducing the propositional calculus as a set of symbolic rules and proving theorems in propositional calculus by natural deduction; lambda-calculus as a notation for proofs; the notions of soundness and completeness for a symbolic system; the idea of a decision procedure and a decision procedure for theoremhood in the propositional calculus; the three classes of problems: tractable, intractable and undecidable; the P=NP question.  Abstract Machines: finite state machines as simple abstract models of computation with some examples; what finite state machines can\u2019t do and an example; adding memory to a finite state machine to form a Turing machine; Turing machines as computable function boxes; the idea of the Universal Turing machine; the Church-Turing thesis: the limits of computational power; some examples of some undecidable problems.  On completion of this class, a student should be able: To understand the difference between computable and non-computable functions and to demonstrate that non-computable functions can exist.  To understand the concept of a formal language for specifying structures and the concept of recursion in both grammatical rules and function specifications.  To understand the concept of a rewriting system for symbolic manipulation and to produce derivations using such a system.  To understand the propositional calculus as a set of symbolic rules, and to derive theorems in the propositional calculus using these rules.  To understand the difference between tractable, intractable and undecidable problems and to understand what a decision procedure is.  To understand the concept of an abstract machine for performing computation, with reference to finite state machines and Turing machines. ", "Information Security As more and more personal and professional information is moving online, the attacks that target that information are growing in both number and sophistication. Keeping information secure online is increasingly important. Understanding the basic principles of information security will give students the knowledge required to tackle emerging threats.  Pre-Requisite Knowledge: Programming 2, Database Systems Development, Fundamentals Software Engineering or equivalent. Defining Information Security Identification and Authentication Authorization and Access Controls Auditing and Accountability Cryptography Data protection, Compliance, Laws, and Regulations Operations Security Human Element Security Physical Security Network Security Operating System Security Mobile, Embedded, and Internet of Things Security Application Security Assessing Security.      On successful completion of this module students should be able to:  1. Explain and discuss information security principals 2. Explain and critically evaluate the technologies that underpin information security.  3. Critically analyse information security systems      ", "Modern Web Stack Development module (CS22002) Familiarity with the modern web stack is not just for \"making websites\" but benefits developers across the job market.The web is no longer just HTML and CSS. Modern websites combine a number of technologies and scripting languages to create web applications that are fast, reliable, and scalable.Apps which previously ran natively on desktop computers, such as Microsoft Excel, are now also web based. New Progressive Web Apps use web technology to create cross-platform apps faster and easier than compiling native code for many systems.The web development landscape is constantly evolving, with new technologies and frameworks being developed all the time. Understanding modern web stack development enables you to stay current with the latest technologies and take advantage of their benefits.   learn how to develop and test web applications using modern full-stack development techniques \n develop applications using cutting-edge web frameworks \n explore current trends in modern web development \n develop an understanding of how applications are made secure  understand how client-side, server-side, and storage solutions connect to form a full-stack web applications \n engage in the development of a dynamic web application using a modern full-stack development approach \n show your ability to apply problem-solving, communication, and team-working to create web applications ", "Database Systems module (CS22001) Data drives the modern world, with the amount of information in our databases growing exponentially each year. Whether you want to develop cutting-edge applications, extract valuable information from large datasets, or optimise business processes - a good understanding of database systems is key.This module will provide you with a solid foundation in the design and implementation of relational databases. The relational database model is one of the most prevalent database architectures in the industry.You will further study Structured Query Language (SQL), which is used to interact with and modify the data in your databases.   study the concepts of relational database models and their importance today \n learn how to design relational database solutions using ER diagrams \n learn about transaction management and how to write queries in SQL \n study how to evaluate a database solution \n investigate the concepts of data warehousing and data mining, and how to design and implement database solutions for them \n explore alternative database models, such as hypermedia or real-time databases \n investigate the legal and professional issues relating to databases \n use these skills to design and implement your own database solution  specify, design, and implement a professional database solution \n evaluate and address qualitative aspects of database solutions \n compare and contrast different database models \n demonstrate your understanding of legal and professional issues relation to databases, such as data protection legislation \n apply these skills to real-world scenarios ", "User Interface Design module (CS22003) User interfaces (UIs) are how users interact with our applications. It is vital to be able to present our applications in an appealing way to ensure that they are easy and appealing to use.This module explores contemporary user interface design and looks closely at how certain design elements affect the user experience.You will study important concepts of interface design, and put them into practice using prototyping tools like Figma.   explore the history and evolution of Graphical User Interfaces (GUIs) \n examine the role of common design components, such as icons, widgets, and menus \n learn about different interfaces and interactions, such as touch, gesture, voice, and haptic feedback \n examine the concept of \"Dark UX\" and how it can be used to manipulate user behaviour \n study atomic design principles used to create consistent and scalable UI design systems \n learn how to create reusable design components \n study scientific research articles relating to user interface design and critically analyse them \n learn how to use high-fidelity prototyping tools, such as Figma, to create design libraries for prototyping \n explore how to design and test user interfaces for different contexts, and compare the effectiveness of different interface elements  demonstrate your ability to create effective UI designs \n design libraries for high-fidelity prototyping \n discuss the development of user interface designs for different contexts and purposes \n explore how users interact with different types of interfaces \n critically analyse research papers ", "Introduction to Software Development module (CS11002) Software development is the process of designing, building, testing, and maintaining software applications.The process typically involves several stages, including requirements gathering, design, implementation, testing, and maintenance.This introductory module will allow you to develop core skills in software development. This will make sure that everyone in the class is has a shared understanding of these skills, whether or not they have studied computing previously.   build the foundational skills to design and develop software \n learn about data types and variables \n study objects and classes \n learn the importance of considering users and their requirements in the software development process \n learn to identify user needs and design software that meets those needs effectively  demonstrate a strong understanding of software development fundamentals \n declare and assign values to variables, and use them correctly in your programs \n define classes, create objects from those classes, and use them in your programs \n understand the core concepts of object-oriented programming and its benefits \n demonstrate practical skills by creating your own Java software programs \n build upon valuable experience in software development ", "Undergraduate Course: Operating Systems (INFR10079) This course provides an introduction to the design and implementation of modern general-purpose operating systems. It concentrates on the operating system kernel with the emphasis being on concepts that lead to practical implementations. Throughout the course reference is made to a number of widely-adopted general-purpose operating systems (including Linux, Windows, and OS X) to illustrate real implementations. An educational operating system is used for the coursework. The OS Kernel \n*Micro and Monolithic kernels \n*Multi-tasking, multi-user \n*Interrupt handling, system calls \n \nProcess Management \n*The process concept \n*The thread concept \n*Inter-process communication \n \nTime Management \n*CPU scheduling algorithms \n \nResource Management \n*Synchronisation, mutual exclusion \n*Semaphores, and monitors \n*Deadlock prevention, avoidance, and detection \n \nMemory Management \n*The problem of allocation, protection, and sharing \n*Physical and virtual memory \n*Paged virtual memory \n \nStorage Management \n*Storage technologies \n*File Systems \n \nVirtualization  \n*Virtual Machines \n*Containers \n \nRelevant QAA Computing Curriculum Sections: Operating Systems On completion of this course, the student will be able to:\n     \n         describe the structure and components of modern operating systems  explain the abstract concepts and concrete implementations of operating systems  compare and contrast the differing approaches taken by various operating systems  evaluate the suitability of differing approaches in different application domains  design OS components to address particular needs \n     ", "Embedded Systems Development and Networking module (CS12001) Today, technology is all around us. Many devices and appliances we use in day-to-day life are connected through the Internet of Things (IoT), which allows them to communicate and work together.In this module, you will study the two underlying fields of IoT, Embedded Systems and Networking, and create tangible applications and interfaces first-hand using this knowledge.In Embedded Systems, you will learn to how computer systems within modern products and devices work, how to develop for them, and how you can create your own tangible experiences.In Networking, you will study the technology that allows these devices to communicate and the rules that network communications follow.   learn about the fundamentals of embedded systems \n explore key concepts in embedded system development and apply them using the Raspberry Pi platform \n study sensors and actuators, and learn how they can be used to create tangible experiences \n investigate the Internet of Things (IoT) and how it connects embedded systems to the wider Internet \n study fundamental networking concepts, including the Open Systems Interconnection (OSI) and TCP/IP network layer models \n learn how wired and wireless networks work \n explore various networking protocols used on local networks and the Internet  demonstrate your understanding of key concepts related to embedded systems development \n use the Raspberry Pi platform to create tangible applications, and evaluate them \n describe the layers of the OSI model and its relation to TCP/IP \n understand and investigate networking protocol operation and specification, including those used on the Internet ", "Undergraduate Course: Introduction to Linear Algebra (MATH08057) An introduction to linear algebra, mainly in R^n but concluding with an introduction to abstract vector spaces.  \n \nThe principal topics are vectors, systems of linear equations, matrices, eigenvalues and eigenvectors and orthogonality. The important notions of linear independence, span and bases are introduced.  \n \nThis course is both a preparation for the practical use of vectors, matrices and systems of equations and also lays the groundwork for a more abstract, pure-mathematical treatment of vector spaces. \n \nStudents will learn how to use a computer to calculate the results of some simple matrix operations and to visualise vectors. This syllabus is for guidance purposes only: \nThe course will have a range of student-focused activities equivalent to approximately three lecture-theatre-hours and a 90 minute Example Class per week. The course contents are given in the course textbook, Nicholson, predominantly Chapters 1 to Chapter 5, and the start of Chapter 8, with a selection (not all) of the applications covered and selected topics omitted. \n- Vectors in R^n, and in general. Vectors and geometry \n- Systems of linear equations, echelon form, Gaussian elimination, intro to span and linear independence. \n- Matrices, multiplication, transpose, inverses, linear maps. Intro to subspaces and bases. Rank.  \n- Eigenvalues and eigenvectors. Determinants \n- Orthogonality, Gram-Schmidt, orthogonal Diagonalization. \n- Introduction to abstract vector spaces and subspaces.  \n- Selected applications (taught in sequence where appropriate)  \n  On completion of this course, the student will be able to:\n     \n         Solve systems of linear equations and demonstrate an understanding of the nature of the solutions.  Perform accurate and efficient calculations with vectors, matrices, eigenvalues and eigenvectors in arbitrary dimensions.  Demonstrate a geometrical understanding of vectors and vector operations in 2 and 3 dimensions.  Demonstrate an understanding of orthogonality and projection in arbitrary dimensions.  Argue in a formal style (definition/theorem/proof or use examples) about statements in linear algebra, as the first step towards a more abstract, pure-mathematical treatment of vector spaces. \n     ", "Mathematics for Computer Science module (CS11003) Mathematics provides the underlying framework for many common problems in Computer Science, ranging from algorithm design to cryptography and machine learning.Studying the fundamental mathematical concepts behind various concepts in computing will allow you to improve your problem-solving skills and learn how to apply mathematics to approach these tasks.In addition to studying the theory behind these concepts, you will put them into practice programmatically using Python. This will teach you to perform complex calculations using code and to work with common libraries for mathematical programming, such as matplotlib or pandas.   functions and calculus, including 2D and 3D plotting, limits, differentiation, and vector calculus \n linear algebra, including vector and matrix operations, determination and properties, and 2D and 3D transformations \n optimisation, including least-squares and gradient-based methods \n probability and statistics, including probability calculus, distributions and densities, expectations, sampling, and Bayes' rule  demonstrate your understanding of the mathematical concepts relevant to Computer Science \n understand where in computing these mathematics are of importance \n apply your knowledge of mathematics in problem solving \n read and interpret mathematical descriptions underlying various methods in computing ", "Undergraduate Course: Advanced Database Systems (UG) (INFR11217) This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead. This course follows the delivery and assessment of Advanced Database Systems (INFR11199) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11199 instead. On completion of this course, the student will be able to:\n     \n         describe how database management systems function internally. Interpret and comparatively criticise database systems architectures  implement major components of a database management system and analyse their performance  analyse and compare the fundamental query evaluation and concurrency control algorithms, identify strengths and weaknesses of query evaluation plans, and optimise query evaluation plans  identify trade-offs among database systems techniques and contrast distributed / parallel techniques for OLTP and OLAP workloads \n     ", "Introduction to Data Structures and Algorithms module (CS12002) This introductory module is designed to teach you the fundamental concepts of the Java programming language, algorithm design and data structures.You will study the basics of Java syntax, its data types and control structures, and learn to develop using object-oriented programming (OOP) principles. With this knowledge, you will be able to write your own programs in Java.You will explore iterative and recursive algorithm design using Java, and implement commonly used data structures.These skills are essential to develop efficient and effective solutions to various problems.   explore the Java programming language and learn about its syntax, data types, and control structures \n study commonly used data structures, such as linked lists, stacks, queues, sets, and binary trees \n implement data structures from scratch \n learn about algorithm design and implementation, including recursive programming techniques \n explore multithreaded programming and Graphical User Interfaces (GUIs)  define and implement commonly used data structures in programming \n compare and contrast data structures \n compose efficient solutions to problems through appropriate data structure designs \n design and apply algorithms \n understand the difference between iterative and recursive algorithms, and use them appropriately \n develop multithreaded applications and GUIs ", "Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130) Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods. \n \nThis is an advanced course. Students should not choose this class without the required background (see \"Other Requirements\" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211). The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable. \n \n- Classification and Regression: \n                  Linear Regression, logistic regression, Bayes classifiers \n- Expanded feature representations:  \n                  Basis functions, neural networks, kernel methods \n- Generalization, regularization and inference:  \n                  Penalised cost functions, Bayesian prediction, learning theory \n- Model selection, pruning and combination:  \n                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods. \n- Representation and metric learning:  \n                  Dimensionality reduction, clustering, feature learning \n \nTo support these topics we will also cover: \n- Optimization and Inference algorithms:  \n                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required. \n- Practical issues:  \n                   Formulating problems as machine learning, adapting methods to fit problems.  \n                   Numerical and programming issues important for machine learning. \n                   Ethical issues, such as responsible application of methods and privacy concerns. On completion of this course, the student will be able to:\n     \n         frame an applied problem as a machine learning task, identifying appropriate methods  critically compare and contrast alternative machine learning methods for a given task  derive and motivate novel variants of machine learning methods  create accessible and useful explanations of the workings and failure modes of machine learning methods  check and refine implementations of learning algorithms, while applying them in practice \n     ", "CS411 - Theory of Computation Building on the previous material in software development, to extend and to formalise the student\u2019s abilities in the area of computational complexity. Introduction: the need for formality in the analysis of problems in computation.Computation by Abstract Machines: classification, finite automata, deterministic and non-deterministic machines, Turing Machines, the halting problem, solvable, semi-solvable and unsolvable problems.Analysis of Algorithms and Complexity Theory: Measuring complexity of algorithms, Big-O and Small-o notations, analysing certain algorithms, polynomial time algorithms, the PATH problem, tree searchers (depth-first search &amp; breadth-first search), the HAMPATH problem, the Composites problem, the class NP, polynomial time reducibility, the CLIQUE problem, NP-completeness, the Cook-Levin Theorem. On completion of the class, a student should be able: to categorise abstract machines and to construct machines appropriate to specific problems  to display an understanding of the merits and limitations of the analytical techniques of software development  to recognise the significance of complexity classes and analysis and to deduce the complexity of certain types of algorithm  to demonstrate a deeper and broader understanding of classes of complexity and of the ability to deduce the complexity of specific algorithms  to display an extended ability to determine the complexity of software by the application of analytical techniques  to demonstrate practical competence in the range of issues associated with the class ", "Undergraduate Course: Foundations of Natural Language Processing (INFR10078) This course covers some of the linguistic and algorithmic foundations of natural language processing (NLP). It builds on algorithmic and data science concepts developed in second year courses, applying these to NLP problems.  It also equips students for more advanced NLP courses in year 4. The course is strongly empirical, using corpus data to illustrate both core linguistic concepts and algorithms, including language modelling, part of speech tagging, syntactic processing, the syntax-semantics interface, and aspects of semantic and pragmatic processing. The theoretical study of linguistic concepts and the application of algorithms to corpora in the empirical analysis of those concepts will be interleaved throughout the course. An indicative list of topics to be covered include: \n \n1. Lexicon and lexical processing: \n* morphology \n* language modeling \n* hidden Markov Models and associated algorithms \n* part of speech tagging (e.g., for a language other than English) to illustrate HMMs \n* smoothing \n* text classification \n \n2. Syntax and syntactic processing: \n* the Chomsky hierarchy \n* syntactic concepts: constituency (and tests for it), subcategorization, bounded and unbounded dependencies, feature representations \n* context-free grammars  \n* lexicalized grammar formalisms (e.g., dependency grammar) \n* chart parsing and dependency parsing (eg, shift-reduce parsing) \n* treebanks: lexicalized grammars and corpus annotation  \n* statistical parsing \n \n3. Semantics and semantic processing: \n* word senses: regular polysemy and the structured lexicon; distributional models; word embeddings (including biases found) \n* compositionality, constructing a formal semantic representation from a (disambiguated) sentential syntactic analysis. \n* predicate argument structure \n* word sense disambiguation \n* semantic role labelling \n* pragmatic phenomena in discourse and dialogue, including anaphora, presuppositions, implicatures and coherence relations. \n* labelled corpora addressing word senses (e.g., Brown), semantic roles (e.g., Propbank, SemCor), discourse information (e.g., PDTB, STAC, RST Treebank).  \n \n4. Data and evaluation (interspersed throughout other topics): \n* cross-linguistic similarities and differences \n* commonly used datasets  \n* annotation methods and issues (e.g., crowdsourcing, inter-annotator agreement) \n* evaluation methods and issues (e.g., standard metrics, baselines) \n* effects of biases in data On completion of this course, the student will be able to:\n     \n         identify and analyse examples of ambiguity in natural language---ambiguity in part-of-speech, word sense, syntax, semantics and pragmatics. Explain how ambiguity presents a problem for computational analysis and NLP applications and some of the ways it can be addressed (see (2) to (5)).  describe and apply standard sequence models (e.g., HMMs), classification models (e.g., Na\u00efve Bayes, MaxEnt); parsing algorithms (e.g., statistical chart parsing and dependency parsing) for processing language at different levels (e.g. morphology, syntax and semantics), and simulate each algorithm on `toy linguistic examples step-by-step with pen and paper.  explain and provide examples of how sparse data can be a problem for machine learning in NLP; describe and apply methods for addressing the sparse data problem.  given an appropriate NLP problem, students should also be able to identify suitable evaluation measures for testing solutions to the problem, explain the role of annotated corpora in developing those solutions, and assess and justify which sequence of algorithms are most appropriate for solving the problem, based on an understanding of the algorithms in (2) and (3).  implement parts of the NLP pipeline with the help of appropriate support code and/or tools. Evaluate and interpret the results of implemented methods on natural language data sets. \n     ", "CS457 - Machine Learning The aim of this class is to equip participants with a sound understanding of the principles of Machine Learning and a range of popular approaches, along with the knowledge of how and when to apply the techniques. The class balances a solid theoretical knowledge of the techniques with practical application via Python (and associated libraries).&nbsp; Indicative topics:&nbsp; Machine learning basics&nbsp;  Overview of the machine learning process&nbsp;  Classifiers and classification measures&nbsp;  Training models&nbsp;  Support Vector Machines&nbsp;  Decision trees&nbsp;  Ensemble Learning&nbsp;  Dimensionality Reduction (Principal Components Analysis)&nbsp;  Introduction to Neural Networks&nbsp;  Perceptrons and Artificial Neural Networks&nbsp;  Backpropagation and Network Training&nbsp;  Multi-layer and Deep Neural Networks&nbsp;  Convolutional Neural Networks&nbsp;  Recurrent Neural Networks&nbsp;  After completing this class participants will be able to:&nbsp; Understand the aims and fundamental principles of Machine Learning.&nbsp;  Understand a range of the essential core algorithms and approaches to Machine Learning.&nbsp;  Apply the algorithms covered on substantial data sets using Python and Scikit-learn, and interpret the outcomes.&nbsp;  Understand the applicability of these algorithms to different types of data and problems along with their strengths and limitations.&nbsp;  Understand the limitations of basic approaches to Deep Learning and the need for advanced strategies.&nbsp;  Understand and apply a range of the advanced algorithms and approaches to Deep Learning and Machine Learning using Artificial Neural Networks and interpret the outcomes.&nbsp; ", "CS209 - User &amp; Data Modelling To provide the student with a critical appreciation and understanding of how to model user activities and the data to support them, together with how to implement systems and databases to support user activities.  Introduction to the Database Environment: functions of a database management system; data dictionary systems; database administration. Entity Relationship modelling. The Relational Data Model and its Implementations: relational query languages; normalisation. Object oriented, object relational and other data models. Distributed databases. Indexing. Web databases.  Modelling user requirements; human perceptual, cognitive and motor skills; communication theories; dialogue guidelines; screen design; input/output manipulation; dialogue specification techniques; iterative interface prototyping; accessibility. Formative and summative evaluation methods; experimental design and analysis. Case studies.  On completion of this class, a student should be able to: Design, using suitable annotations, models for human tasks, system interactions, data and database systems;  Design and conduct a range of usability evaluation methods;  Appreciate the importance of user-centred design and of key aspects of human psychology and physiology for interactive systems design;  Critique systems for their usability using a range of criteria;  Design and implement a database system, starting from an informal specification through implementation in a relational database management system to querying in SQL;  To show an appreciation of the facilities and services which should be provided by a fully featured database management system;  To demonstrate knowledge of commonly occurring data models;  To display knowledge of potential future developments in database and interactive system technology ", "CS316 - Functional Programming To provide the student with skills in basic functional programming and experience in integrated deployment of those skills. Core topics in the Haskell programming language are: Basic functions; Haskell\u2019s built in data types; if expressions; case expressions; guarded functions; local definitions; pattern matching; list processing with built-in functions; recursion; polymorphism; anonymous functions; first-class functions; algebraic data types including recursive and polymorphic such types; standard type classes; monadic-style input/output.The course will conclude with substantial integrative project work (e.g. a lexer-parser-interpreter and/or turtle graphics). On completion of the class, a student should be able: To understand the basic advantages of high-level programming languages.  To understand the basic advantages of using mathematics to structure programming.  To understand the basic principles of functional program design and demonstrate their practical application.  To specify and implement simple functional programs in the programming language Haskell.  To integrate the basic techniques of functional programming in a substantial project. ", "CS252 - Software Engineering 2 The aim of the class is to further the participants\u2019 skills and experience in the design, development and testing of larger scale software systems.  Object-Oriented Analysis and Design: Requirements Analysis and Requirements Modelling, Feature Lists, Use Cases, Class Diagrams and other OO Model Representations. Modelling Techniques e.g. Mapping Use Cases to Designs, CRC Cards.&nbsp;  Design Principles: Coupling, Cohesion, Refactoring, Clean Code (OCP, DRY, SRP, LSP), Introduction to Design Patterns.&nbsp;  Project Management and Process Models: Agile, Traditional, Management Issues, Management Techniques, etc.&nbsp;  Testing in the Large: Test-driven development, Multi-Class Testing, System Testing, Mocking, Testing Frameworks e.g. JUnit.&nbsp;  Software in the Large Tools: Build, Deployment, Testing, Version Control (e.g. Git), etc.&nbsp;  Software Maintenance: Issues and Techniques, Bug Fixing, Feature Addition, etc.  After completing this class participants will be able to:&nbsp; Produce a design by identifying, from a requirements specification, necessary classes, their relationships, and their interactions.&nbsp;  Implement a given design and verify and validate the implementation.&nbsp;  Be familiar with the main tools and technologies used to support the development and management of software systems.&nbsp;  Work as part of a team to design, build, test and deliver a software system.&nbsp;  Understand the key components involved in designing, building and testing a software system.&nbsp; ", "CS452 - Developing Cross-Platform Apps for Mobile Devices The aim of the class is to equip participants with the knowledge and skills to build cross-platform native mobile apps which can run on both iOS and Android devices using declarative and component-based JavaScript libraries. Indicative class syllabus:&nbsp; JavaScript: advanced JavaScript concepts (ES6 and beyond) such as arrow functions, exporting and importing modules, spread operator and rest parameters, destructing and promises.&nbsp;  React: the underlying reasons for using declarative JavaScript libraries; the essential React concepts for building user interfaces.&nbsp;  Developing mobile apps using React Native: core React Native topics such as responsiveness, navigation, using native device features (such as the camera, Geolocation and notifications), authentication, asynchronous HTTP requests and managing the app\u2019s state; the app\u2019s deployment and the automated over the air (OTA) updates of mobile apps.  After completing this class participants will be able to:&nbsp; Demonstrate a deep understanding of advanced JavaScript topics (ES6 and beyond).&nbsp;  Demonstrate an understanding of declarative and component-based programming.&nbsp;  Use declarative JavaScript libraries (such as React) for building user interfaces.&nbsp;  Design and implement cross-platform (iOS and Android) apps for mobile devices.&nbsp;  Manage an app\u2019s state and use native device features (e.g. camera and Geolocation).&nbsp;  Deploy and automatically update mobile apps.&nbsp; ", "CS358 - Introduction to C Programming The aim of the class is to develop the participant's understanding of a low-level programming language, its relationship with the underlying instruction set of the computer, and how data is organised within memory.&nbsp;  Introduction to C &amp; Linux: Installing a POSIX environment and using Linux commands, C as a level between Assembly and Java, loops, arrays and scope&nbsp;  Data organisation in memory: pointers, strings, structs and unions, representing objects&nbsp;  Memory organisation for programs: Memory hierarchy, Stack and Heap Management, Main memory management, Virtual memory&nbsp;  From C to the CPU: CPU organization, Instruction Sets and Assembly, mapping C constructs to Assembly&nbsp;  After completing this class participants will be able to:&nbsp; Understand the fundamentals of C programming.&nbsp;  Understand the role of low-level programming and its relationship with high-level languages and Instruction Set Architectures.&nbsp;  Have a practical understanding of how data is organised in memory.&nbsp;  Understand memory organisation and management within low-level programs.&nbsp;  Design and implement a low-level program. ", "Undergraduate Course: Informatics 1 - Object Oriented Programming (INFR08029) This course is available to Informatics students and those on combined Informatics degrees with Maths and PPLS. \n \nThis course presents a conceptual and practical introduction to object oriented programming and software engineering practices, exemplified by Java. As well as providing a grounding in the use of Java, the course will cover general principles of programming in imperative and object oriented frameworks. After completing the course successfully, students will be able to develop programs that support experimentation, simulation and exploration in other parts of the Informatics curriculum (e.g. the capacity to implement, test and observe a particular algorithm). An introduction to the concepts of programming and software engineering using an object oriented programming language. On completion of this course, the student will be able to:\n     \n         implement components of an object-oriented program, given a specification, and demonstrate the use of an object-oriented approach to enable group development of larger applications  justify implementation decisions, compare implementations, and comment on their strengths and weaknesses  demonstrate an awareness of good software engineering practice, including the use of version control, testing and readable code  locate and use additional sources of information (to include discussion with peers where appropriate) to facilitate independent problem-solving, and reflect on ones own and others contribution to a collaborative learning environment  plan and organize time, working consistently to a goal \n     ", "CS208 - Logic &amp; Algorithms To equip students with the tools to model and measure computation. To build on CS103 Machines, Languages and Computation and develop further understanding of the mathematical foundations of computation. To foster an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types. First Semester: Propositional Logic revisited: natural deduction systems; translation between real and formal domains; inference, proofs, axioms; equivalence of systems  Formal Systems and Interpreted Formal Systems: language, inference and interpretation, syntax and semantics, satisfaction, soundness, completeness  Predicate Logic: predicates, universal and existential quantification; generalisation, specialisation by symbolic substitution; awareness of free variables, bound variables, and alpha-equivalence  Relations: relations as predicates, relations as graphs; equivalence relations, preorders, partial orders; functions and partial functions as special cases of relations; simple logic (Prolog) programming as proof search  Models of Computation: simple abstract machines, Turing machines, expression evaluation, lambda-calculus reduction, imperative execution, correspondence between models of equivalent strength, the Church-Turing thesis Second Semester: Algorithms: algorithms and processes; iteration and recursion, studied comparatively; preconditions, postconditions, and invariants; specification as relation between inputs and outputs  Introduction to Algorithmic Complexity: basic algorithmic classification, with examples; the order notation (Big-oh); elementary complexity and estimation of run times; the tyranny of growth  Searching and Sorting: the complexity of a range of techniques, including the divide and conquer approach; the relative complexity of searching and sorting algorithms; the sorting algorithms covered will include bubble sort, insertion sort, merge sort and quick sort; searching, including sequential search and the binary chop; hashing  Binary Trees revisited: implementations by array and by nodes with pointers; expression trees; binary tree implementation of sorted list; algorithms covered include traversal, searching, balancing and deletion; awareness of ordering and balancing invariants and their implications for correctness and complexity  Graphs revisited: directed and undirected graphs; representations of graphs; basic graph algorithms; topological sorting; applications of graphs to real world problems (for example telecommunications, transportation systems, dependencies between objects)  Complexity Implications of ADT Implementation: e.g. for priority queues, graphs; access times  Fundamental Techniques: divide and conquer, greedy algorithms, dynamic programming, backtracking search  Additional Problems, Algorithms and Techniques: as selected by class lecturers  Practical Work: Further exploration of algorithms and abstract data types, empirical evaluation of performance, one or two larger scale exercises.  On completion of the class, a student should be able: to understand a mathematical basis for a simple natural deduction system and perform rigorous proof construction given a well-defined framework  to work confidently with propositional logic in a natural deduction setting and develop an understanding of predicate logic  to understand the concept of an interpreted formal system, along with the concepts of soundness and completeness in this context  to have a good understanding of the Church-Turing thesis and the general concept of computation, making correlations between different models of computation, e.g., lambda calculus, Turing machines, Hoare\u2019s IMP  to appreciate the concepts of logical invariant, precondition and postcondition, with respect to data structures and algorithms  to study a number of fundamental algorithms, including in particular the fundamental algorithms of searching and sorting, identifying the invariants on which they rely  to make a critical assessment of different implementations of algorithms and abstract data types  to carry out a number of empirical studies of the performance of algorithms and abstract data types  to appreciate a number of fundamental computational problems, and be aware of real world instances of those problems ", "CS454 - Fundamentals of Cyber Security The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice.&nbsp; Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp; After completing this class participants will be able to:&nbsp; Compare and contrast secure communication solutions.  Evaluate an existing or proposed system in terms of potential vulnerabilities and recommend the most appropriate security solution to apply.  Summarise the key vulnerabilities, threats, and attacks with regards to network security and propose suitable approaches to mitigate these issues.  Plan and implement an aspect of technical security such as log analysis. ", "CS317 - Mobile App Development Students should gain a good understanding of the issues in developing for mobile environments, approaches to handling these issues and skills in developing for a widespread mobile platform. Mobile Graphical User Interfaces (Application lifecycle, Event-based programming, defining flexible screen layouts, linking code with resources, Model-View-Controller design; permissions and app security); Data Storage on Mobile Devices (local databases, local files, settings); Networking (data exchange standards, designing for highly unstable networks, synchronisation); Mobile 2D Graphics (screen graphical elements, 2D standards, animation); Mobile 3D Graphics (Computer graphics 3D modelling and lighting, 3D standards); Linking to other phone services (sending texts and emails, showing maps); Sensors (typical range of sensors, location input, accelerometer input, approaches to handling sensor input, smoothing sensor data); Mobile Large Data Solutions (crowd sourcing and data sharing); Mobile Interaction Techniques (user experience vs usability, mobile interface guidelines, novel interaction approaches). Legal aspects of mobile computing and future directions. Alternative platforms and development environments and frameworks. On completion of the class, a student should: understand the special nature of mobile app development.  understand and be able to develop graphical user interfaces for mobile apps.  understand networking requirements/challenges for mobile app development and be able to understand and develop solutions.  understand and be able to develop 2D and 3D graphics as appropriate for mobiles.  have an awareness of research into advanced interaction techniques for mobiles Transferable Skills and Cognitive Ability Learning Outcomes: To strengthen a student\u2019s programming ability in environments with large APIs.  To strengthen a student\u2019s programming ability in unstable situations.  To build team-development skills.  To build skills in working with a common mobile platform. ", "Undergraduate Course: Informatics 2 - Foundations of Data Science (INFR08030) This course introduces students to a core set of knowledge, skills, and ways of thinking that are needed for data science. It brings together several strands: mathematical and computational techniques from statistics and machine learning; practical work with toolchains for data wrangling, analysis, and presentation; critical thinking and writing skills needed to evaluate and present claims; and case studies prompting discussion of the real world implications of data science. The course will be delivered through a combination of lectures, workshops, and practical labs; students will be expected to complete both pencil-and-paper and programming-based exercises on their own time as well as during workshops and scheduled labs. Students will complete a data science project to assess their practical and writing skills. Technical topics in the course will be covered in three sections, with indicative topics listed below. Practical aspects of these will use a Python-based ecosystem.  \n \n1. Data wrangling and exploratory data analysis  \n- Working with tabular data  \n- Descriptive statistics and visualisation  \n- Linear regression and correlation  \n- Clustering  \n   \n2. Supervised machine learning  \n- Classification  \n- More on linear regression; logistic regression  \n- Generalization and regularization  \n \n3. Statistical inference  \n- Randomness, simulation and sampling  \n- Confidence intervals, law of large numbers  \n- Randomized studies, hypothesis testing    \n \nInterleaved with these topics will be topics focusing on real-world implications (often using case studies), critical thinking, working and writing skills. These may be introduced in lecture but will often include a workshop discussion and/or peer review of written work. Indicative topics include:  \n \nA. Implications:  \n- Where does data come from? (Sample bias, data licensing and privacy issues)  \n- Visualisation: misleading plots, accessible design  \n- Machine learning: algorithmic bias and discrimination  \n \nB. Thinking, working, and writing:  \n- Claims and evidence: what can we conclude; analysis of errors  \n- Reproducibility; programming \"notebooks\" vs modular code  \n- Scientific communication; structure of a lab report  \n- Reading and critique of data science articles None", "CS105 - Programming Foundations To provide the student with a solid foundation in the principles of computer programming. On completing this class the student should have the necessary skills to be able to design, build and test a small system in a high-level language (Java in the current incarnation of the class). The class aims to provide a good grounding in the basics of programming. An \u201cobjects-first\u201d approach means that proper object-oriented programming concepts can be emphasised and explored from day one. The course is iterative, concept-based and project-driven \u2013 it covers the important programming ideas via a number of projects and extensive hands-on exercises. It does not attempt to provide a complete coverage of the language, but aims to introduce the basics which are then built on in later classes.Main topics covered:- Background: Introduction to the purpose of high level languages and the development and compilation process.  The fundamental concepts of programming:  Key concepts of objects, classes, methods, parameters, data types etc.  Defining classes \u2013 fields, constructors, methods, parameters, assignment.  Defining methods \u2013 local variables, blocks, control structures (conditionals and loops).  Inter- and intra- object communication \u2013 object references, method calls, parameter passing, return values etc.  Collections of objects \u2013 arrays, arraylists (e.g.), iterators.  Abstraction mechanisms: Library classes and the API \u2013 introduction to the API, documentation, use of key library classes.  Abstract data types \u2013 commonly used types such as Map, Set etc.  More abstraction mechanisms \u2013 inheritance, interfaces, sub typing, polymorphism etc.  External communication \u2013 e.g. input and output, GUIs, file handling and exceptions.    Principles of program design and testing: Documentation (e.g. javadoc), basic testing principles, test automation using tools such as the xUnit family, debugging, basic Class diagrams.  Development environments: Initially the class makes use of a relatively simple and supportive environment (such as BlueJ) to illustrate and emphasise the key concepts (classes, objects, method calls etc.) and support easy development. As the course progresses it will make greater use of a more sophisticated environment (such as Eclipse) that is also of use in the subsequent years of the course.  On completion of the class, a student should be able to: Understand the program development process.  Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.  Demonstrate familiarity with a sophisticated interactive development environment (IDE). ", "Undergraduate Course: Computer Architecture and Design (INFR10076) In this course you will learn how to design a computer and understand the performance characteristics of computers. You will first acquire a working knowledge of digital design, through the Verilog Hardware Description Language, along with a good theoretical grounding in the design of the key components of a microprocessor. You will have an opportunity to learn, both theoretically and practically, how the Quantitative Approach to computer architecture enables computer architects to analyse and optimize microprocessors to maximize performance. Along the way you will design real hardware, and later in the course you will apply your recently-acquired knowledge of quantitative computer architecture to analyse a simulated system and optimize its performance. The aim of this course is to give students a comparatively deep understanding of computer architecture, to an intermediate level, together with a solid understanding of techniques used to design the logical building blocks from which a computer is constructed. We consider an intermediate level in computer architecture to extend up to the point where students have a good understanding of instruction set architecture, single-issue in-order pipelined execution of instructions, superscalar out-of-order execution, and the memory hierarchies required by those processors. Within a processor, we explore the principles and practice of arithmetic and logic unit design, of the caches from which memory hierarchies are constructed, and the memory and logic gate technologies from which computers are constructed. Throughout the course, there is a strong emphasis on the Quantitative Approach to computer architecture; this informs not only the theoretical topics but also the practical assignments, which always embody some element of the quantitative approach. \n \nThe philosophy of this course is that learning about computer architecture is particularly effective if reinforced by implementing key aspects of processor design, in real hardware when feasible, but also at higher levels of abstraction using simulated systems. This approach has been used very effectively in the previous Computer Design and Computer Architecture courses, and feedback often cites the value placed on the lab exercises by students. \n \nOutline Contents \n \nFundamentals \nReview of logic design and implementation technologies; from simple combinational logic to state machines for sequential circuits; logic design using Verilog and introduction to FPGAs. \nRegister Transfer Level design principles; registers, clocks, timing budgets, setup and hold margins, clock skew, clock-domain crossing and synchronization, metastability. \nQuantitative computer architecture; performance evaluation methods and metrics, principles of high-performance design. \n \nProcessor Architecture \nInstruction Set Architecture (ISA) design; instruction set classes, registers, memory addressing. RISC vs CISC, how the ISA supports high-level languages, quantitative approach to ISA design. Example      ISAs (e.g. MIPS, RISC-V). ISA requirements for embedded systems. \nPipelined processor design; pipeline hazards and interlocks, control prediction techniques and their usage. \nOut-of-order execution; scoreboards, reservation stations, register renaming, quantitative analysis of performance. \n \nComputer Arithmetic and ALU Design \nIntroduction to binary arithmetic functions; fixed-point addition, subtraction, multiplication and division. \nAdvanced techniques in computer arithmetic; carry-look ahead adders, parallel-prefix adders, Booth-coded multipliers, Wallace and Dadda trees, sub-word parallelism, fractional fixed-point multiply-        accumulate operations. \nFloating-point computations; IEEE standard, floating-point addition and multiplication, high-performance fused-multiply-add architectures. \n \nMemory System Design \nMemory hierarchies; review of principles, quantitative analysis of memory hierarchy performance; exploring the design space of cache parameters. \nCache coherence in multi-core architectures; protocols and implementation techniques. \nMain memory design; Interfacing between processor and memory, synchronous and asynchronous bus protocols. \nError detection and correction schemes; parity, Hamming codes, SECDED. \n \n***This course replaces Computer Design (INFR09046) and Computer Architecture (INFR09009) FROM 2019/20.*** On completion of this course, the student will be able to:\n     \n         describe the structure and operating characteristics of a high-performance microprocessor, and explain the principles of: orthogonal instruction set design; pipeline hazards and interlocks; branch prediction (both static and dynamic); out-of-order execution  explain the design and operating principles of arithmetic units including: high-speed adders and multipliers; dividers; and floating-point units. And also demonstrate how selected fixed-point arithmetic functions can be implemented (in a laboratory setting)  design and implement both combinational and synchronous digital systems using state-of-the-art FPGA design tools and hardware description languages  describe the structure and operating characteristics of memory systems; demonstrate the ability to evaluate quantitatively the performance of a combined processor and memory system with respect to cycles-per-instruction (CPI) and memory bandwidth requirements; describe the operating principles of error detection and correction techniques applied to memory systems, and design a SECDED solution for a given memory system  reason about the ways in which memory hierarchies can be configured to exploit locality in order to reduce average memory access times, and quantitatively evaluate the impact of varying cache design parameters (e.g. capacity, associativity, block size, and write policies) on performance; understand the operating principles of cache coherency protocols, and be able to compare and contrast different implementation techniques \n     ", "CS367 - Introduction to Cyber Security To develop a security mindset by exploring fundamental elements of cyber security Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment. On completion of the class, participants will be able to:1. Identify and assess threats for a given context.2. Evaluate an existing or proposed system in terms of potential vulnerabilities and argue appropriate mitigation techniques for a given context.3. Compare and contrast aspects of managing cyber security such as cyber security frameworks.4. Contribute to risk assessment in a cyber security context.", "CS415 - Industrial Placement To enable the student to experience the application of aspects of their degree course in an industrial context and so to understand the complexities of commercial software development. The period of industrial placement lasts for approximately twelve months; students are expected during their fourth year to take an active part, in cooperation with the placement coordinators, in securing an appropriate placement. If, after displaying due diligence, students are unable to secure any form of suitable external placement then arrangements will be found within the University or, alternatively and probably more likely, transfer to the Honours degree in Computer Science can be arranged. The nature of the work undertaken will vary substantially; it is expected that the majority of the students (like those on industrial placement for related degrees) will find placements where they will be working close to the frontiers of what is presently achievable. It is also expected that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp;  to build on and consolidate material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to undertake independent writing and working  to display an appreciation of good practices in software engineering ", "Undergraduate Course: Machine Learning Practical (UG) (INFR11223) This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead. This course follows the delivery and assessment of Machine Learning Practical (INFR11132) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11132 instead. Ian Goodfellow, Yoshua Bengio, and Aaron Courville, Deep Learning, 2016, MIT Press \nMichael Nielsen, Neural Networks and Deep Learning, 2016. Online at http://neuralnetworksanddeeplearning.com \nChristopher M Bishop, Neural Networks for Pattern Recognition, 1995, Clarendon Press.", "Undergraduate Course: Software Design and Modelling (INFR10064) This course introduces the design and modelling of software systems using object-oriented techniques. We start by exploring the use of modelling in software development. Students learn to document designs in the Unified Modeling Language, UML, with emphasis on class, sequence and state diagrams and the Object Constraint Language, OCL. We use modern model-driven development tools and discuss their strengths and weaknesses. We study criteria that make one design better than another in context and introduce design principles and patterns that capture good practice. The course begins by placing design and modelling in the context of the various software engineering processes in widespread use today. Via labs, lectures and self-study using readings, videos and formative exercises, it teaches students to produce (initially straightforward) designs and to document them using UML models, both on paper and with an appropriate tool. We discuss the different affordances of these modes and how models may be used (i) purely informally, (ii) as reviewed documentation for designs, and/or (iii) in model-driven development in which models are formal artefacts and code may be generated from them. \n \nThe second part of the course focuses on identifying and producing good designs. What principles should a good object-oriented design follow? We learn some common design patterns and their role in development and learning. \n  \nFinally we turn to practical model-driven development: how can the cost-benefit ratio of modelling be improved, now and potentially in the future? Students will learn about model transformations, both model-to-model and model-to-text (e.g., code generation) and be introduced to current tools supporting these. We discuss the role of domain specific languages and the integration of model driven development with agile processes. Throughout the course, we identify the deficiencies as well as the benefits of the fast-changing state of the art, aiming to equip students to critically evaluate tools and techniques that become available to them in future. On completion of this course, the student will be able to:\n     \n         design simple object-oriented systems  create, read and modify UML diagrams documenting designs, both on paper and in an appropriate tool  determine whether a UML model and a body of Java code are consistent; if they are inconsistent, identify the inconsistencies precisely and propose remedies  evaluate and evolve object-oriented software designs, making use of common design patterns if appropriate  discuss the use of modelling and model-driven development tools in software development, e.g. why and how models of software can have varying degrees of formality, capabilities and limitations of the tools \n     ", "Undergraduate Course: Computer Security (INFR10067) Computer Security is concerned with the protection of computer systems and their data from threats which may compromise integrity, availability, or confidentiality; the focus is on threats of a malicious nature rather than accidental. This course aims to give a broad understanding of computer security. Topics include security risks, attacks, prevention and defence methods; techniques for writing secure programs; an overview of the foundations for cryptography, security protocols and access control models. \n \n ***This course replaces INFR10058 Computer Security (10 credits).*** The goal of this course is to introduce students to fundamental security concepts and offer them working knowledge of threats and counter-measures. \n \nThe topics covered in the course are: \n-  Introduction:   fundamental  concepts,  access  control  models,  threat modelling.  \n-  Network security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection. \n-  Usable  security:  basic  human  factors,  warning  design,  phishing,  authentication, device authentication. \n-  Cryptography:   symmetric  ciphers,  asymmetric  ciphers,  MACs  and hash functions, digital signatures. \n-  Cryptographic protocols:  identification, authentication and key agreement, SSL/TLS, anonymity protocols, TOR. \n-  OS security:  OS concepts, memory and file system, access control, file permissions, memory safety, stack-based buffer overflows. \n-  Malware:  viruses, trojan horses, worms, rootkits. \n-  Web security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defences, server-side attacks, SQL injection, RFI, LFI. On completion of this course, the student will be able to:\n     \n         describe common security threats against computer systems, and identify appropriate mechanisms to address them.  explain techniques and design principles that underlie the common mechanisms for protecting the security, privacy, and trust of computer systems and networks.  complete a basic security analysis of computer systems or networks.  independently collect, filter out, and contextualise information about security vulnerabilities and their mitigations. \n     ", "Undergraduate Course: Computer Communications and Networks (INFR10074) This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided.  \n \nTopics covered in this course include: Internet (TCP/IP) architecture and protocols, network applications, congestion/flow/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation.  \n \nStudents taking this course will gain hands-on experience in network programming using the socket API; network traffic/protocol analysis; and on assessment of alternative networked systems and architectures. * Introduction to Computer Networking and the Internet \n* Digital Communication Basics \n* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications) \n* The Transport Layer \n* The Network Layer \n* The Data Link Layer \n* The Medium Access Control Sub-Layer \n* The Physical Layer \n* Software-defined networking (SDN) \n* Network virtualisation and network function virtualisation (NFV) \n* Network management \n* Introduction to data centre and wireless networks \n* Overview and selected aspects of network security On completion of this course, the student will be able to:\n     \n         explain key networking concepts, principles, design issues and techniques at all protocol layers  contrast between different types of networks (e.g., wide area networks vs. local area networks, wired vs. wireless) in terms of their characteristics and protocols used  describe different types of networked applications and what underlying network protocols are needed to meet their diverse requirements  distinguish between control and data planes in computer networks, and their corresponding architectures in real-world networks (including the Internet)  understand reliable transport protocols and networked system architectures via implementation using Socket APIs, measurement and analysis \n     ", "Undergraduate Course: Informatics Large Practical (INFR09051) **This course replaces AI Large Practical (INFR09043), Software Engineering Large Practical (INFR09045) and Computer Science Large Practical (INFR09044).** \n \nThe Informatics Large Practical exposes students to the problems that arise with the design and implementation of large-scale software systems, and to methods of coping with such problems. \n \nStudents will gain experience in how to: \n- Schedule their work load \n- Design clearly and coherently structured systems \n- Discover and use relevant technical information \n- Implement a large-scale software system \n- Design and run experiments and tests \n- Analyse and report results \n- Present their work in a clear and concise way. The Informatics Large Practical gives students experience in developing a non-trivial software system and reporting on the end product. In this way, the practical provides an introduction to the issues and requirements of the more demanding fourth-year project. In particular, the student gains practical experience of: \n \n- Reading technical material and identifying the important content \n- Identifying and formalising project requirements \n- Identifying computational problems and inventing algorithmic solutions \n- Constructing a detailed design which does not over-commit to implementation detail \n- Implementing and testing a software application which realises the design \n- Experimenting with the implementation to explore the solutions to the computational problems \n- Writing a report which documents the solutions and the implementation \n- Managing a software project using a source-code repository. None", "Undergraduate Course: Informatics 2D - Reasoning and Agents (INFR08010) This course focuses on approaches relating to representation, reasoning and planning for solving real world inference. The course illustrates the importance of (i) using a smart representation of knowledge such that it is conducive to efficient reasoning, and (ii) the need for exploiting task constraints for intelligent search and planning. The notion of representing action, space and time is formalized in the context of agents capable of sensing the environment and taking actions that affect the current state. There is also a strong emphasis on the ability to deal with uncertain data in real world scenarios and hence, the planning and reasoning methods are extended to include inference in probabilistic domains. 1.  Intelligent Agents: Introduction \n* Nature of agents, performance measures and environments \n* Wumpus World Problem : An example thread (Programming environment) setup  \n \n2. Search based Planning \n* Planning as a Search Problem: In deterministic, observable, static and known environments \n* Smart Searching 1: Using constraints \n* Smart Searching 2: Exploiting subproblems/Memoisation \n* Informed Search and Exploration for agents  \n \n3. Logical Representation and Planning \n* Propositional Logic Revisited (Shortcomings) \n* First Order Logic &amp; Encoding facts/rules in FOL \n* Inference Rules for Propositional &amp; FOL Calculus \n* Unification and Generalized Modus Ponens \n* Resolution based Inference and directing search with it \n* Knowledge representation : Using FOL to represent action, space, time -- Wumpus Example \n* Situation Calculus: Representing time in plans  \n \n4. Scaling Planning for Complex Tasks \n* Representing States, Goals and Actions in STRIPS \n* Partial Order Planning \n* Planning and Acting in the Real World  \n \n5. Acting in Uncertain (real world) Environments \n* Representation with Bayes Net \n* Probabilistic Reasoning in Bayes Net \n* Planning under Uncertainity : Wumpus world revisited \n* Probabilistic Reasoning over Time I: hidden markov models \n* Probabilistic Reasoning over Time II: dynamic Bayesian networks \n* Markov Decision Processes  \n \nRelevant QAA Computing Curriculum Sections:  Artificial Intelligence, Human-Computer Interaction (HCI), Intelligent Information Systems Technologies, Simulation and Modelling On completion of this course, the student will be able to:\n     \n         use task constraints to make search efficient  perform Inference with First Order Logic and appreciate the strengths and weaknesses of this and other logic representations (eg Propositional)  use PDDL to plan and execute actions using either Propositional or First Order Logic representations  create and reason with a representation of a Bayesian agent for handling a non-deterministic planning problem  constructively engage in both self-study and peer-learning \n     ", "Undergraduate Course: Natural Language Understanding, Generation, and Machine Translation (UG) (INFR11225) This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead. This course follows the delivery and assessment of Natural Language Understanding, Generation, and Machine Translation (INFR11157) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11157 instead. On completion of this course, the student will be able to:\n     \n         identify and discuss the main linguistic, machine learning, and ethical challenges involved in the development and use of natural language processing systems  understand and describe state-of-the-art models and algorithms used to address challenges in natural language processing systems  design, implement, and apply modifications to state-of-the-art natural language processing systems  understand the computational and engineering challenges that arise in the use of different models for natural language processing, and discuss the pros and cons of different models for a given task  understand, design and justify approaches to evaluation and error analysis in natural language processing systems \n     ", "Undergraduate Course: Discrete Mathematics and Probability (INFR08031) The first part of this course covers fundamental topics in discrete mathematics that underlie many areas of computer science and presents standard mathematical reasoning and proof techniques such as proof by induction. The second part of this course covers discrete and continuous probability theory, including standard definitions and commonly used distributions and their applications. \n \n*This course replaces \"Discrete Mathematics and Mathematical Reasoning\" (INFR08023). from academic year 2020/21* The course will cover roughly the following topics:  \n \nBlock 1: Discrete Mathematics   \n- Logical equivalences, conditional statements, predicates and quantifiers  \n- Methods of proof using properties of integers, rational numbers and divisibility   \n- Set theory, properties of functions and relations, cardinality  \n- Sequences, sums and products, Induction and Recursion  \n- Modular arithmetic, primes, greatest common divisors and their applications  \n- Introductory graph topics   \n \nBlock 2: Probability Theory  \n- Counting techniques: product rule, permutations, combinations  \n- Axioms of probability, sample space, events, De Morgan's Law  \n- Joint and conditional probability, independence, chain rule, law of total probability, Bayes' Theorem  \n- Random variables, expectation, variance, covariance  \n- Common discrete and continuous distributions (e.g., Bernoulli, binomial, Poisson, uniform, exponential, normal)  \n- Central limit Theorem On completion of this course, the student will be able to:\n     \n         use mathematical and logical notation to define and formally reason about mathematical concepts such as sets, relations, functions, and integers, and discrete structures, including proof by induction  use graph theoretic terminology and apply concepts from introductory graph theory to model and solve some basic problems in Informatics (e.g., network connectivity, etc.)  prove elementary arithmetic and algebraic properties of the integers, and modular arithmetic, explain some of their basic applications in Informatics, e.g., to cryptography  carry out practical computations with standard concepts from discrete and continuous probability, such as joint and conditional probabilities, expectations, variances, standardization  recognize and work with standard discrete and continuous probability distributions and apply them to model and solve concrete problems \n     ", "Undergraduate Course: Entrepreneurship and Innovation Project (INFR09053) The Entrepreneurship and Innovation Project course enables Informatics students to approach real life problems with an entrepreneurial perspective, through developing their ability to apply disciplinary knowledge, resources and academic skills. The teaching environment for the EIP course will be in-person, face-to-face, with a core teaching facilitator who organises the weekly lesson plans, the guest lecturers, and who serves as a facilitator and introducer of weekly learning. Teaching will be delivered in a way that enables students to build on their entrepreneurial knowledge each week through formal and informal interactions with the course organiser. The Entrepreneurship and Innovation Project covers three levels of cognitive domains (Knowledge, Comprehension, and Application): it exposes the enrolled students to entrepreneurial knowledge, and then teaches them how to explain and represent their new knowledge through applying it to constructing a solution to a problem that they have identified. Students will be assessed on their ability to develop and execute a semester-long project and team management plan. On a weekly basis, each individual in the team will be required to reflect on/provide a personal perspective of the effectiveness of their teamwork. Like a real-life business with co-founders, the EIP course requires students face and address challenges as a team. \n \nStudent teams will be provided with formative assessment throughout the semester on the basis of their contributions to weekly reflective exercises, which evaluate their progress on collaboratively planning for and presenting a group business plan as their final project. All students will be required to attend weekly business planning workshops, which will guide students on how to research for and populate sections of their business plans that will be assessed as a summative portfolio of each team's collaborative learning journey throughout the semester. Weekly class attendance and effective team work are both essential in order for students to get a good grade for EIP. \n \nThe EIP course provides students with an opportunity to define and engage with an entrepreneurial project that they can continue pursue beyond the 1-semester of the EIP course delivery. \n \nThe course organiser of EIP will provide students with a guided learning pathway, which enables the teaching team (organiser and tutors) to get to know the individual teams 'intimately' through the semester, so as to offer them individualised/team-specific feedback within the context of the larger learning outcomes and with regard to the components of the business plan that are assessed for a final team and individual grade. On completion of this course, the student will be able to:\n     \n         identify appropriate market segments for their innovations and justify decision to choose one market over another  communicate the process through which they achieve their final product to stakeholders  differentiate and appraise the different aspects of business models, financial plans and customer channels  collaboratively construct a business plan and model associated financial statements (for their entrepreneurial idea)  work as a member of a team to demonstrate multidisciplinary application of their Informatics' knowledge and skills to delivering an entrepreneurial solution \n     ", "Undergraduate Course: Introduction to Databases (INFR10080) Data is one of the most important assets of any enterprise and plays a central role in many aspects of everyday life, from healthcare, to education, to commerce. In order to be turned into meaningful information that enables and supports decision making, data must be stored, maintained, processed and analysed. Database management systems are complex software programs that allow their users to perform these tasks in an efficient and reliable way. This course is an introduction to the principles underlying the design and implementation of relational databases and database management systems. \n \n*This course replaces \"Database Systems\" (INFR10070) from academic year 2020/21* Databases encompass many areas of Computer Science, from formal logic to programming languages, from operating systems to algorithms and data structures. This course will cover in detail the main language for relational databases, SQL, which is an international standard supported by virtually all systems on the market today. It will also cover the theoretical query languages on which SQL's core is based, namely relational algebra and relational calculus. Other important topics covered during the course include normal forms, transaction processing, concurrency control, incomplete data and rudiments of query optimization.  \n \nSyllabus (core topics) \n- The relational model and rudiments of SQL \n- Query languages: relational algebra and calculus \n- Multisets, grouping and aggregation \n- Database design: constraints and normal forms \n- Advanced SQL: nested queries, triggers, null values \n- Transaction management: concurrent schedules, conflict-serializability, locking \n- Database access from applications: using SQL in a host programming language \n- Basics of indexing, query evaluation and optimisation  \n \nSyllabus (advanced topics, if time allows) \n- Datalog and recursive queries \n- Incomplete data and certain answers On completion of this course, the student will be able to:\n     \n         compare strengths and weaknesses of different database designs  process and analyse data by means of SQL statements  formulate and manipulate queries in both declarative and procedural database languages  reason about the correctness of concurrent database interactions among multiple users \n     ", "Undergraduate Course: Speech Processing (Hons) (LASC10061) A foundation course in speech processing for students of linguistics, informatics, and related subjects. \n \nEnrolments for students outwith Philosophy, Psychology and Language Sciences must be approved by the Course Organiser. In this course, students investigate the fundamentals of speech signal processing, text-to-speech systems, and automatic speech recognition.   \n \nThis is a fast-paced course which draws on topics from linguistics, informatics, and engineering, including the following: \n \nFoundations in phonetics and signal processing: sound and waveforms, the connection between speech acoustics and speech articulation, time versus frequency representations of speech, the Discrete Fourier Transform and frequency spectrums, the source-filter model of speech. \nText-to-speech synthesis: components of a concatenative text-to-speech synthesiser, introduction to automatic text analysis, waveform generation and speech modification methods. \n \nAutomatic Speech recognition: components of a typical speech recognition system, speech feature representations, measuring similarity in speech using probabilistic methods, Hidden Markov Models (HMMs) for ASR, training and testing probabilistic models with speech data.   \n \nThe course is delivered as a combination of lectures, an online forum, videos, readings, and practical exercises in the lab. The course work will be based on lab exercises where students investigate an existing text-to-speech system, and build a simple automatic speech recognition system. Students deciding whether to take this course should visit https://speech.zone/courses/speech-processing/ where much of the course material can be found.  On completion of this course, the student will be able to:\n     \n         understand human speech production and perception, including the use of tools for visualising and manipulating speech  give an overview of the components of automatic speech recognition and speech synthesis systems and describe a simple version of each component  understand what the difficult problems are in automatic speech recognition and speech synthesis  perform experiments with speech technology systems and relate theory to practice  see how knowledge and skills from different areas come together in an interdisciplinary field \n     ", "Programming for Artificial Intelligence (M) COMPSCI5097   The course provid  es  &nbsp;the students with basic programming skills through the development of simple   machine intelligence approaches  . After an introduction to the main concepts underlying machine   learning  &nbsp;(e.g., supervised and unsupervised learning, etc.)  &nbsp;and signal processing (time domain measurements, convolution, etc.)  , the students will be guided through the development of algorithms capable to extract information from data.     The aim of the course is to provide the students with basic programming skills while developing familiarity with the statistical data analysis methodologies underlying simple Artificial Intelligence   approaches  .     By the end of this course students will be able to:    \u25a0&nbsp;  To   design and evaluate  &nbsp;python code aimed at   histogramming  &nbsp;experimental data, including detection of outliers and   formulation of the   relationship between histogram and probability distribution;    \u25a0&nbsp;  To design and evaluate   python code implementing the most common probability distributions and probability density functions (including, e.g., Gaussians,   Multinomials  ,   Possonian  , etc.);      \u25a0&nbsp;  To design and evaluate   python code aimed  &nbsp;  at  &nbsp;the statistical analysis of data  , including estimate of main statistical measure  ment  s (average, variance, median, etc.)  ;    \u25a0&nbsp;  To design and evaluate   python code performing basic algorithms for multivariate data clustering, including k-means  , etc.  ;    \u25a0&nbsp;  To design and evaluate   python code implementing supervised learning   methodologies  , including, e.g.,  &nbsp;Na\u00efve Bayes approach  es  &nbsp;  and Gaussian Discriminant Functions;  &nbsp;    \u25a0&nbsp;  To compare multiple methodologies in view of finding the one most suitable for a problem to be solved  ;    \u25a0&nbsp;  To formulate  &nbsp;the   common   principles underlying the methodologies presented in the course  .  ", "Undergraduate Course: Text Technologies for Data Science (UG) (INFR11229) This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead. This course follows the delivery and assessment of Text Technologies for Data Science (INFR11145) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11145 instead. On completion of this course, the student will be able to:\n     \n         duild basic search engines from scratch, and use IR tools for searching massive collections of text documents  duild feature extraction modules for text classification  implement evaluation scripts for IR and text classification  understand how web search engines (such as Google) work  work effectively in a team to produce working systems \n     ", "Data Visualisation module (CS41003) Data visualisation is the representation of data and information in a visual format, such as charts, graphs, maps, and infographics. It is a way to communicate complex data in a clear and concise manner, making it easier to understand and interpret.By using effective data visualisation, you can convey a narrative and highlight your key messages using data storytelling. Throughout the module, you will explore how effective different types of data and charts are. You will also work with analysis and presentation tools and explore how you can use programming for data visualisation.   understand the definition of data and different data types \n learn how to gather data effectively \n study techniques for basic data analysis and create descriptive statistics \n look at the importance of key messages and storytelling in data presentation \n examine different chart types to present data \n learn how to use industry standard analysis and presentation tools \n explore data visualisation programming  demonstrate your understanding of different data types and how they can be recorded effectively \n analyse different data types correctly \n create data visualisation sketches to communicate a message \n implement interactive data visualisations using modern web technologies \n critically reflect on contextual data tools presented in research papers ", "Undergraduate Course: Principles and Design of IoT Systems (UG) (INFR11239) This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead. This course follows the delivery and assessment of Principles and Design of IoT Systems (INFR11150) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11150 instead. None", "Contemporary UX and Interactions module (CS42002) In the study of contemporary user experience (UX), we look at the current state-of-the-art practices in the design of user interfaces and explore future trends and changes to the field.While graphical user interfaces (GUIs) are the most common way to control applications and experience digital content, more novel technologies have gained popularity in recent years, such as voice user interfaces and wearable technology.Together with new ways to interact with our devices, such as gestures and haptic technology, they form a new branch of user experience design.In this module, you will explore the opportunities and limitations of this state-of-the-art UX technology and discuss the challenges of creating user-centred experiences in novel contexts.   study UX design considerations for novel technologies, such as voice user interfaces, wearable technology, and artificial intelligence \n learn how to use haptic technology and gesture interaction in user experience design \n learn how to develop interfaces for end-user programming \n explore the effects and challenges of new interaction types for end users  explain how the principles of UX are applied to contemporary technologies that disrupt the traditional notion of a user interface \n discuss the challenges of creating a positive user experience for novel interaction modes and contexts \n critique state-of-the-art applications for different user groups and suggest appropriate improvements \n adapt a user-centred design process to the development of UX with novel interactions ", "Design Methods module (CS31005) Sophisticated design of user interfaces and interactions is essential for creating user-friendly and visually appealing digital products that enhance user experience and drive engagement.In order to create effective designs, you will study different approaches to design development. You will explore the various processes within these approaches, and develop an intuitive and creative thinking for design considerations.Equipped with this knowledge, you will be able to design experiences that meet the needs of your users and steer engagement with your product.   study different design paradigms \n learn how to formulate a problem definition for design problems \n explore different methods to facilitate creative thinking \n explore human considerations in experience design \n study industry standard design practices for user interfaces, experience, and interactions &nbsp; \n learn how to critically evaluate design of existing user interfaces, experience, and interactions  explain the methods, tools, and techniques used across UI, UX, and interaction design industries \n recognise design paradigms and approaches to solving various design problems \n demonstrate your ability to determine and apply the most appropriate design approach to a problem \n execute relevant methods within each design approach, such as interviews, observations, prototyping, and user testing \n critically evaluate the design of existing user interfaces, experiences, and interactions, and suggest appropriate improvements \n show your ability to approach a broad range of design challenges with creative and critical thinking ", "Principles of Programming Languages module (CS42001) Programming paradigms form the fundamental principles of programming languages. They refer to a specific style or approach to writing computer programs, such as procedural or functional programming.You will already be familiar with procedural and object-oriented programming. While these are powerful paradigms suitable for many software development contexts, other paradigms might be better suited to more specialist applications.Logic programming languages, such as Prolog, are popular in fields such as theorem proving, pattern matching, and natural language processing. Functional programming languages, like Haskell, are preferred when code optimisation and correctness are of high importance.A strong understanding of programming principles and paradigms will enable you to understand the capabilities and limits of specific programming languages. This will allow you to make educated decisions on which programming language to use for certain problems and help you write more optimised solutions.   study basic abstraction mechanisms in programming languages, such as variables, expressions, recursion, and macros \n explore procedural programming using C \n explore lambda calculus and functional programming using Haskell \n explore logic programming using Prolog \n explore concurrent and parallel programming using Erlang \n study the fundamentals of type theory \n look at formal reasoning about programs  understand the differences between various programming paradigms and their representative languages \n understand principles of formal reasoning about properties of programs \n explain the common building blocks of programming languages \n demonstrate an understanding of basic type theory \n apply the fundamentals of parallel programming to write simple parallel programs \n relate the theoretical ideas around programming languages to practical problems in computing ", "Programming Language Design and Implementation module (CS41005) Programming languages form a bridge between natural languages and machine code.They allow developers to write programs and algorithms in a human-readable format, without the need for detailed knowledge of the computer's instructions.&nbsp; &nbsp;In order for these programs to run, they need to first be translated into machine code.This is done by compilers and interpreters, which can understand a specific programming language and convert it into machine instructions that a computer can execute.The development of a compiler or interpreter is a core part of designing a new programming language.Understanding how these tools work does not only help in the development of programming language, but is also useful in working on language-specific tools or frameworks.Furthermore, it can help you write more efficient and optimised code, and aid in troubleshooting and debugging of your programs.   study the Chomsky hierarchy and its relation to programming languages \n learn about regular expressions and automata, and their relation to different types of parsers \n explore the lexical, syntax, and semantic analysis of source code \n study how compilers and interpreters convert source code into machine interpretable code  demonstrate your understanding of how source code can be parsed and tokenised by different types of automata \n explain the processes of lexical, syntax, and semantic analysis of source code \n demonstrate your understanding of how compilers and interpreters work \n implement a language parser \n implement syntax and semantic analysis of source code languages ", "Information Analysis and Reporting module (CS41002) As the world becomes increasingly reliant on technology, it is important for computer scientists to understand how these aspects fit together. Through research, we can explore the effects and consequences of technology at the centre of society, discover new and innovative solutions, and find ways to make our technology more efficient.Information gathering and analysis provides you with a framework to design and execute experiments, collect and analyse data, and draw conclusions. These skills are essential whether you want to pursue a career in academia, industry, or research. In addition, studying research methods allows you to develop your critical thinking skills and teaches you to work with existing research papers, which are valuable skills in in any field.   explore both quantitative and qualitative methods of research \n study empirical research methods \n learn how to prepare a research project \n look at ethical considerations in research \n explore ways to publish and disseminate research results \n conduct your own research experiment applying the methods learned  compare and contrast different scientific research methods \n design and conduct reliable and valid research \n implement statistical methods to analyse data \n identify, read, analyse, and reference reliable research literature \n evaluate the legal, social, ethical, and professional responsibilities of performing research in science \n describe methods to disseminate research results ", "Theory of Computation module (CS32004) This module will help you develop an understanding of fundamental concepts for computation that help us understand the capabilities and limits of computing systems.By studying general models of computers, we can gain an understanding of which types of problems can be solved by a computer and which cannot be solved. You will also learn about the complexity of algorithms, which describes how fast and with how much memory an algorithm solves a problem.Equipped with this knowledge, you will be able to discuss some of the biggest, unanswered questions in computer science, such as the \"P versus NP\" problem.Additionally, a strong understanding of computational theory is helpful in many branches of computer science, such as algorithm design and compiler construction. It also has practical applications in fields such as cryptography, artificial intelligence, and programming languages.   study finite state automata, regular languages, and regular expressions \n learn about Turing machines as a model for computers \n explore the decidability of Turing machines and the halting problem \n look at time-bounded deterministic and non-deterministic Turing machines \n study the complexity classes P and NP  describe common models of computation and their powers \n demonstrate an understanding of the theoretical limits of computing power and their underlying proofs \n explain the connection between formal languages and machines \n relate the theoretical ideas of complexity and decidability to real-world situations in computer science, such as algorithm design ", "Logic and Discrete Mathematics module (CS31003) Logical and mathematical theory are at the core of computer science. Research in both formal logic and discrete mathematics increased significantly from the latter half of the twentieth century, and is paramount for the innovative advancements in the development of digital computers.The key principles of these fields can be found at the lowest level of computing, where boolean algebra dictates the basic instructions for processors. Other concepts, such as graph theory and recursion, are immensely useful in algorithm and software design.Studying the logical and mathematical backbone of computer science will not only improve your understanding of how computers function on the lowest level, but also enable you to improve your problem-solving skills and approach complex computational problems.   explore key theoretical concepts in logic and discrete mathematics \n study the relation between logic and mathematics on the one hand, and computer science on the other \n learn how to apply formal notation and key concepts, including proofs  boolean algebra \n propositional logic \n predicate calculus \n deduction, induction, abduction \n recursion \n number theory \n graph theory \n game theory  demonstrate your understanding of logic and discrete mathematics and apply your knowledge in the context of computer science ", "Information and Network Security module (CS31002) Many modern information systems handle sensitive or personal data. It is the responsibility of the developers to ensure that this data is protected against malicious actors.Just as technology itself, the security threats against information systems are always evolving. By studying the fundamental principles of cryptography and communication security, you can learn how to identify these threats and how to mitigate them.&nbsp; &nbsp;   study fundamental security principles, such as confidentiality, integrity, and availability \n learn about basic cryptography and communication security \n explore secure application development principles, such as security requirement analysis, threat modelling, and risk analysis \n investigate common security vulnerabilities in information systems \n discuss human factors in information and network security \n learn about the specification and implementation of security protocols  demonstrate a solid understanding of cryptography and communication security \n conduct risk analysis and threat modelling to develop secure applications \n identify and address security vulnerabilities in information systems \n show awareness of legal, ethical, and technical issues regarding cybersecurity \n explore and interpret protocol specifications \n implement, troubleshoot, and validate a protocol in a secure client-server architecture ", "Games Programming module (CS31004) Games programming is a significant field within the realm of software development. It has a diverse and thriving industry, with a particular focus on new technologies and innovation.Game developers cooperate with designers, writers, and many more to create interactive digital experiences that are enjoyed by millions around the world.Whether you are passionate about computer games, or want to improve your software development skills, studying games programming will introduce you to many important concepts and methodologies for large development projects.Over the course of this module, you will apply these skills to create your own computer game from scratch. You will also explore Scotland's place in the games industry and learn more about what it is like to be a game developer.   discuss hardware and software considerations for games \n explore graphics and audio design considerations \n study event-driven programming and important design patterns in games development, and how to use them effectively \n explore the use of physics engines and artificial intelligence in games \n discuss moral and ethical considerations of game design \n investigate security considerations in games programming  demonstrate your ability to create a computer game from conceptual design to implementation of the game \n document your project using industry-proven methods such as game design documents \n critically evaluate game designs \n apply ethical and accessibility considerations to game design and implementation ", "Data Engineering module (CS32001) Data-driven decision making is vital for businesses and organisations today. With the exponential growth of data available to us, it has become crucial to have professionals who can design, build, and maintain data warehouses that can store and process large amounts of data efficiently.This enables faster and more efficient querying and reporting of data from multiple sources and systems, as well as better data quality and consistency.Data engineers are responsible for creating the infrastructure and pipelines that enable data to be collected, transformed, and loaded into data warehouses. This data can then be used by analysts and data scientists to extract insights and make informed decisions.A strong understanding of data warehousing methodology will enable you to develop professional, data-driven solutions. Together with modern developments, such as continuous deployment and microservice architecture, this forms a highly sought-after skillset.   learn about the concept of data warehousing and its processes \n learn how to create physical models for data warehouse systems using the Star schema \n study the types of slowly changing dimensions, which are collections of related facts \n examine the Extract-Transform-Load (ETL) process \n gain experience using NoSQL systems \n study the principles of continuous deployment and immutable services \n learn methods for developing continuous deployment solutions \n examine the role of the Cloud in continuous deployment \n explore technologies used in microservices systems  compare and contrast online transaction processing and data warehousing \n demonstrate a strong understanding of data warehousing development and operation processes \n understand the importance of dimensional modelling and explain the principles of dimensional design \n explain the role of ETL in data warehouse construction \n compare and contrast technologies used in microservices systems development \n demonstrate your understanding of continuous deployment \n design, implement, and operate a data warehouse \n develop a NoSQL system \n implement services to develop a cloud-based ETL microservices system ", "Undergraduate Course: Modelling of Systems for Sustainability (INFR10088) This course takes an interacting systems perspective on sustainability, using computational modelling and visualisation to gain understanding of system behaviours and interactions. Relevant complex systems key to sustainability arise from natural evolution (atmosphere, biosphere), social interactions (community, nation, economy), and engineering (energy, transport) - we look at computational models of such systems. Key concepts explored include emergent behaviour, stability and tipping points. Students from across the university will bring knowledge of the type of systems under study, or of computational methods - knowledge of both is not required.  Multidisciplinary group projects provide the opportunity to explore systems and gain experience working in interdisciplinary teams. The fundamental aim of this course is for students from a variety of backgrounds, including Informatics, to get hands-on experience with specifying, implementing, exploring and presenting results from models of real-world systems that are key to planetary sustainability.  The range of such systems is vast, encompassing large parts of earth sciences, engineering, health sciences, social and political sciences.  Some key systems include the climate system, many ecosystems, agricultural systems, water systems, public health systems, social systems, international political systems, energy systems and transport systems. We will describe a subset of these systems, and there will be opportunity to develop deeper understanding in the project. \n  \nMost of these are what are known as \"complex systems\", meaning: their behaviour and evolution often cannot be reduced to a few equations or paragraphs of description; they exhibit patterns of emergent global behaviour that are not explicitly encoded in any local interactions; they often exhibit multiple potential stable states, with not-easily-triggered \"tipping points\" to move to another stable state; stability is often exhibited as a dynamic pattern over time rather than as a fixed state. We will touch on the science of complex systems, focussing on those aspects that are of most relevance to the particular real-world systems we study. \n  \nA ubiquitous challenge in sustainability is to appreciate how these individually complex systems interact with each other in the real world to produce unexpected outcomes.  The key methodology we will bring to the study of these systems and how they interact is computational modelling and visualisation.  We will study specific systems for which there are reasonably tractable computational models and visualisations.  For each, we will explore the underlying computational framework, be it a statistical model of observed data, a physical model of known physical / chemical / biological interactions, or an abstract model of ecological or social systems.  The modelling paradigms studied and used in practical work will include system dynamics and agent-based modelling, with brief mention of other paradigms such as discrete event and finite-step simulations. \n \nThe first half will consist of lecture material covering the key system concepts, the specific systems to be studied, and the computational modelling and visualisation methods used for each system.  These will be supplemented by hands-on lab sessions, to explore computational models and visualisations using tools such as NetLogo and Python; and small-group tutorial sessions aimed at multidisciplinary discussions of specific systems.  The second half of the semester will be devoted to a group project in which each 3/4-person group will have students from at least 2 and ideally 3 or 4 disciplines; the project will aim to construct and explore a model of one or two complex systems related to sustainability (e.g., energy, economic and political); and project supervision will be provided by staff and PhD students familiar with the project systems and models. \n \nAssessment will be by coursework, aimed at the material covered in the first half of the semester, (systems and modelling paradigms) and a group project report and presentation for the work in the second half of the semester. 1.\tRailsbeck and Grimm (2019), Agent-based and individual based modelling. 2nd Ed. Princetown University Press [Note that the library has a subscription to the 1st Ed, but getting a subscription to the 2nd Ed is proving problematic.] \n1.\tPrinciples of Systems Science / George E. Mobus, Michael C. Kalton (2014).  Library has online subscription. \n2.\tThinking in Systems : a primer / Donella H. Meadows ; edited by Diana Wright. (2008).  Library has a copy and online subscription.", "Undergraduate Course: Calculus and its Applications (MATH08058) Calculus is one of the most fundamental tools in mathematics and its applications. This course presents an introduction to the two main branches of calculus: differential calculus and integral calculus. At the heart of both lies the notion of the limit of a function, sequence, or series. In addition to promoting a conceptual appreciation of these foundations of calculus, the course will develop calculational facility, both of which are essential for further mathematical study. \n \nA suggested syllabus for the course is as follows. Functions. Limits and continuity. Differentiation: techniques and applications. Inverse functions. Integration: techniques and applications. Fundamental theorem of calculus. Sequences and series. Taylor and Maclaurin series. Differential equations, moments, and exponential growth. It is probably fair to say that calculus represents one of the biggest achievements in the history of human thought. It took mankind almost two millennia to go from Archimedes first attempts to estimate areas to the birth of the subject as we know it today with the work of Newton and Leibniz in the 1600s and even after that it took another two centuries before the foundations of the subject were firmly laid. \nIn that sense, calculus marks the birth of modern mathematics: its influence on scientific and technological developments over the centuries since its inception cannot be overstated. This course provides a comprehensive introduction to calculus; the focus will be firmly on the two traditional branches: differential calculus and integral calculus. Roughly speaking, the former is concerned with rates of change (\"derivatives\"), while the latter studies accumulated quantities (\"integrals\"). The connection between the two is established by the fundamental theorem of calculus which lies at the heart of the subject, and which in turn relies on the notion of the limit of a function.  \nThe course will explore some of the implications of these and related notions, and will cover a variety of techniques and applications of both differentiation and integration; examples include the mean value theorem, curve sketching, and (unconstrained or constrained) optimisation, as well as areas and volumes, arc length, and improper integrals. The convergence of infinite sequences and series will be another focus in the course. Further applications may include (elementary) differential equations from physics, ecology, and engineering, moments from probability theory, and growth models from economics \nDepending on the mode of delivery, lectures or screencasts on assigned reading will be augmented through (formal and informal) collaborative discussion, thus implementing a \"flipped classroom\" setting. Real-time workshops will involve group-based activities to cement concepts, and expand on applications introduced in lectures or screencasts. Opportunities for practice will be provided through worksheets, online quizzes, and biweekly written homework.   On completion of this course, the student will be able to:\n     \n         Demonstrate an understanding of limits and continuous functions by evaluating and manipulating them.  Exhibit fluency in differentiation by identifying and applying standard techniques for evaluating derivatives.  Exhibit fluency in integration by identifying and applying standard techniques for evaluating integrals.  Apply calculus to a variety of mathematical applications that include curve sketching,optimisation problems and the calculation of rates of change, areas, and volumes.  Demonstrate a basic understanding of infinite sequences and series by describing their convergence properties. \n     ", "Multi-Paradigm Programming module (CS21003) Multi-paradigm programming refers to the ability to use different programming styles, such as procedural or object-oriented programming.In the first part of the module, you will study the C programming language, which supports the procedural programming paradigm.In the second part, you will move on to study the C++ programming language, which expands upon C and allows for object-oriented programming.Learning multiple programming paradigms enables you to approach problems from different perspectives, and allows you to choose the best way to solve them.   study two important programming paradigms, procedural and object-oriented programming \n develop programming skills in C and C++ \n explore elements of C and C++ programming, such as pointers, structs, and dynamic memory allocation \n learn about data structures, such as stack, queues, trees, graphs, and hash tables  understand and apply both procedural and object-oriented programming concepts \n show a strong understanding of data structures and their capabilities \n identify and evaluate suitability of data structures to solve a given computational problem \n demonstrate your ability to program in C and C++ ", "Accessible User Experience module (CS32003) With society becoming increasingly reliant on digital products for everyday tasks, it is essential that these products are designed with accessibility in mind.As computer scientists and UX designers, understanding accessibility is crucial for creating products that are inclusive and usable by everyone. You will learn about different types of disabilities and how they affect user experience, as well as techniques for designing and testing accessible products.This knowledge will not only help you to create solutions that meet legal requirements, but also create products that are more user-friendly and have a wider reach.   study the definition of a user, their abilities, and their disabilities \n explore various models of accessibility \n study influential research papers in accessibility \n learn how accessibility is considered in the design and development of computing technology  critically evaluate key contributions to accessible computing \n assess accessibility consideration in the development of new technologies \n conduct accessibility evaluations of user experiences and products to an industry standard \n critically appraise the impact of contemporary experiences on technology ", "Internet of Things This module provides fundamental and practical coverage of the set of converging technologies known as the Internet of Things (IoT). It focuses on representative IoT applications, technologies, frameworks and associated standards that support and underpin IoT applications, such as sensor networks, messaging protocols, security, data storage, analytics, services and human interaction. The module provides in-depth practical coverage of representative IoT implementation frameworks including cloud-based service delivery models.  IoT application domains and related business-awareness. Societal impact. Historical perspective related to machine-to-machine (M2M) systems. Technology evolution and convergence of consumer, business and industrial Internet. IoT architectural models. Enabling technologies. Overview of Wireless Sensor Networks. Reliable and secure messaging for IoT. Service-oriented architectures and cloud-based computing for IoT. Data collection, management and analysis. Complex event processing. High velocity data processing. Privacy, security and governance. The role of standardisation. Critically appraisal of current IoT platforms such as IBM Bluemix and Microsoft Azure IoT. Implementation of end-to-end solutions using industry-standard technology frameworks, including cloud-based computing with web-services. Challenges for IoT industry applications. IoT case studies in representative areas such as smart cities, transportation, health and smart buildings. IoT strategic research directions. Knowledge of international affairs.  Examples of tasks undertaken by students in practical sessions are: Configuring and applying a wireless-sensor-network. Using messaging protocols to connect to cloud-based IoT services. Implementing cloud-based analytics for IoT. Generating actions based on data-analytics. Implementing an end-to-end solution for IoT. Building human-interfaces for IoT systems.      On successful completion of this module a student should be able to:  Demonstrate in-depth knowledge of the requirements and implementation strategies for a representative range of IoT applications. Demonstrate a detailed understanding of how IoT applications can add value to business, industry and society. Critically appraise IoT technology, standards and services including cloud system technology, architecture and deployment models. Demonstrate the ability to analyse and solve representative problems in the IoT domain. Develop IoT applications that generate/process data-streams, provide cloud-based storage, provide/consume analytical services and feature appropriate human interfaces.     ", "CS456 - Cloud Computing  Provide a good general overview of software development for cloud native applications.  Understand security considerations that are particular to cloud deployment and containerisation.  Develop and deploy applications locally and on the cloud.  Produce applications that include web services and functions as a service.  Use current practices around data serialisation using ORM and ODMs.   Cloud capabilities, billing and service costs, deploying an application to Azure.  Virtual machines and containers.  Serialisation (ORM, ODM), database connections and databases on the cloud.  Web services and containerised web services.  DevOps on the cloud.  Containerised web services on the cloud.  Container orchestration using Kubernetes.  Security considerations of cloud deployments and of containers.  Functions as a service, locally and on the cloud.  Microservices and communication buses.  Cloud hosted analytics and Internet of Things services.   Students understand modern serialisation practices (ORM, ODM).  Students are aware of costs, roles and policy settings that can be used to deploy cloud hosted applications safely.  Students have a broad understanding of how to deploy scaleable applications onto a cloud platform.  Students understand containerisation, container orchestration and security considerations.  Students understand DevOps processes on the cloud. ", "Undergraduate Course: Compiling Techniques (INFR10065) This course describes the phases of a modern programming language compiler with an emphasis on widely-used techniques. The course project will require students to implement a complete compiler from scratch for a simple programming language, targeting a real machine assembly such as RISC-V.  \n \nStudents will also learn about implementing a compiler pass in a real compiler framework. * Introduction: structure of a compiler  \n* Lexical analysis: tokens, regular expressions, Lex  \n* Parsing: context-free grammars, predictive and LR parsing  \n* Abstract syntax: semantic actions, abstract parse trees  \n* Semantic analysis: symbol tables, bindings, type-checking  \n* Stack frames: representation and abstraction  \n* Intermediate code: representation trees, translation  \n* Basic blocks and traces: canonical trees and conditional branches  \n* Instruction selection: algorithms for selection, RISC and CISC  \n* Liveness analysis: solution of dataflow equations  \n* Register allocation: colouring by simplification, coalescing  \n* Real assembly language: ARM, MIPS, or RISC-V  \n* Advanced Topics may include: automatic parallelisation, popular open-source compilers: GCC, LLVM, MLIR On completion of this course, the student will be able to:\n     \n         analyse compilation tasks and to apply standard compilation techniques  develop, implement and apply modifications to standard compilation techniques and algorithms wherever this is necessary  understand and implement design decisions in modern compilers \n     ", "Big Data Landscape This module covers the process of managing Big Data throughout its lifecycle, from requirements through retirement. The lifecycle crosses different application systems, databases and storage media. Students will gain an understanding of the full Big Data value chain. They will be able to analyze the challenges and opportunities associated with the different stages which Big Data passes through.  Landscape Overview Introduction Applications Infrastructure Technologies Types of Big Data: Graph, Social, Security, Telematics etc Metadata  Big data lifecycle management Data lineage, provenance and infrastructure Data at rest and in motion Data Warehousing, marts, lakes  Big data value chains:  From big data to intelligence/knowledge  From big data to decision making  The interface of artificial intelligence and Big Data Data visualisation  Big data ecosystems Big data reference architecture  Data integration Data virtualization Data federation Linked open data: RDF, Semantics and Ontology  Big data applications Big Data privacy, security, legal and governance  Examples of tasks undertaken by students in practical sessions are: Configuring and using the Hadoop file system. Implementing parallel, distributed algorithms on a cluster using MapReduce. Creation, deployment and testing of an end-to-end information value-chain in a virtual environment. Utilising NoSQL databases.      On completion of the module the student should be able to:  Demonstrate a detailed understanding of the requirements, concepts and principles of Big Data systems. Demonstrate a detailed understanding of Big Data storage, transmission, processing and analytics from an enterprise system perspective. Critically appraise the data components of an enterprise system. Analyse the role of enterprise system data components in the Big Data information value chain. Critically appraise Big Data technologies, infrastructure, services and standards.    ", "Applications Architecture and Design Patterns This module covers proven good software development practices used in the creation of software systems. Traditional design patterns, architectural patterns and enterprise patterns are investigated using the Unified Modelling Language (UML) and program code examples where appropriate. This includes patterns used when integrating with legacy systems. The main focus of the module is the concept of improving design through the use of these widely applied patterns including their application to existing designs through refactoring. Detailed coverage is included of the traditional Gang of Four (GOF) patterns due to their continued importance and their influence on both current and emerging patterns.  REVIEW OF OO DESIGN PRINCIPLES and THE UNIFIED MODELLING LANGUAGE (UML)  OO Design Principles: encapsulation, polymorphism, inheritance versus composition, strong typing, cohesion, coupling, implementation and interface inheritance  SOLID: Single responsibility, open-closed principle, Liskov substitution, interface segregation and dependency inversion  UML diagrams and techniques: class diagram, sequence diagram, activity diagram, state diagram  TRADITIONAL DESIGN PATTERNS and GANG OF FOUR (GOF)  - Patterns background: Definition of the term Pattern, How Patterns are identified, History of the Patterns movement  - Gang of Four (GOF) Behavioural Patterns Strategy, Command, Iterator and Observer  - GOF Creational Patterns Factory Method, Abstract Factory, Builder and Singleton  - GOF Structural Patterns Facade, Proxy, Adapter, Composite, Decorator  - Programing Idioms and Design Patterns - Application of design patterns during development including the refactoring of existing systems  ARCHITECTURAL PATTERNS  - Software architecture: characteristics of good architecture, relationship with design and design patterns  - Traditional Architectural Patterns: MVC, Layers, Tier  - Introduction to Enterprise Design Patterns  ENTERPRISE DESIGN PATTERNS  - Integration Patterns: Data Accesss Object (DAO), Data Transfer Object (DTO), Asynchronous Resource Integrator, Web Service Broker  - Business Component Patterns: Persistent Domain Object (PDO),Session Fa - Infrastucture Patterns: Interceptors, Service Starter, Singleton, Resource Binder, Dependency Injection Extender      On successful completion of this module, students should be able to: 1. Demonstrate a comprehensive understanding of UML and OO design principles and the use of UML for design visualisation 2. Assess the use of patterns in the design of software systems 3. Develop UML models for design patterns using currently available software modelling tools 4. Evaluate and apply design patterns, architectural patterns and enterprise patterns to the development of software systems and the refactoring of existing systems. 5. Analyse legacy software components and system architecture, with review of the source code if available, to determine how integration with new and existing systems may be achieved    ", "Practical Algorithms COMPSCI1021   This course is intended for Graduate Apprenticeship students only.   &nbsp;   This course is designed to impart a breadth of knowledge on data structures, particularly with respect to the mathematical foundations involved in manipulating them. In doing so, it will also introduce students to foundational mathematical concepts in computing that will help them to better understand efficient programming and will provide a basis on which to build more complex mathematical concepts in later years of study.     The aim of this course is to introduce students to the fundamentals of data structures and the algorithms that govern them. They will learn about common structures found in programming and various methods of sorting, searching and sequencing them. They will also be introduced to algorithm complexity and proofs, which should help them to justify design decisions when creating their own software.     By the end of this course, students will be able to:  &nbsp;    1.   Implement basic data structures such as arrays, linked lists, binary trees and hash tables in a language of choice  .  &nbsp;    2.   Use recursion as an algorithm design technique in a piece of software  .  &nbsp;    3.   Analyse and implement a range of algorithms, including searching and sorting algorithms, and express their complexity using suitable notation  .  &nbsp;    4.   Use predicate logic, set theory and relational algebra to write assertions and use laws to prove them  .  &nbsp;    5.   Demonstrate an understanding of inductively generated structures and proof by induction  .  &nbsp;    6.   Deploy basic concepts of combinatorics in solving mathematical problems  .  ", "CS424 - DTSP Work-Based Learning 3 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies.&nbsp; Participants will undertake the following.&nbsp; Self-assessment (they will be asked to rate their performance with respect to a defined set of competencies).&nbsp;  Produce personal development plans.&nbsp;  Write reflective reports where they reflect upon tasks carried out at work, work-related events or courses that they have attended.  Produce evidence that they meet a set of competencies defined by a recognised professional body.&nbsp;  After completing this class participants will be able to:&nbsp; Demonstrate reflective work practices.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate their understanding and application of digital and technology solutions concepts within their work-place. ", "3D Mathematics for Simulation and Visualisation This module continues and enhances the foundation of mathematics for games technology. The module will cover the mathematical techniques needed by professionals in the simulation and visualization industries for the understanding and application of routines used in industry standard physics engines and graphics libraries.  1 Trigonometry: review of sine, cosine, tangent and inter-relationships application to 3D geometry. 2 3D Coordinate systems: cartesian spherical cylindrical quaternions homogeneous coordinate systems relative coordinate systems yaw, pitch and roll. 3 3D Geometry: vectors as models of position, velocity, acceleration and force symmetry parametric representations of curves and surfaces polyhedrons light sources triangulations. 4 3D Transformations: translations, rotations, reflections, inversions and scaling. 5 Projections: perspective axonometric. 6 Kinematics: position, velocity and acceleration of a moving particle rigid body motion. 7 Classical mechanics of particles: force Newton's laws equations of motion potential and kinetic energy. 8 Mechanics of rigid body motion: introduction to multiple integration inertia, angular momentum, torque Euler's theorem on rigid body motion. 9 Numerical methods: Euler method and backwards Euler Methods Runge-Kutta methods stability convergence. 10 Further forces: equations of aerodynamic and hydrodynamic lift viscosity elasticity. 11Collisions: conservation of energy and momentum coefficient of restitution. 12 Differential equations: differentiation and partial differentiation solving first and second order constant coefficient differential equations.      On successufl completion of this module, students should be able to:   1 Solve games related problems in 3D geometry. 2 Apply Newton's laws to modelling the motion of objects subject to a range of forces. 3 Demonstrate and apply standard projections of 3D space onto a surface. 4 Represent and manipulate objects with respect to different coordinate systems. 5 Compare and contrast numerical algorithms.     ", "CS453 - Introduction to Artificial Intelligence The aim of the class is to give learners a basic introduction to modern AI. Participants will develop a practical understanding of AI algorithms which enable autonomous systems to make rational decisions, AI systems which encompass a variety of such algorithms to achieve an overall goal, and the implementation of these in a suitable high-level programming language.  What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.&nbsp;  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).&nbsp;  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.&nbsp;  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.&nbsp;  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing, Monte Carlo Tree Search.&nbsp;  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches., PDDL (Planning Domain Definition Language).  After completing this class participants will be able to:&nbsp; Understand and define the problem of AI as it relates to autonomous systems.&nbsp;  Implement key AI algorithms and build AI systems.&nbsp;  Apply search techniques to enable autonomous systems to choose actions that are appropriate to their goals.&nbsp;  Apply key techniques to adversarial problems, such as Mini-Max and Monte Carlo Tree search.&nbsp;  Define problems as planning problems using PDDL and solve them using a planner. ", "CS114 - Software Engineering 1 The aim of the class is to provide a high-level overview of the software engineering lifecycle, software development processes, anatomy of software systems, testing principles and practices, maintenance and evolution.&nbsp;  High level overview of the software lifecycle from initial product conception through to retiral.&nbsp;  Software development processes (waterfall to agile to DevOps etc. and including project management).&nbsp;  Anatomy of a software system. High-level overview of a system (classes, modules, test cases, data files, etc.) and how these relate to each other and are managed (configuration/version control, e.g. Git) and built into a system (build tools such as maven, etc.).&nbsp;  Testing Principles. Role and purpose of testing. Testing levels (acceptance, system, integration etc.). Principles of designing tests.&nbsp;  Testing Practices. Running tests, testing tools, and handling test results. Filing bug reports.&nbsp;  Maintenance and Evolution. Concept of software maintenance. Filing and responding to feature requests. Regression testing. Making and committing changes. Continuous integration.&nbsp;  After completing this class, participants will be able to:&nbsp; Understand the software development lifecycle and the role that software development plays in their organisation.&nbsp;  Understand the activities involved in and the differences between the major software development paradigms.&nbsp;  Demonstrate an appreciation of the main components of a software system and the tools and techniques used to manage these.&nbsp;  Understand the role and purpose of testing and the basic principles of test design.&nbsp;  Demonstrate practical competence in the application of testing tools.&nbsp;  Understand the concept of software maintenance/evolution and demonstrate an appreciation of how this managed within their organisation.&nbsp; ", "CS104 - Information &amp; Information Systems To help students gain a broader understanding of the human and social aspects of&nbsp; today's information and data-driven world in the context of research and scholarship, government, business, health, education. The class will take a \u201chow it works\u201d approach, with particular focus on user and societal context. Information, Data, People and Society; Human and Social aspects of Information, Technology and Systems; Digital Skills/ Digital divide;&nbsp;  Information and Knowledge \u2013 published, unpublished, peer reviewed, internet, web, social media: technology for access/use of information and data;&nbsp; quality, value and &nbsp;trust issues  Data, Information, Big data, Social media: Impact on people, society, government, business, education and research, culture, entertainment  Open data, open science: progress of science and society; Economics of information vs. information economy; open data management challenges; socio-cultural issues of data sharing/reuse  When human becomes data; datafied society; &nbsp;misinformation, disinformation; cognitive impact of information and social media; social, personal, psychological issues  Information and data: ethics, trust, security, privacy; machine-generated data; ownership and value of data; information governance  Data in everyday life: data-driven government, business, education,&nbsp; finance/banking, health, environment/climate change  Human-centred information; Impact of digital information and data on human and society; Human information behaviour Emotion &amp; empathy vs. function; people behind data/communications  Information, data, sustainable development and global challenges: government, health, education, economy, employment, environment \u2026  Key issues and challenges around information, technology/systems, people &nbsp;and policies. &nbsp; On completion of this class, a student should be able: To understand what is meant by an information system.  To demonstrate a broad understanding of the technology underlying information systems, and in particular those information systems which have a deep impact on society.  To understand techniques for information and knowledge representation.  To understand key issues in information creation, sharing and dissemination.  To understand the user and social contexts of information systems.  To evaluate the success of an information system with respect to determined criteria for success for specific users and contexts.  To understand the design principles behind successful information systems in government, academia, business and &nbsp;health.  To appreciate the activities for the organization and processing of information that take place behind the scene to make digital information accessible to the users.  To understand the concepts of misinformation and disinformation and their implications for people and society.  To understand the role of data and information for sustainable development in different contexts. ", "Workplace Assessment Year 1 COMPSCI1024   This course is intended for Graduate Apprenticeship students only.   &nbsp;   Students will have three uninterrupted months in the workplace to be involved in real projects as part of a team.  &nbsp;During this time, they should develop a portfolio of work which they have contributed to, which should detail concepts covered in the academic year.  &nbsp;  This course, and the equivalent courses in each year of the programme, is intended to create reflective life-long learners.     The aim of this project is to allow students an opportunity to demonstrate the practical skills they have developed over the course of their first year of study. The project will provide them with a framework in which to document their understanding of workplace systems and detail their additions to the codebase.     By the end of this course, students will be able to:    1.   Demonstrate the use of a testing methodology in a software application  .    2.   Demonstrate software engineering best practices to write easy-to-read and suitably formed software  .    3.   Demonstrate an ability to identify code in a large codebase which can be refactored and describe an improvement process  &nbsp;  improvement process  .  ", "DevOps This module is concerned with the software engineering Development and Operations (DevOps) approach used in the creation of software systems. The module covers the rationale for DevOps and the key concepts of Development, Configuration Management, Continuous Integration/Delivery (CI/CD) and Operations. In addition, the configuration and use of a DevOps CD pipeline is covered.   The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Development and Operations (DevOps) Overview History of DevOps: Lifecycle Approaches, DevOps Origins in Agile, Benefits  DevOps Principles: Full Lifecycle Involvement, Systems Thinking, Definition of Done, Risk Reduction, Frequent Small Releases, Kaizen Cultural Challenges: Dev and Ops Conflict, Team Composition and Distribution, Organisational Structure, Automation Confidence  Configuration Management Version Control: Principles, Software Tools, Commit Everything, Mainline Work Managing Configurations: App Configuration, Feature Toggles, Third Party Components   Continuous Integration  Principles and Practices: Overview, Frequent Commits, Automated Testing,  Prioritising Broken Build Fixing, Continuous Feedback Quality Assurance: Development Standards, Static Analysis, Test Automation, Types of Tests, Managing Defects  Continuous Delivery Principles and Practices: Overview, Repeatable Software Releasing, Automation, Use of Version Control, Pain Points, All Responsible for Release, Continuous Improvement, Building Binaries, Identical Deployment Everywhere, Smoke Tests. Deployment Pipelines: Commit and Automated Acceptance Stages, Manual and Non-functional Testing, Release Rollback, Pushing to Production, Orchestration   Operations Infrastructure Management: Cloud, Virtualisation, Containers, Infrastructure as Code, Scaling, Monitoring, Continuity Planning Database Management: Test Data, Managing Change, Reverting Data Changes DevOps CD Pipeline Implementation: Planning, Building, Monitoring, Maintenance      On successful completion of this module, the student should be able to:  1 - Explain the rationale for Development and Operations (DevOps) and its underlying principles and challenges 2 - Demonstrate a detailed understanding of Development, Configuration Management, Continuous Integration/Delivery (CI/CD) and Operations including currently used supporting software tools 3 - Develop and configure a DevOps CD pipeline and demonstrate its use in the release of a software component.      ", "CS551 - Mobile Software and Applications To develop an understanding of the underpinning theories, paradigms, algorithms and architectures for building software applications to function in mobile computing environments.  Review of mobile system characteristics and their implications.  Physical and logical mobility.  Mobile systems architectures, programming models and middleware.  Sensing and context-awareness.  Mobile security and privacy.  The Android OS and development platform.  Research issues and emerging trends, e.g. persuasive computing, self management, etc.  On completion of the class, a student should be able to: appreciate and explain the problems associated with mobile software environments  identify and explain the models and techniques typically employed in the design and development of a range of software for mobile environments, and appreciate the limitations of these  appreciate the role and impact of context-awareness and persuasion in modern mobile applications  demonstrate the ability to implement selections from a range of the software typically used in mobile environments. ", "Data Structures and Algorithms This module covers the concepts associated with data structures and algorithms including the design of algorithms considering factors such as efficiency and complexity. A range of widely employed data structures such as Arrays, Lists, Trees and Queues are investigated. Coverage of algorithms such as searching and sorting as well as those associated with graph data structures are also included. The topic is covered in the context of object-oriented development and enables students to develop an appropriate object-oriented software solution given a simple set of requirements where consideration has been given to the use of the most appropriate data-structures and algorithms.   The percentage of Work Based Learning for this module, as represented by the Independent Learning 'Activity Type', is 61%. The percentage of Work Based Assessment for this module is 0%.  Data Structure and Algorithm Concepts: - History - Data Structure Definition: Relationship to OO, Container Classes, ADT - Algorithm Definition: Representing algorithms, Flowcharts, UML, Pseudo Code - Cost Estimation: Algorithm Analysis, Trade-Offs, Recursion, Algorithm Complexity, Big-O Notation  Data Structures and their Implementations:  - Arrays: one-dimensional, two-dimensional, n-dimensional, jagged - Lists: Singly Linked, Doubly Linked, Circular, Array List - Maps and Sets - Collections and Generics - Hashing: Hash Tables, Rehashing, Perfect, Universal  - Stacks and Queues - Trees: Binary, Binary Search, Expression, Splay, B-Trees and Tries - Graphs  Sorting and Searching:  - Bubble, Shell, Quicksort, Heap - Red-Black and AVL trees - Pattern matching and Regex expressions  Graph Algorithms: - Shortest Path, Depth First/Breadth First, Maximum Flow, NP Complete  Algorithm Design Techniques: - Divide and Conquer - Big-O  - Compression (LZW, Huffman)  - Encryption  - Searching and Sorting  - Data Structures      On completion of this module, students should be able to:  1 - Understand the concepts which underpin data structures and algorithms such as cost estimation and algorithm complexity.  2 - Understand the fundamental data structures and algorithms commonly used when developing software systems.   3 - Critically evaluate the data structures used with searching, sorting and graph algorithms.  4 - Develop an object-oriented solution which demonstrates the appropriate the use of a range of data structures and algorithms.     ", "Advanced Data Science This module will cover advanced methods and techniques of Data Science. Students will learn how to extract useful information from large datasets using a variety of analytical techniques. Focus will be given to approaches such as Bayesian statistical analysis, specifically prior and posterior distribution construction, decision theory and model selection. Students will also be introduced to Markov chain Monte Carlo methods and how they can be used to implement Bayesian models. Ultimately, students will be able to utilise Bayesian statistical techniques to build complex models of data.  Bayesian Theory - Subjective Probability - Bayesian Inference - Prior Distributions - Posterior Distributions - Normal Distribution Analysis - Binomial Distribution Analysis - Exponential Distribution Analysis - Poisson Distribution Analysis - Predictive Inference - Decision Theory - Point Estimation - Hypothesis Testing - Bayesian Modelling - Hierarchical Models - Bayesian Computation - Markov Chain Monte Carlo Methods - Gibbs Sampling - Graphical Models - Bayesian/MCMC Implementation      On successful completion of the module. student should be able to:  1. Prove and utilise Bayes theorem 2. Critically analyse data from various distributions (normal, binomial, exponential, poisson) 3. Understand the Bayesian approach to data analysis 4. Utilise Bayesian analysis to develop solutions to statistical problems 5. Understand and explain the Markov chain Monte Carlo (MCMC) approach to Bayesian implementation 6. Understand and explain Statistical Decision Theory 7. Implement Bayesian models using MCMC and appropriate software tools     ", "CS321 - Computer Networks To provide the participant with a solid foundation in the principles of computer networking and a basic understanding of the operation of the latest networking technologies. On completing this class, the participant should have the necessary skills to be able to design, build and test a small-scale communications network in a virtual environment.&nbsp; The class aims to provide a good grounding in the basics of computer networking. This module provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.&nbsp;It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.&nbsp;&nbsp;Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas:&nbsp; The role of web services for tactical battlefield communications&nbsp;  Adaptive, user experience driven video streaming in 5G mobile networks&nbsp;  Autonomous network management in virtualised, software defined networks&nbsp; Main topics covered:&nbsp; Introduction to Computer Networks: The uses of computer networks, network Hardware &amp; types of networks, protocols, layers &amp; network services, OSI &amp; TCP/IP reference models&nbsp;  Network architectures &amp; services&nbsp;  Layers of a network protocol stack: the physical layer, data link layer, internet layer, application layer  IP addressing and sub-netting&nbsp;  Network devices&nbsp;  Message passing and real time traffic support&nbsp;  Building a virtual network&nbsp;  Local Area Network design&nbsp;  Current trends in networking: cloud services, software defined networks, network function virtualisation  Emerging trends in networking: autonomous network management, 5G mobile networks&nbsp;  After completing this class participants will be able to:&nbsp; Demonstrate a broad knowledge of the area of computer networking and its terminology.&nbsp;  Demonstrate an understanding of the operation of a range of networking protocols and devices.&nbsp;  Demonstrate an understanding of the TCP/IP and OSI models.&nbsp;  Demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks)&nbsp;  Design, implement and test a basic communications network in a virtual environment.&nbsp; ", "Programming and Systems Development (H) COMPSCI4084   Provides a short, intensive, hands-on introduction to the software and tools necessary for the MSc programmes in Computing Science: the Java and Python programming languages,  &nbsp;associated   tools, and  &nbsp;  the  &nbsp;LINUX operating system.     \u25a0&nbsp;  To   enhance existing skills  &nbsp;  and practical processes for  &nbsp;programming in Java and Python, which are the main languages used in the MSc programme    \u25a0&nbsp;  To improve skill at using online information to pick up new languages, APIs or tools    \u25a0&nbsp;  To become familiar with common tools needed to build working systems, including repositories, virtual machines and servers.    \u25a0&nbsp;  To  &nbsp;develop   knowledge  &nbsp;of the use of the LINUX operating system and experience of using the tools available under LINUX for programming and system administration.     By the end of this course students will be able to:    1.   Demonstrate familiarity with the relevant   modern   programming environments;     2.   Use the command line and a text editor competently, ideally with experience with a modern IDE  ;  &nbsp;    3.   Develop well-structured programs in Java and Python  ,   and   be proficient in  &nbsp;look  ing  &nbsp;for online  &nbsp;help  , and be prepared to pick up new skills independently  ;    4.   Explain  &nbsp;the importance   of   concise and informative documentation, and use modern documentation tools  ;    5.   Provide evidence of program correctness through thorough testing  ;    6.   Describe and use  &nbsp;version control processes, and be able to c  heckout  &nbsp;and use  &nbsp;a repository  &nbsp;(e.g. git)  ;    7.   Launch, edit and use Jupyter/Colab notebooks (including ability to work with   basic operations on   numpy arrays)  ;    8.   Use basic SQL from Java and Python  , and be able to set up a basic server  ;    9.   Be able to spin up a   Container   (e.g.   Docker VM (and/or Kubernetes)  )  ;    10.   Creating/adapting a basic graphical user interface (give them some exposure to a modern GUI and how to adapt it)  ;    11.   Describe  &nbsp;the basics of user interaction with the Linux shell  ,   file navigation, system monitoring, printing  ;    12.   Explain  &nbsp;how to install and configure software under Linux  , and b  e able to write and execute simple Linux shell scripts  .  ", "CS116 - Introduction to Programming The aim of the class is to give participants a solid foundation in programming and equip them with the ability to write programs.  Introduction to Objects: Objects and Classes. Class Definition. Fields. Basic Types (int, char, bool) and Strings. Methods. Parameters. Return Types. Scope. Visibility. Object Interaction. Class and Object Diagrams.&nbsp;  Selection and Iteration. Conditional Statements. Boolean Expressions. For Loops. While Loops. Nested Loops. Switch Statement.&nbsp;  Collections Arrays. ArrayLists. HashMaps. HashSets. Java API. Iterators. Foreach Loop. Generic Collections.&nbsp;  Inheritance and Interfaces. Inheritance. Overriding. Static and Dynamic Types. Subtyping. Polymorphism. Type Substitution. Interfaces. Abstract Classes. Object Class&nbsp;  Input-Output and Error Handling. Console Reading and Writing. File Reading and Writing. Exceptions. Defensive Programming. Testing and Test-Driven Development. JUnit. Debugging.&nbsp;  Graphical User Interfaces (GUIs) GUI Components. GUI Layout. Event Handling.&nbsp;  After completing this class participants will be able to:&nbsp; Appreciate the role of a high-level language within the context of a computer system.&nbsp;  Understand the program development process.&nbsp;  Understand the principles of program design and demonstrate their practical application.&nbsp;  Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.&nbsp;  Demonstrate familiarity with a sophisticated interactive development environment (IDE). ", "CS410 - Advanced Functional Programming To provide the student with further skills in functional programming and an appreciation of the mathematical structures which underpin powerful general programming concepts and techniques. Understanding the mathematical structures arising in advanced functional programs as mediated by the following concepts: type classes and constructor classes, monoids, functors, applicative functors, monads and monad transformers, arrows, comonads, inductive and coinductive types, recursion patterns including folds and unfolds, continuations, and generalised algebraic data types.Using these concepts to achieve the following features of code: abstraction, code reuse, type guarantees of validity and safety, data structures equipped with mathematical structure.Applying the ideas learned in the course to specific programming problems, possibly including the following: interactive processes, input/output, environment handling and modular interpreters, zippers, parsers, type checkers, graphical user interfaces, and transaction processing.For the most part, the class will be mediated in Haskell, but other functional programming languages may be explored. Advanced material may involve the categorical background to the functor class hierarchy, or the basics of functional programming with dependent types. On completion of the class, a student should be able to understand the advantages of high-level programming languages;  to understand the advantages of using mathematics to structure programming;  to understand the principles of functional program design and demonstrate their practical application;  to design and implement significant software systems, e.g. those arising in fourth year projects. ", "Front-End Web Development This module provides students with the technical foundation to enable them to develop applications which are executed within a web browser. The module covers HTML5, JavaScript frameworks and libraries and other appropriate technologies with implementations that allow client-side scripts to interact with the user, control the browser, communicate asynchronously and alter document content. In addition, widely applied patterns used for client-side web application development are covered.  While undertaking the module students develop applications that consume remote services using appropriate technologies and data formats within browser-based applications.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.  Advantages and disadvantages of large-scale browser-based JavaScript applications  HTML/CSS :  -HTML 5 capabilities, ie.g. canvas, video and audio,  -new and emerging features e.g. offline support and client-side storage elements, -CSS pre-processing, for example LESS, SASS  JavaScript :  -current programming techniques and practices in JavaScript including DOM scripting techniques and applying object-oriented principles in JavaScript -design patterns relevant to web applications e.g. Module, Revealing Module, Singleton, Constructor MVC, MV*  Creating large-scale browser-based JavaScript applications : -architecture and design issues, including architecture patterns, modularisation and dependencies, routing/navigation/history, templating/binding, data access, event-driven messaging  -libraries and frameworks which support development of large-scale JavaScript applications, for example e.g. jQuery, Bootstrap, AngularJS  -application building and deployment -security: preventing cross-site scripting, Content Security Policy  Working with services :  -REST services -asynchronous requests and callbacks -XMLHttpRequest/AJAX -cross-origin requests -authentication  Real-time web communication :  -server push  -publish-subscribe  -peer-to-peer  -techniques and technologies for real-time web communication, including: polling, long polling, WebSocket, HTML5 Server-Sent Events, WebRTC  -frameworks which support development of real-time web applications   Testing and debugging :  -unit testing in JavaScript  -client-side test frameworks  -use of tools for debugging JavaScript  -use of tools for debugging HTTP requests/responses  Alternatives to JavaScript, for example WebAssembly, TypeScript      On successful completion of this module, students should be able to:  1 - Determine an appropriate distribution of functionality between the front end (client) and back end (server) tiers of a web application 2 - Demonstrate an understanding of the architectures and design patterns commonly used to create front-end web applications.  3 - Critically appraise and select frameworks and libraries which meet specific purposes within the architecture of front-end web applications. 4 - Evaluate the requirement for real-time functionality to enhance responsiveness within a web application. 5 - Develop and test a rich, responsive, secure and scalable front-end web application which can be executed within a modern web browser and interacts with remote services, making use of appropriate technologies, libraries and frameworks.      ", "Data Protection and Ethics This module will provide students with essential knowledge and understanding in the field of data protection and ethics in the context of data science. Students will develop an awareness of the complications that come with user data, what privacy means and how data protection relates to the developer and user. This module will utilise case studies to demonstrate the consequences of when data protection is not upheld. It will also introduce techniques to deal with private data such as anonymising big? data sets and the various laws that enforce data protection. Students will learn about the fundamental principles of data ethics, a branch of ethics that evaluates moral issues related to data. This involves thinking about transparency, accountability, fairness, privacy, the law, moral dilemmas, and the risks involved in creating data-driven technology from the outset. Students will be trained to consider the ethical implications of their own data-based work.. Focus will be given to the ethics of using data science, data protection and privacy, and algorithmic governance. Students will be able to provide advice on ethical decision making based on modern corporate values. The percentage of Work Based Assessment for this module is 10%.  Data definitions and concepts Contextualisation of Data Data Protection and Privacy in utilisation, storage, sharing, purging and archiving Data laws/legislation and their implications Data collection and consent Data anonymization and usage Data Security and Distribution Algorithmic fairness and types of bias Ethical Machine Learning Research in Ethics. Accountability and governance?      On successful completion of the module the student should be able to:-  1. Understand the requirement for data protection 2. Understand the various concepts of ethics and privacy 3. Understand the ethical implications of using data 4. Understand the laws surrounding data protection 5. Demonstrate an awareness of sources of, and effects of, bias or discrimination in terms of data utilisation 6. Implement data anonymization practices 7. Conduct ethics/privacy assessments for data-driven projects     ", "Cloud Virtualisation Security This module provides a systematic study of the techniques and practices of protecting systems level security in cloud computing, i.e., virtualisation, which, in the event of being compromised, would cause catastrophic consequences for cloud infrastructures and service customers. The module will focus on the security issues arising from the use of virtualised infrastructures and will investigate the vulnerabilities and security techniques of hypervisors or virtual machine monitors (VMM) together with containers. The module will emphasise current industry strength techniques of achieving cloud virtualisation security. The module will equip students with hands-on skills and experience through targeted lab work.  - Security threats and risks of virtualised infrastructures, including hypervisors and containers - Mitigation and protection techniques for cloud virtualisation ovulnerability assessment methods oadvanced persistent threats (APT)  - Security in container, Linux and Windows - Compulsory and discretionary access control for cloud virtualisation - Virtual Machine Introspection (VMI) - IDS/IPS for cloud virtualisation - Malware analysis for cloud virtualisation - Security monitoring of cloud virtualisation environments osecurity information and event management (SIEM) for cloud virtualisation oin-box vs. out of box, interception of hypercalls osecurity analytics and machine learning techniques  Examples of tasks undertaken by students in practical sessions are:  Installation, configuration and test of the following toolkits: oOpen-source cloud platforms, e.g., VirtualBox and Kernel-based Virtual Machine (KVM), and licensed enterprise could platforms, e.g., Microsoft Azure oOpen-source toolkits for capturing traffic and logs, and IDS, e.g., Wireshark, netsniff-ng, snort. oOpen-source toolkits for security analytics, e.g., Apache Hadoop, Apache Storm and Cassandra, R.      On completion of this module the student should be able to:  Demonstrate a critical and systematic understanding of vulnerabilities and their assessment methods at the virtualisation level of cloud computing. Critically evaluate the design and the implementation of state-of-the-art security monitoring and analytics techniques for cloud computing. Demonstrate practical skills in the analysis and management of cyber security for cloud computing. Apply techniques for systems isolation and disaster recovery management in cloud computing environments.     ", "CS106 - Computer Systems &amp; Organisation  Semester 1:  to enable the student to develop an understanding and appreciation of a computer system\u2019s functional components \u2013 both hardware and software, their characteristics, their interactions, and their fundamental role in the manipulation of data. Semester 2:  to further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.  Semester 1:  Machines and Computation: Brief history of computers and the nature of computation, e.g. how arithmetic expressions are evaluated.  Introduction to Operating Systems: brief history, role and purpose, basic functionality and operation, the tradeoffs in operating systems design, the influences of different computer systems and environments, security and open source software on operating system design.  Introduction to Net-centric computing: brief history and the development of the Internet, the range of specialisations within net-centric computing, emerging technologies and their capabilities, limitations and near-term potential.  Introduction to a simple computer: CPU basics and organisation (registers, the ALU, the Control Unit and datapath); the bus; clocks; I/O; memory; interrupts).  Basic Functional (Hardware) Components of Computer Systems: for example, CPU, memory, I/O, networks.  Basic Functional (Software) Components of Computer Systems: for example, assemblers, compilers, and operating systems.  Elementary assembly language programming: simple computations involving loops, counters, and accumulation; awareness of bugs.  Representation of numeric data: unsigned binary, signed magnitude, and twos complement, floating point; twos complement arithmetic; range, precision, and errors in floating point arithmetic.  Representation of text, audio, and images; issues associated with compression and communication, e.g. how JPEG works and when it doesn\u2019t; Huffman coding.  Function of logic gates; sum of products expressions, Boolean algebra, combinatorial and sequential logic circuits, for example those for multiplexers, adders, registers, shift registers, counters, overflow detection; PLAs.  Semester 2:  Introduction to instruction set architecture, micro-architecture and system architecture.  Processor instruction set architecture: instruction types and formats, register sets, addressing modes.  Processor structures: memory-to-register architectures; load/store architectures; overview of Flynn\u2019s classification of computer architectures.  The relationship between low-level and high-level programming languages.  Instruction sequencing, flow-of-control, subroutine call and return mechanisms.  Low-level architectural support for high-level languages.  Low-level architectural support for operating systems.  Low-level architectural support for concurrency.  Memory: types of memory, overview of the memory hierarchy.  Input/Output: types of I/O; overview of common I/O devices and interfaces.  Networks: types of network; overview of common network standards, protocols, and interfaces.  Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments.  On completion of the first half of the class, a student should have developed an understanding of: The function and basic operation of the fundamental hardware components of computer systems.  The function and basic operation of the fundamental software components of computer systems.  The hierarchy of, and the interaction between, the components of a typical computer system.  The concept of a logical layer and the benefits of building abstract layers in hierarchical fashion.  The need for APIs and middleware and how computing resources are used by application software and managed by system software.  The evolution of early networks and the Internet and the structure of a typical, current, network architecture.  The concept of an instruction set architecture (ISA), and the nature of a machine-level instruction in terms of its functionality and use of resources (registers and memory).  The various classes of instruction: data movement, arithmetic, logical, and flow control; their use and abuse in simple programs.  The typical types of data/number/information representations and the implications of these for calculations and transformations.  Boolean functions and logic expressions and their implementation in digital logic gates, and combinational and sequential circuits. On completion of the second half of the class, a student should be able to: Demonstrate their knowledge of data/number/information representations and the limitations of such representations.  Appreciate how a CPU may be constructed from combinational and sequential logic circuits.  Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.  Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.  Appreciate how conditional operations are implemented at the machine level.  Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.  Appreciate how an ISA has an impact on high-level languages and the design of compilers.  Understand the basic principles of operation of the memory, I/O and network subsystems of a typical computer.  Appreciate how future developments in computer systems may be influenced by current trends and technologies. ", "CS308 - Building Software Systems To extend and deepen the students understanding of the analysis, design and implementation of software systems; to provide further experience in the activity of designing and implementing non-trivial systems; and to enable the student to demonstrate practical competence in a group environment.The goal for the student is the development in a group setting of significant systems from scratch aiming not just at  any  solution but a good solution, and to be introduced to more general Software Engineering topics. Further study of software engineering methods drawn from the following: requirements analysis and specification, establishing stakeholders\u2019 viewpoints, use-case modelling, systems analysis, specification, design (in particular the development of a detailed design for the construction phase, designing for re-use and future change, further design patterns, design metrics, implementation and testing of designs), implementation, defensive programming, verification and validation, and maintenance. Further study of software development tools, especially those that facilitate software development in a group context (e.g. version control and configuration management tools, xUnit etc.). Software engineering management: project management, team organization.The substantial practical activity will exercise skills from a selection of syllabus topics, and will incorporate group projects. This material thus provides a broader experience of the management and organisation of software processes for the production of large-scale software. On completion of the class, a student should be able to: understand the need for working effectively within a team environment, on practical software engineering problems, including planning and managing a group\u2019s workload  display a disciplined approach to good practices in the general area of software engineering, and to apply software engineering techniques to practical problems  appreciate the importance of organisation, management and professionalism in the development of large scale software  undertake a requirements analysis and to write a software requirements specification  determine, from an object-oriented analysis, a detailed design which incorporates the necessary technical infrastructure and which provides a basis for implementation  identify opportunities for re-use, including the use of design patterns  distinguish between designs in terms of their intrinsic quality and in terms of objective criteria such as flexibility, robustness to change etc.  implement, verify and validate a medium-sized software system  effectively employ a range of software development tools e.g. IDEs, version control, testing and issue tracking ", "CS451 - Design Patterns and Software Architecture The aim of the class is to enable participants to understand the challenges of advanced software design and the issues associated with large-scale software architectures, frameworks, patterns, and components. Participants will develop their understanding of tools and techniques that may be used for static and dynamic analysis of software.&nbsp;The class focuses mainly on practical aspects of software development involving extensive Java programming and investigating the application of large Java frameworks.&nbsp; Indicative content:&nbsp; Software Design: key design principles and heuristics and trade-offs between these.&nbsp;  Design Patterns&nbsp;  Software Architecture&nbsp;  Frameworks&nbsp;  Major approaches to automated evaluation and analysis: dynamic analysis and static analysis  After completing this class participants will be able to:&nbsp; Have a practical understanding of how to automatically evaluate software systems using static and dynamic analysis.&nbsp;  Identify, understand, and apply common software design patterns.&nbsp;  Have a practical understanding of the software development process using frameworks.&nbsp;  Identify and apply classical software architectural styles. ", "CS207 - Advanced Programming To further the students\u2019 skills in object-oriented programming, provide knowledge of key abstract data types along with their implementation and usage, and to provide experience in the development of&nbsp; software and an introduction to design. The main goal is for students to be able to develop programs with specialized data structures and utilizing APIs from a specification, and being able to ensure and show how the system they developed matches the specification.  Introduction to Abstract Data Types*: lists, stacks, queues, hash tables, trees, sets, graphs etc.; examples of their definition, different implementations, ADT class libraries and their usage.  Key algorithms associated with ADTs such as searching and sorting*: introduction to a range of techniques, including the divide and conquer approach. Implementation of algorithms and abstract data types (the aim here is to present a small number of basic, popular algorithms to enable pragmatic implementation, rather than comprehensive coverage).  Trees: n-ary and binary* trees; typical instances and uses of trees; ADT implementation; algorithms covered include insertion* and traversal; the significance of different modes of traversal.#  The second semester will introduce the overall software development process. This will include requirements, analysis, design, implementation and testing. These stages will be documented using models such as class diagrams, activity diagrams, and sequence diagrams as defined in the Unified Modelling Language (UML).An essential feature of this class is the practical element \u2013 the opportunity for students to experience the design and implementation of a small system in small teams.* topics to be covered in semester 1, to facilitate semester 2 content of CS208  On completion of this class, a student should be able: to understand and have implemented a range of fundamental abstract data types.  to understand a number of essential algorithms that are closely associated with these data types.  to use these algorithms and abstract data types in practical applications.  to gather and document requirements using a modelling approach such as use cases.  to design a small system using a modelling approach such as class diagrams.  to implement a software design to produce a small system as part of a team.  to write unit tests for code to verify an implementation ", "Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026) This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics. This course is an important foundation for all areas of Informatics.  \n \nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis.  \n \nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications). \n \nThe following is an indicative list of topics covered: \nAsymptotic notation and algorithmic analysis \nSequential data structures (lists, stacks, queues) \nBasic and more advanced sorting algorithms \nTree data structures, heaps and priority queues \nHashing and dictionaries \nGraphs and graph algorithms \nDynamic programming \nThe classes P and NP \n \nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples. On completion of this course, the student will be able to:\n     \n         explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms  describe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings  work with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)  describe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems  define informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance \n     ", "CS210 - Computer Systems and Architecture To enable the student to: understand and program in the C programming language  create system programs in C for the Linux operating system  understand how modern operating system enable computer programs to run as processes  Semester 1: students will learn how to program in C. The material will be assessed using weekly exercises (20%) and an individual programming assignment (30%).Semester 2: students will learn how processes run in modern operating systems (assessed by a class test worth 25%) and complete a large group practical to create a systems program for Linux, written in C (worth 25%). On completion of the class, a student should be able to: write programs in C, including the use of data structures and pointers  understand how memory is used and referenced in C  understand how the compilation process works in C  write systems programs in C using system calls  understand how processes are created and managed  understand how multiple process can run in modern operating systesm ", "Database Development This module will provide students with an understanding of the techniques used in the design and implementation of modern Relational Database Systems. It will cover the principles of Relational Data Modelling, data definition and querying using SQL, integration of databases with applications and security support. The module will also expose students to non-relational database technologies.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Relational Model Principles of the relational model Normalisation  Structure Query Language (SQL) Table definition and constraints Queries Stored procedures Security support  Application Integration Database connectivity Object Relational Impedance Mismatch  Non-relational database technologies NoSQL databases      On completion of this module, students should be able to:  1 - Demonstrate an understanding of Relational Data Modelling 2 - Use SQL to define database tables and queries 3 - Demonstrate an understanding of the integration of databases with applications including security implications 4 - Apply appropriate APIs to develop and query selected non-relational database technologies      ", "CS547 - Advanced Topics in Software Engineering To introduce students to a selection of recent advances in software engineering, along with some of the challenges and outstanding problems.The detailed aims of the class are: To make students aware of key aspects of current software engineering research.  To familiarise students with the state-of-the-art in terms of what problems can be solved and what are the current exciting challenges.  To develop the necessary skills in students to allow them to contribute to the software engineering research community.  To equip students with the skills and background to appreciate the contributions to software engineering research across the full range of material presented at the key international conferences in the field.  The material from the class will be drawn from recent major conferences in software engineering (e.g. ICSE, ICSM, ASE, RE) and journals (e.g. IEEE TSE, TOSEM, EMSE). The class will study a relatively small number of subjects in depth, and where possible develop, implement and evaluate solutions.The class also maintains a strong practical focus and students will be required to develop prototype tools to explore some of the topics covered in greater depth. After completing this class students will be able to: Recognise the limitations of current approaches and systems and identify unsolved problems in the field  Apply and or employ any implementations of recent developments (e.g. tools, languages, frameworks etc.)  Build prototype or proof of concept tools to demonstrate and/or evaluate recent developments  Read, review, and critically appraise software engineering research papers ", "CS253 - Information and Data 2 The aim of the class is to provide participants with a conceptual and practical understanding of data modelling, database design and database technology. The class then builds on a basic understanding of the relational database approach, covering more complex SQL query design and efficient execution.  Introduction to the Database Environment: functions of a database management system;&nbsp;  Entity Relationship modelling.&nbsp;  The Relational Data Model, relational algebra, integrity constraints.&nbsp;  Relational query languages.&nbsp;  Normalisation.&nbsp;  JDBC&nbsp;  NoSQL  After completing this class participants will be able to:&nbsp; Show an appreciation of the facilities and services which should be provided by a fully featured database management system.&nbsp;  Demonstrate knowledge of commonly occurring data models.&nbsp;  Display knowledge of the process of designing a database system, starting from an informal specification.&nbsp;  Display skill in formulating database queries using SQL.&nbsp;  Demonstrate an ability to utilise triggers / stored procedures, and understand the importance of indexing.&nbsp;  Display knowledge of potential future developments in database technology. ", "CS549 - Distributed Information Systems To help the student to an extended understanding of the deep technical issues underlying information systems in the particular context of distributing content over the world-wide web. Topics to be selected from: Review of the fundamental principles of database management systems.  Query processing and query optimisation.  Review of Multi-tier architectures and Internet applications, XML data, P2P data management.  The history of the Semantic Web. Syntactic vs semantic web. Ontologies.  The layered approach to the Semantic Web. XML, the tree model of XML documents, XML Schema  Querying XML documents, XPath.  RDF (Resource Description Framework). RDF Schema. RDF/S semantics.  Ontology engineering.  Query design in directed, labelled graphs with SPARQL.  Introduction to Description Logic.  Proof and Trust in the Semantic Web.  OWL  Web technologies including Web data mining and collaborative quality filtering.  Technology for developing countries.  On completion of the class, a student should be able to (to the extent appropriate for an MEng graduate): understand how to approach the design of a distributed global application and choose an appropriate technology for each of its components  appreciate the range of issues involved in the development and maintenance of an application that potentially involves access by many users but also may be updated by editors whose ability to change must be limited  demonstrate an ability to address through relevant implementation a range of the deep technical issues underlying the realisation of globally distributed information systems ", "CS427 - IBM IT Architectures Make it possible for students to work with IBM IT architects and learn from industry experts. - Meta level IT architecture patterns - Developing an IT architecture within constraints - What an IT architectect does all day - Converting a requirements document to an IT architecture  Appreciate the complexity of architecting IT systems  Be aware of standard IT architecture patterns and be able to apply them  Be able to present IT Architecture proposals to a \u201cclient\u201d  Be able to take a set of specifications and work within a team to architect an IT system to specification  Learn to present solutions to expert audience and accept constructive criticism  Working in a team to architect a system ", "Undergraduate Course: Informatics 1 - Introduction to Computation (INFR08025) This course is only available to Informatics students and those on combined Informatics degrees with Maths and PPLS. \n \n**This 20 credit course replaces the two 10 credit courses - 'Informatics 1 - Functional Programming INFR08013' and 'Informatics 1 - Computation and Logic INFR08012' from 2018/19**. \n \nAn introduction to concepts of programming, using a functional programming language, and to concepts of computation and specification using finite-state systems and propositional logic. These provide examples of the logical ideas of syntax and semantics and the computational ideas of structure and behaviour. Students learn to specify, model and solve small-scale problems succinctly and at an abstract level. An introduction to concepts of programming, using the Haskell functional programming language, and to concepts of computation and specification, using finite-state machines and propositional logic. The use of sets, functions and relations to describe models of logic and computation. Programming using functions and data structures, including lists and trees, equational reasoning, case analysis, recursion, higher-order functions, algebraic and abstract data types. Finite-state machines as a basic model of computation: deterministic and non-deterministic automata; regular expressions; acceptors; structured design of finite state machines. Propositional logic: truth tables; satisfiability; deduction. Applications from different areas will be used to illustrate and motivate the material. On completion of this course, the student will be able to:\n     \n         use sets, functions and relations to create a simple mathematical model of a real-world situation and use the syntax and semantics of propositional logic to express simple constraints  solve simple programming tasks and define appropriate data types. Choose appropriate decompositions of given problems and compose corresponding functional programs from suitable function definitions, including their types  read and write programs that use basic list processing functions, list comprehensions, case analysis, recursion, and higher-order functions. Understand algorithms for searching and sorting. Document, test and debug programs  formalise simple propositional reasoning using various methods, including truth tables  design finite state acceptors for particular languages. Use regular expressions to search for simple patterns. Understand the relationship between finite state acceptors and regular expressions \n     ", "Undergraduate Course: System Design Project (INFR09032) The System Design Project is intended to give students practical experience of (a) building a large scale system (b) working as members of a team. The project involves applying and combining material from several courses to complete a complex design and implementation task. At the end of course each group demonstrates its implemented system and gives a formal presentation to an audience of the students, supervisors, and visitors from industry. During this project students work in groups of about ten on the design and implementation of a complete system to solve some practical and useful problem. Each group can choose the specific task within the broad theme of 'assistive robotics',  i.e., the system should be envisioned as able to perform an autonomous task in the real world, and will develop a demonstrator (which may exist in simulation or hardware). Recent examples of projects include: a robot shopping trolley for the visually impaired; smart switches to convert any household switch to be remote controlled with an app; a robot chess opponent; robot rubbish collection and sorting; etc.  \n \nThe aim is to produce a system that provides a convincing demonstration of a potential product, suitable for presentation to a client/investor. It should thus include significant development of supporting software, user interfaces, and either real or physical simulation mock-ups. These should be integrated into a complete working system, showing that core problems have been solved. There will be support for hardware construction as required, through a dedicated lab space with a wide range of equipment available, and/or through commissioning the technical support team, with a budget for equipment and support time available to each group.  \n \nOnline workshops and dedicated office hours from domain experts will be available to advise and guide all aspects of the task, such as time and task management, hardware design, software libraries, interfaces, etc. Each group is assigned a mentor. The mentor's task is to advise and provide feedback on the progress of the group during the project but not to provide technical support. Groups meet with their mentors at least once a week. They also meet amongst themselves more frequently to plan and coordinate their activities. Specific demonstration points are timetabled regularly during the semester when progress will be assessed and feedback provided.  \n \nTowards the end of the semester, a day is set aside for groups to demonstrate their implemented system and to give a formal presentation of it to an audience of the students, mentors, and visitors from industry.  \n \nRelevant QAA Computing Curriculum Sections: Computer Based Systems, Systems Analysis and Design None", "CS552 - Industrial Placement 2 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the Computer Science MEng degree, but if circumstances require it can be undertaken later in the course than the end of third year.The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. On completion of the class, a student should be able: to build on material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to pull together ideas from one or more of the classes they have undertaken  to display a disciplined approach to good practices in the general area of the degree course to undertake independent writing and working", "CS459 - Digital Forensics The aim of the class is to enable participants to understand issues associated with the nature of cybercrime, digital evidence, detection methods and proof, in a variety of digital forensic contexts, including computers, networks and portable digital devices. Indicative topics&nbsp; Context, Legal and Practical Considerations&nbsp;  Cybercrime; Forensic process; Legal process and law enforcement; ACPO guidelines; Digital evidence; Incident response&nbsp;    Computer Forensics&nbsp;  File Systems (File system organisation, Memory, Registry, System logs); Disk imaging; Programs and their traces; Searching and analysis; Investigative tools (Open Source and Proprietary)&nbsp;    Network Forensics&nbsp;  Intrusion detection; Attack trace-back; Packet inspection; Log analysis&nbsp;    Anti-Forensics and Hostile Code&nbsp;  Other topics&nbsp;  Mobile devices, Virtual forensics&nbsp;    After completing this class participants will be able to:&nbsp; Understand the varieties and impact of cybercrime.&nbsp;  Understand how to undertake digital forensic examinations, where evidence is collected to support or oppose a hypothesis.&nbsp;  Understand the role of the file system in detecting and mapping user activity.&nbsp;  Understand network-based detection techniques.&nbsp;  Understand the nature of anti-forensics.&nbsp; ", "Undergraduate Course: Machine Learning (INFR10086) ***This course is a replacement for Introductory Applied Machine Learning (INFR10069)*** \n \nSince the early days of AI, researchers have been interested in making computers learn, rather than simply programming them to do tasks. This is the field of machine learning.  The main area that will be discussed is supervised learning, which is concerned with learning to predict an output, given in-puts. A second area of study is unsupervised learning, where we wish to discover the structure in a set of patterns, i.e. there is no output \"teacher signal\". \n \nThe aims of the course are to develop knowledge and a critical appreciation of the various techniques covered in the syllabus, and to be able to apply, validate and refine the methods in practice. The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable. \n \n-\t Classification and Regression:  Linear Regression, logistic regression, Bayes classifiers  \n-\t Expanded feature representations: Basis functions, decision trees, neural networks, kernel methods  \n-\t Generalization and regularization: Penalised cost functions, Bayesian prediction, under- and over-fitting  \n-\t Model selection and performance evaluation: Cross-validation, ROC and PR curves  \n-\t Ethics and machine learning: Fairness, accountability, transparency, privacy concerns  \n-\t Representation learning: Dimensionality reduction, clustering, feature learning  \n-\t More advanced methods \n \nTo support these topics we will also cover:  \n-\tOptimization and Stochastic gradient descent  \n-\tPractical issues: Formulating problems as machine learning, adapting methods to fit problems.  Numerical and programming issues important for machine learning. Books that may be useful, but are not required: \n \n- Bayesian Reasoning and Machine Learning. David Barber (CUP, 2012) \n- The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Trevor Hastie, Robert Tibshirani and Jerome Friedman (Springer, 2009) \n- Pattern Recognition and Machine Learning, Christopher Bishop (Springer, 2007) \n- Machine Learning: A Probabilistic Perspective. Kevin P Murphy (MIT Press, 2012)", "Postgraduate Course: Probabilistic Modelling and Reasoning (UG) (INFR11235) This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead. This course follows the delivery and assessment of Probabilistic Modelling and Reasoning (INFR11134) exactly. Undergraduate students must register for this course, while MSc students must register for INFR11134 instead. On completion of this course, the student will be able to:\n     \n         define the joint distribution implied by directed and undirected probabilistic graphical models, convert between different graphical models, and carry out inference in graphical models from first principles by hand  demonstrate understanding of frequentist and Bayesian methods for parameter estimation by hand derivation of estimation equations for specific problems  critically discuss differences between various latent variable models for data and derive EM updates for various latent variable models. Demonstrate ability to implement approximate inference and learning methods  explain when and why the methods taught in the course are applicable and demonstrate experience gained from practically implementing them \n     ", "Undergraduate Course: Informatics 2 - Software Engineering and Professional Practice (INFR08032) Software Engineering and Professional Practice teaches the practice of small team software development in modern society, equipping students to participate in a start-up, modern tech company or a software-dependent research team. \n \nStudents will gain experience developing a software system from scratch, using some of the key tools of the trade: analysing requirements, designing and implementing new features, testing, version control. \n \nProfessional aspects of Software Engineering - its legal, ethical and social environment, including issues of privacy, security, equality, democracy and intellectual property - will be approached through lectures and some practical work. As students enter this course they team up in groups of two to develop a small-scale software system from scratch using an iterative waterfall process. Over the course of the semester, they consider an incomplete specification to derive and analyse requirements, design their solution from a static and dynamic perspective using UML diagrams, construct and test their solution in Java. There is room for interpretation, creativity, and some of the requirements change along the way. Moreover, there are technical, professional and ethical issues surrounding the problem at hand, on which students will need to reflect.  \n  \nIncluded in the experience will be use of industry standard tools for software development (integrated development environments, version control, issue tracking), and key elements of modern development practice, such as code review, peer review, and pair programming.  \n  \nAs students engage in this practical work, the course will contextualise it against the broader themes, both of large-scale software engineering and its academic literature, and of today's urgent professional issues: the legal, ethical and social context in which software and its authors exist. Guest lecturers will speak on technical topics, but also on topics such as privacy, security, equality, democracy and intellectual property - some of which will have a direct impact on students' practical work. Sommerville 'Software Engineering' \nSommerville 'Engineering Software Products'  \nACM code of ethics: https://www.acm.org/code-of-ethics  \nBCS code of conduct: https://www.bcs.org/membership/become-a-member/bcs-code-of-conduct/", "Individual Project (H) (Combined) COMPSCI4024P   The aim of the individual project is to allow students to undertake a substantial piece of individual work, involving planning, specification, design, execution, evaluation, presentation and report-writing.     The aim of the individual project is to allow students to undertake a substantial piece of individual work, involving planning, specification, design, execution, evaluation, presentation and report-writing.     By the end of the course students will be able to:   &nbsp;   1.   Manage and organise a large independent solo piece of work  ;    2.   Choose among technologies, tools and approaches and apply them effectively  ;    3.   Synthesise technical skills appropriately to address a single challenging problem  ;    4.   Develop a substantial product which demonstrates technical   achievement in computer science;    5.   Appropriately evaluate the outcome of their work  ;    6.   Conduct themselves in a professional manner, taking responsibility for the progress of the project, recording their time and effectively using their supervisor's input  ;    7.   Write a coherent, literate dissertation that documents the project, justifies decisions made and sets their work in context  ;    8.   Present their work orally to a technical audience, communicating their project precisely and fluently  ;    9.   Produce concise, informative video summaries of their work  .  ", "Undergraduate Course: Logic, Computability and Incompleteness (PHIL10133) This course examines some fundamental topics relating to first-order Logic and the theory of computability, with particular emphasis on key limitative results. This course will focus on key metatheoretical results linking computability and logic. In particular, Turing machines and their formalization in first-order logic, linking uncomputability and the halting problem to undecidability of first-order logic. We will then study recursive functions and their construction, followed by  first-order formalizations of arithmetic, particularly Robinson arithmetic and Peano arithmetic. We will then turn to the topic of the arithmetization of syntax and the diagonal lemma, before proceeding to prove some of the main limitative results concerning formal systems, in particular G?del's two incompleteness theorems, along with allied results employing the diagonal lemma, including Tarski's Theorem and Lob's Theorem. Upon successful completion of the course, students will be able to demonstrate: \n\u00bf\tfamiliarity with the general philosophical/mathematical project of Hilbert's program and    how this is impacted by the technical results explored in the course; \n\u00bf\tthorough understanding of some key limitative results in logic and computability, including the halting problem, the undecidability of first-order logic, and the incompleteness of first-order arithmetic; \n\u00bf\tability to employ abstract, analytical and problem solving skills; \n\u00bf\tability to formulate clear and precise pieces of mathematical reasoning. \nAlso, students will demonstrate the following transferable skills: \n\u00bf\tevaluating abstract theoretical claims; \n\u00bf\tgrasping and analysing complex metatheoretical concepts; \n\u00bf\tdeploy rigorous formal methods. ", "CS101 - Topics in Computing 1 To help the student to develop a broader perspective of computer science and to develop problem solving, team working, presentational skills, as well as personal and professional development skills. The class is based around a number (typically four) of group projects based on a variety of interesting challenges in computer science. Students work in teams to solve these with support from the teaching staff and present their results in a variety of formats (written reports, oral presentations, etc). On completion of the class, a student should be able: To appreciate the wider problems and challenges in computer science.  To appreciate the importance of working effectively as a team in solving problems.  To appreciate how to present effectively in written, oral and graphical form the results of investigations.  To use a variety of resources such as the University library, databases and the internet to find relevant material.  To appreciate the relationship between material from different computer science classes. ", "Undergraduate Course: Informatics 2C - Introduction to Computer Systems (INFR08027) This course is concerned with the design, implementation and engineering of digital computer systems. It offers an introduction to the internal structure of digital computers. \n  The primary aim of the course is to convey an understanding of the internal structure and implementation of digital computers. To impart this knowledge, we first explain how the interface between hardware and software is typically constructed. This interface consists of several key components: \n \n* The binary representation and manipulation of atomic data. \n* The structure of a typical instruction set. \n* The environment in which a program executes, and the notion of processes and virtual memory. \n \nIn addition to explaining the interface between hardware and software, this course introduces the ideas behind the hardware implementation of a processor. This consists of several further components: \n \n* Combinational logic - how simple stateless building blocks such as adders, multiplexers and decoders can be constructed from logic elements. \n* Sequential logic - how components with state, such as latches, registers, register files and memories can be constructed from logic elements. \n* Processor structure - how a simple instruction set can be implemented using combinational and sequential logic components. \n \nThis course includes a brief introduction to the C programming language, which is widely used as a systems programming language. \n \n*** This course replaces Informatics 2C - Introduction to Computer Systems (INFR08018) (10 credit) course. *** On completion of this course, the student will be able to:\n     \n         describe the trade-offs in different binary representation systems  explain the principles of: instruction set architecture, digital logic design, cache hierarchy, virtual memory, I/O devices, exceptions and processor management  demonstrate an understanding of how a high-level programming language (C) maps to the assembly code by converting a simple C program to MIPS assembly  sketch the design of a simple single- and multi-cycle processor and explain how it operates by combining the knowledge of the logic design basics with that of the MIPS instruction set architecture \n     ", "Postgraduate Course: Advanced Robotics (INFR11213) ***This course replaces Robotics: Science and Systems (INFR11092)*** \n \nRobotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, students will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot assembly in automobile and manufacturing.  \n \nThe course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning.  \n \nBuilding on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills. This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning.  \n \nThe aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code. \n \nLectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot. Modern Robotics: Mechanics, Planning, and Control, Frank C. Park and Kevin M. Lynch  \nIntroduction to Robotics, Fourth Edition, J. J. Craig, Pearson, 2017 \nFranklin, Gene F., et al. Feedback control of dynamic systems. Vol. 3. Reading, MA: Addison-Wesley, 1994.", "Client Side Web Development This module provides students with the technical foundation to enable them to develop applications which are executed within a web browser. The module covers HTML5, JavaScript frameworks and libraries and other appropriate technologies with implementations that allow client-side scripts to interact with the user, control the browser, communicate asynchronously and alter document content. In addition, widely applied patterns used for client-side web application development are covered. While undertaking the module students develop applications that consume remote services using appropriate technologies and data formats within browser-based applications.  HTML5 :  - Canvas, video and audio, forms and data, browser history, offline support and client-side storage elements, geolocation, 'draggables &amp; droppables'  JavaScript : - Applying object-oriented principles in JavaScript - Large-scale JavaScript application architecture and design issues, including architecture patterns, modularisation, script loading, routing/navigation/history, templating/binding, data access, event-driven messaging - Libraries and frameworks which support development of large-scale JavaScript applications  JavaScript Patterns :  - Module, Revealing Module, Singleton, Constructor, Observer, Command, Facade, MVC, MV*  Working with services on the client : - Consuming REST services, asynchronous requests and callbacks, XMLHttpRequest/AJAX - Querying OData services  Real-time web communication - Server push - Publish-subscribe - Peer-to-peer - Techniques and technologies for real-time web communication, including: polling, long polling, WebSocket, HTML5 Server-Sent Events, WebRTC - Frameworks which support development of real-time web applications  Testing and debugging : - Unit testing in JavaScript - Client-side test frameworks  - Use of tools for debugging JavaScript - Use of tools for debugging HTTP requests/responses      On successful completion of this module, students should be able to:  1. Demonstrate a detailed understanding of the architecture and design patterns commonly used in client-side web applications   2. Critically appraise and select libraries and frameworks which meet specific purposes within the architecture of client-side web applications  3. Evaluate the requirement for real-time functionality to enhance responsiveness within a client-side web application  4. Develop and test a rich, responsive and scalable client-side web application solution which can be executed within a modern web browser and interacts with remote services, making use of appropriate technologies, libraries and frameworks      ", "Advanced Programming This module aims to encourage students to become polyglot programmers. It will equip them with a broad understanding of the nature of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module also introduces a range of advanced programming techniques, such as asynchronous messaging, parallel computation and distributed programming. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Comparison of programming paradigms -Object-oriented -Functional -Procedural -Declarative -Logic -Classifying languages  Functional programming -Lambda calculus -First-class functions -Higher -order functions -Effect-free functions -Recursive types -Function closures -Functional reactive programming -Functional features of object-oriented languages  Declarative programming -Markup languages -Regular expressions -Domain Specific Languages -Rules engines  Scripting languages -Static/Dynamic typing -Interpreted languages  -Integrating scripts with compiled code  Managed vs. unmanaged languages -Memory management &amp; pointers -Static and dynamic libraries  -Integrating managed and unmanaged code  Advanced programming techniques -Lazy evaluation and infinite streams -Control abstractions: exception handling, continuations, monads -Object-oriented abstractions: multiple inheritance, mixins, traits, multimethods -Dynamic code evaluation (\"eval\") -Asynchronous and parallel computation -Remote procedure calls -Messages and queues  Emerging trends in programming       On completion of this module, students should be able to:  1 - Explain the nature and applicability of a range of programming paradigms, including object-oriented, functional, procedural, declarative, and the support provided for each in currently popular programming languages.  2 - Explain the nature and applicability of a range of programming language types with respect to whether they are compiled/dynamic, managed/unmanaged, concurrent or domain specific.  3 - Evaluate emerging trends in advanced programming languages and techniques.  4 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques available within that language.     ", "Big Data This module will provide an introduction to the challenges and possible solutions around big data. Big data is the common term for a collection of data sets so large and complex that it becomes difficult to process using commonly available relational database management systems, desktop statistics and visualization packages. The size and complexity of big data creates challenges in terms of storage, search, sharing, transfer, analysis and visualization. Students will be introduced to the problems of big data and technologies that help address these issues e.g. Hadoop. They will also gain an understanding of data mining and the different applications of data mining e.g. search systems, business intelligence, recommender systems etc. thereby gaining the practical and theoretical skills to make sense of large volumes of data. The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment or equivalent activity for this module is 40%.  Introduction to problems in big data oCharacteristics oTerminology and concepts oEmerging trends oCharacteristics oIssues oBenefits oLimitations Data warehousing oDimensional approach oNormalised approach oBottom up approach oTop down approach Business intelligence oOLAP oForecasting oPredictive modelling oMetadata oStructured vs. unstructured data Data mining oMap reduce oDifferent technologies e.g. Hadoop, R, Weka etc.  oStatistical analysis oMining data streams oClustering oLarge scale machine learning Search systems oLink analysis oIndexing oLanguage models oGraph search Recommender Systems oNearest neighbour search oCollaborative filtering oContent based recommenders oDimensionality reduction Data visualisation oAggregation oDrill-down oFilter oRoll-up oWhat-if analysis      On successful completion of the module the student should be able to:  1 - Describe the basic principles of the relational data model and the issues of managing large data or big data using the relational data model 2 - Understand the role of data mining and different algorithms and approaches to address different data mining goals and the application of these algorithms to real-world problems for datasets of varying size. 3 - Have gained an appreciation of the strategic importance of business analytics and data and demonstrated an ability to extract, cleanse and manage it to derive business knowledge by using systems thinking and applying quantitative analytical techniques 4 - Apply their knowledge using various state of the art tools such as Hadoop, R etc.      ", "CS412 - Information Access and Mining This class will enable the student to understand the fundamentals of information access and information mining. The class will cover a range of techniques for extracting information from textual and non-textual resources, modelling the information content of resources, detecting patterns within information resources and making use of these patterns. It will focus particularly on unstructured textual information found on the web. Introduction, Information Access, the Web and Electronic Archives, including commercial and non-commercial applications.Textual Information Storage &amp; Retrieval: indexing, querying, ranking and retrieval. Document analysis and representation. Information Retrieval models (e.g. Boolean, Vector Space, Probabilistic). Relevance feedback and clustering.Textual Information Filtering: machine learning and information access. Content-based and collaborative-based filtering.Image Retrieval: retrieval of images by semantic and visual features.Video Retrieval: video segmentation, representation, storage and retrieval. Document visualisation: presentation of multimedia retrieval results.Web search engines: indexing and retrieval of multimedia information on the Web. Structured document indexing and retrieval. Analysis of link connectivity.Information mining: detecting patterns within data. Techniques for information mining including clustering, classification, and association rule learning.&nbsp; Metrics for information mining.Applications of deep neural networks to natural language processing and computer vision. On completion of the class, a student should be able: to demonstrate a knowledge of the issues involved in representing information stored in electronic form, including text, images, video and speech  to demonstrate a knowledge of techniques for the access of information based on such representations  to demonstrate a knowledge of the broad range of techniques for evaluating information access systems  to demonstrate a knowledge of statistical and machine learning approaches for detecting patterns within information  to demonstrate a knowledge of the practical applications of large-scale information mining approaches  to demonstrate an awareness of the current challenges of constructing large-scale information access systems ", "CS426 - Human Centred Security L Obj 1 : To understand the fundamental concepts of cyber security, with an emphasis on the human side of cyber securityL Obj 2 : To understand the influences on human decision making and how human behaviour can be changed, including the use of nudgesL Obj 3 : To be able to design an evidence-based intervention which improves the user\u2019s interaction with a security solutionL Obj 4 : To be able to write information security policies that accommodate the needs of humansL Obj 5 : To gain an appreciation of the entire socio-technical system within which users interact with security systemsL Obj 6 : To gain an appreciation of a range of social engineering techniques, and ways of ameliorating these 1. What is human-centred security? This will review the information provided by CS407 in greater detail.2. Human as solution in the cyber domain. This will discuss a systemic approach to cyber security \u2013 looking at social and organizational influences, and ways in which organizations can make the individual part of the solution rather than \u201cthe problem\u201d.3. Usable and Accessible Authentication. Here various alternative authentication mechanisms will be presented, together with their pro\u2019s and con\u2019s, as well as the principles of accessible authentication. An ontology of password best practice, as well as age-appropriate ontologies.4. Privacy: why privacy is so hard to get people to care about, the privacy paradox, how to help people to articulate their privacy rights. How we can teach children about their privacy rights. The ubiquity of IoT devices and their impact on privacy.5. Human Decision Making and Behaviour Change. People do not simply change their behaviour because they are told to. It is a process. This part of the course will present the various steps people take from action to inaction and the factors that encourage and deter change.6. Nudging to effect behaviour change, the use of fear appeals, the use of negative emotions in organizations.7. Security culture and social science approach to organizational cyber security. 8. Social Engineering Attacks \u2013 specifically a range of interventions that can be used to make users more resilient to these. This will include phishing, vishing, smishing, popups and various other ways that hackers use to deceive.9. Country-Level Cyber Security Strategies, including Cyber Diplomacy, cyber security strategy policies and responsibilization of citizens.10. Contemplating cyber security \u201cprocess\u201d in organisations, including the role of information security policies, considering how to write them, and how to support employees rather than coerce them. This class will strengthen the security offering by making students more aware of human-centred security design", "Business Process Modelling This module is concerned with the modelling of business processes. It starts with an overview of business process modelling history, standards, development lifecycle and deployment platforms. Comprehensive coverage of the standardised Business Process Modelling Notation (BPMN) is provided so that students are in a position to read and develop process models. Simulation of process models as well as model deployment, execution and approaches to process model analytics are covered. During the module students are expected to develop and work with a range of different types of business process model typical of a range of businesses.  Overview of Business Process Modelling (BPM) -History and purpose of BPM -Modelling standards -The BPM lifecycle -Overview of available modelling and execution environments  Business Process Modelling Notation (BPMN) -Overview of BPMN -Pools and lanes -Processes and activities -BPMN tasks: manual, user, script, service, business rules, send and receive -Events and gateways -Message and sequence flow -Data objects, messages and datastores -Subprocesses -Relationship to UML Use Case and Activity Diagrams and Business Process Execution Language (BPEL) -Model creation using integrated development environments  Business Model Simulation  -Simulation overview -Purpose served by simulation -Simulating a business process model -As-Is and To-Be models  Process Deployment and Execution -Deployment platforms -Executing a process model -Integration with external business systems including legacy systems -Service buses  Introduction to Process Model Analytics -Purpose of analytics -Monitoring options -BPM Dashboards      On successful completion of this module, students should be able to:  1. Demonstrate a comprehensive understanding of business process modelling history, associated standards, development lifecycle and deployment environments. 2. Demonstrate a comprehensive understanding of Business Process Modelling Notation (BPMN) capabilities such as activities, tasks, events, gateways, flows, stores and subprocesses. 3. Compare and contrast business process modelling development, simulation and execution environments as well as techniques used to integrate with external business systems including legacy systems. 4. Critically evaluate the role played by business process simulation and process model analytics. 5. Develop, simulate, execute and analyse a range of different types of business process models.     ", "Big Data and IoT In this module students will build knowledge and practical skills required to design, implement and deploy computer systems that include geographically-distributed devices. These types of systems have the potential to generate large volumes of data, have heterogeneous data-sources, need rapid responsiveness or support human-interaction. The module focusses on applications of the Internet of Things (IoT) and the associated technologies that are required to support the challenges of building such systems in a scalable and secure manner. Some of these challenges require technology solutions that fall within the sphere of what has come to be known as \"Big Data\" systems that employ appropriate data-engineering techniques.  The module learning paths will be driven from the standpoint of case-studies for real-world problems and applications, with an exploration of the wide range of associated data. Students will explore secure IoT architectural patterns and industry-standard data-engineering techniques for realising such architectures. These techniques include appropriate aspects of data-analysis and human interaction. Students will gain experience in implement and deploying these techniques, by designing and building appropriate solutions, utilising industry-standard technologies. On completion of this module, students will be able to select, justify, implement and deploy appropriate architectural solutions for a range of IoT applications that include a representative range of real-world data and interaction.  -Real-world problems/applications as drivers for technology solutions.  -IoT reference architectures and specific industry-vendor solutions.  -IoT 'Security by Design' as a fundamental driver for IoT architectures.  -IoT Connectivity, communication and messaging.  -Understanding the heterogeneous nature of the data.  -Ingesting, pre-processing and storing data and understanding trade-offs such as: performance, reliability, scalability and cost.  -Analysing data: edge-processing, batch processing, real-time &amp; interactive systems.  -Cloud-based technologies and Cloud services to facilitate rapid-application building.  -Data pipelines and orchestration of workflows. -Dashboards and visualisations.  -Human interactive systems.   Laboratory content will evolve as new technology opportunities become available. Examples of possible laboratory content are: -Connecting and securing an IoT device to a representative Cloud architecture.  -IoT device sensing, control and human interaction.  -Messaging between Device and Cloud.  -Building Device applications and Cloud applications.  -Using Cloud services including database services.  -Implement analytics to detect patterns and anomalies or trigger actions based on rules.  -Building dashboards.  -Implementing human-interactive applications (such as voice-interactive).       On successful completion of the module the student should be able to:  1. Demonstrate a detailed understanding of the architectures and techniques used to create IoT systems that include heterogeneous data sources. 2. Demonstrate an understanding of how to map representative IoT problems into secure IoT designs that utilise industry-standard technologies. 3. Select and justify appropriate processing/analysis methods that are relevant to a representative set of data sources. 4. Develop and test solutions that implement a representative range of IoT systems, using appropriate software and hardware technologies.     ", "CS407 - Computer Security The aim of this class is to provide students with the opportunity to develop a security mind-set by introducing them to core material in the area of computer security. This should enable students to identify potential threats and vulnerabilities for a range of situations, and propose appropriate actions to mitigate these issues. The following syllabus is reflective of the types of topics which can be covered: Secure communications: cryptography and steganography  Network security: an examination of the potential threats to network security such as packet sniffing; an examination of the corresponding mitigation techniques  Access control: an examination of the different approaches to user authentication and access control including topics such as alternative authentication  Human aspects of computer security: this is an ever important aspect of security \u2013 the class will explore how the user impacts security and examine why technical solutions are not the whole picture  Further \u2018hot\u2019 topics: for example malware \u2013 decomposing the structure of malware and antivirus approaches   compare and contrast secure communication solutions;  evaluate an existing or proposed system in terms of potential vulnerabilities and recommend the most appropriate security solution to apply;  summarise the key vulnerabilities, threats, and attacks with regards to network security and propose suitable approaches to mitigate these issues;  plan and implement an aspect of technical security such as log analysis. ", "Cloud Platform Development This module provides analytical and practical coverage of cloud computing and web services. The module provides in-depth coverage of cloud computing technology exploring scalability, cloud architecture, platform and data virtualisation (relational and non-relational), delivery and deployment models and issues concerning cloud security. It also focuses on the technology, frameworks and associated standards which support and underpin web services, such as SOA and web service architectural styles. Students will also be introduced to Platform as a Service (PaaS) software development.  Web Service Concepts  SOA and web service architectural styles, strong and loose coupling, separation of concerns Common SOA patterns for web services XML and JSON for web services (including XML namespaces and XML Schema) SOAP, WSDL and WS-* profiles REST, REST architectural constraints Higher Level Services Security in web services Transactions Cloud Computing Concepts Definition of cloud computing Key characteristics of cloud computing including scalability, availability and replication Virtualization concepts Service bus messaging and load balancing Cloud storage including legacy relational and non-relational data Common SOA patterns for cloud computing Cloud Service Delivery and Deployment Models Cloud service model architectures: IaaS, PaaS and SaaS  Cloud deployment models Cloud Security Cloud Security Alliance guidelines for secure cloud application development Identity management and access control in cloud applications  PAAS Cloud Computing Platforms  Features of current industry cloud PAAS platforms e.g. Amazon Web Services , Microsoft Azure Software development of multi-tier applications using a current industry standard cloud PAAS platform       On completion of this module, students should be able to:-  Critically appraise web service technology, standards and services including SOA, web service architectural styles including SOAP and REST and higher level services such as transactions and security. Critically appraise cloud system technology and architecture, cloud service delivery models such as IaaS, PaaS and SaaS, cloud deployment models and cloud security. Discuss commonly used SOA patterns used in web-service and cloud-based applications. Develop multi-tier web service applications hosted on an industry standard PaaS cloud platform.     ", "Big Data Platforms This module covers the platforms that support data storage, processing and analytics in Big Data scenarios. It focuses on highly scalable platforms that provide operational capabilities for real-time, interactive processing and on platforms that provide analytical capabilities for retrospective, complex analysis. Students will gain an advanced understanding of the principles on which these platforms are based, and their strengths, weaknesses and applicability to different types of scenario. They will also gain advanced practical skills in the design and implementation of scalable Big Data platform solutions.  Big Data challenges: Volume, Velocity, Variety Big Data platform concepts Distributed storage Distributed processing CAP Theorem and eventual consistency Operational vs. Analytical workloads  Big Data and traditional enterprise data warehouses Big Data architecture Cloud deployment and Cloud Platform support NoSQL data storage General characteristics, strengths and weaknesses of NoSQL NoSQL data store types and their applicability: including key-value, document, columnar, graph NoSQL modeling and schema design NoSQL querying Big Data processing frameworks MapReduce Hadoop Hadoop ecosystem: including Hive, Pig, Mahout Apache Spark Commercial implementations/services  Examples of tasks undertaken by students in practical sessions are: Configuration of a database system and its associated software tools to allow implementation of a Big Data storage solution. Design of a data model for a specific database system to meet the needs of a representative Big Data storage scenario. Creation, deployment and test of a solution to a representative Big Data analytic processing scenario using an appropriate set of software tools.      On successful completion of this module a student should be able to:  Demonstrate a detailed understanding of the requirements, concepts and principles of data storage, processing and analytics in Big Data scenarios. Critically appraise the platform choices available for designing and implementing solutions for data storage, processing and analytics in Big Data scenarios. Design a responsive, scalable and robust solution for a Big Data scenario, making use of appropriate platforms and practices. Implement a prototype system to demonstrate and evaluate a representative design solution.     ", "Application Architecture and Design Patterns This module covers the architectural driven design of information systems and the role of proven good software development practices captured in the form of design patterns. A range of architectural patterns and detailed design patterns are explored using the Unified Modelling Language (UML) and program code examples where appropriate. The core learning theme is the iterative formation of a functional software architecture design description and its elaboration into detailed principal design components but one that is often significantly moderated by desired quality (non-functional) requirements. Domain-specific architectures are discussed in the context of Software Product Lines.  ARCHITECTURAL DESIGN Key Software Design Principles Different General Design Techniques An Iterative Architectural Design And Analysis Process Commonly Used Architecture. The role of the Software Architect.  ARCHITECTURAL PATTERNS What is a Pattern Pattern Types Benefits Limitations Pattern Templates  Examples: Layered, N-Tier, MVC, Event-Driven Peer-to-Peer  DETAILED DESIGN PATTERNS Design Principles Design Mechanisms Elaborating Architectural Design Patterns using Detailed Design Patterns Code examples for Detailed Design Patterns  ARCHITECTURAL ANALYSIS Designing for Quality Scope of Architectural Analysis Analysis Techniques Quality Attributes Architectural Reviews   SOFTWARE PRODUCT LINES  Domain Engineering vs Application Engineering Domain Architectures Management of Variability Types Platforms      On successful completion of this module, students should be able to:  1 - Describe the process of software architecture design 2 - Analyse and evaluate architectural designs from the perspective of a range of different quality attributes 3 - Locate and understand the contribution of different libraries of detailed design patterns 4 - Evaluate and apply detailed design patterns to the development of software systems. 5 - Appraise domain-specific architectures in the context of Software Product Lines     ", "Cloud Computing and Web Services This module provides analytical and practical coverage of cloud computing and web services. It focuses on the technology, frameworks and associated standards: cloud models, cloud platforms and scalability. It also provides coverage of current web service technology and data transport representations, and integrated cloud and web service application development. Current examples from industry technology are used throughout  Cloud Models -Service Delivery Models (IaaS, PaaS and SaaS) -Deployment Models (public, private, hybrid clouds)  Cloud infrastructure and Services -Virtualization: hypervisors and containers -Resource management and provisioning -Cloud service management including lifecycle management and SLA management and enforcement  Cloud Scalability -Reliability -Distribution and replication -Service-oriented principles for scalable architectures -Cloud storage - blobs, queues and non-relational tables  Web Services and Data -XML and JSON -SOAP and REST  Security -Security threats and best practice for critical areas of cloud computing -Secure web service technologies  Technology Case Studies -Web services e.g. Microsoft WCF, Microsoft Web API, Java JAX-WS and/or JAX-RS  -Cloud Computing e.g. Amazon Web Services (EC2, Elastic Beanstalk etc.), VMware vSphere and vFabric, Microsoft Azure, Google App Engine, OpenStack, IBM SoftLayer/BlueMix  Cloud Service Application Development -PaaS cloud application development using multiple VM instances and cloud storage with software development tools and APIs currently used in industry  Examples of tasks undertaken by students in practical sessions are: -Writing, building and running locally multi-tier cloud applications in an industry standard IDE e.g. Visual Studio with current SDKs, e.g. Microsoft Azure SDK. -Deploying coursework applications on a real data-centre e.g. a Microsoft Cloud data-centre.      On successful completion of this module a student should be able to:  Critically appraise cloud technologies, platforms, services and standards. Critically appraise web service technology including data transport representations. Develop integrated cloud and web service applications using a mainstream industry cloud platform and development technologies.      ", "CS409 - Software Architecture &amp; Design  To enable students to understand the challenges of advanced software design and the issues associated with large-scale software architectures, frameworks and patterns.  To develop the students\u2019 understanding of the tools and techniques that may be used for the automatic analysis and evaluation of software.  Software Design: Key design principles and heuristics and trade-offs between these.Design Patterns: history, principles and expectations. Ways of using patterns. Detailed study of a number of representative patterns.Software Architecture: why is architecture important? Classical architectural styles such as pipe and filter, data abstraction or OO based, event-based, etc.Programming Styles: Why are different programming styles important. Key programming styles such as: procedural, pipe and filter, event-driven, \u2026Frameworks: frameworks as reusable chunks of architecture, the framework lifecycle, development using frameworks, detailed study of some well-known frameworks (e.g. HotDraw).Major approaches to automated evaluation and analysis: dynamic analysis (e,g, testing, debugging, model inference, and visualisation) and static analysis (e.g. call and control graph extractions, metrics calculation, dataflow analysis, type systems, model checking, symbolic execution), and their application and limitations. Construction of tools to support such analysis. On completion of the class, a student should be able to: understand some of the challenging design issues that software engineers face and the trade-offs associated with the solutions to these.  understand the principles behind software patterns and be able to apply a number of the fundamental patterns  understand the need for software architecture and the principles of the classic architectural styles  understand the issues behind the construction and use of a software framework, and to be able to put this into practice  understand the major approaches to automated software analysis achievable through static and dynamic analysis  demonstrate practical competence in the application and construction of tools to support automated software analysis ", "CS416 - Industrial Placement 1 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires. The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the MEng Computer Science degree, but if circumstances require it can be undertaken later in the course than the end of third year. The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the work reported will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp; \u2022 to build on material acquired in the first three years of the degree course \u2022 to work in industry as a member of an industrial team \u2022 to pull together ideas from one or more of the classes they have undertaken \u2022 to display a disciplined approach to good practices in the general area of the degree course \u2022 to undertake independent working &nbsp;", "Databases and Information Security   Summary module description:   \n  The module consists of two parts.  \n \n &nbsp;  \n \n The first part covers major threats and risks that affect the security of a network and the systems that rely on it (network security), and the major threats to data in both structured and unstructured form (data security).  \n \n   \nThe second part,&nbsp; covers Databases. An introduction to the basics of relational database design, Structured Query Language (SQL) and some selected advanced database topics.  \n     Outline content:   \n  &nbsp;  \n \n Information security:  \n \n   \nThe CIA (Confidentiality, Integrity, Availability) model of information security The value of information assets and physical assets, and the cost of their loss Motives and capabilities of different attackers  \nExamples of attacks on a networked system at different levels of the OSI network stack Examples of countermeasures for different attacks  \nPasswords and other methods of authentication  \n \n Public/private key cryptography, digital signatures and certificates Multi-level security and access control  \nNon-technical aspects: social engineering and physical security The effect of social, legal and economic incentives on security  \nResponsible and ethical use of technical skills and knowledge by organisations and individuals  \n \n &nbsp;  \n \n Databases:  \n&nbsp;  \n \n Database Management Systems  \n \n Relational database model (ER model, relations, attributes, data structures and keys) Normalisation  \nDatabase definition (SQL - DDL)  \n \n Transactions, concurrency and consistency (SQL - TCL)  \n \n Database manipulation (SQL \u2013 DML, multipurpose queries, database population, views, stored procedures, trigger  \n     Assessable learning outcomes:  \n  The student will be able to:  \n \n   \nInformation Security:  \n \n The student will be able to:  \n \n  \n Identify ways of countering different types of threat;  \n Produce strategies to minimise risks of security breaches in a range of network environments and data storage systems;  \n Critically analyse the shortcomings of a range of security strategies; Describe and apply the techniques used to penetrate aWeb application;  \n Develop appropriate security policies and network architectures to minimise the threats from network intrusion;  \n Understand the different types of threat posed by different classes of hacker and by different categories of malware;  \n Describe and apply the principles of key cryptography and message digests in security protocols such as TLS;  \n Apply appropriate access controls and authentication techniques at different levels  \n Critically analyse the security and privacy issues surrounding structured and unstructured data in a variety of different scenarios, with an in-depth focus on securing such data in Web applications.  \n  \n \n   \nDatabases  \n \n  \n Carry out the analysis of a simple problem susceptible to solution using database technology;  \n Produce a well-structured design in terms of the structural elements of a relational database; Design and implement a database application to solve the problem posed;  \n Use the SQL language, including DDL, an in-database procedural language such as PL/SQL, and database triggers;  \n  \n  ", "Horizon CDT Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of their CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement; outlining expectations, duties and outcomes.\u2022&nbsp;Communicate an awareness and understanding of their placement partner\u2019s specific concerns and how they re-oriented their existing skills and knowledge base to suit. Contextualise their placement experience in relation to their future PhD research activities. \u2022&nbsp;Demonstrate a developing understanding of the differing organisational structures and demands on team members across industry and academia.\u2022&nbsp;Be able to understand and communicate the relationship between the work completed within their placement and the DE programme as a whole (i.e. \u2018Creating our lives in data\u2019).\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement; and how they relate to both academia and industry.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career.\u2022&nbsp;Demonstrate the ability to respond to the needs of others and transfer skills across disciplines.", "COMP2271: \nDATA SCIENCE  To introduce techniques for capturing, cleaning and analysing data  \n\t\t\t To explore how different types of information can be represented and processed   Data capture and analytics \n\t\t\t Probability and statistics \n\t\t\t Graphics and visualisation \n\t\t\t Image processing   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of how data are captured, validated and analysed; \n\t\t\t\t an understanding of fundamental principles of probability and how they are used in statistics; \n\t\t\t\t an understanding of how images are represented, and how they can be processed and generated. ", "Computer Architecture  \n             \n            You'll look at principles of computer organisation, the layered nature of systems structures &amp; the interfaces between them. You'll also study: components of a computer, the architecture, how they're organised, hardware, data representation, computer logic circuits, manipulation of data at the bit level &amp; the theory of computation and its paradigms.\n                         \n             ", "Web Development  \n             \n            You'll study key concepts of the Internet and WWW applications, like HTML, stylesheets and JavaScript, then more advanced Web scripting techniques such as: the Document Object Model; DHTML event-driven scripting for dynamic user experience; contemporary frameworks and standards for cross-platform operability, sophisticated layouts, SVGs (Scalable V...\n                           \n                 \n                    Read more\n                 \n               \n                         \n             ", "Computational Fundamentals  \n             \n            This module introduces the mathematical language, knowledge and problem-solving skills that you'll need to study computing. You'll look at concepts such as set, relation, function and recursion/induction and principles of counting and finite probability. The fundamental notions of logic and their use for representation and proof are also explored.\n                         \n             ", "Programming Concepts  \n             \n            Discover the foundational principles for programming languages. You'll study variables, data types, assignment, conditionals, functions, data structures and the object-oriented paradigm. You'll work with other students on a project to simulate the working environment and will develop your problem-solving and computational thinking skills.\n                         \n             ", "Research Methods  \n             \n            This module aims to support you in gaining an understanding of the research process, including principles of research methods theory (ontology/epistemology) and practical elements. You'll be guided in how to plan and prepare for a research-based dissertation or work-based project or artefact-based project.\n                         \n             ", "Mobile Systems  \n             \n            This module looks at issues surrounding mobile &amp; ubiquitous computing systems. You'll examine the issues that arise in these systems from a technical perspective and in terms of user interaction and business aspects. The underlying theoretical and technological frameworks are introduced. You'll use development tools &amp; techniques for mobile systems.\n                         \n             ", "Algorithms and Data Structures  \n             \n            This module extends the Level 4 Programming module to introduce alternative data structures to arrays and lists in addition to a variety of algorithms that perform typical operations such as sort, search, insert, delete, and find on these data structures. You'll also look at how to evaluate storage structures and algorithms based on requirements.\n                         \n             ", "Data Essentials  \n             \n            This module aims to give you an understanding of how data is collected, stored and managed.&amp;nbsp; You'll look at different approaches to data and the reasons for choosing one approach or another.&amp;nbsp; You will also study issues of selecting an appropriate data solution aligned to real world use and application.\n                         \n             ", "Networking  \n             \n            You'll study the architecture, structure, functions and models of the Internet and computer networks. You'll use models to examine protocols and services at the application, network, data link &amp; physical layers and will analyse the principles &amp; structure of IP addressing and the fundamentals of Ethernet concepts, network media &amp; network operations.\n                         \n             ", "Network Systems  \n             \n            This is an introduction to network systems. After covering networking fundamentals you'll discuss configuration issues relating to small, medium and large system networking technologies and topics. The main topics will include modern network systems, resource management, the hardware interface, network layers and network routing.\n                         \n             ", "Advanced Mobile  \n             \n            This module is concerned with the issues surrounding mobile and ubiquitous computing systems. It examines mobile systems from various technical perspectives, and the underlying theoretical and technological frameworks. You'll study development tools and techniques for building mobile systems.\n                         \n             ", "Advanced Data Technologies  \n             \n            You'll study the development of data storage methods particularly aimed towards extensive data sets. You'll look at key data driven technologies which form part of the architecture, application and system and how to approach data analytics. Compute-and-store architecture and data-on-demand principles are a key part of this module.\n                         \n             ", "Digital Innovation  \n             \n            Building on material covered in Level 5 modules you'll study how to develop multi-tier web based and mobile-ready applications using distributed frameworks and components. You'll look at issues of web services, data access, event handling, security and caching and how to develop and deploy robust, secure, scalable web solutions for organisational n...\n                           \n                 \n                    Read more\n                 \n               \n                         \n             ", "Knowledge-Based Systems in Artificial Intelligence  \n             \n            This module introduces key aspects &amp; technologies of Artificial Intelligence, and how systems that employ these technologies are built. You'll study the history and philosophy of Artificial Intelligence and the kinds of problems that can and can't be solved using these techniques. You'll also examine the concept of intelligent in its various forms.\n                         \n             ", "Software Testing and QA  \n             \n            This module investigates and applies the successful combination of static verification techniques (inspection, walkthrough), alongside dynamic testing approaches (component, system, integration and acceptance), in the pursuit of creating software that is both fit for purpose and right first time, all within the framework of quality assurance.\n                         \n             ", "Learning Machines &amp; Intelligent Agents  \n             \n            You'll study a variety of AI techniques including fuzzy logic, machine learning &amp; multi-agent systems, amongst others. You'll consider which approaches may be appropriate for a given problem and examine AI in terms of legal &amp; ethical considerations, and the professional &amp; social implications that stem from the adoption of some of these techniques.\n                         \n             ", "Cloud Computing  \n             \n            This module explores the essential characteristics of Cloud Computing. This includes: the architectures associated with the provision of services (software, platforms and infrastructure services); the models for Cloud deployment (e.g. private, community, public and hybrid clouds); and emerging standards for interoperability.\n                         \n             ", "Design Patterns  \n             \n            Design Patterns provide robust, reusable software solutions to common problems in different types of application. This module examines those \u2018elegant\u2019 patterns most widely used within the industry. Having successfully completed this module you should have a firm grasp of the structures, intentions and implementations of the major Design Patterns.\n                         \n             ", "Object Orientated Design and Development  \n             \n            Aimed at giving non-specialist software developers the chance to develop their programming capability, this module covers core techniques of the UML approach and how the resulting models are implemented in formal code in a practical Integrated Development environment using a modern OOP language.\n                         \n             ", "CSY1095 \u2013 3D Modelling for Gameplay Prototypes  Description:  This module introduces students to the technical 3D modelling skills and creative processes required to produce 3D models for game prototypes. Students develop their visual research and texturing skill set to produce bespoke assets which respond to market trends and audience requirements.  ", "CSC3232 : Gaming Technologies and Simulations To understand the programming techniques associated with the technical development of a video game. Students gain experience in the technical design and implementation of engineering a computer games system. The analysis of a design as an engineered system is assessed through appropriate choice of system components based on complexity, processor cost and memory imprint. The syllabus has focus around the programming requirements for video games in the context of physics, artificial intelligence, and gameplay  \n\u2022  Players and adversaries \u2013 gameplay programming for adversarial based games  \n\u2022  Path-finding \u2013 algorithms for navigation  \n\u2022  Game AI\u2013 algorithms for simulating behaviour  \n\u2022  Physics \u2013 approximating realistic simulations in real-time in video games \n\u2022  Gameplay modelling- Using probability to encourage longevity of play ", "CSC3731 : Human Computer Interaction: Interaction Design To give students an understanding of Interaction Design practice and its application to a variety of application areas including ubiquitous computing, tangible interactions, and social interactions. \nTo give students an understanding of relevant Interaction Design theories. \nTo equip students with a skill set in practices of Interaction Design including understanding users, prototyping, and evaluation. \nTo expose the students to the issues of privacy and ethics in relation to digital technologies and how they relate to specific design decisions. \nTo give students experience in GUI design on multiple platforms. \nTo give students experience of, and to develop skills in, working in collaborative design teams. Understanding users and user requirements \nFieldwork for design and evaluation \nModels, theories, and frameworks of interaction design \nDesign principles \nMethods for designing with and for users \nDesign considerations for ubiquitous technologies, wearables, tangibles user interfaces, interactive surfaces, and natural user interfaces \nDesigning for specific application areas such as user experience and social interactions. \nPrototyping  \nExpert and user evaluation techniques  \nData, ethics and privacy. ", "LM Advanced Robotics This module is concerned with robot planning and control in a physical world. We will introduce the concepts and tools for modelling, simulating, and controlling robots with respect to dynamics. In a series of lectures we will study the fundamental and advanced techniques for controlling a robot in a real environment l. Lab exercises will reinforce learned concepts by means of evaluation on a (real/simulated) physical robot.  By the end of the module student should be able to:  Develop and formulate models of a robot moving in a  real environment.    Implement algorithms for solving robot planning or control problems.  Investigate and analyse control methods for robot motion (on a simulator or real robot).   Demonstrate an understanding of the main methods of modelling and controlling robots in real environments.  ", "LH Advanced Networking One of the defining characteristics of today\u2019s computer systems is their ability to exchange information. Whether we are talking about the smallest home network or the Internet as a whole, computer networks play a key role in many computer applications. An enormous number of applications, from general services such as the World Wide Web to specialised messaging or video streaming apps rely on networks and the common standards and protocols which make them work.  This module introduces the basic concepts, technologies, architectures and standards involved in computer networks, together with methods for their design and implementation. This will include discussion of data transmission protocols, TCP/IP, LANs and WANs, communication mechanisms and synchronization issues. The module will be based on the discussion of real-world case studies, research papers and standardisation documents.  By the end of the module students should be able to:  \nDemonstrate an understanding of the fundamental concepts and issues involved in computer networking and protocol design  \nDemonstrate an understanding of the layered organization and structuring of computer networks and their specific problems and algorithms  \nExplain the main types of architectures and mechanisms of communication, such as client-server, mobile or cloud, including social networks  \nApply state-of-the-art techniques and technologies, including those recently presented in research papers and standardisation documents, in the development of networked and cloud systems  ", "LC Object Oriented Programming   Object oriented programming is one of the most poplar techniques in industrial software development.  This module will introduce students to the principles of object oriented programming, imperative algorithms and data structures", "LM Natural Language Processing (Extended)   Natural Language Processing enables computers to understand and reason about human languages such as English and has resulted in many exciting technologies such as conversational assistants, machine translation and (intelligent) internet search. This module would provide the theoretical foundations of NLP as well as applied techniques for extracting and reasoning about information from text.   The module explores three major themes: Computational Models of human cognition such as memory, attention and psycholinguisticsSymbolic AI methods for processing language such as automated reasoning, planning, parsing of grammar, and conversational systems.   Statistical Models of Language including the use of machine learning to infer structure and meaning.", "LH Intelligent Robotics   Artificial Intelligence is concerned with mechanisms for generating intelligent behaviour. When this behaviour occurs in the everyday physical world, with its uncertainty and rapid change, we find that all kinds of new problems and opportunities arise. In this module we will address these issues in the context of intelligent mobile robots. The lectures will teach theories of perception, estimation, prediction, decision- making, learning and control, all from the perspective of robotics. In the laboratory sessions students will implement some of these theories on real robots to see how theory can be applied in practice.", "LH Dependable and Distributed Systems   Distributed systems have become commonplace, with such systems providing the vast majority of services that we have come to depend on every day. This module studies a range of topics in distributed systems from a practical and theoretical perspective. Students will learn how to analyse, design and implement efficient, fault tolerant solutions to modern problems throughout a rigorous understanding of classical approaches and results.", "LH Security of Real-World Systems   Building on Security and Networks, this module teaches how to find, analyse, and mitigate security vulnerabilities in real-world systems. It will also teach students how to assess the threats to a system, and how to protect against them. A range of practical analysis methods and tools are covered.", "LM Computer Graphics (Extended)   One of the most fascinating and popular uses of computers is the creation of images and animations as used in games and films. Students will learn the key concepts, representations, transformations, and techniques of computer graphics. The theoretical knowledge will be applied to constructing complex images, using techniques such as lighting and occlusion to make them look realistic.", "CSC3634 : Fault Tolerant and Cyber-Physical Systems The module aims to provide an overview of the concepts of reliability, and fault tolerance, with a particular focus on  cyber-physical systems (CPSs). We provide a systems approach to the design, evaluation and implementation fault tolerance in CPSs and other computer systems, exemplified by case studies of present-day systems. \nThis module will introduce the student to the principles of system dependability, fault tolerance, and CPSs. It motivates the need for a multi-disciplinary approach to the design of CPS, the need for a systems approach to fault tolerance, and the use of modelling and simulation to support these. An overview of system dependability and cyber-physical system concepts.  \nThe need for reliability techniques for achieving reliability. \nThe need for a multi-disciplinary systems approach to the design of modern systems. \nFault tolerance principles, implementations and limitations. \nError detection and error recovery techniques. \nSoftware and hardware fault tolerance. \nAn introduction to real-time control and controller tuning. \nUsage of VDM-RT and 20-sim for modelling cyber and physical components. \nUsage of collaborative model-based design and co-simulation for cyber-physical systems. \nReal-world case studies on fault tolerance and CPSs. ", "CSC1033 : Foundations of Data Science This module will provide students with an understanding of information storage and retrieval. This relates to all forms of data, including text and multimedia (image, video and audio) stored on and consumed from the web, amongst other sources. The module covers fundamental techniques and strategies of information storage and retrieval used in a variety of online applications such as web- search engines and business storage and analytics. * &nbsp; &nbsp;  &nbsp; Retrieval, browsing, user information needs, and other core concerns. \n* &nbsp; &nbsp;  &nbsp; Notions of structured, unstructured and semi-structured data \n* &nbsp; &nbsp;  &nbsp; Data representation (XML, character sets, images, audio/video) \n* &nbsp; &nbsp;  &nbsp; Relational databases, SQL \n* &nbsp; &nbsp;  &nbsp; A generic architecture for information retrieval \n* &nbsp; &nbsp;  &nbsp; Spiders/crawlers, stopwords and keywords, indexing and stemming \n* &nbsp; &nbsp;  &nbsp; Query expansion and its relationship with the Semantic Web. \n* &nbsp; &nbsp;  &nbsp; Metadata and semantics, faceted classifications, and other \"linked data\" issues \n* &nbsp; &nbsp;  &nbsp; Information models, databases and data normalization for transactional systems (OLTP) \n* &nbsp; &nbsp;  &nbsp; Data de-normalization, data marts / data warehouses, star and snowflake schemas, and cubes as support for analytical systems (OLAP) as support to Business Intelligence \n* &nbsp; &nbsp;  &nbsp; The challenges presented by \"Big Data\" \n* &nbsp; &nbsp;  &nbsp; NoSQL and Cloud Computing for distributed and scalable treatment of \"Big Data\". \n* &nbsp; &nbsp;  &nbsp; Exemplar applications, including publishing archives, web-based search engines \n* &nbsp; &nbsp;  &nbsp; Data Ethics ", "CSC3632 : System and Network Security To explore in depth the different mechanisms used to protect the security of systems and network, and to manage the corresponding risk. \u2022  Cryptography: simple and practical introduction to symmetric and asymmetric encryption, hashing and  \n   signature. \n\u2022  Malicious code: XXS, Code Injection, Reverse Engineering \n\u2022  Network Security: Firewall, IDS, Packet Analysis, Security protocols \n\u2022  Authentication and Authorisation: Biometrics, Access Control \n\u2022  Risk Management: Threat Modelling, Risk Assessment \n\u2022  Privacy: k-anonymity \n\u2022  Human Factors: Usability, Behavioural security ", "CSC3831 : Computer Vision &amp; AI This module aims to provide a foundation in the field data analytics, predictive data science, computer vision methods and machine learning. Selected topics chosen from:  \nPrinciples and practice of computer vision: \nBackground, Image Model, Spatial Coordinate, Digitisation. \nImage Sampling, Image Quality, Image Pixel Relationships. \nLinear Operators, 2-D Transforms. Spatial Domain Methods, Frequency Domain Methods. \nImage Compression, Lossless and Lossy Compression, Compression Standards. \nObject Detection Methods, Edge Liking and Boundary Detection. \nThresholding Methods, Region Oriented Methods. Pattern Recognition, Segmentation, Introduction to Convolutional Neural Network (CNN).   \nPrinciples and practice of machine learning and deep neural networks: \nCovering core concepts, and techniques along with current leading approaches in machine/deep learning. ", "CSC3432 : Biomedical Data Analytics and AI 1.  To familiarise students with the fundamental computational approaches used for tackling biological and  \n    biomedical data handling and analysis \n2.  To introduce the concepts of algorithm design for biological/biomedical data \n3.  To develop skills in algorithm design with an emphasis on solving biological/biomedical problems \n4.  To understand the most appropriate type of algorithms for differing analytical problems in biology and  \n    biomedicine and to introduce some of the most appropriate implementation strategies. 1.  The broad spectrum of data types in biology and biomedicine \n2.  Basic concepts of cell and molecular biology \n3.  Algorithms for biological sequence comparison \n4.  Algorithms for structural bioinformatics  \n5.  Artificial Intelligence approaches for the analysis of biological and biomedical data \n6.  Biological/Biomedical data preprocessing \n7.  Biological significance of biomedical data analysis \n8.  Analysis of biological/biomedical sequence data \n9.  Analysis of biological/biomedical imaging data \n10. Analysis of biological/biomedical tabular data ", "CSC3431 : Introduction to BioDesign and Natural Computing By the end of this module students will have gained, at an introductory level, experience in, and a knowledge of (i) the basic concepts underpinning novel forms of computation that are inspired by Nature and use biological or 'natural' (i.e., non-silicon based) computing substrates. (ii) the applcation of computing in the design and engineering of biological systems. The module will prepare interested students for a dissertation project in the research area, and potential further study or early career in the field of bio-computing.   \nThis module aims to provide a basic and wide-ranging overview of this field, while also being adequately rigorous in its treatment and grounded in real-world applications. The material covered is complementary to the stage 3 module (CSC3432 Biomedical Data Analytics). Students will be introduced to how biology, ecology, and chemistry have inspired novel computational paradigms.  \nStudents will be introduced to the concept of probabilistic (random) algorithms as an approach to solve computationally hard problems \nStudents will be introduced to the principles of biological engineering and computational biodesign \nStudents will be introduced to the concepts of evolutionary algorithms, neural networks, molecular &amp; DNA computing, and/or quantum computing \nStudents will be introduced to the synthetic biology design-build-test cycle and the role of engineering \nStudents will be introduced to the basic paradigms of biological engineering and the role of mathematical modelling in model-based design \nStudents will be introduced to the role of standards in computational biodesign ", "CSC1032 : Computer Systems Design and Architectures On completion of this module students will, from a high level perspective, be able to:  \n\u2022 describe the purpose of, and the interaction between, the functional hardware and software components of a  \n  variety of computer systems. \n\u2022 identify the principal hardware components and software services which provide infrastructure for the Internet  \n  from the global scale down to the desktop. \n\u2022 describe the components of operating systems and how they are combined with applications to provide services  \n  and share resources. \u2022  An overview of current computer systems architecture. \n\u2022  Introduction to Operating Systems: what they are and what they do, management of resources.  \n\u2022  Processes, scheduling. Interprocess communication (IPC).  \n\u2022  Memory, virtual memory and memory management. Files, file systems.  \n\u2022  An introduction to Linux and system administration and systems programming. ", "NCL3007 : Career Development for final year students To develop students\u2019 self-awareness and the ability to self-manage, proactively interact and ethically apply knowledge and skills in a work-related context.  \nThe Career Development module offers students the opportunity to undertake work-related learning in a variety of environments, both on and off the University campus. Through engagement with the module, students will learn about themselves, enhancing their employability and personal enterprise skills as well as contributing towards meeting the aims of the host organisation. Successful graduates are equipped with the necessary skills to perform and an ability to plan and manage their portfolio career, which is likely to be varied. The 3rd stage Career Development module therefore offers students the opportunity to learn about their skills and attributes and how they might apply these in future roles upon graduation.  To aid this learning and development, they undertake work-related learning in a variety of different environments, both on and off the University campus. See http://www.ncl.ac.uk/careers/modules/cdm/ for more information.   \nSupported by module tutors, students will reflect on and manage their own learning and development through a series of workshops, seminars and lectures, both on campus and online. Through engagement with both a professional experience and module teaching, students will enhance their employability and career readiness.   \nStudents will join the module at the start of semester one and are expected to balance their work for the module, including engagement with their placement/professional experience, across the academic year.  \nAt the start of the academic year students are expected to: \n\u2022 &nbsp; &nbsp;  &nbsp; confirm that all pre-requisites have been met; \n\u2022 &nbsp; &nbsp;  &nbsp; attend teaching/seminars and complete related engagement tasks; \n\u2022 &nbsp; &nbsp;  &nbsp; negotiate calendar of activity and duties with their host organisation (placement) or the Careers Service (other professional experience) to meet module requirements.  \nTeaching for the 2022/23 academic year will be arranged in two-week Learning Units with a thematic focus which will unite teaching sessions, online content and module engagement tasks to be completed by students via Canvas. Engaging with all content across the thematic blocks will ensure students meet all of the module learning outcomes. Most Learning Units include a synchronous online (lecture) session and a small group seminar which is planned to take place in person on campus.   \nSemester 1 themes will be: Induction/orientation; goal-setting, action planning and reflection; graduate skills and attributes; and career planning (exploration and research). Semester 2 themes will be: Giving and receiving feedback; networking (in person and online); engagement with employers; career planning (decision making and applications). Sessions focused on preparing for module assessments will also be available. ", "CSC3334 : Science of Computing (Inactive) Using models to understand complicated systems is a standard process in engineering. The key skill is abstraction (leaving out details to focus on key properties). The principal aim of this module is to communicate this skill.  \nTo record models, it is necessary to use some notation. There are several notations, and they tend to have areas of application. If the notation is well thought out, it makes it possible to reason about properties of the described system; If there is mechanical support, one can both exercise the model and draw verified conclusions.  \nThe range of applications of interest range from simple components to aircraft collision avoidance.  \nA particular focus will be on recording the meaning (semantics) of programming languages. \nProgramming languages come and go - if you make a career in computing, there is no doubt that you will have to learn languages which do not even exist today. In addition to literally thousands of existing general-purpose languages, there are languages tailored for specific applications, such as gaming, virtual reality, text layout, robotics. Sadly, many languages embody one new idea (e.g. objects, concurrency, remote execution), but are significantly *worse* than their predecessors in other respects.   \nA key aim of this module is to communicate ways of understanding and documenting the main ideas in a language. The material should equip you to make sense of the many languages you will meet in your career. If you design new languages, they will benefit from you being able to manipulate the key concepts.  \nFurthermore, to make sure the complexities (and scale) of language design are addressed, you will also be trained in practical aspects of formal modelling and verification. For this we will use a well- founded approach following a set of mature formal tools and techniques within software engineering Modelling and Specification \n-  Key notion of abstraction: pre/post conditions and data abstraction \n-  Reasoning about a model \n-  Checking that an implementation corresponds to a model \n-  Notions of functional programming: induction, recursion, datatypes, etc. \n-  Animating versus reasoning about a model \n-  Basics notions of verification tools: Isabelle 101, tooling for language design. \n-  Elicitation and basic proof of simple properties of interest \n-  Code-contracts and programming correctness-reasoning   \nProgramming languages \n-  syntax versus semantics \n-  concrete versus abstract syntax;  \n-  context conditions \n-  Semantics (meaning) focus on the \"Structural Operational Semantics\" \n-  Improved language-design decisions: type system extensions (e.g. security-types, etc.), feature extension  \n   (e.g. OO + concurrency), etc.  \n-  General \n-  Nature of software verification principles (correctness, abstraction, refinement, design decisions,  \n   documented assumptions, model-based testing, etc.) \n-  Understanding the expertise required and costs involved, identifying the right technique to the task at hand. ", "CSC2031 : Security Programming All computer scientist graduates should have a fundamental understanding of security when designing and implementing modern day software applications. This module explores key security challenges faced by these  applications and the security techniques commonly used to manage them. Students will gain first-hand experience in employing secure software practices and implementing security mechanisms to help address those challenges. 1. Security Foundations \n2. Authentication \n3. Access Control \n4. Cryptography \n5. Software Security \n6. Web Security ", "CSC1031 : Fundamentals of Computing To develop confidence in the use of fundamental techniques in Computer Science. \nTo provide a knowledge of the formal concepts essential for study and professional practice in Computing Science and Software Engineering. \nTo practice the basic techniques for modelling and solving computing problems. \nTo prepare students for the more advanced topics they will encounter on their degree. \nTo develop an awareness of the role of formal techniques in Computing Science. Set Theory \nNumbers and their Representation \nReal Valued Functions \nVector and Matrices \nCombinatorics \nRelations and Functions \nProof Techniques \nGraph Theory \nPropositional Logic  \nPredicate Logic ", "LI Functional Programming   This module develops practical programming skills in a typed functional programming language. It will strengthen the algorithmic and design skills of the students within the functional framework, and will introduce them to some advanced programming language features.", "CSY1062 \u2013 Computer Communications  Description:  This module develops student?s understanding of the principles of communication networks and how to classify the various network devices in the appropriate layer of the protocol stack. Students will learn how to manage IP addresses in a small network and will develop confidence in using network simulation software.  ", "CSY1082 \u2013 Database Design for Computer Games  Description:  In this module students apply the principles of database integrity to the design and development of database structures for computer games. Students apply data modelling techniques to establish, modify and maintain database integrity and data structures, using industry software and languages such as MySQL and Structured Query Language (SQL) PHP.  ", "CSY1094 \u2013 Level Design Principles  Description:  In this module students use level design principles within game engines to produce interactive game prototypes. Students learn the technical skills required to create effective `white box? designs for game levels, appreciating the importance of level design in the production pipeline.  ", "CSY1023 \u2013 ICT Applications  Description:  This module aims to provide the ICT skills which will be directly relevant to an engineering role in the workplace and which will help to obtain maximum benefit from the programme. It covers a range of key ICT fundamentals and will allow students to explore the applications of ICT.  ", "CSY1096 \u2013 User Interface Design for Games  Description:  This module introduces students to the principles and technical skills required to create interactive and intuitive user-interfaces (UI) for computer games. Students will use industry-standard 2D software to produce UI graphics. This will involve using shape language, colour theory and composition in the context of visual design for screen-based formats.  ", "CSY1065 \u2013 Databases Design and Development  Description:  The purpose of this module is to apply the principles of database integrity in the design and development of database structures. This is a practical module that applies data modelling techniques to establish, modify and maintain database integrity, structures and associated components such as entities, relationships and attribute definitions.  ", "CSY1076 \u2013 Drawing Fundamentals  Description:  This module introduces students to 2D and 3D visual communication, stimulating visual perception and idea generation.  Students will be encouraged to be experimental in their approach to applying suitable media and techniques to communicate technical and aesthetic subjects.  ", "CSY1091 \u2013 3D Game Asset Production  Description:  This module introduces students to the technical 3D modelling skills and creative processes required to produce 3D digital assets within creative industry projects. The module will also introduce students to the study of professional developers and their product standards, to contextualise and understand current market trends and platform limitations.  ", "CSY2088 \u2013 Group Project  Description:  The module is designed to develop higher-order intellectual skills (problem-solving) and appropriate personal qualities including team working. Each group will develop and document effective, robust and high-quality computing systems to a professional standard in response to a supplied specification of requirements.  ", "CSY2080 \u2013 Relational Databases  Description:  The purpose of this module is to understand and apply the principles of database integrity to implement and utilise efficient databases.    RD is a practical module that employs data modelling and SQL techniques to design, define and manipulate data.  ", "CSY1071 \u2013 Narrative Development  Description:  This module explores the fundamentals of storytelling within animated sequences. Students demonstrate their ability to intepret specified requirements, express their ideas for and produce thematical interpretations. Collaborative production techniques will be utilised to generate uniquely emotive products for a specified target audience.  ", "CSY2127 \u2013 Group Game Project: Advanced  Description:  This module develops students? professional collaborative skills and experience of the game development process when working in multi-disciplinary groups to develop a 3D digital game to a deadline. Students use effective communication methods, empathy and compromise, problem solving and organisation skills within the context of a computer game project.  ", "CSY2043 \u2013 Website Design  Description:  The purpose of this module is to focus on website interface design and develop principles, practices and concepts of web development to the next level. Building functional and professionally consistent websites involves an understanding of not only the interface, but how users experience design (UXD), interact with design (XD), and work with clients. The development of current coding and scripting skills are developed to support aesthetic considerations.  ", "CSY2128 \u2013 Concept Art Techniques  Description:  This module provides students with the opportunity to expand their digital and traditional drawing skills into contemporary concept art techniques for creative industries such as computer game development. They will develop their individual design philosophy and workflow through study of current industry trends and practical application to computer game projects.  ", "CSY2132 \u2013 Human Computer Interaction for Games  Description:  This module introduces students to the underlying reasoning behind Human Computer Interaction with relation to game design and accessibility; Why games are built the way they are. In digital games, this might relate to the requirements of a game engine or target platform and most importantly, the end user  ", "CSY2086 \u2013 Computer Networks  Description:  The purpose of this module is to provide students a thorough understanding of the basic principles of communication networks, architectural design and the fundamental  communication protocols and the day-by-day network management. The module employs modern teaching simulation tool and hands on a fully equipped network lab.  ", "CSY2100 \u2013 Advanced 3D Animation  Description:  This module develops the skills and technical knowledge required to produce complex 3D animated sequences. Students create and utilise a variety of assets, creation tools and engines. Open discussions and experimentation with post-production techniques ensure that opportunities to enhance the final quality of a product are explored.  ", "CSY2041 \u2013 Quality and User-Centred Systems  Description:  Creating high quality information systems involves many different factors and all stages of the lifecycle. It relies on the establishment of standards, guidelines and techniques at each stage, and on a quality culture which embeds quality by design. Through this module you will build up a thorough understanding of the complexity of the user-technology relationship and how to ensure that the developed system fits the user needs and expectations.  ", "CSY2119 \u2013 VFX Essentials  Description:  The purpose of this module is to research and learn the core skills and technical knowledge required to produce visual effects (VFX) for a variety of media. The primary aim is to develop theoretical knowledge and encourage experimentation with simulation processes.  ", "CSY2093 \u2013 Object-Relational Databases  Description:  The purpose of this module is to develop the fundamental concepts and skills of Entity Relational Models (ERMs) and Structured Query Language (SQL).  It introduces extended-relational databases; user-defined types, their practical creation, application along with valuable data extraction methods to provide intelligence and database programming (PL/SQL).  ", "CSY2061 \u2013 Mobile Application Development 1  Description:  This module is designed to give an understanding of the technologies (hardware/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ", "CSY1080 \u2013 Fundamentals of Programming  Description:  This module introduces students to computer programming, and the concepts necessary to write a successful piece of code in a High-Level Programming Language (HLPL). Students develop essential skills to solve simple programming problems and are introduced to the principles underlying the design of High-Level Programming Languages.  ", "CSY1902 \u2013 Traditional Art Skills  Description:  This module is to develop and enhance students? knowledge and understanding of the history, context and development of traditional art practices and skills. Through a range of practical workshops, students will be introduced to a range of techniques and approaches that can be applied to their art practice.  ", "CSY1043 \u2013 Fundamentals of Computing Systems  Description:  The purpose of this module is to: introduce basic computing systems concepts by introducing computer architecture, compilers, operating systems, and algorithms; the interdependency of hardware and software design techniques and balance trade-offs between competing design constraints as well as classification of software (systems and application software).  ", "CSY1093 \u2013 Material Development for Games  Description:  The purpose of this module is to introduce students to the principles and technical skills used to create materials and textures for use in video games and other creative industries. Students explore the creative processes required to produce their own digital materials to industry standards.  ", "CSY1077 \u2013 Group Game Project: Fundamentals  Description:  This module introduces students to group working practices within the context of a computer game development project. The module encourages the development of key interpersonal skills needed for collaborative work, such as communication, problem solving, respect and consideration of others, and identifying roles and responsibilities within a multidisciplinary group project.  ", "CSY1073 \u2013 2D Animation  Description:  This module equips students to understand and implement the use of 2D animation in a digital format. Industry relevant 2D software, processes and terminology will be taught through practical tutorials and workshops. Students will also learn the fundamentals of sequence drawing for animation.  ", "CSY1060 \u2013 Mathematics for Computer Science  Description:  This module introduces a set of mathematical topics, which include binary number system, logic circuits, linear systems, graph theory, probability and statistics, that are widely studied by those learning computing sciences. The module equips students with fundamental mathematical skills which underpin a range of computing disciplines.  ", "CSY1063 \u2013 Web Development  Description:  This purpose of this  module is to give students an understanding of client side web technologies. This module provides students with: the essential knowledge and practical skills to design, develop and implement a Web site to contemmporary web standard  ", "CSY1079 \u2013 Programming 2D Computer Games  Description:  This module introduces students to the skills, principles and concepts necessary to develop 2D computer games. Students apply aspects of High-Level Programming Language (HLPL) and development platforms to develop 2D computer games.  ", "CSY1097 \u2013 Computer Games Architecture and Optimisation  Description:  This module introduces the main principles of computer games architecture, enabling students to gain practical experience of software engineering. Students explore computer game design, architecture and management, and gain an overview of game development process.  ", "CSY1030 \u2013 Digital Footprints  Description:  The purpose of this module is ?to understand and apply and the principles of data integrity and protection to take responsibility for managing and capitalising on your online presence. Digital footprint is a self-managed, online module that considers the data trail and shadow left by interactions in digital environments.  The module develops a broad understanding of the impact of individual and organisational online presence in the context of digital marketing, data protection, ethical issues and good practice to optimise employability and prospects.  ", "CSY1020 \u2013 Problem Solving and Programming  Description:  This purpose of this module is to: introduce students to the skills, principles and concepts necessary to solve problems in computing; to develop essential skills to enable the solution of these problems with the construction of appropriate algorithms and a computer program; introduce principles underlying the design of a high level programming language (HLPL); gain experience and confidence in the use of a HLPL to implement algorithms; implement HLPL programs using an appropriate programming language  e.g. Java; introduce an object-oriented language initially as a non-object language.  ", "CSY1078 \u2013 Scripting for Games  Description:  This module introduces students to the key programming principles necessary to develop computer games through scripting. Students will apply these within the context of a game engine, exploring the development and application of algorithms, real-time assets, data management and interactivity within computer games.  ", "CSY1061 \u2013 Computer Systems  Description:  This module provides knowledge of the hardware and software components that make up a computer system and overview the important concepts in preparation for future study of computer science.  ", "CSY1085 \u2013 2D Visualisation  Description:  This module equips students to understand and implement the use of 2D graphics in a digital format. 2D software, figure drawing and perspective drawing will be taught through practical tutorials and workshops. Students will also learn the fundamentals of solid drawing through character design.  ", "COMP2261: \nARTIFICIAL INTELLIGENCE  To give students a fundamental understanding of some of the core problem-solving principles of Artificial Intelligence (AI) and the role of AI in societal applications.   AI Search: methods for solving hard real-world problems including general heuristic searches, such as various best-first searches and A* search, and local searches, such as hill-climbing, simulated annealing, genetic algorithms and other evolutionary algorithms, together with the practical application of these methods to problem solving. \n\t\t\t Ethics and Bias in AI: discussions on ethical considerations of AI applications in various disciplines, as well as algorithmic considerations regarding bias in AI. This can refer to human perspectives, leading to conversational explanations and explainable AI, as well as new algorithmic solutions, such as eliminating bias induced by overlapping training/test set or sensitivity analysis. \n\t\t\t Machine Learning: types of machine learning systems; challenges of machine learning; testing and validating; machine learning workflow; classification; training models; support vector machines; decision trees; ensemble learning and random forests; dimensionality reduction; clustering; Gaussian mixtures; introduction to neural networks and deep learning.   The key principles and methodologies of search in an AI context where the problems to be solved are computationally hard (AI Search). \n\t\t\t\t The key principles of ethical concerns and bias in AI for real-world applications, from an accountability perspective and as regards the application of algorithms (Ethics and Bias in AI). \n\t\t\t\t The key principles of machine learning for use in managing datasets and building models and core methodologies in relation to managing data and training models (Machine Learning). ", "CSY1072 \u2013 3D Animation  Description:  This module introduces the fundamentals of 3D Animation, utilising industry standard software. Students will develop technical skills and learn how to produce key framed animations and looping sequences. The outcome of this module will be learner proficiency using professional software tools and 3D Animation techniques.  ", "CSY1064 \u2013 Software Engineering Fundamentals  Description:  The purpose of this module is to develop student's experience with the multiple stages of software engineering life-cycles from initial need and requirements identification through to the design and implementation of code in order to develop confidence in the use of terminology and techniques for each of the stages.  ", "CSY1086 \u2013 3D Modelling for Animation  Description:  This module introduces the fundamentals of 3D modelling, utilising industry standard software. Students will develop technical skills and learn how to produce low polygon models and correctly topologized 3D models. The outcome of this module will be learner proficiency understanding 3D basics and essentials.  ", "CSY1081 \u2013 Programming for Game Engines  Description:  The purpose of this module is for students to explore 2D game engine functionality and develop skills to manage and work with 2D objects, worlds and spaces. Students will engage with the important technical skills required for programming 2D computer games within a game engine.  ", "CSY1070 \u2013 Fundamentals of Animation  Description:  This module equips students with the core practical, theoretical and critical skills needed to start animation development. Students will develop core knowledge to support Animation for 2D, 3D, Visual Effects and Games. They will explore different animation methods using traditional techniques.  ", "CSY1092 \u2013 3D Character Art  Description:  This module develops the student?s knowledge and practical expertise in 3D modelling, with a specific focus on the technical skills required to produce 3D character models for use in computer games. Students will develop experience with character construction, topological deformation and rigging for animation.  ", "CSY2125 \u2013 3D Environment Modelling  Description:  This module further develops learners? technical 3D modelling skills in application to computer game environment production. Learners are encouraged to produce optimised and efficient digital assets for game environments following industry development standards.  ", "LM AI Programming   Python is the widely used programming language in artificial intelligence and machine learning. This module will develop students\u2019 programming skills in Python and their application to problems in artificial intelligence and machine learning. Students will learn how to design and implement complete programmes using both the features of the Python language and a range of external libraries to solve AI and ML problems.", "LH Computer-Aided Verification   Showing that computer systems, hardware or software, are free of bugs is an important and challenging area of computer science but is essential in contexts such as safety-critical applications or computer security, where the consequences can be severe. This module introduces the field of formal verification, which rigorously checks the correctness of computer systems. Students will be introduced to the concept of mathematical modelling of systems, both sequential and parallel, learn how to formalise correctness properties using logics, notably temporal logic, and how to verify them automatically using techniques such as model checking. The module will cover both the theory and algorithms underlying these verification techniques and give a practical introduction to using verification tools.", "LI Security and Networks As computers are embedded in everyday life, protection against the criminal or unauthorized use of electronic data is essential and measures must be taken to achieve this. The module will introduce a range of topics in the theory and practice of computer security, including attacks, vulnerabilities and defences. Cloud and Web services will be used as a motivating example for the importance of security.  By the end of the module students should be able to:  Understand basic concepts of cryptography and SQL  Understand basic concepts of cloud services, in particular storage  Demonstrate an understanding of the threats to data stored on a computer, locally or in the cloud  Demonstrate an understanding of the threats to data sent on the network  Identify risks and use techniques to eliminate or mitigate them.   ", "LI Operating Systems and Systems Programming   An Operating System is the system software that manages computer hardware, hardware and software resources and provides common services for user programs. System programming is the type of programming necessary to produce software, such as operating systems, that deal with hardware, provide services to other software or manage performance constraints. This module teaches the technology of operating systems and introduces students to the challenges of systems-level programming.", "LC Artificial Intelligence 1   Artificial Intelligence is the area of Computer Science which studies algorithms capable of problem solving and learning, particularly where the problems are challenging due to scale or uncertainty, and the algorithms are part of intelligent agents. In recent years AI systems have become increasingly prominent in society and industry, from world-beating Go programs to self-driving cars. This module will introduce fundamental concepts from Artificial Intelligence (AI) and provide experience applying these concepts to solve practical problems. The module will introduce knowledge representation, reasoning, search, and learning. It will cover algorithms that use both logical and probabilistic approaches.", "LI Computer Systems (YiCS)   This module will cover the fundamental principles of computer systems, including how information is represented in computers, how computer programs are executed, the relationship between software and hardware, reasoning about programs, and the foundations of operating systems and network technologies.", "LH Natural Language Processing   Natural Language Processing enables computers to understand and reason about human languages such as English and has resulted in many exciting technologies such as conversational assistants, machine translation and (intelligent) internet search. This module would provide the theoretical foundations of NLP as well as applied techniques for extracting and reasoning about information from text.   The module explores three major themes: Computational Models of human cognition such as memory, attention and psycholinguisticsSymbolic AI methods for processing language such as automated reasoning, planning, parsing of grammar, and conversational systems.   Statistical Models of Language including the use of machine learning to infer structure and meaning.", "LM Storing and Managing Data Managing, curating, and assuring the quality of data is an essential part of the data scientist\u2019s role. This module will introduce students to the central concepts and tools needed for the effective management of data. Topics covered will include database systems, data cleansing, quality assurance, data provenance. The module will also address legal and ethical issues associated with data storage, including the requirements of data protection legislation.  By the end of the module students should be able to:   Design and implement databases using appropriate technology   Work effectively with existing datasets and databases    Develop and apply a set of quality criteria for a dataset, using appropriate data cleansing tools and techniques to curate the data.    Understand and be able to apply the core principles of relevant legal frameworks to ensure that data is being held in accordance with relevant legislation    ", "LM Software Workshop 1   This module introduces and develops the principles of object oriented and imperative programming. Students will learn how to design and develop computer programs using an object-oriented programming language, and how to test their correctness. The development of complete applications with a graphical user interface (GUI) will be introduced.", "LM Teaching Computer Science in Schools (Extended)   The module is the implementation of the national Student Ambassador Scheme by the School of Computer Science at the University of Birmingham. Its design follows closely the recommendations and guidelines of the UAS.  The module will reward students with course credit for working as a \u2018student-tutor\u2019 with teachers in local schools and help them develop some valuable transferable skills.   Students will learn important, marketable and transferable skills of benefit to them in employment and in life, specifically:  Organisational and interpersonal skills  Addressing the needs of individuals  Time management skills  Working in a challenging and unpredictable environment  Staff responsibilities and conduct  The ability to improvise  Giving (and taking) feedback  Handling difficult and potentially disruptive situations  Public speaking and communication skills  Team-working  Standard teaching methods  Students will gain experience of working in a professional educational environment and will learn about the key issues affecting school education today.  They will have the satisfaction of making a positive impact on the education of pupils of all ages and the chance to act as a role model for your subject.  It is a chance to put something back into the community by sharing  knowledge and helping to motivate young people and raise their aspirations towards science.  They will develop confidence in answering questions about their own subject and in devising appropriate ways to communicate a difficult principle or concept.  They will develop communication skills and gain a better understanding of their own level of expertise.    For those of who are interested in teaching as a profession, this will be an opportunity to explore whether it is a path they want to pursue.  They will learn to devise and develop computer science projects and teaching methods appropriate to engage the relevant age group.      The module will involve:  Undergoing a Criminal Record Bureau (CRB) check prior to entering the classroom  Being paired with a specific teacher at a local school who will work with students to identify their aims and objectives for the term  Spending \u00bd  day a week in school for 10 weeks, developing a role within the classroom  Presentation and interview  11 training sessions  Completion of a Special Project (agreed with the teacher)", "LM Individual Studies (Extended)   Strong students may choose to study, at their own initiative, material that is outside what can be found in other modules available in the School of Computer Science. This module gives them the opportunity to do so. Learning is by self-managed study under the direction of a supervisor (a member of the academic staff of the School). The topic for a particular student is by negotiation between the student and supervisor early in the semester.", "LH Quantum Computing   Quantum computing is a non-classical paradigm for computation that uses the properties and effects of quantum mechanics to represent and manipulate information. Certain computations can be performed more efficiently on quantum computers than on classical computers, an example of this is sublinear search of unstructured data. Quantum computing also leads to new approaches to cryptography. In this module we will study the principles of operation of quantum computers, the algorithms and protocols that are designed to use them, and different ways of reasoning about quantum computation. We will also consider the physical realisations of quantum computers, and their potential future impact.", "LM Human-Computer Interaction (Extended)   Human-computer interaction (HCI) explores the technical and psychological issues arising from the interface between people and machines. Understanding HCI is essential for designing effective hardware and software user interfaces. This module teaches the theory and practice of HCI methodologies for both design and evaluation.", "LI Artificial Intelligence 2   Artificial Intelligence (AI) and Machine Learning are often applied in situations characterised by various kinds of uncertainty, for example uncertainty in data measurements, missing data or uncertainty in our prior knowledge about the problem. This module will provide principles that enable AI to treat uncertainty consistently in inference, search, optimisation and learning.", "LM Computer Systems   This module will cover the fundamental principles of computer systems, including how information is represented in computers, how computer programs are executed, the relationship between software and hardware, reasoning about programs, and the foundations of operating systems and network technologies.", "LM Software Workshop 2   This module will develop advanced object-oriented software development skills. Students will learn how to work with complex data structures and algorithms (including those that are recursive) and will learn how to build programs with components that run concurrently and over networks. In addition, the students will work in teams to build a substantial piece of software from specification through analysis and design to implementation.", "LH Computer Vision and Imaging   Vision is one of the major senses that enables humans to act (and interact) in (ever)changing environments, and imaging is the means by which we record visual information in a form suitable for computational processing. Together, imaging and computer vision play an important role in a wide range of intelligent systems, from advanced microscopy techniques to autonomous vehicles. This module will focus on the fundamental computational principles that enable an array of picture elements, acquired by one of a multitude of imaging technologies, to be converted into structural and semantic entities necessary to understand the content of images and to accomplish various perceptual tasks. We will study the problems of image formation, low level image processing, object recognition, categorisation, segmentation, registration, stereo vision, motion analysis, tracking and active vision. The lectures will be accompanied by a series of  exercises in which these computational models will be designed, implemented and tested in real-world scenarios.", "Software Workshop 1 (MSc) This module introduces and develops object oriented design and programming skills. It introduces the Java programming language as an example of an object oriented programming language and develops software development skills through Java.  By the end of the module students should be able to:  Demonstrate an understanding of types, classes, objects, methods, inheritance, and exceptions  Demonstrate an understanding of and use object oriented analysis and design processes  Demonstrate the use of object-oriented class libraries for building applications using GUI classe  Explain methods and techniques for program testing  Explain the rationale for the use of object oriented programming and its limitations  ", "LC Data Structure &amp; Algorithms   Algorithms lie at the heart of Computer Science and software development. They embody the way in which we solve problems using computers. This module will introduce the fundamentals of data structures and algorithms. Data structures will be formulated to represent information in such a way that it can be conveniently and efficiently manipulated by the algorithms that are developed. The ideas will be presented both abstractly, and via problem-solving and implementations.Algorithms lie at the heart of Computer Science and software development. They embody the way in which we solve problems using computers. This module will introduce the fundamentals of data structures and algorithms. Data structures will be formulated to represent information in such a way that it can be conveniently and efficiently manipulated by the algorithms that are developed. The ideas will be presented both abstractly, and via problem-solving and implementations.", "LM Intelligent Data Analysis   The 'information revolution' has generated large amounts of data, but valuable information is often hidden and hence unusable. In addition, the data may come in many different forms, e.g. high-dimensional data collections, stream and time-series data, textual documents, images, large-scale graphs representing communication in social networks or protein-to-protein interactions etc. This module will introduce a range of techniques in the fields of pattern analysis, data analytics and data mining that aim to extract hidden patterns and useful information in order to understand such challenging data.", "LM Advanced Networking (Extended)   One of the defining characteristics of today\u2019s computer systems is their ability to exchange information. Whether we are talking about the smallest home network or the Internet as a whole, computer networks play a key role in many computer applications. An enormous number of applications, from general services such as the World Wide Web to specialised messaging or video streaming apps rely on networks and the common standards and protocols which make them work.  This module introduces the basic concepts, technologies, architectures and standards involved in computer networks, together with methods for their design and implementation. This will include discussion of data transmission protocols, TCP/IP, LANs and WANs, communication mechanisms and synchronization issues. The module will be based on the discussion of real-world case studies, research papers and standardisation documents.", "LC Theories of Computation   Computers have been used to solve an astonishing range of different problems, but this does not mean that they can be used to solve all possible problems: some cannot be solved efficiently, and some cannot be solved at all. In this module, we will introduce a set of principles and techniques for formalising computation and computability to understand what problems can be solved, how efficiently they can be solved, and what problems cannot be solved. We will develop mathematical models of computations using ideas such as sutomata theory (including Turing machines), of formal languages using ideas such as regular expressions and grammars, and will conclude by considering the notions of non-computability and complexity.", "LH Teaching Computer Science in Schools   The module is the implementation of the national Student Ambassador Scheme by the School of Computer Science at the University of Birmingham. Its design follows closely the recommendations and guidelines of the UAS.  The module will reward students with course credit for working as a \u2018student-tutor\u2019 with teachers in local schools and help them develop some valuable transferable skills.   Students will learn important, marketable and transferable skills of benefit to them in employment and in life, specifically:  Organisational and interpersonal skills  Addressing the needs of individuals  Time management skills  Working in a challenging and unpredictable environment  Staff responsibilities and conduct  The ability to improvise  Giving (and taking) feedback  Handling difficult and potentially disruptive situations   Public speaking and communication skills  Team-working  Standard teaching methods  Students will gain experience of working in a professional educational environment and will learn about the key issues affecting school education today.  They will have the satisfaction of making a positive impact on the education of pupils of all ages and the chance to act as a role model for your subject.  It is a chance to put something back into the community by sharing  knowledge and helping to motivate young people and raise their aspirations towards science.  They will develop confidence in answering questions about their own subject and in devising appropriate ways to communicate a difficult principle or concept.  They will develop communication skills and gain a better understanding of their own level of expertise.    For those of who are interested in teaching as a profession, this will be an opportunity to explore whether it is a path they want to pursue.  They will learn to devise and develop computer science projects and teaching methods appropriate to engage the relevant age group.    The module will involve:  Undergoing a Criminal Record Bureau (CRB) check prior to entering the classroom  Being paired with a specific teacher at a local school who will work with students to identify their aims and objectives for the term  Spending \u00bd  day a week in school for 10 weeks, developing a role within the classroom  Presentation and interview  11 training sessions  Completion of a Special Project (agreed with the teacher)", "LI Artificial Intelligence and Machine Learning   This module introduces the core concepts of artificial intelligence and machine learning. The principal focus of the module will be on the underlying principles such as knowledge representation, search, decision theory, probability, and statistical learning.", "Algorithms and Operating Systems   Summary module description:   \n  Algorithms and Operating Systems are fundamental concepts in Computer Science discipline. The module gives an introduction to fundamental algorithm design strategies that are common to many concrete applications. It also provides a general understanding of the structure and the main&nbsp;functionalities of modern operating systems.  \n     Outline content:   \n   Algorithms:   \n \n  \n Additional Data structures (Heaps, Graphs)  \n Divide and Conquer (General method, Analysis, examples - Sorting, Convex Hull, Matrix Multiplication)  \n The Greedy method (General method, Analysis, examples - Shortest Paths, Spanning Trees)  \n Dynamic Programming (General method, Analysis, Travelling salesperson, Transitive Closure)  \n  \n \n  Operating Systems:   \n \n  \n Introduction to operating systems Structure  \n  \n \n  Processes:   \n \n  \n Process concepts, lifecycle, process management, inter-process communication  \n  \n \n  Scheduling:   \n \n  \n Scheduling fundamentals, CPU-I/O interleaving, (non-)preemption, context switching  \n Scheduling algorithms: FCFS, SJF, SRTF, priority scheduling, round robin  \n  \n \n  Memory Management:   \n \n  \n Segmentation  \n &nbsp;Paging  \n &nbsp;Limits of multi-programming  \n  \n \n  File System:   \n \n  \n File management  \n Directory and storage  \n Hierarchies&nbsp;and access control  \n  \n \n  Input and Output:   \n \n  \n General structure  \n Application I/O interface  \n Block and character devices  \n Buffering  \n Blocking versus non-blocking I/O  \n  \n \n  Security and Protection:   \n \n  \n Protection domain,  \n Authentication  \n  \n     Assessable learning outcomes:  \n  On completion of the module a student should be able to:  \n \n  \n Identify the fundamental strategies in algorithmic design;  \n Distinguish which strategy is appropriate to solve a given problem; Classify different algorithmic strategies;  \n Analyze a given algorithm and assess its efficiency;  \n Apply techniques of proof by induction to verify certain properties of algorithms;  \n Describethe general structure and purpose of an operating system;  \n Explain the concepts of process, address space, and file;  \n Compare and contrast various CPU scheduling algorithms;  \n Understand the differences between segmented and paged memories, and be able to describe the advantages and disadvantages of each;  \n Compare and contrast polled, interrupt-driven and DMA-based access to I/O devices.  \n  \n  ", "HCI and Web Applications   Summary module description:   \n  This module introduces both the theory and practice of Human-Computer Interaction (HCI) between computers and humans, in particular adopting experience of interactive design for web- based architectures and systems, and using HCI heuristic principles for evaluating user interface in terms of information visualisation. The HCI methodology can be used to guide a development process for web-based applications that enhances useability of the web application. &nbsp;  \n     Outline content:   \n   \n HCI theory and methodology  \n psychology/physiology of the human perception and behaviour interacting with computing devices  \n Articulate user requirements for web-based applications  \n Construct conceptual and physical design leading to implementation for look-and-feel of a web application front-end  \n Adopt HTML, CSS, and JavaScript in implementation of a web application  \n Apply HCI evaluation techniques (including heuristic evaluation, expert evaluation and user testing) to measuring usability and accessibility as well as professional and ethical issues towards a resultant web application  \n Trends of HCI and web development in the modern computing era  \n  \n     Assessable learning outcomes:  \n  A student completing the module should be able to  \n \n  \n understand the theory, principles, and methodology of Human-Computer Interaction (HCI)  \n apply the range of HCI methods and techniques in design, development, and evaluation of web-based applications  \n represent look-and-feel in given real-world context and ensure its useability in the web-based application  \n evaluate critically the developed wen-based application against user experience and expectation  \n implement a look-and feel with HTML, CSS, and JavaScript for a front-end of web-based applications  \n  \n  ", "Applications of Computer Science   Summary module description:   \n  This module introduces popular applications associated with computers, including artificial intelligence, robotics, virtual reality, computer vision&nbsp;and data analytics.  \n     Outline content:   \n  The module consists of four application themes, as listed below:  \n \n  \n Artificial intelligence: here various methods are discussed which are used for \u2018intelligent\u2019 computing machines. These include classical AI methods such as Expert Systems and Problem Solving, as well as neural networks and evolutionary computing methods which, have been inspired by natural systems. Applications for artificial intelligence algorithms are also considered;  \n Robotics, Artificial Life and Virtual Reality: a cybernetic approach to these subjects is taken, showing how the theme of feedback is key to the control of robots, interaction with robots, computers and humans, and learning by robots and other forms of artificial life. Different types and applications of robots are described, their history given and their brain, sensors and actuators are discussed. Interaction is explored in terms of robots interacting with humans and robots, and humans in Virtual Reality systems, for which computer graphics and haptics are also discussed. Concepts in artificial life are explored, including mobile robots, Game of Life, Daisyworld as well as Fractals and, Lindemayer systems which can be used in virtual worlds;  \n Computer vision:&nbsp; this is the science behind development of capability to emulate (or possibly exceed) human's ability to visually sense the world, and is concerned with the automatic extraction, analysis and understanding of useful information from a single image or multiple images.&nbsp; This block of lectures will specifically focus on of some of most important methodologies and applications of computer vision and include topics such as biometrics, detection and tracking, deep learning, and behavioural recognition.&nbsp; The lectures cover both the underpinning theory behind the different topics presented as well as a deeper understanding of how the methods are applied in the real world;  \n Data analytics: Students are introduced to the concept of extracting useful information from data, covering types of data, data sources, pre-processing and manipulation techniques, feature selection and transformation, and data visualisation. These concepts are applied with hands-on activities using relevant software.  \n  \n     Assessable learning outcomes:  \nStudents completing this module should be able to describe typical techniques and apply relevant algorithms to  artificial intelligence and robots, to use basic algorithms describing tasks involved in computer vision and computer graphics; and to deal with data workflows with relevant data analytical tools.\n ", "Mathematics and Computation   Summary module description:   \n  An introduction to mathematics which is relevant to computer science, including linear algebra, probability and statistics. The focus of the module is more on understanding the concepts and considering how they can be implemented on a computer, than in pure mathematics.  \n     Outline content:   \n  Linear algebra (7 credits):  \n \n  \n Matrices, elementwise operations, trace, transpose, multiplication. Implementations as code (e.g. in MATLAB).  \n Linear transformations  \n Matrix determinant, inverse. Implementations as code (e.g. in MATLAB).  \n Vectors  \n Matrix rank  \n Gaussian elimination. Implementation as code (e.g. in MATLAB).  \n Eigenvalues and eigenvectors  \n Introduce applications of linear algebra (computer graphics, machine learning)  \n  \n \n Graphical Representation (3 credits)  \n \n  \n Introduction of relevant functions, including polynomials, trigonometrical, exponential and logarithmic.  \n Draw graphs of relevant functions  \n Interpret key aspects of graphs  \n Use MATLAB for plotting graphs  \n  \n \n Implementation of numerical algorithms in MATLAB (4 credits), covering concepts of integration as area under curve, differentiation as gradient e.g.:  \n \n  \n Newton\u2013Raphson method  \n Basic numerical quadrature  \n Euler's method for first order differential equations  \n Computer science applications  \n  \n \n Complex numbers (2 credits):  \n \n  \n Working with complex numbers  \n Representations  \n Modulus and argument of complex numbers  \n Computer science applications of complex numbers  \n Using complex numbers in programs.  \n  \n \n Probability and Statistics (4 credits):  \n \n  \n Simple probabilities  \n Probability Distributions  \n Data analysis  \n Correlation  \n  \n     Assessable learning outcomes:  \n   \n Ability to perform calculations with matrices and vectors  \n Ability to draw and interpret graphs  \n Implementation of numerical methods  \n Calculations with complex numbers  \n Ability to use probability and statistics  \n Knowledge of applications of these methods in the context of the subject  \n  \n  ", "Fundamentals of Computer Science   Summary module description:   \nThis module introduces the essential concept of computer systems in the autumn term, and the foundations of data structures and algorithms in the spring term.\n    Outline content:   \n  In the autumn term:  \n \n  \n General introduction to computer systems and hardware/software interaction;  \n Information representation: binary representation of text, integer, and floating points;  \n Data manipulation: the role of computer architecture, instructions and program execution;  \n Instruction set architecture  \n Processors and pipelining  \n Memory hierarchy design  \n  \n \n In the spring term  \n \n  \n Operating systems: components and their functions;  \n Computer networking: network classification, protocols, internet architecture and applications;  \n Information security: threats and protections, good practices;  \n Algorithms: the art of problem solving, iterative and recursive methods and assessing complexity;  \n Practical examples, including searching and sorting, graphical and numerical;  \n Data structures: arrays, stacks, queues;  \n Encoding of strings, vectors and matrices;  \n  \n     Assessable learning outcomes:  \n  Students completing this module should be able to:  \n \n  \n describe the structure of computer systems and the interaction between software and hardware; use binary code for information representation  \n articulate data manipulation inside a computer system through a machine language (instructions) and relevant operations  \n establish knowledge of instruction set and memory hierarchy architectures in a computer system  \n explain the role of computer networking in computer communication, including internet and its applications  \n appreciate the importance of information security in computer design and usages explain the role of designing algorithms, as distinct from designing programs describe and use various data structures in computer programs  \n implement and analyse an algorithm and assess its efficiency  \n Perform simple computations, and suggest a suitable encoding for data structures and write code to process it  \n Compare and contrast different machine arithmetics, such as fixed point and floating point  \n  \n  ", "Programming in C/C++   Summary module description:   \n  This module&nbsp;introduces students to procedural and object-oriented programming principles and programming languages in C and C++.  \n     Outline content:   \n   \n Computing Concepts, Introduction to Programming and Structured Program Development  \n The C programming language; Program Control; Types and Operators; Functions; Arrays and Pointers; Characters and Strings; Formatted Input/Output; Structures, Unions, and Enumerations; File Processing; Data Structures  \n Introduction to object-oriented programming; Encapsulation; Inheritance; Polymorphism  \n The C++ programming language; Classes; Inheritance; Operator Overloading; Templates; Advanced Topics  \n Using UNIX and Windows operating systems; Compilers, Linkers, Debuggers and Integrated Development Environments; typical computer organization  \n  \n     Assessable learning outcomes:  \n   \n Recognise and describe programming constructs in C and C++  \n Explain and demonstrate how to compile, link and run programs with and without integrated development environments  \n Compare the use of Windows and UNIX for programming&nbsp;  \n Explain and demonstrate how to edit, test and debug programs  \n Analyse easy problems and design and implement an algorithm to solve them&nbsp;  \n Describe fundamental concepts and algorithms that are relevant in programming  \n Describe how code is executed by a computer&nbsp;&nbsp;  \n Predict what a segment of code will produce (tracing)&nbsp;  \n Critically evaluate programming solutions  \n  \n  ", "Computer Architecture and Networking   Summary module description:   \n  This module introduces Computer Networking in the autumn term and Computer Architecture, based on RISC/MIPS architecture, in the spring term.  \n     Outline content:   \n  The core concepts of network architecture and communication protocols, which present in the framework of multi-tier architectures, are discussed in the autumn term. These include Local Area Networking (LAN) routing and Ethernet protocols; Internetworking; and error, congestion and flow control. The module covers network technologies ranging from local area networks to the Internet, including Ethernet with a focus on TCP/IP, IP addressing, routing protocols, and congestion control schemes within the Internet. An introduction is also given to the core Internet applications, such as email, web serving and name resolution.  \n \n In the spring term, the module introduces the underlying theory of modern computer architecture in terms of instruction set architecture, organisation, and hardware. It begins with an introduction to the fundamentals of computer design for Von Neumann architecture, and continues with an examination of the components of processor, memory and input/output. DLX, which is an educational edition of MIPS and RISC architecture, is used as a model machine in teaching. An important theme is the relationship between architecture and performance. The module covers modern techniques for improving computer performance, such as instruction-level parallel processing (pipelining), and cache-memory-hierarchy design. The role of Input/Output in computer architecture with storage systems is also examined from the design point of view.  \n     Assessable learning outcomes:  \n  Students who complete this module will have:  \n \n  \n &nbsp;core concepts and knowledge of network architecture and communication protocols;  \n ability to implement the concepts in real world network applications;  \n basic skills for computer architecture design;  \n ability to quantitatively evaluate computer performance by using benchmark suites;  \n skills to improve computer performance by using hardware and software techniques.  \n  \n  ", "Software Engineering: Fundamentals and Professional Development   Summary module description:   \n  This module introduces students to the concepts, practice and management in software engineering and the professional development to support it. It addresses the lifecycle activities associated with developing software as part of a system as well as the management activities required to ensure that the software is developed on time, within budget and is fit for purpose. The module also incorporates case studies and examples to show the application of the concepts and principles to real-world systems.  \n \n A learning approach is adopted which reflects software engineering theory and practice. Students &nbsp;&nbsp;are given course material to read/view prior to the lectures, and are required to produce a number of assessments in teams.  \n     Outline content:   \n  The module draws on the IEEE\u2019s articulation of knowledge on the subject, as presented in the Software Engineering Book of Knowledge v3 (SWEBOK).  \n \n  \n &nbsp;Introduction to Software Engineering (e.g. models, methods, processes, and management).  \n Human factors in Software Engineering  \n Software requirements fundamentals, processes, requirements elicitation techniques/tools  \n Software design fundamentals, architecture, design techniques and modelling approaches  \n Software construction fundamentals, technologies/tools, environments  \n Software validation methods, and testing techniques  \n Software maintenance and configuration management  \n Software quality requirements, measurement, and management  \n Software Engineering professional practices (e.g. professionalism, legal, ethical, economic impact of software, documentation, communication skills in written and presentation form)  \n Software Engineering in the modern computing era (e.g. DevOps transformation)  \n  \n     Assessable learning outcomes:  \n  By the end of the module, it is expected that the student will be able to:  \n \n  \n Understand the software engineering theory, and practice them in developing software applications in the wide domain context  \n Describe the software lifecycle and the activities associated with each phase of it (feasibility, requirements, design, implementation, testing, handover, maintenance, evolution, and decommissioning)  \n Create software application development project plans, and conduct risk analysis, configuration management and testing  \n Distinguish the difference between plan-based and agile-based approaches to software development  \n Appreciate the importance of software engineering to real-world projects  \n Work jointly with others in a group project as well as being able to work independently  \n Demonstrate innovative, creative, and critical thinking towardsa development of solution  \n Perform in communication and documentation  \n  \n  ", "LH Algorithms and Complexity   Algorithms are at the heart of computer science. In this module we will develop a range of core algorithmic ideas such as dynamic programming, greedy methods, divide-and-conquer techniques, and network flows. We will then learn how to use these to design efficient algorithms for a range of problems, motivated by a range of applications. We will then consider core concepts from computational complexity theory such as NP-completeness, and their implications for algorithm design. Finally, we will consider some advanced modern topics such as approximate and randomized algorithms, parameterized algorithms and complexity, and algorithms for streams of data.", "Programming in Java   Summary module description:   \n  This module introduces to students the fundamentals of programming using Java and its usage in developing real world applications. It will be delivered in two parts and will comprise of in-person lectures and practical sessions to provide students with hands-on experience of writing Java programs using integrated development environment tools. The first part will focus on the syntax, semantics and idioms of Java programming language and in the second part focus will be on introducing concepts of Android programming using Java.  \n     Outline content:   \n   \n Introduction to Java Programming  \n Object Oriented Programming in Java using classes  \n Structure of the Java Language&nbsp;  \n Developing GUIs (Widgets, Event driven Programming)  \n Storing and Retrieving Data with File I/O  \n Working with Databases (JDBC, MySQL)  \n Java development tools (JDK, JAR, IDEs)  \n Android app development  \n  \n     Assessable learning outcomes:  \n  On completion of this module, students will be able to  \n \n  \n Implement object-oriented designs with Java.  \n Identify Java language components and how they work together in applications.  \n Design, program and debug Java applications  \n Extend Java classes with inheritance and dynamic binding  \n Use the Java Collections API and generates API documentation for their own application  \n Understand how the various components of an Android app work  \n Develop deployable android apps  \n  \n  ", "LH Machine Learning and Intelligent Data Analysis   Machine learning studies how computers can autonomously learn from available data, without being explicitly programmed. The 'information revolution' has generated large amounts of data, but valuable information is often hidden and hence unusable. The module will provide a solid foundation to machine learning and advanced data analysis. It will give an overview of the core concepts, methods, and algorithms for analysing and learning from data. The emphasis will be on the underlying theoretical foundations, illustrated through a set of methods widely used in practice. This will provide the student with a good understanding of how, why and when do various modern machine learning and data analysis methods work.", "LM Machine Learning and Intelligent Data Analysis (Extended) (Dubai)   Machine learning studies how computers can autonomously learn from available data, without being explicitly programmed. The 'information revolution' has generated large amounts of data, but valuable information is often hidden and hence unusable. The module will provide a solid foundation to machine learning and advanced data analysis. It will give an overview of the core concepts, methods, and algorithms for analysing and learning from data. The emphasis will be on the underlying theoretical foundations, illustrated through a set of methods widely used in practice. This will provide the student with a good understanding of how, why and when do various modern machine learning and data analysis methods work.", "LI Data Structures, Algorithms, and Databases (YiCS)   This module will introduce a range of methods for working with data. Fundamental abstract data structures and their associated algorithms will be introduced, and their representation in high-level programming languages will be discussed. The fundamental principles of database systems will be introduced, including the necessary mathematical background and the practical application.", "LH Programming Language Principles, Design, and Implementation   By now students will have seen and used a variety of programming languages. In this module they will also understand the principles behind their design along with techniques for transforming human-friendly programs written in high-level programming languages such as C, Java, or Haskell, into machine-friendly sets of instructions, written for example in assembly. This module introduces some of the central concepts and techniques used to design and study programming languages, from syntactic and semantic specification to compilation. Students will see how to design a language by first defining its syntax (e.g., grammar rules) and semantics (e.g., operational semantics). They will further learn how types can be used to guarantee that programs are \u201csafe\u201d, thereby preventing certain catastrophic errors. We will see that types have other uses. They can for example be used as abstraction mechanisms that allow hiding implementation details. Finally, the module will describe the structure of a typical compiler, including front end phases that implement the syntactic and semantic specification of a language, and the code generation and optimization backend phases, as well as the key techniques used in those phases.", "Programming for Data Science   Programming is an essential component in of the data scientist\u2019s toolkit. This module will develop students\u2019 programming skills, motivated by examples drawn from across the spectrum of data science problems. Students will learn how to design and implement complete solutions to data science problems using a range of tools and libraries.", "LH Human-Computer Interaction   Human-computer interaction (HCI) explores the technical and psychological issues arising from the interface between people and machines. Understanding HCI is essential for designing effective hardware and software user interfaces. This module teaches the theory and practice of HCI methodologies for both design and evaluation.", "LM Computer-Aided Verification (Extended)   Showing that computer systems, hardware or software, are free of bugs is an important and \nchallenging area of computer science but is essential in contexts such as safety-critical applications or computer security, where the consequences can be severe. This module introduces the field of formal verification, which rigorously checks the correctness of computer systems. Students will be introduced to the concept of mathematical modelling of systems, both sequential and parallel, learn how to formalise correctness properties using logics, notably temporal logic, and how to verify them automatically using techniques such as model checking. The module will cover both the theory and algorithms underlying these verification techniques and give a practical introduction to using verification tools.", "LM Programming Language Principles, Design, and Implementation (Extended)   By now students will have seen and used a variety of programming languages. In this module they will also understand the principles behind their design along with techniques for transforming human-friendly programs written in high-level programming languages such as C, Java, or Haskell, into machine-friendly sets of instructions, written for example in assembly. This module introduces some of the central concepts and techniques used to design and study programming languages, from syntactic and semantic specification to compilation. Students will see how to design a language by first defining its syntax (e.g., grammar rules) and semantics (e.g., operational semantics). They will further learn how types can be used to guarantee that programs are \u201csafe\u201d, thereby preventing certain catastrophic errors. We will see that types have other uses. They can for example be used as abstraction mechanisms that allow hiding implementation details. Finally, the module will describe the structure of a typical compiler, including front end phases that implement the syntactic and semantic specification of a language, and the code generation and optimization backend phases, as well as the key techniques used in those phases.", "LM Algorithms and Complexity (Extended)   Algorithms are at the heart of computer science. In this module we will develop a range of core algorithmic ideas such as dynamic programming, greedy methods, divide-and-conquer techniques, and network flows. We will then learn how to use these to design efficient algorithms for a range of problems, motivated by a range of applications. We will then consider core concepts from computational complexity theory such as NP-completeness, and their implications for algorithm design. Finally, we will consider some advanced modern topics such as approximate and randomized algorithms, parameterized algorithms and complexity, and algorithms for streams of data.", "LM Algorithms for Data Science Modern data science encompasses a huge range of methods \u2013 from supervised methods for learning from labelled data, to statistical pattern analysis and data mining. In this module students will study a range of modern techniques from across the data science spectrum including supervised learning, data mining, and statistical pattern recognition. The module will give the student a good understanding of how, why and when different methods work and experience of applying them in practice.  By the end of the module students should be able to:   Understand and explain a range of methods and algorithms for data science    Be able to apply a range of algorithms to solve data science problems    Compare and contrast different methods, analysing their relative advantages and disadvantages    Make informed choices between different methods, given a data science question, and be able to justify these choices.    ", "LM Research Topics in HCI   This module supports students in studying current research within the HCI discipline. Several themes will be led by the different academic staff involved. Students will be given an initial set of key papers and guided in their research and analysis of the area selected. Each student will deliver a report on their analysis of the current state of the art in their area and also be expected to highlight open research questions and potential methods of approach. They will also present this work orally to the group.", "LH Neural Computation   This module introduces the basic concepts and techniques of neural computation, and its relation to automated learning in computing machines more generally. It covers the main types of formal neuron and their relation to neurobiology, showing how to construct large neural networks and study their learning and generalization abilities in the context of practical applications. It also provides practical experience of designing and implementing a neural network for a real world application.", "LC Concepts of Computer Science   This module will introduce students without a background in Computer Science to the subject\u2019s core concepts. The central concepts of algorithm and data structure will be introduced, and the importance of generalisation and abstraction discussed. The implementation of these concepts will be introduced using imperative and object-oriented programming techniques in the Java Programming language. The relationship between the computer\u2019s hardware and software will be discussed: how programmes and data are represented, and how programmes are executed.", "LI Software Engineering and Professional Practice   This module introduces students to the field of software engineering and the principles of systematically engineering large scale software systems. The module covers widely used techniques for engineering requirements, designing and modelling, and architecting dependable and evolvable software. The module discusses Software Quality Assurance, testing and project management with appreciation to the economical, legal and ethical aspects.", "LM Dependable and Distributed Systems (Extended)   Distributed systems have become commonplace, with such systems providing the vast majority of services that we have come to depend on every day. This module studies a range of topics in distributed systems from a practical and theoretical perspective. Students will learn how to analyse, design and implement efficient, fault tolerant solutions to modern problems throughout a rigorous understanding of classical approaches and results.", "LM Programming for Data Science   Programming is an essential component in of the data scientist\u2019s toolkit. This module will develop students\u2019 programming skills, motivated by examples drawn from across the spectrum of data science problems. Students will learn how to design and implement complete solutions to data science problems using a range of tools and libraries.", "LM Current Topics in Data Science Data Science is a rapidly advancing field of study. This module will consist of a series of seminar-style short courses that will cover recent advances in the subject. Each topic will be introduced by a staff member and students will then develop their knowledge via directed reading and present their findings to the class. Each topic will be accompanied by weekly quizzes that will teststudents\u2019 understanding.  By the end of the module students should be able to:   demonstrate an understanding and appreciation of recent advances in data science    make effective oral and written presentations     engage effectively in discussions about recent research in data science     ", "LH Machine Learning (Extended and Non-Extended) Machine learning studies how computers can autonomously learn from available data, without being explicitly programmed. The module will provide a solid foundation to machine learning by giving an overview of the core concepts, theories, methods, and algorithms for learning from data. The emphasis will be on the underlying theoretical foundations, illustrated through a set of methods used in practice. This will provide the student with a good understanding of how, why and when various machine learning methods work.  By the end of the module, students must be able to:     demonstrate knowledge and understanding of core ideas and foundations of automated learning from data    demonstrate understanding of broader issues of learning and generalisation in machine learning     demonstrate the ability to apply the main approaches to unseen examples     (Extended version only:) The student should demonstrate the capacity to independently study, understand, and critically evaluate advanced materials or research articles in the subject areas covered by this module.     ", "LM Mathematical Foundations of Artificial Intelligence (AI) and Machine Learning (ML) Mathematics is an integral part of modern approaches to machine intelligence. From the role of linear algebra and calculus in neural network learning models for image classification and speech recognition, to Bayesian approaches to automated disease diagnosis, , to control and reasoning in robotocs, mathematical methods are essential to understand, apply, and advance state-of-the art machine intelligence techniques. This module will introduce a range of mathematical tools and demonstrate how they can be used to understand and solve core machine intelligence tasks, and to analyse the limits of their performance.  By the end of the module students should be able to:   Demonstrate a sound understanding of a range of mathematical tools and their role and importance in artificial intelligence and machine learning    Formulate machine intelligence questions using appropriate mathematical tools    Use mathematical tools to analyse the performance of machine intelligence methods    ", "LM Current Topics in Artificial Intelligence and Machine Learning Research in artificial intelligence and machine learning is advancing at a formidable pace. This module will consist of a series of seminar-style short courses that will cover recent results from the literature. Each topic will be introduced by a staff member and students will then develop their knowledge via directed reading and present their findings to the class. Each topic will be accompanied by weekly quizzes that will test students\u2019 understanding.  By the end of the module students should be able to:   demonstrate an understanding and appreciation of recent advances in artificial intelligence and machine learning   make effective oral and written presentations    engage effectively in discussions about recent research    ", "LM Mobile &amp; Ubiquitous Computing (Extended)   This module is concerned with the issues surrounding mobile and ubiquitous computing systems. It examines the particular issues that arise in these systems both from a technical perspective and in terms of usability and interaction. The underlying theoretical and technological frameworks are discussed. Students are introduced to development tools and techniques for building mobile systems and their understanding is reinforced through practical work. The present and potential future applications are reviewed.", "LI Software Workshop 2   This module will develop advanced object-oriented software development skills. Students will learn how to work with complex data structures and algorithms (including those that are recursive) and will learn how to build programs with components that run concurrently and over networks. In addition, the students will work in teams to build a substantial piece of software from specification through analysis and design to implementation.", "LM Designing and Managing Secure Systems The course will cover the fundamental concepts underpinning the design and management of secure systems. Assets, threats, risk analysis and adversarial thinking will be considered, and security management standard such as ISO 27001 will be introduced.  By the end of the module students should be able to:    Describe security design principles and technologies.    Identify good and weak design decisions from a security standpoint in a range of applications.     Propose and evaluate security solutions     Assess the operation of an information system, conduct a risk assessment, and produce a risk treatment plan which reduces, mitigates or otherwise deals with those risks to the information.     Contribute to and operate an integrated security management system in the terms of ISO 27001 or similar standards.       ", "LM Building Useable Software This module will introduce the concept of user-centred software design, integrating concepts from software engineering such as the software life cycle and modern methodologies for software development with the main principles of human-computer interaction (HCI).  By the end of the module students should be able to:    Explain and apply appropriate techniques for determining user requirements    Design and evaluate a computer-based system which meets such user requirements    Explain and apply modern methodologies for software design and development    Explain and interpret the software lifecycle    ", "LH Individual Studies   Strong students may choose to study, at their own initiative, material that is outside what can be found in other modules available in the School of Computer Science. This module gives them the opportunity to do so. Learning is by self-managed study under the direction of a supervisor (a member of the academic staff of the School). The topic for a particular student is by negotiation between the student and supervisor early in the semester.", "LM Neural Computation (Extended) This module introduces the basic concepts and techniques of neural computation, and its relation to automated learning in computing machines more generally. It covers the main types of formal neuron and their relation to neurobiology, showing how to construct large neural networks and study their learning and generalization abilities in the context of practical applications. It also provides practical experience of designing and implementing a neural network for a real world application.  By the end of the module students should be able to:   Understand the relationship between real brains and simple artificial neural network models   Describe and explain some of the principal architectures and learning algorithms of neural computation    Explain the learning and generalisation aspects of neural computation\t    Demonstrate an understanding of the benefits and limitations of neural-based learning techniques in context of other state-of-the-art methods of automated learning\t    Apply neural computation algorithms to specific technical and scientific problems    ", "LM Data Structures, Algorithms, and Databases This module will introduce a range of methods for working with data. Fundamental abstract data structures and their associated algorithms will be introduced, and their representation in high-level programming languages will be discussed. The fundamental principles of database systems will be introduced, including the necessary mathematical background and the practical application.  By the end of the module students should be able to:   Explain and analyse a range of abstract data types    Assess and select the most appropriate abstract data types in solving a range of problems     Analyse the complexity of an algorithm and interpret this in terms of its complexity classes     Design and implement a database for a specified problem     Query existing databases and represent the query results using an appropriate abstract data structure     Analyse database problems using appropriate mathematical tools     ", "LM Data Science Group Project Data science is an intrinsically collaborative activity, involving interaction between data scientists and domain experts. This module will emphasise the collaborative nature of data science projects. Students will work in groups of 3-5 on an interdisciplinary project co-supervised by a data scientist and a domain expert on a data science challenge posed by the supervisors. The project will be structured as an entrepreneurship-style activity, where the teams will be asked to develop a \u201cbusiness idea\u201d, including a functioning prototype that demonstrates their idea.  By the end of the module students should be able to:   Design and implement a solution to a real data science problem    Write high quality documentation that explains their solution and how to use it   Work effectively in a team    ", "LI Building Useable Software   This module will introduce the concept of user-centred software design, integrating concepts from software engineering such as the software life cycle and modern methodologies for software development with the main principles of human-computer interaction (HCI).", "LM Quantum Computing (Extended)   Quantum computing is a non-classical paradigm for computation that uses the properties and effects of quantum mechanics to represent and manipulate information. Certain computations can be performed more efficiently on quantum computers than on classical computers, an example of this is sublinear search of unstructured data. Quantum computing also leads to new approaches to cryptography. In this module we will study the principles of operation of quantum computers, the algorithms and protocols that are designed to use them, and different ways of reasoning about quantum computation. We will also consider the physical realisations of quantum computers, and their potential future impact.", "LC Mathematical and Logical Foundations of Computer Science   Mathematical and logical reasoning underpins almost all of Computer Science, from linear algebra in graphics and machine learning, to algebra in cryptography and logic in verification. This module introduces essential topics in mathematics and logic including linear algebra; abstract algebra; set theory (a fundamental language of mathematics); and propositional and predicate logic. The key ideas will be illustrated with applications across a range of topics in computer science.", "LM Advanced Functional Programming (Extended)   This module exposes students to state of the art functional programming languages and and their mathematical foundations in the lambda calculus and type theory. Students can expect to develop advanced functional programming skills and awareness of experimental programming languages.", "LC Full Stack Application Development   Many modern software applications involve a full software stack \u2013 a client-side front-end, a server to interpret and process client requests, and a database to store the application\u2019s content. This module will introduce a range of tools and techniques for full stack software development.", "LM Human Computer Interaction Theory and Practice   The module will explore the major themes in HCI from both a theoretical and practical perspective. It provides the core underpinning knowledge necessary for further study of HCI, and aims to give students an understanding of the key concepts in cognitive psychology and how they relate to technology design and use. The module also provides a survey of HCI methodologies and examines a number of techniques for HCI design and evaluation in depth, with students undertaking practical exercises and project work in which they are asked to apply knowledge and skills, including those from other modules, to the design, implementation and analysis of interfaces between people and computer systems. Students are introduced to HCI systems across a range of application domains.", "LM Secure Software and Hardware Systems This module covers the principles of software and hardware security. Classic design principles for the protection of information in computer systems are introduced. Some of the most important vulnerabilities in current software and hardware systems and the corresponding attacks will be reviewed, and tools and techniques for analysing and defending against them will be studied.  By the end of the module students should be able to:   Explain and apply the fundamental principles and mechanisms of software and hardware security    Identify the main security defects and threats in current software and hardware systems     Perform basic implementation attacks on software and hardware systems     Understand and implement countermeasures against the introduced attacks     Use a range of tools for analysing the security of software and hardware     ", "LM Robot Vision Vision is one of the major senses that enables humans to act (and interact) in (ever)changing environments. In a similar vein, computer vision should play an equally important role in relation to intelligent robotics. This module will focus on the fundamental computational principles that enable to convert an array of picture elements into structural and semantic entities necessary to accomplish various perceptual tasks. In a series of lectures, we will study the problems of low level image processing, recognition, categorisation, stereo vision, motion analysis, tracking and active vision. The lectures will be accompanied by a series of laboratory exercises where many of these computational models will be designed, implemented and tested in real-world scenarios.  By the end of the module students should be able to:   Design, implement and test simple computer vision algorithms.    Write a detailed report on a computer vision project..    Survey and critically discuss the research literature in one subfield of computer vision.    Demonstrate an understanding of the main computer vision methods and computational models.   ", "LM Computer Vision and Imaging (Extended)   Vision is one of the major senses that enables humans to act (and interact) in (ever)changing environments, and imaging is the means by which we record visual information in a form suitable for computational processing. Together, imaging and computer vision play an important role in a wide range of intelligent systems, from advanced microscopy techniques to autonomous vehicles. This module will focus on the fundamental computational principles that enable an array of picture elements, acquired by one of a multitude of imaging technologies, to be converted into structural and semantic entities necessary to understand the content of images and to accomplish various perceptual tasks. We will study the problems of image formation, low level image processing, object recognition, categorisation, segmentation, registration, stereo vision, motion analysis, tracking and active vision. The lectures will be accompanied by a series of  exercises in which these computational models will be designed, implemented and tested in real-world scenarios.", "LI Software Workshop 1   This module introduces and develops the principles of object oriented and imperative programming. Students will learn how to design and develop computer programs using an object-oriented programming language, and how to test their correctness. The development of complete applications with a graphical user interface (GUI) will be introduced.", "LM Evolutionary Computation (Extended)   Evolutionary algorithms (EAs) are a class of optimisation techniques drawing inspiration from principles of biological evolution. They typically involve a population of candidate solutions from which the better solutions are selected, recombined, and mutated to form a new population of candidate solutions. This continues until an acceptable solution is found. Evolutionary algorithms are popular in applications where no problem-specific method is available, or when gradient-based methods fail. They are suitable for a wide range of challenging problem domains, including dynamic and noisy optimisation problems, constrained optimisation problems, and multi-objective optimisation problems. EAs are used in a wide range of disciplines, including optimisation, engineering design, machine learning, financial technology (\u201cfintech\u201d), and artificial life. In this module, we will study the fundamental principles of evolutionary computation, a range of different EAs and their applications, and a selection of advanced topics which may include time-complexity analysis, neuro-evolution, co-evolution, model-based EAs, and modern multi-objective EAs. The students will also read selected recent research articles on evolutionary computation.", "LI Team Project AI   Large software projects require the combined effort of a team of skilled developers. In this module students will learn the basics of teamwork in the context of developing a large AI-themed programming project. Students work in teams to design, implement and document the code. Students are expected to use state-of-the-art AI programming, observe good software engineering practice, and work effectively in a team. Students will use industry-standard approaches such as continuous integration.", "LM Forensics, Malware, and Penetration Testing This module will look at ways of assessing the security of computer software and hardware, and how to investigate and respond when security has been compromised. A range of methods and tools will be introduced to identify vulnerabilities, and to analyse systems that have already been attacked.  By the end of the module students should be able to:   Identify security vulnerabilities in a range of software and hardware systems    Understand how vulnerabilities may be exploited by an attacker    Use a range of methods and tools to analyse systems that have already been attacked.    Write formal reports that summarise their findings    ", "LM Experiment Design, Evaluation Methods and Statistics   The module is aimed at computer scientists who are, or intend to be, involved in research that involves conducting experiments. In Human-Computer Interaction (HCI), there is a tradition of using experiments to test hypotheses. The hypotheses could relate to the performance of a novel design (so called AB testing) or to the impact of an intervention on human performance. The module could be relevant to studies who are conducting comparative evaluation, e.g., of different machine learning algorithms. In order to ensure that an experiment has been conducted in an effective manner (so that tests are fair and not affected by confounding variables), care needs to be taken to ensure that the design of the experiment, the specification of the data and the choice of statistical test are appropriate to the hypotheses being tested. Furthermore, it is important to ensure that experiments involving human participants are conducted according to robust ethical principles and practices. In addition to designing experiments, the module will introduce students to the software package R to show how this can be used for basic data science and statistical analysis.", "LM Intelligent Interactive Systems (Extended)   Computer systems are increasingly designed to cooperate with people. For example, semi-autonomous vehicles automate part of the problem of driving but leave overall control with a human driver. Similarly, medical systems make use of vast amounts of data and the latest machine learning but must work with doctors to determine a diagnosis. Similarly, decision supports systems, tutoring systems, dialogue systems, and recommender systems. These Intelligent Interactive Systems, and the theory of human psychology that underpins them are the subject of this module. This is an area of computer science that is making rapid progress with new theory and methods influencing real-world systems. It is an area that is driven, in part, by the vast amount of data concerning human behavior that is now routinely collected and the desire to not simply classify it but to understand it. The module will introduce students to this new and exciting topic and to the methods needed to build Intelligent Interactive Systems. There will be a strong focus on algorithms for modeling and understanding people using computers.", "LH Intelligent Data Analysis   The 'information revolution' has generated large amounts of data, but valuable information is often hidden and hence unusable. In addition, the data may come in many different forms, e.g. high-dimensional data collections, stream and time-series data, textual documents, images, large-scale graphs representing communication in social networks or protein-to-protein interactions etc. This module will introduce a range of techniques in the fields of pattern analysis, data analytics and data mining that aim to extract hidden patterns and useful information in order to understand such challenging data.", "LM Security of Real-World Systems (Extended)   Building on Security and Networks, this module teaches how to find, analyse, and mitigate security vulnerabilities in real-world systems. It will also teach students how to assess the threats to a system, and how to protect against them. A range of practical analysis methods and tools are covered.", "LH Computer Graphics   One of the most fascinating and popular uses of computers is the creation of images and animations as used in games and films. Students will learn the key concepts, representations, transformations, and techniques of computer graphics. The theoretical knowledge will be applied to constructing complex images, using techniques such as lighting and occlusion to make them look realistic.", "LH Advanced Functional Programming   This module exposes students to state of the art functional programming languages and their mathematical foundations in the lambda calculus and type theory. Students can expect to develop advanced functional programming skills and awareness of experimental programming languages.", "LM Intelligent Robotics (Extended)   Artificial Intelligence is concerned with mechanisms for generating intelligent behaviour. When this behaviour occurs in the everyday physical world, with its uncertainty and rapid change, we find that all kinds of new problems and opportunities arise. In this module we will address these issues in the context of intelligent mobile robots. The lectures will teach theories of perception, estimation, prediction, decision- making, learning and control, all from the perspective of robotics. In the laboratory sessions students will implement some of these theories on real robots to see how theory can be applied in practice.", "LH Intelligent Interactive Systems   Computer systems are increasingly designed to cooperate with people. For example, semi-autonomous vehicles automate part of the problem of driving but leave overall control with a human driver. Similarly, medical systems make use of vast amounts of data and the latest machine learning but must work with doctors to determine a diagnosis. Similarly, decision supports systems, tutoring systems, dialogue systems, and recommender systems. These Intelligent Interactive Systems, and the theory of human psychology that underpins them are the subject of this module.  This is an area of computer science that is making rapid progress with new theory and methods influencing real-world systems. It is an area that is driven, in part, by the vast amount of data concerning human behavior that is now routinely collected and the desire to not simply classify it but to understand it. The module will introduce students to this new and exciting topic and to the methods needed to build Intelligent Interactive Systems. There will be a strong focus on algorithms for modeling and understanding people using computers.", "LH Mobile &amp; Ubiquitous Computing   This module is concerned with the issues surrounding mobile and ubiquitous computing systems. It examines the particular issues that arise in these systems both from a technical perspective and in terms of usability and interaction. The underlying theoretical and technological frameworks are discussed. Students are introduced to development tools and techniques for building mobile systems and their understanding is reinforced through practical work. The present and potential future applications are reviewed.", "LH Evolutionary Computation   Evolutionary algorithms (EAs) are a class of optimisation techniques drawing inspiration from principles of biological evolution. They typically involve a population of candidate solutions from which the better solutions are selected, recombined, and mutated to form a new population of candidate solutions. This continues until an acceptable solution is found. Evolutionary algorithms are popular in applications where no problem-specific method is available, or when gradient-based methods fail. They are suitable for a wide range of challenging problem domains, including dynamic and noisy optimisation problems, constrained optimisation problems, and multi-objective optimisation problems. EAs are used in a wide range of disciplines, including optimisation, engineering design, machine learning, financial technology (\u201cfintech\u201d), and artificial life. In this module, we will study the fundamental principles of evolutionary computation, a range of different EAs and their applications, and a selection of advanced topics which may include time-complexity analysis, neuro-evolution, co-evolution, model-based EAs, and modern multi-objective EAs.", "LM Visualisation Visualising data effectively is important for both presentation and also for gaining insight and intuition into its structure. This can be challenging when the number of data points is large, and especially when it is high dimensional. In this module students will study techniques for visualising complex datasets, including best practice for visual display, dimensionality reduction techniques, and tools for visualisation.  By the end of the module students should be able to:   Understand, explain, and apply techniques for visualising high-dimensional data    Effectively use a range of tools for data visualisation    Present effective visualisations of complex datasets using established best practice.    ", "LM Network Security + Cryptography The module introduces the threats and attacks which may be perpetrated on computer networks, and some of the mechanisms designed to address them. The fundamentals of cryptography and its practical application will be studied. Some technology case studies are presented and evaluated.  By the end of the module students should be able to:    explain network vulnerabilities and attacks    explain and evaluate security mechanisms designed to address such attacks    design networking security solutions appropriate for a given application and situation    explain and apply the principles of a range of cryptographic methods    demonstrate an understanding of the mathematical underpinning of cryptography    demonstrate an understanding of some legal and socio-ethical issues surrounding cryptography    ", "CSY2042 \u2013 Website Management  Description:  The purpose of this module is ? Developing a new website is one small part of the overall lifecycle. Managing and maintaining a site calls on a wide variety of skills, from content management to understanding the legal context of ownership, from people skills to implementing added functionality. This module introduces you to the varied talents required of a successful WebMaster.  ", "CSY1090 \u2013 2D Game Asset Production  Description:  The purpose of this module is to introduce students to the principles and technical skills used to create 2D digital graphics for video games and other creative industries, and to explore the creative processes required to produce their own digital assets to professional standards.  ", "CSY2083 \u2013 Digital Communications  Description:  This module examines the principles of fixed, wired and wireless digital communication systems.  At the end of this module, the learners will know the physical representation and features of the analogue and digital signal. They will also be able to apply the concepts in MATLAB or Python for simulation purposes.  ", "Mixed Reality  \n \nTo develop an understanding of the nature and scope of the field of mixed reality and its relevance to a variety of market sectors for computing.To develop core design, data analysis and programming skills required for the design and prototyping of engaging and effective mixed reality applications.To appreciate the real-world interactional, social and ethical impacts upon user experience in the design and application of mixed reality applications.\n \n   \n \n Focuses on the possibilities and challenges of interaction beyond the desktop. Exploring the 'mixed reality continuum' - a spectrum of emerging computing applications that runs from virtual reality (in which a user is immersed into a computer-generated virtual world) at one extreme, to ubiquitous computing (in which digital materials appear embedded into the everyday physical world - often referred to as the 'Internet of Things') at the other. In the middle of this continuum lie augmented reality and locative media in which the digital appears to be overlaid upon the physical world in different ways.      You will gain knowledge and hands-on experience of design and development with key technologies along this continuum, including working with both ubiquitous computing based sensor systems and locative media. You will learn about the Human-Computer Interaction challenges that need to be considered when creating mixed reality applications along with strategies for addressing them, so as to create compelling and reliable user experiences. \n \n   Knowledge and Understanding  Knowledge and understanding of the definition and techniques of mixed reality.  Intellectual Skills  The ability to analyse which forms of mixed reality are appropriate to a given application and setting. \t To design mixed reality experiences, to choose and integrate appropriate technologies, and to identify and resolve key challenges concerning human-computer interaction.  Professional Skills  To design and implement prototype mixed reality systems, taking into account user, task and system requirements and constraints. \t To recognise the ethical issues involved in the deployment of such systems.  Transferable Skills  To think independently while giving due weight to the arguments of others. \t To understand complex ideas and relate them to specific problems or questions. \t To communicate effectively in writing. &nbsp;&nbsp;", "Data Science with Machine Learning  \n \n\u2022 To introduce the principles, techniques and applications of a range of data analysis and modelling techniques.\u2022 To enable the students to appreciate some of the most widely used data analysis and modelling techniques and to know which one to choose for their applications.\u2022 To enable the students to understand and be able to put into practice computer-based data analysis and modelling techniques.\n \n   \n \n This module will enable you to appreciate the range of data analysis problems that can be modelled computationally and a range of techniques that are suitable to analyse and solve those problems. Topics covered include: basic statistics; types of data; data visualisation techniques; data modelling; data pre-processing methods including data imputation; forecasting methods; clustering and classification methods (decision trees, na\u012bve bayes classifiers, k-nearest neighbours); data simulation and model interpretation techniques to aid decision support. Spending around 4 hours each week in lectures and computer classes, appropriate software (e.g. Python) will be used to illustrate the topics you'll cover. \n \n   Knowledge and Understanding:  \u2022&nbsp; Understanding the capabilities, strengths and limitations of data analysis and modelling methods (A3) \u2022&nbsp; An appreciation of different data analysis and modelling techniques (A4) Intellectual Skills  \u2022&nbsp; The ability to understand complex ideas and relate them to specific situations (B4) Professional Skills  \u2022&nbsp; The ability to implement selected data analysis and modelling methods for real world applications (C1) \u2022&nbsp; The ability to evaluate data analysis and modelling techniques and select those appropriate to a given task (C3) Transferable Skills:  \u2022&nbsp; The ability to address real problems and assess the value of their proposed solutions (D1) \u2022&nbsp; The ability to retrieve and analyse information from a variety of sources and produced detailed written reports on the result (D4)&nbsp;", "Programming Paradigms  \n \nTo teach the basic principles of program design and implementation using the object-oriented and functional approaches to programming.\n \n   \n \n In this module you'll learn the basic principles of the object-oriented and functional approaches to programming, using the languages Java and Haskell. You'll also see how they can be used in practice to write different kinds of programs. You'll spend around 6&nbsp;hours per week in lectures and labs for this module. \n \n   Knowledge and Understanding:  A sound understanding of the basic principles of object-oriented and functional programming.  &nbsp;lntellectual Skills:  The ability to compare and contrast different programming paradigms.  Professional Skills:  The ability to design and implement programs in Java and Haskell.  Transferable Skills:  The ability to solve problems using object-oriented and functional techniques. ", "Computer Vision  \n \nTo provide a grounding in existing techniques and current research in computer vision. To give experience in implementing computer vision solutions to real world problems.\n \n   \n \n You'll examine current techniques for the extraction of useful information about a physical situation from individual and sets of images. You'll learn a range of methods and applications, with particular emphasis being placed on the detection and identification of objects, image segmentation, pose estimation, recovery of three-dimensional shape and analysis of motion. These problems will be approached with both traditional and modern Computer Vision approaches including Deep Learning. You will spend 5 hours per week in lectures, tutorials, and computer classes for this module. The module involves some mathematical understanding, and requires a good programming ability. As part of the assessment of this module you will produce a research paper-style report, and deliver a conference-style presentation. \n \n  Knowledge and Understanding \u2022&nbsp;&nbsp; &nbsp;Understanding of current techniques in image analysis and computer vision and an awareness of their limitations. \u2022&nbsp;&nbsp; &nbsp;An appreciation of the underlying mathematical principles of computer vision. \u2022&nbsp;&nbsp; &nbsp;Experience in designing and implementing computer vision systems. \u2022&nbsp;&nbsp; &nbsp;An appreciation of the use of Machine learning methods to computer vision. &nbsp;Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;Apply knowledge of computer vision techniques to particular tasks. \u2022&nbsp;&nbsp; &nbsp;Evaluate and compare competing approaches to vision tasks. \u2022&nbsp;&nbsp; &nbsp;Evaluate vision systems.Professional Skills \u2022&nbsp;&nbsp; &nbsp;Develop a working knowledge of computer vision/image analysis algorithms and evaluate the applicability of various algorithms and operations to particular tasks. &nbsp;Transferable Skills \u2022&nbsp;&nbsp; &nbsp;Apply knowledge of the methods and approaches presented to different problem domains using the available resources (libraries, internet, etc.).&nbsp; &nbsp;", "Designing Intelligent Agents (UG)  \n \nTo develop a basic understanding of the problems and techniques of building intelligent agents.To give an appreciation of the trade-offs inherent in the design of agent-based systems.To illustrate these through a project involving the construction of simple agent-based systems.To develop new analysis and design skills appropriate to more complex Al problems.\n \n   \n \n You'll be given a basic introduction to the analysis and design of intelligent agents, software systems which perceive their environment and act in that environment in pursuit of their goals. Spending around four hours each week in lectures and tutorials, you'll cover topics including task environments, reactive, deliberative and hybrid architectures for individual agents, and architectures and coordination mechanisms for multi-agent systems. \n \n   Knowledge and Understanding  Understanding of the problems and techniques in the design of intelligent agents, knowledge of common agent architectures.  Intellectual Skills  The ability to understand and logically evaluate agents' requirements and specifications. \t The ability to analyse agent behaviour in a variety of environments. Professional Skills:Enhanced Al programming skills.&nbsp;Transferable Skills Enhanced systems analysis and design skills &nbsp;", "Mobile Device Programming  \n \nTo teach the principles of program design, and to give experience of designing and developing programs.\n \n   \n \n You\u2019ll look at the development of software applications for mobile devices, with a practical focus on the Android operating system. You\u2019ll consider and use the software development environments for currently available platforms and the typical hardware architecture of mobile devices. You\u2019ll spend around four hours per week in lectures and computer classes for this module. \n \n    Knowledge and Understanding:  Understanding of the theory and practice of programming in the context of a mobile device.  Intellectual Skills:  Understand and logically evaluate program requirements and specifications; Understand the complex ideas of programming solutions and relate them to particular problems.  Professional Skills:  The ability to write programs; The ability to transfer programming skills between classes of devices.  Transferable Skills:  The ability to solve problems using programming including mathematical problems, to schedule and present their work and to retrieve additional learning material.&nbsp;", "Horizon CDT Reflection on Internship  \n \nTo reflect on the internship completed as part of the Horizon CDT;To enable to student to identify links between internship work and DE activity in general;To develop communication skills and reflective practice.\n \n   \n \n Reporting the Internship   G54INT - The internship should be reported via EITHER  a) a scheduled talk to all students who have not yet organised an internship or  b) a video on the Horizon student profile page of the Horizon website describing the internship (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or  c) a description of the internship for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students.  Target audience: Digital Economy Network CDT Students yet to complete an internship.   &nbsp; \n \n  Students who complete this module will: Be able to demonstrate their experience of working in a commercial or research based internship placement; \t Be able to understand the relation between the work completed within their internship and the DE programme as a whole; \t Be able to identify the professional and research skills developed as part of their internship placement. ", "Operating Systems &amp; Concurrency  \n \nTo teach the theoretical background and practical implementation of common operating systems.To consider the history and development of Operating Systems.To convey a basic understanding of the concepts, problems, and techniques of concurrent programming and concurrency in operating systems.To show how these can be used to write simple concurrent programs.\n \n   \n \n This course covers the fundamentals of operating systems and concurrency. Topics in operating systems include the architecture of operating systems, process management, memory management, file systems, and a brief introduction to virtualisation and cloud computing. The principles of concurrency will be introduced from the perspective of an operating system. Specific topics on concurrency include: hardware support for concurrency, mutual exclusion, the use of threads and synchronisation. \n \n  Knowledge and Understanding A broad view of operating system principles. \t Knowledge of key issues in the practical implementation of operating systems. \t Understanding of the concepts, problems and techniques of concurrent programming. Intellectual Skills The ability to think independently while giving due weight to the arguments of others. \t The ability to understand complex concepts and apply them to specific situations. Professional Skills Enhanced programming skills. \t The ability to write simple concurrent programs. Transferable Skills The ability to solve OS design problems. \t The ability to solve problems. ", "Designing Intelligent Agents  \n \n\u2022 To develop a basic understanding of the problems and techniques of building intelligent agents.\u2022 To give an appreciation of the trade-offs inherent in the design of agent-based systems.\u2022 To illustrate these through a project involving the construction of simple (multi-)agent-based systems.\u2022 To develop new analysis and design skills appropriate to more complex Al problems.\n \n   \n \n You'll be given a basic introduction to the analysis and design of intelligent agents, software systems which perceive their environment and act in that environment in pursuit of their goals. Spending around four hours each week in lectures and tutorials, you'll cover topics including task environments, reactive, deliberative and hybrid architectures for individual agents, and architectures and coordination mechanisms for multi-agent systems. As part of the assessment of this module you will produce a research paper-style report, and deliver a conference-style presentation. \n \n  Knowledge and Understanding Understanding of the problems and techniques in the design of intelligent agents, knowledge of common agent architectures. Intellectual Skills&nbsp; The ability to understand and logically evaluate agents' requirements and specifications. \t The ability to analyse agent behaviour in a variety of environments. \t An appreciation of the use of Machine learning methods to the design of intelligent agents. Professional Skills: Enhanced Al programming skills. Transferable Skills Enhanced systems analysis and design skills. \t Delivery of a conference-style research presentation. \t Writing a technical research report. ", "Systems and Networks  \n \nTo give an understanding of the role of the operating system and how it manages computer resources and components, and of how hosts are networked and the technologies used to enable computer communication.\n \n   \n \n This module is part of the Operating Systems and Networks theme. The module gives an introduction to the role of the operating system and how it manages computer resources such as memory, processes and disks. Unix is introduced in terms of the Unix file structure, Input and Output and the Command Line Interface that is used to manipulate these. Computer communication is taught with respect to the Client-Server Architecture and applications that use this. Underlying protocols, such as those in the TCP/IP protocol suite, are introduced, as commonly used in the Internet to provide a universal service. This includes IPv4 and IPv6, the need for IPv6 and how the two differ. Types of computer networks are covered in terms of scale, such as LANs and WANs; and in terms of wired and wireless networks. Mechanisms for connecting networks such as routers, switches and bridges are covered. Other topics include the role of gateways, proxies, Virtual Private Networks and cloud computing. Potential security risks like the use of firewalls are also examined in this module. \n \n   Intellectual Skills:  Think independently while giving due weight to the arguments of others. \t Understand complex ideas and relate them to specific problems or questions.  Professional Skills:  Evaluate approaches and technologies in computer networks and select those which are fit for purpose within a given domain.  Transferable Skills:  Solve problems. \t Retrieve information from appropriate sources (eg. learning resource centre, internet, etc.). ", "Software Engineering Group Project  \n \nTo give some experience in the various different aspects of software engineering in groups. These include running meetings, making collective decisions, time and people management, giving presentations and demonstrations, and writing reports.\n \n   \n \n Working in groups of around five to six people, you will be assigned a supervisor who will provide you with a short written description of a computer application to be designed, programmed, and documented during the course of the module. Each group will meet twice a week, once with your supervisor and once without; you will also have four introductory one hour lectures. \n \n  Knowledge and Understanding: \u2022&nbsp;&nbsp; &nbsp;Group projects may address topics in any area of the curriculum and so may address any of the knowledge and understanding outcomes.&nbsp; &nbsp;Intellectual Skills:&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to understand and logically evaluate requirements and specifications.&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to think independently while giving due weight to the arguments of others.&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to analyse systematically and effectively, substantial quantities of informationProfessional Skills:&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to understand and make use of software engineering methodologies.&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to evaluate, select and deploy tools and techniques.&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to work effectively and ethically with users. &nbsp;Transferable Skills:&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to chair and minute meetings, work effectively in software engineering groups, give short technical presentations and demonstrations, and co-author technical reports. \u2022&nbsp;&nbsp; &nbsp;The ability to reflect upon and assess their own progress, strengths and weaknesses.", "Horizon CDT Future Products  \n \nWhen developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading to the development of videos of utopian and dystopian visions of the future of digital identity.\n \n   \n \n When developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading to the development of videos of utopian and dystopian visions of the future of digital identity. All students are required to attend all four theme days of this module, along with sessions dedicated to preparing for and undertaking the assessment.&nbsp; \n \n  By the end of the module, students will be aware of: \u2022&nbsp;&nbsp; &nbsp;How we creatively express our digital identities through new forms of television, home entertainment and the arts \u2022&nbsp;&nbsp; &nbsp;How digital identity can enable long-term relationships with consumer goods in the home \u2022&nbsp;&nbsp; &nbsp;How personal data can enable well-being and new modes of engagement with well-being \u2022&nbsp;&nbsp; &nbsp;How smart environments, from future energy services to intelligent transportation systems will draw on personal data to provide more adaptive, safe and sustainable services They will demonstrate this through the production of videos and participation in four one day sessions built around the topics of infrastructure, well-being, culture and the home.", "Synoptic Data Science Assessment 1  \n \n\n \n   \n \n This assessment is intended to help learners remember consolidated knowledge from their first year of learning. &nbsp;It will be delivered in two parts:  1)&nbsp;&nbsp; &nbsp;A multiple-choice knowledge test intended to mirror the knowledge test in the End Point Assessment 2)&nbsp;&nbsp; &nbsp;An open paper which poses higher level questions to data science learners which requires them to apply their first-year learning to problems from across the curriculum. &nbsp;This paper will include a section for the learner to review their progress against the KSBs.  While this assessment should be considered as \u201cAssessment of Learning,\u201d it is also intended as an instrument for learning to clearly signpost to learners that they are working towards an End Point Assessment, and that the knowledge, skills and behaviours should be developed in an integrated fashion, and that data science is not just a series of siloed domains. &nbsp;Questions for this assessment may require learners to draw from their on-the-job experience as well as the academic programme  The paper will include a reflective piece on the learner\u2019s progress towards the KSBs as part of a demonstration of their approach to their own professional development, and to foster an ongoing positive attitude to their development beyond their apprenticeship journey. \n \n  Understanding of the context and history of Data Science &nbsp;A high-level understanding of ethics and professionalism especially with respect to the use of data.An understanding of the nature of data and the different types of data &nbsp;Understanding of the purpose of Data Science and the professional Data Scientist &nbsp;Can apply a wide range of mathematical and statistical techniques to solve data science problems. &nbsp;Can assess and make progress towards achieving the Data Scientist Apprenticeship KSBs &nbsp; KSBs K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.&nbsp; B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.&nbsp;", "Developing Maintainable Software  \n \nTo build on first year programming modules and further develop programming ability and experience, including ability to develop and understand a large piece of software, build user interfaces and follow a realistic design and testing procedure.\n \n   \n \n This module builds on your basic Java programming and software engineering skills developed in Year 1, extending it to working with larger third party software systems, and the challenges associated with this. Topic examples include: design diagrams and modelling; GUI programming; testing software engineering methodologies (including agile development and tools), refactoring; design patterns and SOLID principles; all in the context of understanding anddeveloping maintainable&nbsp;third-party code. You will spend around three hours per week in lectures and&nbsp;two hours per week in computer classes&nbsp;studying for this module. \n \n  Learn to understand, refactor and add to large pieces of third party software. Ability to identify and use design diagrams; follow an engineering methodology (eg. agile); refactor code; use APIs and libraries; apply user interface design guidelines; code GUIs; document code. Knowledge and Understanding:   Understanding large software systems and the quality, organisation and design issues associated with working with such code; agile development approaches; software component interaction; event-based programming; modern interface paradigms. Intellectual Skills:   Understand and logically evaluate program requirements and specifications; Understand the complex ideas of programming solutions and relate them to particular problems. Professional Skills:   Practical experience of 'real world' coding; Design and write object-oriented programs and GUIs; Understand modern development IDEs (eg. Eclipse) and relevant engineering software tools (eg. git). Transferable Skills  Object-oriented problem-solving; scheduling and presenting work; applying learning material.&nbsp;", "Horizon CDT Sprint Project  \n \nThe Sprint Project module is an intensive multidisciplinary, peer-to-peer project in collaboration with an industry partner. The industry partner will set the peer-group a real-world challenge pertinent to their core business. The peer-group will then undertake a single iteration of a rapid prototyping cycle, i.e., to design, develop, prototype and evaluate with users a product that addresses the industry challenge. The Sprint Project will be an intensive week-long group activity, drawing on the multidisciplinary skill set of the peer-group which aims to develop student\u2019s design, group working, negotiation and communication skills.\n \n   \n \n The Sprint Project module is an intensive multidisciplinary, peer-to-peer project in collaboration with an industry partner. The industry partner will set the peer-group a real-world challenge pertinent to their core business. The peer-group\u2019s aim is to undertake a single iteration of a rapid prototyping cycle, i.e., to design, develop, prototype and evaluate with users a product or service that addresses the industry challenge. The Sprint Project is an intensive week-long group activity, drawing on the multidisciplinary skill set of the peer-group. Each day of the week will focus on a specific stage of the \u2018sprint cycle\u2019, culminating in a user evaluation of the prototype on the final day. User feedback, along with an on-going record of the prototype\u2019s design and development is compiled into a submitted group report. \n \n   Knowledge and Understanding\u2022&nbsp;&nbsp; &nbsp;Think independently while giving due weight to the arguments of others; understand complex ideas and relate them to specific problems or questions.Intellectual Skills\u2022&nbsp;&nbsp;&nbsp;&nbsp;Applied research skills in addressing real world problems and challenges.&nbsp; \u2022&nbsp;&nbsp;&nbsp;&nbsp;Exhibit innovation and creativity in problem solving.Professional Practical Skills \u2022&nbsp;&nbsp; &nbsp;Prepare group written reports.Transferable Skills\u2022&nbsp;&nbsp; &nbsp;Coordinate, organise and manage their own (and others' time) including scheduling tasks and meeting deadlines.\u2022&nbsp;&nbsp; &nbsp;Skill development in product / service design, technology application, group working, negotiation and communication skills.", "Big Data Learning and Technologies  \n \nThe aim of this module is to provide an overview of the big data problem and present the main principles and technologies behind distributed/parallel systems with data intensive applications.\n \n   \n \n \u201cBig Data\u201d involves data whose volume, diversity and complexity requires new technologies, algorithms and analyses to extract valuable knowledge, which go beyond the normal processing capabilities of a single computer. The field of Big Data has many different faces such as databases, security and privacy, visualisation, computational infrastructure or data analytics/mining. This module will provide the following concepts:&nbsp; &nbsp; 1. \u202fIntroduction to Big data: introducing the main principles behind distributed/parallel systems with data intensive applications, identifying key challenges: capture, store, search, analyse and visualise the data.&nbsp; &nbsp; 2. SQL Databases vs. NoSQL Databases: understand the growing amounts of data; the relational database management systems (RDBMS); overview of Structured Query Languages (e.g. SQL); introduction to NoSQL databases; understanding the difference between a relational DBMS and a NoSQL database; Identifying the need to employ a NoSQL DB.&nbsp; &nbsp; 3. Big Data frameworks and how to deal with big data: this includes the MapReduce programming model, as well as an overview of recent technologies (Hadoop ecosystem, and Apache Spark). Then, you will learn how to interact with the latest APIs of Apache Spark (RDDs, DataFrames and Datasets) to create distributed programs capable of dealing with big datasets (using Python and/or Scala)\u202f&nbsp; &nbsp; 4. Finally, we will dive into the data mining and machine learning part of the course, including data preprocessing approaches (to obtain quality data), distributed machine learning algorithms and data stream algorithms. To do so, you will use the Machine learning library of Apache Spark (MLlib) to understand how some machine learning algorithms (e.g. Decision Trees, Random Forests, k-means) can be deployed at a scale. \n \n   Knowledge and Understanding: &nbsp; Understand the importance of the data.&nbsp; The principles that allow the processing of big data sets.&nbsp; Understand the working and features of existing machine learning algorithms capable of handling big data.&nbsp; Learn to use the main tools of the big data ecosystem.&nbsp; The current limitations of big data technologies to allow distributed machine learning.&nbsp; Intellectual Skills:&nbsp;  Understand complex ideas and relate them to specific problems or questions in the area of parallel computation.&nbsp; Be able to identify distributed solutions/approaches to handle big datasets with existing technologies.&nbsp; Professional/Practical Skills:&nbsp;  Hands-on experience with state-of-the-art technologies to handle big data. Transferable/Key Skills:&nbsp;  Experience in problem solving.&nbsp; Experience in working in groups.&nbsp; Retrieve information from appropriate sources (e.g. Spark API).", "Advanced Computer Networks  \n \nTo deepen students' understanding of the use and operation of fixed and mobile communications networks, in particular both benchmark and state-of-the-art Internet protocols and their use in modern telecommunications and emerging mobile networks;To deepen students' understanding of a wide range of routing protocols and services in Mobile Ad Hoc Networks (MANETs), Vehicular Ad Hoc Networks (VANETs), Delay/Disconnection/Tolerant Networks (DTNs), Opportunistic Networks and Mobile Social Networks.\n \n   \n \n This module will provide students with an advanced knowledge of computer communications networks, using examples from all-IP core telecommunications networks to illustrate aspects of transmission coding, error control, media access, internet protocols, routing, presentation coding, services and security. The module will describe Software Defined Networks (SDNs) and provide examples of using them to enable very large scale complex network control. The module will provide an advanced knowledge of various routing and query protocols in: Ad Hoc Networks; Mobile Ad Hoc Networks (MANETs); Vehicular Ad Hoc Networks (VANETs); Disconnection/Disruption/Delay Tolerant Networks (DTNs); impact of new networking developments, such as security risks, ethics, interception and data protection will be reflected and discussed systematically. Students will spend around three hours per week in lectures and one hour per week in computing classes. \n \n   Knowledge and Understanding \u2022&nbsp;&nbsp; &nbsp;To gain a deep understanding of a wide range of properties and engineering fixed, mobile and ad hoc networks. \u2022&nbsp;&nbsp; &nbsp;To gain a deep understanding of routing protocols in cellular networks, ad hoc networks, Mobile Ad Hoc Networks (MANETs), Vehicular Ad Hoc Networks (VANETs), Delay/Disconnection/Tolerant Networks (DTNs), Opportunistic Networks and Mobile Social Networks and their applications. \u2022&nbsp;&nbsp; &nbsp;To improve understanding of peer to peer systems, algorithms and services for data dissemination and query in mobile intermittent environments including Information Centric Networks (ICNs) and Content Centric Networks (CCNs). \u2022&nbsp;&nbsp; &nbsp;To improve students' understanding of Software Defined Networks and their use to control complex large scale networks. \u2022&nbsp;&nbsp; &nbsp;To appreciate the real-world social and ethical impacts upon user experience in the design and application of various networks and services. \u2022&nbsp;&nbsp; &nbsp;To develop an understanding of the practical skills required in the design and development of network protocols and services in different application scenarios. &nbsp; Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;Understanding complex ideas and relating them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Ability to understand different advanced network routing protocols and services and critically reflect on their application to different real world contexts. &nbsp; Professional Skills \u2022&nbsp;&nbsp; &nbsp;Evaluate approaches, technologies and algorithms for distributed systems, and select those which are fit for purpose within a given domain. \u2022&nbsp;&nbsp; &nbsp;To be able to understand appropriate networks, services and algorithms, and select those which are fit for purpose for different application domains (such as self-driving cars, unmanned aerial vehicles, location aware services, emergency services, mobile crowdsourcing, healthcare and others). \u2022&nbsp;&nbsp; &nbsp;To be able to design and simulate complex mobile networks suitable for a variety of applications and evaluate them across different metrics. \u2022&nbsp;&nbsp; &nbsp;To recognise ethical and security issues involved in the uses of different networks. &nbsp;", "Big Data and Cloud Project (Assessment)  \n \n\n \n   \n \n This assessment will allow learners to learn how to build distributed big-data solutions.  It will set progressively more difficult assessments allowing learners to consolidate their learning, build their skills and then demonstrate their creativity in implementing solutions.  Learners are expected to use relevant projects from the workplace which require the use of high performance computing and techniques to address Big Data problems \n \n  Understand the principles that allow the processing of big data sets.Understand the limitations of big data technologies for distributed processing.Demonstrate practical skills required to implement big-data solutions using modern large-scale data and compute infrastructures. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.&nbsp;B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.", "Programming  \n \nThe students will learn the fundamental programming principles and will be able to create programs according to a specification. A basic introduction to Object Oriented concepts will be provided.\n \n   \n \n This module gives you a comprehensive overview of the principles of programming, including such concepts as procedural logic, variables, flow control, input and output and the analysis and design of programs. Instruction will be provided in an object-oriented programming language. \n \n   Knowledge and understanding:  The students will learn the fundamentals of programming in an object-oriented language, and be provided with a thorough grounding in procedural logic, flow control, simple data structures, and event driven programming. Intellectual skills:  The students will learn to understand and implement complex software specifications. Professional skills:  The students will learn to develop software according to client specifications, and they will learn to evaluate the task at hand and utilise the most appropriate programming methodologies. Transferable skills:  They will gain extensive experience in problem solving, and will learn to interpret technical documentation.&nbsp;", "Programs, Proofs and Types  \n \nTo provide a sound basis in a range of topics in the foundations of programming languages, including aspects of recent and current research.\n \n   \n \n This module focuses on some of the fundamental mathematical concepts that underlie modern programming and programming languages emphasizing the role of types. We will use a&nbsp;dependently typed programming language / interactive proof system (e.g. Agda) &nbsp;to implement some concepts on a computer.&nbsp; Example topics include: basic lambda calculus; operational semantics; domain theory; types, propositions as types and formal verification. You\u2019ll spend around three hours per week in&nbsp;lectures studying for this module and one hour in the lab working with an interactive proof&nbsp;system. \n \n   Knowledge and Understanding:  A sound understanding of advanced topics in type theory and foundations of programming \t Being able to apply mathematical methods in Computer Science \t Being able to use formal methods and formal verification \t Knowledge of advance programming language concepts   Intellectual Skills:  The ability to apply mathematical techniques to programming problems ", "CSY2089 \u2013 Web Programming  Description:  This purpose of this module is to give students an understanding of the conceps and technologies of web based server side technologies; teach students to use up-to-date programming techniques to design and develop coherent server side software for websites with a focus on security, functionality and usability.  ", "CSY3063 \u2013 Mobile Computing  Description:  The purpose of this module is to identify modern mobile computing in terms of its hardware and software and the networks that support mobile devices as well as to implement software to run in a mobile computing context.  ", "Programming and Algorithms  \n \nTo teach the principles of design and analysis of programs, including fundamental programming concepts, algorithms, and data structures.To give significant experience in applying this knowledge to develop programs in a suitable language, and with appropriate software development tools.\n \n   \n \n \t The module introduces basic principles of programming and algorithms. \t It covers fundamental programming constructs, such as types and variables, expressions, control structures and functions. \t The module also teaches how to design and analyse simple algorithms and data structures that allow efficient storage and manipulation of data. \t Finally, it familiarises students with software development methodology, including documentation, testing, debugging, and the use of software development tools, such as integrated development environments (IDEs) and version control systems.   You will spend around 6 hours per week in lectures, computer classes and tutorials. \n \n   Knowledge and Understanding:  Understanding of the theory and practice of programming.  Intellectual Skills  Understand and logically evaluate program requirements and specifications; \t Understand the complex ideas of programming solutions and relate them to particular problems; \t The ability to design and analyse simple algorithms and data structures.  Professional Skills  The ability to read and write programs; \t The ability to apply appropriate software development methods and tools.  Transferrable Skills:  The ability to solve problems using programming; \t To schedule and present work, and to retrieve additional learning material. ", "Linear and Discrete Optimization  \n \nTo develop an understanding of linear and discrete optimization, one of the most important areas within operations research. To develop the skills for modelling a range of optimization problems in business and industry using mathematical models. To implement those mathematical models using algebraic and spreadsheet optimization solvers in order to obtain solutions to the corresponding optimization problem. To develop skills for identifying, analyzing, modelling and solving real-world linear and discrete optimization\n \n   \n \n The module provides an entry point to computational optimization techniques, in particular for modelling and solving linear and discrete optimization problems like diet optimization, network flows, task assignment, scheduling, bin-packing, travelling salesmen, facility location, vehicle routing and related problems. Computational optimization is one of the most important areas within operations research (OR), which is a discipline that uses modelling techniques, analytics and computational methods to solve complex problems in industry and business. In this module you will learn to interpret and develop algebraic models for a variety of real-world linear and discrete optimization problems to then use powerful optimization software (linear, integer and mixed-integer solvers) to produce a solution. The module covers topics such as linear programming, integer programming, combinatorial optimization, modelling and optimization software, and multi-objective optimization among others. Optimization technology is ubiquitous in today's world, for applications in logistics, finance, manufacturing, workforce planning, product selection, healthcare, and any other area where the limited resources must be used efficiently. Optimization enables prescriptive analytics in order to support and automate decision-making. You will spend around four hours per week in lectures and workshops for this module. \n \n   Knowledge and Understanding:  Linear and discrete optimization from the computer science and mathematical perspectives; \t Algebraic models for linear and discrete optimization problems; \t Post-optimality analysis; \t Simplex method and Branch and Bound algorithm. \t&nbsp;  lntellectual Skills:  Analytical methods; \t Ubiquitous nature of optimization. \t&nbsp;  Professional Practical Skills:  Use of algebraic and spreadsheet optimization software; \t Solution of real-world optimization problems in a range of applications. \t&nbsp;  Transferable Skills:&nbsp;  Problem solving; \t Communication skills; \t Computer-based solutions and mathematical skills. \t&nbsp; ", "Systems and Architecture  \n \nThe aim of this module isgivestudents an understanding of the fundamental architecture of computers above, between and below the CPU:Above the CPU, looking at assembly language and operating systems;below the CPU, looking at how to CPU design can improve performance;and between CPUs looking at multiprocessor/multicore systems and how computers are networked.\n \n   \n \n This module is about how a computer works at a fundamental level working out from the CPU covering topics such as: looking at how a CPU can be programmed in assembly language; how the design of a CPU can improve performance, how multicore/multiprocessor systems are programmed and the how operating systems manages computing resources, as well as looking at how computer systems can be networked. Systems and Architecture builds on the material taught in COMP1007.&nbsp; \n \n  To understand the internal operation and structure of computer and network systems;To understand that a computer is built from relatively simple digital circuits by successive elaboration to form a number of logical layers of functionality;To understand that hardware and software are often equivalent in this context;To understand that an Operating System is just software run by the CPU like any other software;To understand the difference between single and multiprocessor systems;To understand how the facilities and mechanisms which underlie the operation of various high-level programming operations and facilities are expressed in assembly language;To be able to program a computer in assembly language.", "Machine Learning  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students the to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You'll spend around six hours each week in lectures and computer classes for this module. \n \n   Knowledge and Understanding:  Understanding the capabilities, strengths and limitations of machine learning paradigms(A3) \t an appreciation of learning systems and learning algorithms (A4)  Intellectual Skills:  The ability to understand complex ideas and relate them to specific situations (B4) \t The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)  Professional Skills  The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1) \t The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)  Transferable Skills:  The ability to address real problems and assess the value of their proposed solutions (D1) \t The ability to retrieve and analyse information from a variety of sources and produced detailed written reports on the result (D4) ", "Machine Learning (20cr)  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You will also have the opportunity to work on real-world datasets and gain experience in technical paper writing in the format of conference publications. &nbsp;  You'll spend around six hours each week in lectures and computer classes for this module. \n \n  Knowledge and Understanding:&nbsp;Understanding the capabilities, strengths and limitations of machine learning paradigms(A3)&nbsp;an appreciation of learning systems and learning algorithms (A4)Intellectual Skills:&nbsp;The ability to understand complex ideas and relate them to specific situations (B4)&nbsp;The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)Professional Skills:The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1)&nbsp;The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)Transferable Skills:&nbsp;The ability to address real problems and assess the value of their proposed solutions (D1)&nbsp;The ability to describe the method, evaluation process and result analysis in technical expressions in the form of scientific papers (D4)", "Simulation and Optimisation for Decision Support  \n \nIntroduce students to the principles of decision support.Enable students to appreciate the different decision support methods.Enable students to make a competent decision which method to use for their particular problem.Provide practical experience in applying decision support methods.\n \n   \n \n This module offers insight into the applications of selected methods of decision support. The foundations for applying these methods are derived from Operations Research Simulation, Social Simulation, Data Science, Automated Scheduling, and Decision Analysis. Throughout the module, you will become more competent in choosing and implementing the appropriate method for the particular problem at hand. You will spend five hours per week in lectures, workshops, and computer classes for this module. \n \n   Knowledge and Understanding:  Understanding the capabilities, strengths and limitations of selected decision support methods (A3). An appreciation of different decision support tools (A4). Intellectual Skills:  The ability to understand complex ideas and relate them to specific situations (B4). Professional Skills:  The ability to implement selected decision support methods for real world applications (C1). The ability to evaluate selected decision support tools and select those appropriate to a given task (C3). Transferable Skills:  The ability to address real problems and assess the value of their proposed solutions (D1). The ability to retrieve and analyse information from a variety of sources and produce detailed written reports on the result (D4).", "Human-AI Interaction  \n \nThe aim of this module is to develop students' critical and practical knowledge of human-AI interaction. It will provide students with a skill set that is essential to effective human-centred AI development.\n \n   \n \n This module is part of the Human-Computer Interaction theme, and the Artificial Intelligence and Optimisation theme in the School of Computer Science.&nbsp; &nbsp; This module is an introduction to the design of human-AI interaction to ensure the AI-driven systems we built are beneficial and useful to people. The module will cover practical design topics including methods and techniques such as natural language processing and human-robot interaction. The module will also consider societal and theoretical concerns of human-AI interaction, including the ethics of AI, responsible innovation, trust, accountability and explainable AI.&nbsp; &nbsp; The practical component of the module will involve building AI-driven systems that drive conversational experiences, such as a text-based \u2018chatbots\u2019 and speech-controlled services / \u2018skills\u2019, involving automatic speech recognition and natural language processing.&nbsp; &nbsp; You\u2019ll spend around four hours each week in lectures and labs for this module.&nbsp; &nbsp; \n \n   Knowledge and Understanding&nbsp;  Understanding of the theory and practice of human-AI interaction. Intellectual Skills  Critically assess the societal and ethical concerns of interactive AI. Professional Skills  Ability to design and implement interactive AI systems. Transferable Skills  &nbsp;Considering users in design. &nbsp;Critical reflection of CS in the world. &nbsp;Programming. &nbsp;Intellectual Skills&nbsp; Critically assess the societal and ethical concerns of interactive AI. &nbsp;Professional Skills&nbsp; Ability to design and implement interactive AI systems. &nbsp;Transferable Skills&nbsp; Considering users in design. Critical reflection of CS in the world. Programming. &nbsp;", "Autonomous Robotic Systems  \n \nTo provide a grounding in the basic principles of real-world sensors and actuators, autonomous mobile robots and to give experience in implementing robotic behaviour algorithms.To provide detailed knowledge of the problem of localisation of autonomous mobile robots and the use of this in robot navigation.\n \n   \n \n This module introduces the main concepts of autonomous mobile robotics, providing an understanding of the hardware and software principles appropriate for control, spatial localisation and navigation. The module consists of theoretical concepts around robotic sensing and control in the lectures, together with a strong practical element for robot programming in the laboratory sessions. Spending two hours each week in lectures and supervised labs, with an additional two-hour semi-supervised practical session, the students will work toward building a functional robotic solution in the form of a term project to demonstrate an understanding of the theory on a realistic application scenario. \n \n   Knowledge and Understanding:  Experience in implementing algorithms in a real-world robotic context (e.g. robotic control, sensor data handling). \t Understanding of current technology (e.g., sensors) and techniques in autonomous mobile robotics and an awareness of their limitations. \t Understanding of how to handle and interpret uncertain sources of information.  Intellectual Skills:  Apply knowledge of robotic control techniques to particular tasks. \t Apply knowledge of uncertain data sources such as sensors within applications. \t Evaluate and compare competing approaches to robotics and real-world sensor-driven applications.  Professional Skills:  Develop a working knowledge of real-world device programming (sensors and actuators) through implementing robotic behaviour architectures. \t Apply insights of hardware to developing software solutions. \t Develop advanced skills for multi-source data aggregation.  Transferable Skills:  Apply knowledge of the methods and approaches presented to other problem domains, in particular knowledge gained about computing with real-world information gathered from sensors, e.g., to mobile device programming. \t Use the available resources (libararies, internet, etc) to supplement the course material. &nbsp;", "Designing Sensor-Based Systems  \n \n\u2022 To develop an understanding of the nature and scope of the field of ubiquitous computing, the IoT, and the design of cyber-physical systems and their relevance to a variety of market sectors for computing. \u2022 To develop core design, data analysis and programming skills required for the design and prototyping of engaging, effective, appropriate ubicomp applications. \u2022 To appreciate and evaluate the real-world interactional, social and ethical impacts upon humans in the design and application of ubiquitous computing systems.\n \n   \n \n Sensors and sensing systems are increasingly embedded into our everyday lives. We carry a vast range of sensors around in mobile devices, but also we encounter them in all sorts of places: in cars, workplaces, and homes.&nbsp;We focus on exploring the impact of nascent ideas of ubiquitous computing in the 1990s (in which digital materials appear embedded into the everyday physical world), and how this relates to more recent notions like the Internet of Things (IoT) and cyber-physical systems. A core feature of all these ideas in computing is the use of sensor and actuation technologies to embed the digital into the physical, social world, as well as representing that physical, social world in digital systems.&nbsp; &nbsp; You will gain knowledge and hands-on experience of design and technical development of sensor-based systems. You will learn about the Human-Computer Interaction challenges that need to be considered when creating ubiquitous computing systems along with strategies for addressing them, so as to create effective, appropriate and compelling user experiences.&nbsp; \n \n    Knowledge and Understanding  -&nbsp;&nbsp; &nbsp;Knowledge and understanding of the definition and techniques of ubiquitous computing, IoT and sensing systems design.  Intellectual Skills  -&nbsp;&nbsp; &nbsp;The ability to analyse which kinds of ubiquitous computing and sensing systems design is appropriate to a given application and setting. -&nbsp;&nbsp; &nbsp;To design, prototype and reflect on human experiences with ubiquitous computing and sensing systems, to choose and integrate appropriate technologies, and to identify and resolve key challenges concerning human-computer interaction.  Professional Skills  -&nbsp;&nbsp; &nbsp;To design and implement prototype ubiquitous computing and sensor-based systems, taking into account user, task, system requirements, and constraints. -&nbsp;&nbsp; &nbsp;To recognise the ethical issues involved in the design, prototyping, development and deployment of such systems. -&nbsp;&nbsp; &nbsp;To understand choice of sensors and analysis of sensor data for ubiquitous interaction.  Transferable Skills  -&nbsp;&nbsp; &nbsp;To think independently while giving due weight to the arguments of others. -&nbsp;&nbsp; &nbsp;To understand complex ideas and relate them to specific problems or questions. -&nbsp;&nbsp; &nbsp;To communicate effectively in writing (reports, proposals, etc.). &nbsp;Intellectual Skills&nbsp; \u2022&nbsp;&nbsp;The ability to analyse which kinds of ubiquitous computing and sensing systems design is appropriate to a given application and setting.&nbsp; \u2022&nbsp;&nbsp;To design, prototype and reflect on human experiences with ubiquitous computing and sensing systems, to choose and integrate appropriate technologies, and to identify and resolve key challenges concerning human-computer interaction.&nbsp;Professional Skills&nbsp; \u2022&nbsp;&nbsp; &nbsp;To design and implement prototype ubiquitous computing and sensor-based systems, taking into account user, task, system requirements, and constraints.&nbsp; \u2022&nbsp;&nbsp; &nbsp;To recognise the ethical issues involved in the design, prototyping, development and deployment of such systems.&nbsp; \u2022&nbsp;&nbsp; &nbsp;To understand choice of sensors and analysis of sensor data for ubiquitous interaction.&nbsp;Transferable Skills&nbsp; \u2022&nbsp;&nbsp;To think independently while giving due weight to the arguments of others.&nbsp; \u2022&nbsp;&nbsp;To understand complex ideas and relate them to specific problems or questions.&nbsp; \u2022&nbsp;&nbsp;To communicate effectively in writing (reports, proposals, etc.).&nbsp;", "Software Engineering Management  \n \nTo prepare students for professional software development, software project management and software and IT project specification and development. To ensure opportunities for all students to have practical experience of the most common techniques used in industry and business.\n \n   \n \n This module is part of the Software Engineering theme. This module covers the following topics: Management of the introduction of new software or IT systems; Software project management practices; Practical experience of use of an Agile software development project management process; Practical experience of use of Test Driven Development, pair programming and various approaches to software management tools, including the use of software versioning, project management planning tools and continuous integration and deployment. \n \n    Intellectual Skills:   Think independently while giving due weight to the arguments of others. \t Understand complex ideas and relate them to specific problems or questions.   Professional Skills   Evaluate approaches and technologies for software engineering, project management and the management and implementation of IT and software projects from a professional and practical approach.   Transferable Skills   Solve problems; \t Retrieve information from appropriate sources (eg. learning resource centre, internet, etc.); \t Work in groups. ", "Horizon CDT PhD Research Proposal  \n \nTo describe the PhD research that the CDT student will work on for the remainder of their period of work during the PhD registration period. To describe the inspiration/motivation for the research idea, and provide the basis for the decision of confirming supervisors by the management board of the CDT.\n \n   \n \n Students will be required to work with staff of the CDT to develop a PhD research proposal during their first year in the centre. This proposal will contain the following:    - Description of meetings, modules, seminars etc that motivated choice of PhD topics    - Formal record of at least 3 meetings with prospective supervisors    - Short literature review (approx 2000 words) describing current state of the art in selected area of study    - Proposed PhD aims and objectives    - Planned research activities for months 9-24 of registration described in detail    - Outline research activities for months 25-48 of registration       \n \n  Students who complete this proposal will:Be able to clearly describe their PhD aims and objectives and demonstrate their importance for the digital societyBe able to summarise the literature relevant to their chosen area of study for the PhD", "Symbolic Artificial Intelligence  \n \nTo convey an understanding of the issues involved in representing knowledge in a form understandable by a computer and using automated reasoning to answer queries about the knowledge.\n \n   \n \n This course examines how knowledge can be represented symbolically and how it can be manipulated in an automated way by reasoning programs. Some of the topics you will cover include: propositional and first order logics; resolution; SAT; constraint satisfaction; description logics; non-monotonic reasoning. You will have two hours of lectures and two hours of labs each week for this course. You will get hands-on experience of formulating real-world problems and using state-of-the-art reasoning software packages to solve them.&nbsp; \n \n   Knowledge and Understanding:  Knowledge of common knowledge representation formalisms and reasoning mechanisms. \t Understanding of planning approaches. \t Knowledge of common ontology languages.  Intellectual Skills:  Ability to represent knowledge in a knowledge representation language. \t Ability to derive new facts using resolution, forward and backward rule chaining, and other common inference mechanisms. \t Ability to solve planning problems by using planning algorithms.  Professional Skills:  Ability to design a simple ontology or an expert system and choose the right tools for implementing the query answering/reasoning mechanism for it.  Transferable Skills:  To be able to solve problems using formal representation of knowledge and reasoning techniques. ", "Artificial Intelligence Methods  \n \nTo build on the first year AI module and further an appreciation of various AI techniques. To understand and implement a software solution of AI techniques.\n \n   \n \n This module builds on the first year Fundamentals of AI, which covers the ACM learning outcomes, and introduces new areas. The emphasis is on building on the AI research strengths in the&nbsp;School. It gives brief introductions to topics in AI, including fuzzy logic and modern search techniques such as, Iterated Local Search, Tabu Search, Simulated Annealing, Evolutionary Algorithms, Genetic Algorithms and Hyper-heuristics, etc. Students will also explore the implementation and application of some AI techniques.&nbsp; \n \n   Knowledge and Understanding:   Ability to describe some advanced AI techniques and have a good understanding of those techniques.  Transferrable Skills:  The ability to use functional techniques to solve problems. Intellectual Skills:   Understand and describe various AI techniques and where they might be applied.  Professional Skills:   Enhanced skills to write software to implement an AI method, the ability to evaluate available AI tools and techniques and select those appropriate to a given situation.  Transferable Skills:   Problem solving, ability to compare and contrast based on understanding and experience of AI programming tools and techniques. ", "Synoptic Data Science Assessment 2  \n \n\n \n   \n \n This assessment is intended to help learners remember consolidated knowledge from their second year of learning.&nbsp; It will be delivered in two parts:  1)&nbsp;&nbsp; &nbsp;A multiple-choice knowledge test intended to mirror the knowledge test in the End Point Assessment 2)&nbsp;&nbsp; &nbsp;An open paper which poses higher level questions to data science learners which requires them to apply their first-year learning to problems from across the curriculum.&nbsp; This paper will include a section for the learner to review their progress against the KSBs.  While this assessment should be considered as \u201cAssessment of Learning,\u201d it is also intended as an instrument for learning to clearly signpost to learners that they are working towards an End Point Assessment, and that the knowledge, skills and behaviours should be developed in an integrated fashion, and that data science is not just a series of siloed domains.  The paper will include a reflective piece on the learner\u2019s progress towards the KSBs as part of a demonstration of their approach to their own professional development, and to foster an ongoing positive attitude to their development beyond their apprenticeship journey. \n \n  Understands how data science as a field and a community has developed and functions in relation to other disciplines.Understands the importance Ethics and Professionalism in relation to data science.Demonstrates progress towards achieving all the KSBs for the Data Scientist Apprenticeship KSB K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods. 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "Research Methods  \n \nTo expose students to research methodologies and approaches, and to be able to critically review research.\n \n   \n \n This module exposes MSc students to a variety of research methods, facilitating students with good quantitative and qualitative skills. Research approaches covered include laboratory evaluation, surveys, case studies and action research. In addition to project management, the module introduces the research process, from examining how problems are selected, literature reviews, selection of research methods, data collection and analysis, development of theories and conclusions, to the dissemination of the research based on analysis of research papers. The module also offers an overview of ethical considerations when conducting research, and support in identifying directions for MSc projects. \n \n   Knowledge and Understanding  Ability to critically appraise and choose research methods, and justify their application to appropriate research problems; \t Identify and critically discuss managerial, political, economic and ethical problems associated with the development and execution of a research project.  Intellectual Skills  Good understanding of research process and the application of appropriate research approaches to given problems.  Professional Skills  Enhanced skills to write research proposals to implement projects; \t The ability to evaluate available appropriate approaches to a given situation.  Transferable Skills  Problem solving, ability to compare and contrast based on understanding and experience of research skills. ", "Horizon CDT Optional Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of a second CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement. &nbsp;\u2022&nbsp;Be able to understand the relation between the work completed within their placement and the DE programme as a whole.\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career.", "Design Ethnography  \n \nThe aim of this module is to develop students' theoretical and practical knowledge of design ethnography. It will provide students with a skill set that is essential to effective human-centred software development.\n \n   \n \n This module introduces you to the theory and practice of design ethnography. You will cover a range of topics including: origins and evolution of ethnography; foundations and nature of the ethnomethodological approach; ethnographic analysis; its relationship to systems design; and the perceived problems with the approach. You will spend around three hours each week in lectures and tutorials for this module. \n \n    Knowledge and Understanding:   Understanding of the analytic foundations of ethnography in a design context; \t Understanding of the role of ethnography in IT research and software development.   Intellectual Skills:   Ability to reason about the social character of human activities.   Professional Skills:   Ability to conduct fieldwork and provide ethnographic analyses; \t Understanding of design practices used to relate ethnographic analyses to systems development.   Transferable Skills:   Writing field reports; \t Critical reflection; \t Group work. ", "Computer Vision  \n \nTo provide a grounding in existing techniques and current research in computer vision.To give experience in implementing computer vision solutions to real world problems.\n \n   \n \n You'll examine current techniques for the extraction of useful information about a physical situation from individual and sets of images. You'll learn a range of methods and applications, with particular emphasis being placed on the detection and identification of objects, image segmentation, pose estimation, recovery of three-dimensional shape and analysis of motion. These problems will be approached with both traditional and modern Computer Vision approaches including Deep Learning. You will spend 5 hours per week in lectures, tutorials, and computer classes for this module. \n \n   Knowledge and Understanding  Understanding of current techniques in image analysis and computer vision and an awareness of their limitations. \t An appreciation of the underlying mathematical principles of computer vision. \t &nbsp;Experience in designing and implementing computer vision systems.  Intellectual Skills  Apply knowledge of computer vision techniques to particular tasks. \t Evaluate and compare competing approaches to vision tasks. \t Evaluate vision systems.  Professional Skills  Develop a working knowledge of computer vision/image analysis algorithms and evaluate the applicability of various algorithms and operations to particular tasks.  Transferable Skills  Apply knowledge of the methods and approaches presented to different problem domains using the available resources (libraries, internet, etc.)&nbsp; ", "Databases, Interfaces and Software Design Principles  \n \nTo provide students with a general introduction to the theory and practice of database systems. To enable students to gain experience with a modern (relational) database system through the use of the SQL language. To give an understanding of the structure and workings of relational database systems and provide some insight into recent developments. To enable students to gain experience with design and implementation of database driven web interfaces. To give an understanding of the principles of software engineering design through determining user needs and requirements capture.\n \n   \n \n Databases are everywhere. Via a multitude of different user interfaces, we interact with many different databases every day, whether using the web, electronic calendars, diaries or timetables, searching for contact details, or looking for directions using a mobile phone. As such databases need to be both easy to use and fast. This module focusses on both the theory and practice of databases and interfaces to them. We examine the fundamentals of the relational database model, as well as implementations of the model in database management systems (DBMS) and languages to interact with them such as Structured Query Language (SQL). We explore relevant software design principles such as understanding user needs, requirements and software specifications and how this relates to database design and implementation. And because databases do not exist in isolation, we also examine how to design and build ways to interact with them, specifically via web development for which database access is key. \n \n  Knowledge and Understanding:An understanding of the relational models of database systems. Ability to understand and use SQL. Understanding of the principles of web development and software engineering design.Intellectual Skills:Basic knowledge of the theory underlying relational database systems. Ability to design and implement database systems. Ability to design user interfaces for a database.&nbsp;Professional Skills:The use of SQL for database specification and manipulation. The use of web technologies for database front-end development.&nbsp;Transferable&nbsp;Skills:Understanding the use and applications of database systems. Understanding the use of web technologies and user interfaces. Understanding the user needs when designing software / database prototypes.&nbsp;", "Work Based Project 3 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the programme and appropriate to the level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace current and previous levels of study in producing an appropriate solution.   The emphasis of this module is on the development of an innovative, commercially viable solution to a design challenge that is ethically and sustainably sound. GAs are expected to demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. They are expected to follow relevant professional, organisational and industry standards, follow their own organisation's guidelines in the development of documentation and management standards as well as demonstrate significant autonomy in planning, selection of resources and (within set guidelines) defining the deliverables that demonstrate their concept and evidence its viability. GA's require to work in a self-motivated way within collectively defined schedules and developing a confidence in their ability to work with others on analysing and creatively solving problems. They are expected to document working practices they have followed in support of evidencing their professionalism. The project will be undertaken on an individual basis, however, the work completed within the module may require the GA to work with groups of individuals within the organisation. Therefore, the GA can assume the role of a project leader or significant project member carrying out a role responsibility on the project. The GA on submission of a project specification and approval the project specification prior to the module commencing is expected to develop and follow a project plan with supervision from a work based supervisor and the guidance of a module tutor   The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 68%. The percentage of Work Based Assessment for this module is 100%.  Innovation and Entrepreneurship Innovation and creativity theory and practice, including disruptive innovation through digital technologies Idea generation and evaluation: sources of information, market characterisation, sales volume prediction financial evaluation (e.g. ROI) technical evaluation practicality of a concept from the viewpoint of functionality. Careers and Employability Students will have access to specialist materials on key aspects of career development and employability.      On successful completion of this module students should be able to:  1. Demonstrate competence in defining technical and enabling soft skills to work in a professional manner to develop an innovative solution to a realistic problem relevant to the domain of the student's programme of study.  2. Demonstrate a critical understanding of the entrepreneurial and innovation processes involved in creating and providing products and professional services and the important role played by digital technologies in sustaining economic growth across a range of organisations and sectors.  3. Develop a business case and project plan.  4. Evidence career readiness.    ", "Handling Uncertainty with Fuzzy Sets and Fuzzy Systems  \n \nTo understand how and when uncertainty can be usefully captured by fuzzy systems. To understand fuzzy logic and fuzzy systems. To be able to implement a fuzzy system.\n \n   \n \n This module focusses on handling uncertainty such as vagueness using fuzzy sets and similar approaches. It provides a thorough understanding of key topics such as the nature of uncertainty captured by fuzzy sets and associated links to human reasoning, inference using fuzzy sets, similarity of fuzzy sets, design and modelling of information via fuzzy sets, type-1 fuzzy sets, type-2 fuzzy sets, fuzzy logic systems, and fuzzy set based applications. Students will also be exposed to some of the cutting-edge research topics in uncertain data and decision making, e.g., capturing uncertainty in real-world scenarios, modelling it, and aggregating (uncertain) information from multiple sources. Students will develop practical systems and software in a suitable programming language. \n \n   Knowledge and Understanding:  Ability to describe fuzzy sets and systems. \t&nbsp;  Intellectual Skills:  Understand fuzzy logic and where it might be applied. \t&nbsp;  Professional Skills:  To be able to know when fuzzy systems might be deployed, and to be able to implement such a system. \t&nbsp;  Transferable Skills:  Problem solving &amp; written communication. \t&nbsp; ", "Programming II  \n To introduce some of the more esoteric concepts of Object Oriented Programming \n To develop techniques for avoiding, handling and testing for errors \n To introduce type systems and static &amp; dynamically typed languages \n   \n Abstraction, Encapsulation and Object Composition \n Access modifiers \n Polymorphism, dynamic dispatch \n Interfaces and Abstract classes \n Object composition \n Single Responsibility principle, Liskov Substitution Principle \n Type systems (static /dynamic typing) \n Type conversion &amp; casting \n Use of libraries classes / packages and APIs \n Exception raising, propagation and handling \n Further refactoring techniques \n Integration &amp; System testing \n Version control \n   \n Translate a programme specification into a working piece of software \n Apply more advanced principles of OOP in the development of a piece of software \n Develop software which integrates third party code \n Refactor code into an alternate or improved form \n Identify key differences between dynamically and statically typed languages \n Discuss, in depth, key principles of Object Oriented Programming beyond that of basic class design \n ", "Introduction to Games Theory and Implementation  \n To introduce&nbsp;students to game design concepts and theories that&nbsp;enable them to design effective computer games \n To provide students with knolwedge of&nbsp;the tools and practical skills needed to implement and develop&nbsp;computer games in a game engine \n To equip students with the knowledge and skills to design and build interactive environments for computer games \n To give students an understanding of the various professional issues and conventions required as part of a games development team \n To enable students to develop research and communication skills \n To ensure the students understand the process of developing their skills both inside and outside formal workshops, and tackle formative work as well as assignments&nbsp;to develop a game portfolio piece. \n  1. Introduction to the games development industry  \n \n How games are funded, developed, distributed and sold to consumers \n How game studios and game development teams are structured&nbsp; \n Job roles that are available and found in the games industry \n Different game platforms and how they impact game design choices \n \n 2. Introduction to the principles of effective game design and documentation. \n \n Components and design choices that make up a computer game \n An introduction&nbsp;to common&nbsp;game design theories and techniques \n Balancing difficulty and progression in games \n The importance of the user experience and methods used to improve the players' experience \n Developing and maintaining industry standard documentation. E.g. Game design documents, level design documents, etc. \n \n 3. Introduction to digital interactive storytelling and world design \n \n Level design theory for single player games \n Designing and authoring digital environments and worlds \n Storytelling techniques that can be applied to interactive products \n \n 4. Introduction to game engines and development environments \n \n Developing a game using a&nbsp;modern game development engine \n Creating&nbsp;a game using a modern game programming language. \n How to structure a game development project \n Combining&nbsp;assets from multiple&nbsp;development environments into a single project \n \n 5. Evaluating and utilising information sources \n \n Researching topics through advanced google searches and journal databases \n How to search and utilise game engine documentation to aid game development \n Searching for solutions to problems and&nbsp;adapting information to meet the needs of a&nbsp;project \n   \n Examine game mechanics and principles applied to effective computer game&nbsp;design and development \n Demonstrate an understanding of the skills required to develop interactive environments and storytelling components \n Explain&nbsp;the differences&nbsp;of varying games development platforms and their impact on game design choices \n Demonstrate a range of practical skills using&nbsp;a modern game engine to develop a computer game \n Outline and explain the key professional issues in the computer games industry \n Describe the professional roles and teams involved in the games development industry \n ", "Collaborative Games Production II  \n To allow students to build on the skills learnt at Level&nbsp;4 to produce a more advanced games project to a supplied brief, and to integrate the new skills being learnt at Level 5 in other modules to achieve that aim. \n Develop on the team work experience at Level 4 so that a more effective and efficient team work process can be followed. \n To introduce students to the software engineering lifecyle and explore the different types of project methodologies that could be employed during team projects. \n To explore the technical tools and solutions which can be applied to make team work easier and more productive. \n Ensure all students understand the theory of team work and related practices and how their own experiences relate to that theory. \n  1. Further practical experience in team work  \n \n Long-term project (full module length) to a specified brief \n Strict client requirements to meet \n Strict (assessed) deadlines to achieve through the project \n Formal presentation of the final product \n \n 2. Theory of team and project work \n \n The software development lifecycle \n Project methodologies \n Team structures and how they relate to individual personality \n \n 3. Technical tools for team work \n \n Source control \n Quality assurance \n Task planning and tracking \n Bug tracking \n Asset management \n Communication tools \n \n 4. Dealing with clients \n \n Meetings and etiquette \n Briefs and information recording \n Marketing \n Promotional work \n   \n Apply existing and developing skills to designing and building elements of a computer game. \n Examine the concept of the&nbsp;software development lifecycle and distinguish which of the available software methodologies can be used to organise games projects in teams. \n Employ skills and experience with technical tools to support team work, including task planning/tracking software, source control, QA tools, backups and communication tools. \n Work effectively within a team, collaborate as a reliable contributor to the team effort and adapt to the strengths and weaknesses within that team. \n Prioritise&nbsp;deadlines, employ time management, and manage production to ensure such pressures are met. \n Evaluate and assess&nbsp;the principles of developing commercial games&nbsp;products in teams and be able to appraise these with respect to available literature and theory, as well as their own experiences. \n ", "Further Content Creation To introduce effective context storytelling&nbsp;as a fundamental component of modern games development.&nbsp; To introduce the student to the practical application of scene composition and environmental design. To develop skills in creating&nbsp;interactive games environments for effective player experiences. To further develop applied knowledge of a modern games development engine with focus on integration of assets.  \n Further 3D content techniques\n \n Further 3D modelling and planning techniques \n Additional UV unwrapping techniques \n Texturing assets using a PBR workflow \n Scene composition theory and techniques \n Environmental storytelling techniques \n New modelling concepts and techniques such as architectural modular kits \n \n \n  \n Game Engine Integration\n \n Importing, organising, and utilising content created in 3D software in an industry standard game engine \n Materials and shaders \n Additional tools and engine techniques \n Lighting \n Optimising environments \n \n \n  &nbsp; 1. Understand and explain the importance of scene composition within 3D game environments. &nbsp; 2. Develop skills in the design and development of an optimized game environment. &nbsp; 3. Provide evidence of applied knowledge of environmental storytelling within a games context. &nbsp; 4. Demonstrate skills in&nbsp;advanced 3D modelling and assets creation. &nbsp; 5. Demonstrate proficiency with a 3D game engine in line with industry standard techniques.", "Computer Games Programming  \n To allow students to use the full functionality of industry standard games development software to produce professional games. \n To equip students with the knowledge and skills to enter the games profession. \n To ensure that students are able to critically evaluate recent developments in the games industry. \n   \n Using programming to further enhance gameplay e.g. using C++ to control elements of a computer game. \n Computer games development. \n Games careers \u2013 the skills and knowledge students will need in order to work in the Games industry. \n Recent developments in the games industry, including current research. \n  On completion of this module the student will be able to -  \n 1. Critically appraise new developments in specialist hardware and software relevant to games developments. \n 2. Present conclusions coherently within the context of a suitable theoretical framework. \n 3. To manage their own learning and make use of scholarly reviews and primary sources. \n 4. Accurately&nbsp;use a range&nbsp;of established techniques&nbsp;to implement computer games. \n 5. Be able to programme advanced gameplay and functionality within a modern game engine. \n 6. Apply methods and techniques previously learned to extend and apply their knowledge and understanding.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ", "Artificial Intelligence &amp; Machine Learning  \n To introduce the concept of artificial intelligence (AI) and to evaluate its role in the development of advanced software systems. \n To introduce theoretical approaches to the development of intelligent software. \n To undertake practical tasks to demonstrate how AI techniques can be implemented. \n To analyse methods for designing and deploying intelligent technologies. \n To critically evaluate the ways in which intelligent technologies can be used in various domains: e.g. business, medical, educational, legal, government and scientific. \n   \n Evaluation of the principles&nbsp;of automated intelligence. \n Scientific and Engineering goals of intelligent technologies. \n Approaches to the development of intelligent software. \n Application domains for intelligent&nbsp;technologies. \n  On completion of this module the student will be able to:  \n \n Demonstrate a critical awareness of the capabilities of artificial intelligence. \n Apply theoretical solutions to issues of representation. \n Critically analyse the role that systems such as neural networks or software agents, for example,&nbsp;can play in the development of intelligent technologies. \n Critically evaluate how organisations in various domains can utilise intelligent software. \n Use suitable software tools to: design, implement, test, document&nbsp;and evaluate software that demonstrates intelligence, or to&nbsp;design an intelligent architecture within a suitable domain. \n ", "Conducting Cyber Crime Investigations  \n To provide students with the knowledge, understanding and practical skills to plan, prepare and conduct interviews with witnesses to Cyber Crime and to achieve best evidence in Cyber Crime investigations. \n To give students opportunities to use and develop their skills, to exercise appropriate judgment in making professional decisions underpinned with academic theory and to record and present rationale and evidence that would withstand scrutiny in the criminal justice system. \n To broaden the student\u2019s skills to effectively investigate the Internet and to understand how intelligence can be acquired, submitted and used in cyber investigations. \n To introduce the development of Artificial Intelligence and its application by Law Enforcement and Criminal Justice Agencies. \n  This module will have an underlying theme on investigative interviewing with both victims and witnesses as part of a serious and complex cybercrime investigation.&nbsp; It&nbsp;involves;  \n \n The Investigatory Mind-set and recording rational. \n Core Investigative Doctrine. \n Decision Making (National Decision Making Model) in the criminal investigation. \n Investigating the Internet and the use of open source research. \n Introduction of role &amp; impact of Artificial Intelligence in Policing \n Understanding and investigating the dark web. \n Intelligence and the National Intelligence Model. \n The Regulation of Investigatory Powers Act 2000 (RIPA). \n The role of communications data within the cyber investigation. \n Enhanced and practical application of ACPO Good Practice and Principles for Digital Evidence. \n Enhanced and practical application of methodology and good practice relating to Cyber Crime Scene Investigation. \n The PEACE Interview Framework. Planning and preparation for interviews with victims of Cyber Crime, identifying the requirements of relevant others including prosecutors and the court. \n Understanding the purpose of the Achieving Best Evidence Guidance. \n Presenting evidence in criminal proceedings and the role of the expert witness and defence. \n Students will be introduced to the latest developments and implications of Artificial Intelligence for Law Enforcement. \n  On completion students should be able to;  \n \n Make sound decisions and record rationale underpinned with academic theory in relation to Cyber Crime investigations. \n Demonstrate an understanding of interview techniques used to gather information and evidence from victims and witnesses. \n Demonstrate application of good practice and legislative requirements in relation to the seizure of and presentation of digital evidence. \n To demonstrate an understanding of how social media and other open source information can be used in a cybercrime investigation. &nbsp; &nbsp; &nbsp; \n Produce investigative and forensic strategy, policy and rationale. \n Demonstrate an understanding of how RIPA impacts upon the cybercrime investigation. \n Demonstrate an understanding of the implications to Law Enforcement and the criminal justice system with the development of Artificial Intelligence. \n ", "Software Management  \n For students to be aware of all aspects of software management and be competent in managing a project.&nbsp; &nbsp;&nbsp; \n   \n Project management methodologies covering both Waterfall and Agile approaches. \n Assessing technical feasibility and commercial viability of ideas exploiting new technologies. \n Business planning including cost estimation and technology roadmaps. \n Risk management and business continuity management (including information security management) \n Eliciting, negotiating and clearly documenting requirements&nbsp;both functional and non-functional. \n People management including dealing with change and working with remote teams. \n Quality Management and Information Security Management systems, including ISO standards and continuous improvement mechanisms. \n Legacy architectures and technologies (for example COBOL and mainframes). \n   \n Demonstrate an understanding of the various software development life cycles. \n Interpret and apply standards for software quality planning, assurance and management. \n Gain a critical understanding of legacy systems, whilst evaluating the risks associated with replacing or maintaining the existing system.&nbsp; &nbsp; \n Analyse a problem domain and establish customer requirements through design modelling techniques. \n Effectively apply project, risk, business continuity and information security management techniques to given scenario(s). \n ", "Adv. Games Theory and Implementation To further develop understanding of key professional issues within the games industry To equip students with the knowledge and skills to design, build and evaluate single-player game levels To further develop skills and knowledge in the testing and iteration processes as part of the games development pipeline To equip students with the knowledge and skills to design and develop games for non-PC platforms. E.g. mobile, console and VR.  \n Further professional issues in the games development industry\n \n The free-to-play game business model \n The mobile game market and its nuances \n Different funding options for game studios \n Marketing techniques for traditional and mobile games   \n \n \n Further single player game design theory and development\n \n Mobile game design and its differences \n General mobile games design theory \n Free-to-play mobile game design techniques \n Identifying and selecting appropriate control methods for mobile games \n Developing games suitable for mobile devices in an industry standard game engine \n Further development of programming and game engine implementation skills \n Optimisations required for games running on mobile devices \n \n \n  \n Audio production for interactive digital environments\n \n Implementing audio in an industry standard game engine \n Optimising audio for mobile devices \n Acquiring and licensing audio for games. \n \n \n  \n Design and planning documentation\n \n Understanding pitch documents and their uses \n Creating a pitch document for a mobile single player game \n Pitching mobile game designs ideas to others for feedback \n \n \n  &nbsp; 1. Develop an understanding of, and critically evaluate, the key professional issues in the computer games industry &nbsp; 2. Critically review the key skills required to produce, source and implement audio for games &nbsp; 3. Provide evidence of applied knowledge in single-player game development &nbsp; 4. Analyse and evaluate a game utilising recognised games industry techniques &nbsp; 5. Demonstrate proficiency in the development of design and planning documentation for games", "Network Protocols and Methods*  \n To establish a grounding in fundamental concepts for network algorithm design \n To develop knowledge required to evaluate the performance of network processes \n To design processes and standards to solve&nbsp;specific&nbsp;networking problems \n To review current and emerging protocols \n  Recap on graph theory, algorithms and complexity  \n Principles of routing, switching and traffic engineering \n Data communications, signal encoding \n Optical, wireless, cellular and ad-hoc networking \n Encryption and network security.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  By the end of this module, students should be able to:  \n \n Discuss&nbsp;the principles of network algorithm and protocol design \n Design processes to tackle specific networking challenges and to make informed judgements about their accuracy and efficiency \n Evaluate contemporary developments&nbsp;within the field&nbsp; \n ", "Further Games Theory and Implementation To further develop awareness of some of the key professional issues within a games development team To equip students with the knowledge and skills to design, build and evaluate multiplayer games To develop skills in design and planning documentation for games development  \n Professional issues in the games development industry\n \n Comparing industry standard game engines \n Recommending a game engine based on a given scenario   \n \n \n The principles of effective game and level design\n \n Multiplayer game design theory \n Balancing multiplayer games for cooperation and competition \n Potential issues and design of networked games \n Multiplayer level design concepts such as wayfinding, visualisation, and level flow \n The level design workflow and processes \n \n \n  \n Applied knowledge of multiplayer game development\n \n Utilising an industry standard game engine to implement a multiplayer game \n Supporting two or more players simultaneously \n Supporting different input methods, such as game controllers and a keyboard/mouse. \n Further development of programming and game engine implementation skills   \n \n \n Design, testing and planning documentation\n \n Creating game design documents that focus on multiplayer games \n An introduction to games testing and processes \n Creating and utilising test plans \n Meeting milestones and deadlines \n \n \n  &nbsp; 1. Outline and explain more of the key professional issues in the computer games industry &nbsp; 2. Demonstrate an awareness of a variety of games platforms and related development issues  &nbsp; 3. Demonstrate proficiency in wayfinding and visualisation techniques within game environments &nbsp; 4. Provide evidence of applied knowledge in multiplayer game development &nbsp; 5. Understand the importance of games testing processes &nbsp; 6. Demonstrate proficiency in the development of design and planning documentation for games", "Digital Forensics  \n To understand and use data collection tools \n To be able to capture data and audit computer systems \n To be able to process, analyse, and categorise logged entries to determine causes and effects \n To be able to perform live/dynamic analysis of programs and malware to understand its operation \n To understand the workings of encryption and its effect on digital forensics analysis and identification \n   \n Malware analysis and investigation \n Low-level concepts of Operating Systems \n Understanding endpoints (smartphones, servers, PC/Mac/smartphones) and how they are configured \n Data collection and mitigation of surveillance \n   \n Critically analyse a range of data collection tools and systems \n Effectively demonstrate the steps needed to capture then audit a state of a computer system \n Study malware and analyse its effects on systems \n Analyse the effects of encryption and obfuscation on digital forensics analysis \n Demonstrate understanding of Digital Forensics techniques and challenges \n ", "COMP3621: \nPublic Engagement in Computer Science  This module is designed primarily for students studying Department of Computer Science or Natural Sciences degree programmes. \n\t\t\t To provide experience of a research-led public engagement project in Computer Science. \n\t\t\t To allow students to make an in-depth study of a particular topic in Computer Science, to undertake extensive independent research and to write at length on their chosen subject in the context of public engagement. \n\t\t\t To develop a range of transferable skills in researching a topic in the context of public engagement and making oral and written presentations on their work. \n\t\t\t To learn to devise and develop Computer Science projects and public engagement methods appropriate to the chosen topic and relevant audience(s).     Project: A research-led public engagement project, set in collaboration with members of staff from the Department, and possibly with an external partner, allowing students to present the results of individual and independent work (note: an original contribution to scientific knowledge is not required or expected). \n\t\t\t The student will implement and evaluate the project. The student will be required to show that they can analyse a specific public engagement problem and devise and develop an appropriate public engagement approach to address that specific problem. \n\t\t\t Students will choose from a wide list of broad possible topics. Each student will be assigned a member of staff as supervisor. Students will devise their own approach to researching and communicating their subject with advice from their supervisor. As part of their work they will be expected to address some of the specific aspects of their subject with the agreement of the supervisor. Students will be expected to work independently, to manage the direction of their work and to employ a significant component of self-directed learning. \n\t\t\t Reflective practice: The student will keep a reflective journal of activity and produce an executive summary of that journal, summarising and communicating their reflective practice in relation to their project. \n\t\t\t Transferable skills including time-management, presentation, communication, organisation, prioritisation and negotiation skills.     Having studied this module, students: \n\t\t\t\t Will have formed a detailed appreciation of the science related to a particular topic. \n\t\t\t\t Will be able to assess and devise appropriate ways to communicate a difficult principle or concept. \n\t\t\t\t Will have gained a broad understanding of many of the key aspects of public engagement.   ", "COMP1101: \nPROGRAMMING (BLACK)  To introduce the theory, principles and practice of programming by means of the JavaScript programming language. \n\t\t\t To use JavaScript in the wider context of problem solving and software development. \n\t\t\t To apply programming principles to real-world problems   The construction of simple programs in JavaScript. \n\t\t\t JavaScript for client-side and server-side web scripting \n\t\t\t Awareness of intellectual property issues for software including copyright, patents and open source licensing.   Interaction between JavaScript progams and the Document Object Model (DOM) \n\t\t\t\t Using control statements to loop and make decisions. \n\t\t\t\t Building collections of data within a program and using JavaScript Object Notation (JSON) \n\t\t\t\t Making programs robust through the use of exceptions and exception handling \n\t\t\t\t An understanding of the nature of imperative programming in the object-oriented style. \n\t\t\t\t A knowledge and understanding of good programming practice (for example, reuse, documentation and style) ", "COMP3591: \nPROJECT PREPARATION  To prepare students for their 4th year project \n\t\t\t To assist in choosing a topic, identifying a potential supervisor, assigning a project, and finally in writing a research proposal \n\t\t\t To create a proposal that will lead directly to the project work to be undertaken in the 4th year and will include narrowing the scope of the research problem, a literature review, and planning the project methodology \n\t\t\t To prepare students for the presentation of complex subjects before their peers and in turn provide critical feedback   Research design and ethics, data analysis, types of research, critiquing the academic literature, reproducible research \n\t\t\t Communication: academic writing, presentation of complex research and results, presentation skills \n\t\t\t Research methods, qualitative, quantitative, mixed methods, interviews, observation, questionnaires, hypothesis testing \n\t\t\t Data analysis and statistical tests   An understanding of the state of the art in the student's chosen area of specialisation \n\t\t\t\t An in-depth knowledge and understanding of the student's chosen area of specialisation \n\t\t\t\t An understanding of research methods required in conducting a research based project ", "COMP1021: \nMATHEMATICS FOR COMPUTER SCIENCE  To introduce students to fundamental concepts from linear algebra, calculus and mathematics that are necessary for and relevant to modern Computer Science.   \n\t\t\t To introduce students to the application of linear algebra, calculus and mathematics to topics within mainstream Computer Science.    Sets, functions and relations \n\t\t\t The notion and methods of mathematical proof \n\t\t\t Matrix algebra, determinants, and linear systems \n\t\t\t Vector spaces, linear dependence, basis and dimension \n\t\t\t Linear transformations, eigenvectors, and eigenvalues \n\t\t\t Matrix decompositions \n\t\t\t Sequences, limits, and continuity \n\t\t\t Differentiation and integration \n\t\t\t Series  \n\t\t\t Differential equations   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an understanding of the fundamental notions from linear algebra, calculus and mathematics and their relevance to mainstream Computer Science   \n\t\t\t\t an understanding of the concept of a mathematical proof   \n\t\t\t\t an understanding of mathematical notation.   ", "COMP1071: \nCOMPUTER SYSTEMS  This module aims to give students an appreciation and understanding of the way in which modern computer systems (comprising both hardware and software) can effectively represent, transport and manipulate data.      Digital electronics: Transistors; Logic gates; Combinational and sequential circuits.  \n\t\t\t  Computer architecture: Processor architectures; Memory systems; Input-output mechanisms.  \n\t\t\t  Operating systems.  \n\t\t\t  Databases: Design and query of relational databases, in addition to normalisation techniques and aspects of relational algebra.     an understanding of a computer system's underlying machine architecture  \n\t\t\t\t  an understanding of how a computer works  \n\t\t\t\t  an understanding of the basic theory and design of operating systems  \n\t\t\t\t  an understanding of the principles of good database construction.  ", "COMP2221: \nPROGRAMMING PARADIGMS  To broaden students' view of programming and programming languages. \n\t\t\t To understand core methodologies related to computer programming.   Systems programming. \n\t\t\t Functional programming. \n\t\t\t Object oriented programming.   On completion of the module, students will be able to demonstrate:  \n\t\t\t\t an acquisition of a core knowledge of different programming methodologies \n\t\t\t\t an understanding of when an appropriate programming paradigm is suitable for the solution of a specific problem ", "Programming I  \n To introduce a high level programming language, such as Java \n To introduce the concept of Object Oriented Programming \n To enable students to gain familiarity with the key constructs of a programming language \n To enable students to recognise and differentiate between different types of errors in programming code \n To introduce event-driven programming in the context of a Graphical User Interface \n   \n Integrated Development Environments \n Syntax, semantics, basic debugging \n Data Types - primitives and objects \n Control Flow - conditional and iterative (including collection iterators) \n Basic Collection types, e.g. Arrays \n Input and Output (Console and File based) \n Method calls and parameter passing \n Object Orientation - Behaviour and State \n Class implementation - properties, methods and constructors \n Static methods and variables \n Unit testing \n Inheritance, subtyping and method overriding \n Basic refactoring \n Recursion \n GUIs, Event handlers and event driven programming \n  On completion of this module, the student will be able to:  \n \n Use control flow to implement solutions to simple problems using programming code \n Design and implement a class \n Identify and use the correct data type for a given scenario \n Understand the purpose of the majority of keywords for a given programming language \n Determine the result of executing a set of statements \n ", "CSY3037 \u2013 IT Project Management  Description:  This purpose of this module is for students to absorb a considerable body of knowledge, which can then be reinforced by application of the theory. The module therefore employs a combination of theory and practice using real or simulated IT projects of diverse sizes. Content will be delivered by lecture and workshop sessions. Students? understanding of the theory will be tested by time-constrained assessment. Practical assignments will be based around a scenario (e.g. development of a database system requiring coordination of a diverse team comprising designers and programmers) and require students to work in groups, planning and controlling the project.  ", "Law Enforcement of Cybersecurity  \n This module aims to provide the student with the opportunity to utilise their skills and knowledge to enable them to gather and critically examine source data and intelligence gathered during a professional investigation and present findings within a court setting. \n To further develop the student\u2019s knowledge and practical skills in relation to professional investigation by critically analysing their investigation and exercising appropriate judgment by making professional policy decisions, underpinned with academic theory that would provide control and direction to the investigation. \n Develop student skills in more focussed research and presenting written communication. \n The module will progress to look at specialist network and forensic investigation used by the industry. \n The student will be able to critically examine relevant case law relating to Cybercrime and identify the implications for policing cybercrime. \n Introduce an understanding of the developments and implications of Artificial Intelligence in law enforcement. \n   \n This module builds upon modules CO4608 Cyber Legislation and Introduction to Professional Investigation module and CO5608 Conducting Cyber Investigations. \n The student will critically examine the investigative techniques and information associated with professional cybercrime investigation identifying the limitations and legislative restrictions. \n The student will understand and then conduct the role of the analyst in gathering information and intelligence during cybercrime investigations and then critically examine the data and present information in a manner that would stand robust scrutiny with the criminal justice system. \n The student will critically examine the case law surrounding cybercrime investigation and its application enabling specialist investigators to conduct professional investigations and present their findings. \n Students will be introduced to the latest developments and implications of Artificial Intelligence for Law Enforcement. \n  On completion students should be able to;  \n 1. Gather available intelligence and evidence from a case study and critically examine the data, making and recording professional policy and investigative strategy to direct the cybercrime investigation. \n 2. Present finding from the analysis of the data in oral tribunal and answer questions under cross examination \n 3. Review case law and its application in relation to cybercrime investigations. \n 4. Show an understanding of the development and implications of Artificial Intelligence in law enforcement.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ", "Computer Systems and Networks  \n To enable students to develop a critical understanding and appreciation of the fundamental building blocks of computer systems and their internal structure and organisation. \n To encourage students to explore the nature of data and the techniques used to store, process and transport it. \n Students will develop an understanding of wired and wireless Ethernet LAN configuration and the protocols and devices used in their operation. \n   \n Further Boolean algebra and data representation. \n Logic optimisation \n Microarchitecture \n Network redundancy \n Spanning-Tree Protocol \n Virtual LANs \n Wireless LANs \n  On completion of this module the student will be able to:  \n \n Apply a variety of techniques for binary data representation and processing \n Use Boolean algebra and logic gates to design sequential and combinational circuits \n Critically appraise a range of microprocessor architectures \n Design and configure both wired and wireless switched Ethernet networks \n ", "Fundamental Skills Assessment  \n \n\n \n   \n \n This assessment will address all KSBs across the curriculum to identify evidence of learning from Apprentices first year on programme. It will assess apprentices\u2019 ability to analyse and reflect on their learning, to recognise and evaluate their own progress and to present evidence of their achievement relevant to their employer demands.  The intention is to provide assessment for learning opportunities which allow learners to make progress towards the apprenticeship KSBs. &nbsp;  Learners will complete four mini assignments through the year. &nbsp;They will choose these from a \u2018menu\u2019 of options each which focus on a different set of KSBs. &nbsp;They will be guided to choose from areas in which they have made less progress, but must ensure that their choices cover all KSBs. &nbsp; \n \n  Can understand and apply a range of mathematical and software tools and techniques to construct a data science pipeline.&nbsp; &nbsp;Can apply a wide range of mathematical and statistical techniques to solve data science problems &nbsp;Can produce simple visualisations of data using using simple programming constructs. &nbsp;Apply appropriate software development methods and tools.&nbsp; &nbsp;Can assess and make progress towards achieving the Data Scientist Apprenticeship KSBs Understands and can apply the concepts of propositional logic.Understands and can apply the basic concepts of single and multivariate calculus. &nbsp;Can apply tests for convergence of sequences and series. &nbsp;Can apply manipulation of matrices to solve systems of linear equations and eigenvalue equations. &nbsp;Can solve optimisation problems. &nbsp;Can apply knowledge and techniques of graph theory to solve problems. &nbsp;Can assess and make progress towards achieving the Data Scientist Apprenticeship KSBs &nbsp; KSBs K2.&nbsp;How Data Science operates within the context of data governance, data security, and&nbsp;communications. How Data Science can be applied to improve an organisation\u2019s processes, operations&nbsp;and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance&nbsp;affect Data Science work, and the impact of international regulations (including the General Data&nbsp;Protection Regulation.)&nbsp;&nbsp; K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in&nbsp;an organisation, including:&nbsp;&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d&nbsp;and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and&nbsp;decisions.&nbsp;&nbsp; K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques,&nbsp;simulations, optimisation, and automation.&nbsp;&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp;&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in&nbsp;selecting models, algorithms and tools.&nbsp;&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp;&nbsp; K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from&nbsp;diverse datasets:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services,&nbsp;open data, government data, news and social media.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp;&nbsp; S1.&nbsp;Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science&nbsp;problems. Devise solutions and make decisions in context by seeking feedback from stakeholders.&nbsp;Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of&nbsp;results. Collaborate with colleagues to gather requirements.&nbsp;&nbsp; S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to&nbsp;source, access, explore, prole, pipeline, combine, transform and store data, and apply governance&nbsp;(quality control, security, privacy) to data.&nbsp;&nbsp; S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation,&nbsp;analysis, visualisation, and system integration. Select appropriate data structures and algorithms for&nbsp;the&nbsp;problem. Develop reproducible analysis and robust code, working in accordance with software&nbsp;development standards, including security, accessibility, code quality and version control.&nbsp;&nbsp; S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and&nbsp;validating results with statistical testing: perform statistical analysis, correlation vs causation, feature&nbsp;selection and engineering, machine learning, optimisation, and simulations, using the appropriate&nbsp;techniques for the problem.&nbsp;&nbsp; S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns.&nbsp;Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess&nbsp;value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new&nbsp;approaches. Compare the pros and cons of software applications and techniques.&nbsp;&nbsp; S6.&nbsp;Find, present, communicate and disseminate outputs effectively and with high impact through&nbsp;creative storytelling, tailoring the message for the audience. Use the best medium for each audience,&nbsp;such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable&nbsp;narratives. Make recommendations to decision makers to contribute towards the achievement of&nbsp;organisation goals.&nbsp;&nbsp; S7.&nbsp;Develop and maintain collaborative relationships at strategic and operational levels, using methods&nbsp;of organisational empathy (human, organisation and technical) and build relationships through active&nbsp;listening and trust development.&nbsp;&nbsp; S8.&nbsp;Use project delivery techniques and tools appropriate to their Data Science project and organisation.&nbsp;Plan, organise and manage resources to successfully run a small Data Science project, achieve&nbsp;organisational goals and enable effective change.&nbsp;&nbsp; B1.&nbsp;An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques;&nbsp;tenacity to improve methods and maximise insights; and relentless creativity in their approach to&nbsp;solutions.&nbsp;&nbsp; B2.&nbsp;Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams,&nbsp;championing and highlighting ethics and diversity in data work.&nbsp;&nbsp; B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and&nbsp;pragmatism in the face of real-world scenarios.&nbsp;&nbsp; B4.&nbsp;Consideration of problems in the context of organisation goals.&nbsp;&nbsp; B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and&nbsp;integrity in presenting data and conclusions in a truthful and appropriate manner", "Computer Graphics  \n \nTo show the mathematical basis of 3D computer graphics through modelling and transformation of 3D objects, viewing 3D objects in different ways, and projecting 3D objects onto the 2D computer screen.To provide practical means for learning and understanding the 3D computer graphics pipeline, methods and programming skills for modelling, transforming, viewing and projecting 3D objects, and adding realism to them.\n \n   \n \n You will learn the principles of 3D computer graphics, focusing on modelling and viewing objects/scene in a three-dimensional (3D) world on the computer, rendering the objects/scene to give it realism, and projecting objects/scene onto 2D display in analogy to your taking a photo of a 3D world using a camera. Through weekly lectures and laboratory sessions, you will explore various computer graphics techniques and develop your OpenGL programming skills required for 3D computer graphics. The module demonstrates the benefits of linking theory and practice. \n \n    Knowledge and Understanding&nbsp;   Knowledge and understanding of the principles and techniques and the ability of implementing 3D computer graphics applications, increasing the employability of the students, especially in the creative industry.   Intellectual Skills   The ability to write OpenGL programs to create realistic 3D graphical objects on the computer.   Transferable Skills   Computational techniques and programming skills and the ability to apply these in variety of application domains.&nbsp; ", "Games  \n \nTo teach the history of games as an industry and a form of entertainment; to teach the principles of game design and implementation, and to give experience of designing and developing games.\n \n   \n \n Video games are an ever-growing, multi-billion-pound industry, and&nbsp;game development now encompasses numerous disciplines. This module focuses on the design and development of video games as it relates to player experience, and as complex, interactive software systems.  Students will gain knowledge and hands-on experience of the fundamental principles of theoretical and practical game design, and methods for understanding players drawn from the field of Human-Computer Interaction. The module covers the design of interactive elements such as game mechanics and how these lead to elements of player experience such as challenge and difficulty.  Students will study the development of games as complex software systems. Specific software design issues to be considered will include the software architecture of games, and the technical issues associated with simulation, and networked and multiplayer games.  Students will use appropriate software environments to individually develop a number of prototypical games to explore relevant theoretical design and practical implementation concepts.  &nbsp; \n \n  Knowledge and Understanding Understanding of the history, theory and practice of programming in the context of computer games.Intellectual Skills Understand and logically evaluate program requirements and specifications. Understand the complex ideas of game programming solutions and relate them to particular problems.Professional Skills The ability to write programs. The ability to transfer programming skills between classes of applications.Transferable Skills The ability to apply abstract frameworks to concrete examples. The ability to solve problems using programming including mathematical problems, to schedule and present their work and to retrieve additional learning material.&nbsp;", "Applied Machine Learning Assessment  \n \n\n \n   \n \n This assessment block provides learners with the opportunity to apply AI and Machine learning to data science problems.&nbsp;&nbsp; There will be three coursework elements of increasing complexity.  Basic, prescriptive coursework More advanced coursework Open coursework which is intended to be tailored the apprentice\u2019s role / workplace.  Learners will be encouraged to look for opportunities/data/business questions within their organisation to apply the techniques learned \n \n  Demonstrate understanding of a range of AI methods and have a good understanding of how those techniques and the kinds of problems to which they can be successfully applied.Evaluate which AI methods can be successfully applied to specific problems, and to take problems and associated datasets and solve those problems using AI methods.Be able to implement AI techniques using languages and systems used in the contemporary workplace. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods. 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;", "Cryptography and Security  \n To give an understanding and usage of symmetric/asymmetric encryption \n To explore basic cryptographic calculations \n To understand how cryptographic algorithms work \n To give an appreciation to system and data security using cryptography \n To explore case studies and advise on the right actions to take to ensure continued data protection \n To explore the history of cryptography and cryptographic attacks \n   \n Public/private key composition and usage \n Certificates \u2013 for code signing and identify management \n Block/stream ciphers \n Cryptographic algorithms \n History of and modern day cryptography \n Modern day tools for enterprise and personal use for protection of data and relevant confidential information \n Encryption attacks (e.g. Ransomware) and attacks against encryption (anti-encryption) \n   \n Perform some basic cryptographic calculations \n Critically measure and differentiate between how encryption/decryption works from an applied cryptography point of view \n Demonstrate an understanding of security certificates, digital signatures, hash functions, and their uses \n Analyse historical and current ciphers and demonstrate relevant types suitable for achieving a secure platform \n Formulate security practices that an organisation should use to deal with cryptographic attacks and to stop theft of data on endpoint devices. This will include how to make attack impracticable and security practices relating to access control principles - e.g. Least Privilege, Single Sing-On, NFA (N Factor Authentication), etc. \n Demonstrate a good understanding of the design and internal structures of&nbsp;commonly used cryptosystems \n ", "User Experience and Collaborative Development  \n To encourage critical reflection on the needs of humans as users/consumers, and the demands and relevant constraints imposed. \n To ensure awareness of the rate of technological change, the effects on users/consumers, and the issues relevant to user experience designers. \n To promote inquiry into current leading digital technologies and possible future developments in ubiquitous computing. \n To give practice in the design and prototyping of user experiences and user interfaces, especially for web-based, console, desktop systems, and mobile devices. \n Gain \"real-world\" experience of taking part as a team member in a software development project. \n   \n Defining user experience design and&nbsp;the various subsets; including usability. \n An introduction to human factors and human-centred design standards. \n History of HCI and issues surrounding technology and innovation. \n Practical design and prototyping of user interface solutions to solve 'real world' problems. \n Experimenting with iterative team-based design and development exercises covering&nbsp;insights gathering, design processes, industry-approved frameworks, and user testing and evaluation. \n Introduction to careers in UX. \n   \n Demonstrate knowledge and understanding of key principles in the development of human-centered systems.&nbsp; \n Demonstrate knowledge and understanding of techniques associated with the thoughtful design of user interfaces. \n Select \u2018fit for purpose\u2019 methods and techniques for capturing, transferring and presenting data. \n Produce team-based, design-focused and human-centred solutions towards the creation of an interactive system&nbsp;prototype. \n Understand and reflect upon&nbsp;the multidisciplinary nature and significance of roles within a software development team. \n Evaluate&nbsp;a prototype&nbsp;system using the appropriate tools and methodology. \n ", "Databases II  \n To give students an understanding of the evolution of database systems and technologies, in support of integrated solutions for information management across the functions and locations of modern organisations. \n To enable students to develop a simple data warehouse and business intelligence solution, using one of the leading DBMS platforms. \n To develop in students a critical understanding of the strengths and weaknesses of modern DBMS platforms. \n   \n Transactional v Informational processing. \n Data Warehouses and Multidimensional databases \n Business Intelligence Systems/Decision Support Systems. \n Adjacent technologies - e.g. XML - as appropriate. \n Big Data, Cloud Data and no SQL \n Field sizes and schema, data fragmentation \n Hadoop - no SQL database \n Data warehousing \n Data transformation \n Database security \n  On completion of this module the student will be able to:  \n \n critically examine how databases have evolved from desktop systems to modern DBMS, by synthesising the reasons and ramifications of this evolution. \n evaluate critically a leading modern DBMS product, against a range of complex information management problems. \n design and build a simple data warehouse infrastructure given a range of disparate data sources. \n critically evaluate alternative data warehouse and business intelligence architectures. \n critically reflect on the range of alternative approaches to modelling structured and semi-structured data. \n ", "Systems Analysis  \n To place&nbsp;Systems Analysis and Design&nbsp;methodologies in context and to critically evaluate their&nbsp;role in&nbsp;the software development process. \n To analyse relevant case studies. \n To utilise appropriate techniques and tools to model&nbsp;selected domains. \n To evaluate methods for modelling knowledge and expertise. \n   \n Information systems development: concepts and approaches. \n Methodologies, techniques and tools. \n Perspectives: process modelling, data modelling, object modelling. \n Practical modelling tasks. \n People and systems. \n Capturing knowledge and expertise. \n  On completion of this module the student will be able to:  \n \n Apply and evaluate current principles and approaches of systems analysis, design and development \n Apply these principles to the development of accurate systems models \n Generate comprehensive solutions using appropriate tools and techniques \n Critically assess the role of Systems Analysis and Design in the software development process &nbsp; \n Critically evaluate&nbsp;relevant case studies \n ", "Web Development  \n To provide the student with a firm foundation for continuing study in the area of the web and Internet. \n To make students aware of the range of tools available for developing Website content. \n To put the Website/Web application development process in context within the infrastructure of the Internet. \n To enable students to develop static web sites in line with web standards \n   \n Internet and web terminology, protocols and infrastructure \n Web document structure and content (e.g. HTML) \n Web aesthetics (e.g. CSS) \n Web scripting (e.g. JavaScript) \n Web requests (e.g. use of HTTP verbs) \n Using Internet and Web tools (e.g. IDEs, FTP clients) \n   \n Use standard web languages such as HTML and CSS in the production of web content \n Use, effectively, a range of tools for working with and developing content for the Internet and the World Wide Web. \n Design and implement a good user interface for a web-based application. \n ", "Ethical Hacking  \n To understand basic assembly code of a given program \n To practice previously acquired&nbsp;skills in theory and apply them using software tools \n To plan and develop attacks on systems \n To understand the inner working of common technologies and demonstrate the flaws that exist \n To understand network attacks and security, and to be able to critique the security of a network \n   \n Software attack techniques, approaches, and methodologies \n Exposure to exploitation techniques, including for example,&nbsp;buffer overflow, stack overflow, heap attacks, and UAF (Use After Free), amongst others. \n Attack methods including system, host, network, and web-based attacks. \n Social engineering awareness and mitigation \n Network security and attacks \n Use of penetration testing tools \n Network tapping/sniffing and detection \n Wireless and mobile hacking \n Ethical issues in software exploitation and penetrations testing \n   \n Understand and demonstrate software exploitation techniques \n Demonstrate an understanding of counter-measures against exploitation techniques \n Demonstrate systematic understanding of secure system design and software protection methods \n Demonstrate the correct use of tools and techniques in a successful penetration test \n Understand ways of gaining access to networks&nbsp;and performing monitoring on networks \n Perform penetration testing on networks and systems, identifying vulnerable systems \n Understanding the weaknesses in networks and software to mitigate attack and exploitation \n ", "Programming III  \n To analyse, understand and contribute to existing software \n To understand the processes governing the execution of programming code \n To investigate alternate programming paradigms to object orientation \n   \n Design patterns - Architectural, Creational, Structural and Behavioural \n Open Closed Principle, Dependency Inversion Principle, Interface Segregation principle \n Functional programming, functions as parameters, function closures \n Generics, Class extensions \n Pattern matching \n Concurrent programming \n Programme translation and execution (interpreters, compilers) \n Layout and management of memory (e.g. allocation / stack / heap) \n Continuous integration \n   \n Contribute to the implementation of existing, incomplete software&nbsp; \n Design, implement, test and evaluate an application program based software solution beyond the basic web application/desktop application boundary \n Critically evaluate programming principles and design patterns in relation to one another, or for use in a specific context \n Evaluate the features of various programming languages in relation to each other \n ", "Web Application Development  \n To introduce concepts of web-application development and configuration \n To extend and enhance students' knowledge of current web technologies. \n To develop student' proficiency and confidence in applying theoretical and practical methodologies for the design, implementation, evaluation of and management of web-based systems. \n To introduce the use of web-application frameworks towards the development of interactive web applications \n   \n Client/server side scripting and coding \n Full-stack web application development and configuration \n Web application frameworks \n User-interface software design patterns \n Thin and thick client architectures \n Database-driven websites and database connectivity \n   \n Demonstrate an understanding of the issues surrounding the design, deployment and operation of web applications. \n Apply appropriate techniques for the deployment, management and maintenance of web applications. \n Reflect on the reasons why some systems are more successful than others, and make reasoned arguments as to the extent to which this is influenced by usability. \n Assess the role of web frameworks in web application development. \n ", "Design Thinking for Innovation  \n To demonstrate effective use of human-centred design&nbsp;techniques according to ISO 9241-210 standard \n To develop a solid&nbsp;appreciation of the importance of UX research in product teams \n To design effective&nbsp;information architecture for interactive systems \n To explore diverse user interface design and interaction design issues&nbsp;for the benefit of the user experience \n To gain first-hand experience in collaborative software innovation&nbsp;workshops \n To develop a solid understanding of the dynamic and multidisciplinary nature of software development teams \n To appreciate the importance of designing for inclusivity and a diverse range of users \n To undertake&nbsp;user testing and evaluation of interactive systems \n   \n Applying further knowledge of human-centred design principles according to ISO 9241-210 \n Balancing business goals with user needs \n UX research \n Experience mapping \n Design thinking \n Information architecture \n Progressive enhancement \n User&nbsp;interface design&nbsp;techniques \n Defining inclusive design and accessibility \n Style-guides and specifications for developers \n Design sprints for software innovation \n User testing and evaluation \n   \n Critically analyse user experience issues in technology and software innovation. \n Demonstrate a good understanding of the human-centred design lifecycle, according to ISO 9241-210. \n Demonstrate&nbsp;advanced teamwork skills in a collaborative software development environment. \n Use insights&nbsp;to inform the development of personas, user journeys and system workflows, to ensure user and organisational needs are met. \n Apply parts of the ISO 9241 standard to the&nbsp;development of original software. \n Show an awareness of&nbsp;inclusive design issues software innovation. \n ", "Emerging Markets and Technologies This module equips the&nbsp;student with a capacity to develop strategic approaches to problems requiring a technological solution, as well as operational policies within an organisation that can help to improve and protect its competitive effectiveness.  \n The module's aims are: \n \n To provide the student with the skills needed to examine and critically analyse policies for technological change and innovation within an organisation.&nbsp; \n To provide the student with the capacity to critically assess the role of ICT in effective management. \n   \n The determinants of technological change and progress. \n The role of science in technology. \n Models of technological innovation. \n Social, Legal and ethical implications of technological innovation. \n Technological change as a learning process. \n Mobile and wearable computing. \n  &nbsp;On completion of this module, the student will be able to -  \n \n Define and analyse&nbsp;the significant aspects&nbsp;of technological innovation. \n Analyse and evaluate&nbsp;the application&nbsp;of hardware and software,&nbsp;along with&nbsp;its uses, both local and global, in society and in organisations. \n Devise and sustain arguments using a wide range of ideas and techniques within the field of technical innovation strategy. \n Exercise judgement in a number of complex performance, planning, design and technical functions related to the devising and validation of a model for technical innovation. \n Synthesis and integrate information from a variety of sources. \n Critically comprehend and assess the relationship between&nbsp;current practices in the area of computing, and&nbsp;an appropriate&nbsp;application of technological and ethical responsibility. \n ", "Software Testing and Deployment  \n To introduce students to formal methods of testing and deploying software. \n  Testing  \n \n Testing techniques and principles: Defects vs. failures, equivalence classes, boundary testing. \n Black-box vs. Structural testing. \n Testing strategies: Unit testing, integration testing, profiling, test-driven development, behaviour-driven development, mocking. \n State based testing; configuration testing; compatibility testing; web site testing. \n Alpha, beta, and acceptance testing. \n Test profiling and tools. \n Developing test plans. \n Managing the testing process. \n Problem reporting, bug tracking, and analysis. \n Security. \n \n &nbsp; \n Deployment \n \n User training \n Continuous integration \n Configuration management \n Version control \n Maintenance \n Hardware and software \n 3 rd  party embedded systems \n Performance analysis &nbsp; &nbsp; \n   \n Analyse requirements to determine appropriate testing strategies understanding the trade-off between the extent and cost of testing vs. quality requirements. \n Create, evaluate, and implement a test plan for a medium-size code segment, including the construction of appropriate automated tests. \n Understand the business implications of software deployment. \n Create and implement a deployment plan for a medium-size software application.&nbsp; &nbsp;&nbsp; \n ", "Interface Design  \n To&nbsp;encourage the effective&nbsp;application of advanced player-centred design&nbsp;techniques. \n To&nbsp;promote effective information architecture for&nbsp;game menus and HUDs. \n To show how applying contemporary visual design principles and inclusivity&nbsp;guidelines can enhance&nbsp;the user experience for players. \n To&nbsp;provide opportunities to&nbsp;participate in team-based&nbsp;problem-solving activities for producing design solutions in games. \n To&nbsp;provide&nbsp;opportunities to plan and&nbsp;moderate&nbsp;usability / play testing and evaluation of games. \n   \n Applying best practice in&nbsp;the design of user interfaces for computer games and \"mainstream\" computer systems. \n Further study of cognition theory, human factors; their relevance to interaction &amp; \"usability\" and overall user experience design. \n Practical design and prototyping of&nbsp;meaningful user interfaces&nbsp;for computer games and mainstream computer systems. \n Conducting iterative team-based design activities using recommended industry-approved frameworks. \n Learning the fundamental differences (and similarities) between game UX and mainstream UX. \n Introduction to careers in game&nbsp;UX. \n   \n Demonstrate an appreciation of the key differences between 'mainstream' and game UX. \n Demonstrate a critical understanding&nbsp;of expert game UX theory (including Hodent's (2017)&nbsp;seven pillars through the evaluation of commercial games. \n Demonstrate the ability to work collaboratively (and efficiently) towards understanding and solving a design problem. \n Produce player-centred design solutions&nbsp;as part of the creation of a game user interface prototype. \n Demonstrate&nbsp;an awareness&nbsp;of accessibility issues in games and&nbsp;interactive&nbsp;mainstream systems. \n ", "Cyber Intelligence  \n To discuss the various methods by which intelligence can be applied from various sources \n To understand and critically evaluate strategic and tactical intelligence \n Develop understanding of complex cyber-warfare techniques and mitigations \n Apply a variety of incident response techniques \n   \n Open Source Intelligence (OSINT) \n Social Media Intelligence (SOCMINT) \n Human Intelligence (HUMINT) \n Cyber crime \n Cyber activism \n Cyber espionage \n Information Operations (INFO-OPS) \n Incident Response \n  By the end of the module students will be able to:  \n \n Critically demonstrate the application of covert and discrete command and control structures. \n Formulate technical proposals for incident response based on a given scenario. \n Explore operational techniques to provide attribution details on a cyber attack. \n Formulate a strategic plan to empower an entity to deal with emerging threats. \n Appraise key tactical indicators from incident reports and make adjustments accordingly. \n ", "Further Programming and Algorithms  \n To introduce students to established&nbsp;methods for resolving common programming problems \n To develop further competence in the use of relevant&nbsp;programming paradigms and principles. \n To develop skill in&nbsp;the use of industry standard software libraries \n   \n Time complexity and Big O notation \n Data structures and algorithms including linked lists, arrays, stacks, queues, heaps, hash tables, binary search trees, searching and sorting. \n Recursion \n Memory management \n Multithreaded programming, synchronisation and interprocess communication \n Serialisation and working with external files \n Sockets and networking \n Exception handling \n Code reuse (e.g. object orientation, templates/generics, functional programming) \n Use of library functionality \n  On completion of this module the student will be able to:  \n 1. Implement common data structures and algorithms with due regard to system efficiency and maintainability \n 2. Analyse problems and design suitable solutions to them using real-world scenarios \n 3. Employ a variety of techniques for code reuse \n 4. Implement software using industry standard&nbsp;libraries\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ", "Operating Systems and Hardware To gain a knowledge and understanding of&nbsp;how various software and hardware components interact to produce working computer systems.  \n To gain an understanding of the fundamentals of networking\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n Computer architecture \n State machines \n Basic computing mathematics - binary and hexadecimal number systems; simple uses of binary/hexadecimal; basic probability and random numbers \n Computer systems components, data representation, fetch-execute cycle, logic gates and Boolean algebra, how computer systems work, interrupts and Input/Output \n Levels and types of software, memory and secondary storage, operating systems (local and network), user interfaces, process management, memory management, file management \n Computer performance, modern computer systems and concepts \n Foundations of networking (Routing,&nbsp;IP Addressing, Network topologies, OSI model, TCP/IP) \n Network traffic, packets, headers, encapsulation \n Virtual Private Networks \n  On completion of this module, the student will be able to:  \n \n Describe the various software and hardware components that make up a stand-alone computer. \n Demonstrate an understanding of computer file management, interrupts handling, operating systems, computer performance and modern computer systems. \n Demonstrate an understanding of how hardware and software components interact to provide a working computer system (Stand-alone). \n Correctly use basic computing mathematics. \n Describe the fundamental components of a network \n ", "CSY3059 \u2013 Modern Databases  Description:  The purpose of this module is to study advanced/latest database topics.  The module focuses primarily on NoSQL databases (e.g., graph and document databases), from designing and creating to querying the databases.  ", "Work Based Project 1 The module is concerned with the development of a solution to a realistic work based problem relevant to the Graduate Apprentice (GA) role within the workplace and level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution to a work based problem.  The emphasis of this module is on: understanding the contribution which digital technologies and skills relevant to the GA's area of study are making to current global business and society, and how these are changing and developing understanding the development lifecycle practiced by professionals in their area of study gaining an insight into the organisational structures and business functions within which the modern professional associated with their current role operates and their current role. GA's should also consider the behaviours and issues which occur within their workplace and working practices, and how they as individuals function as part of their workplace environment.  The project will normally be undertaken on an individual basis, however, the work completed within the module may require the GA to work with a group of individuals within the organisation. The GA will most likely assume the role of a project member taking into account their relative experience at this stage in their role. They should, however, have a role of responsibility on the project or may also work on a small individual project / piece of work. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project.  The GA, on submission of a project specification and approval of the specification prior to the module commencing, is expected to develop and follow a project plan and its constituent processes and activities under direct supervision of a work based supervisor and guidance of the module tutor as well as and work in a self-motivated way within defined schedules, working towards well defined deliverables that meet the project aims and objectives. GA's are expected to develop confidence in their ability to work with others on analysing and creatively solving problems, and evaluating their work within the context of the original project requirement. This module will ground students in project management, problem solving, team working skills, and the use of reflective practices to support personal and professional development.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation.  The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 68%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team working Time management Independent working and self-reliance Communication skills Presentation skills Personal reflection and review  Work and the Workplace The 21st Century Workplace Professional practices and life cycles Enterprise and organisational types and structures Business functions Corporate values and responsibilities Diversity at work and mobility considerations  Digital Technologies and Society Digital Enterprise, Digital Culture and Digital Society Case Studies Trends and Developments  Introduction to Careers and Employability Careers profiles and pathways Graduate Attributes and Enhancing Employability Careers information sources and resources Guest external speakers and Guru seminars from industry practitioners and employers      Upon successful completion of this module, students should be able to:  1. Use relevant defining technical and enabling soft skills to follow a project plan and appropriate lifecycle process within a work based environment to solve a problem relevant to the programme of study. 2. Develop an understanding of the structure, function and operation of the modern workplace, the opportunities and roles and technical and transferable skills required for success. 3. Demonstrate an awareness of how digital technologies and know how relevant to the GA's programme of study interact with business, society, and culture. 4. Utilise reflective practices to support personal and professional development and demonstrate the ability to effectively communicate in both written and oral form.      ", "CSY2126 \u2013 Digital Sculpting Fundamentals  Description:  The purpose of this module is to develop fundamental skills in 3D digital sculpting. Students use relevant digital sculpting software and non-linear creative processes to produce efficiently retopologised 3D models for use within computer game projects.  ", "CSY3032 \u2013 Systems Development Approaches  Description:  This purpose of this module is to: develop further the concepts learned in the prerequisites level 5 module by placing analysis and design techniques and approaches into context; explore alternative approaches to requirements capture and specification, and to development models; give guidance on how to map these development models onto organisational situations; develop an understanding of the importance of 'softer' skills in systems development, and experience in applying them; develop the ability to select, apply and justify appropriate methods and tools that will make an effective contribution to information systems development.  ", "CSY3064 \u2013 Embedded Real Time Systems  Description:  This module is designed to give an indepth appreciation of the design, implementation and testing principles of embedded and real-time systems. Students will explore the complexities andissues involved in the use of  embedded systems and interfacing with computer devices.  ", "CSY3030 \u2013 Game Techniques 3  Description:  The purpose of this module is to: develop a critical appreciation of the social game development lifecycle; apply complex problem-solving skills to social develop games programs; introduce students to the skills, principles and concepts necessary to develop social computer games; implemente social games programs using an appropriate programming language and development platform.  ", "CSY4018 \u2013 Games Dissertation  Description:  The purpose of this module is to provide the opportunity for the student to undertake the research and self-management of a Computer Games related problem that permits the integration of the main areas of study in the student?s study programme. The module also permits the development of higher order intellectual skills.  ", "CSY2056 \u2013 Narrative for Games  Description:  Through session based activities, learners will be guided towards developing an insightful knowledge into narrative design. Understanding how to use narrative engagingly within a designed medium. Within digital industry, this will involve learning narrative history, media theory, act structure, psychological principles and digital implementation skills that are necessary to create an engaging digital product.  ", "CSY3028 \u2013 Graphics 2  Description:  This purpose of this (Level 5) module is to understand and implement graphic applications. The module consists of three-dimensional graphics and animation. Such graphics have many uses from medical simulation to computer games. Advances in computer graphics hardware and in computer graphics libraries has now made it possible for the production and display of high quality computer graphics on stock hardware.  ", "CSY3061 \u2013 Cloud and Advanced Network Technologies  Description:  At the end of this module, the students will be able to apply advanced networking routing and security protocols on a medium/large enterprise network. Furthermore, they will know how enterprise networks access the Internet and Cloud services. Students will also learn Cloud networking principles with applications to modern telecommunications.  ", "CSY3045 \u2013 Simulation and Dynamics  Description:  The purpose of this module is to introduce the basic concepts of computation through modelling and simulation that are increasingly being used by computer games developers/programmers to shorten design/implementation cycles and simulate the impacts of alternative approaches; to introduce students to scientific programming through exploring a range of programming and modelling concepts using the appropriate mathematical software.  ", "CSY2090 \u2013 Microprocessors and Internet of Things (IoT)  Description:  This purpose of this module is for students to explore a range of applications and design principles of various microprocessor based systems that can support the development and analyse of emerging Internet of Things technologies.  ", "CSY3065 \u2013 Contemporary Approaches to Software Development  Description:  This module will explore many of the most widely used software development methodologies and skill - sets currently being used in the software industry by high-quality software engineers and facilitate students to effective select, deploy and manage a suitable methodology for a given industry scenario  ", "CSY3044 \u2013 Design Innovation  Description:   The objective of the module is to encourage students to explore the potential of innovative or unconventional technology to construct genuinely new, interactive experiences.  ", "CSY3058 \u2013 Media Technology  Description:  Media Technology is an important aspect to Computer Science. This module will introduce a range of technologies relevant to modern multimedia systems. This includes computer graphics, digital image processing, online video streaming, immersive media, and other advanced applications. Student will develop audio-visual systems in a third generation computer language.  ", "CSY2129 \u2013 3D Art for Game Engines  Description:  This module develops the technical skills required to integrate 3D game art assets into a real-time game engine. Learners develop game engine specific techniques such as basic scripting, shader and geometry management, lighting and post processing.  ", "CSY2081 \u2013 Cloud Computing and Big Data  Description:  The purpose of this module is to provide a fundamental understanding of the concepts of big data, virtualisation, and cloud computing. Students explore, select and justify appropriate frameworks/technologies for big data processing, virtualisation, and cloud computing solutions for a given scenario.  ", "CSY2038 \u2013 Databases 2  Description:  The purpose of this module is ?To develop the fundamental concepts and skills of Entity Relational Models (ERMs) and Structured Query Language (SQL).  It focuses on the key areas of extended-relational databases; user-defined types, their practical creation, application along with valuable data extraction methods to provide intelligence.  Database programming (PL/SQL) is introduced.  The module employs industry standard software to achieve the maximum economic saleability.  ", "CSY3050 \u2013 Visual Studies for Games 3  Description:  This module builds on the level five visual studies module with the aim of providing learners with the opportunity to expand on skills and understanding, learnt in the first two years, through the vehicle of an associated creative project. Learners will be encouraged to further develop individual design philosophies and styles within the learning constraints of a creative brief. The module provides the opportunity for learners to research, integrate and apply established working practices, concepts and principles within a commercial setting and to deadlines.The two items of assessed work associated with Visual Studies 3 are intended to support:1.\tThe ?Art Director Portfolio, Final Major Project? level six module2.\tTo further enhance individual learner portfolios to meet requirements for interviews (ongoing practice)  ", "CSY3022 \u2013 Digital Signal Processing  Description:  The purpose of this module is to give an understanding of the theory, design and structure of both the hardware and software used in digital signal processor systems and their application in real world situations. This module requires a significant practical element delivered as formal laboratory sessions.  ", "CSY3031 \u2013 Group Project 3 (Games)  Description:  The purpose of this module is: to emphasie independent learning, development and responsibility, through the creation of a social game following industry practices; implement production process and design of the groups games, through self-directed and supported support from a module supervisor in conjunction with some, tutor lead lectures; implement a game to demonstrate the understanding of the complete development life cycle; publication of the game in the public domain.  ", "CSY3051 \u2013 Professional Practice in Games  Description:  The main aim of the module is to ensure students are fully aware of the needs and expectations of the contemporary digital industry through an understanding of its social, economic and cultural climate. The module aims to enable students to pitch projects in terms of concept and business models; establishing and maintaining a personal website; identifying trends and market possibilities; encouraging participation in competitions; developing presentation and self-promotional skills; making job applications and preparing for interview.  ", "CSY3057 \u2013 Cyber Security Management  Description:  This module examines the concepts and practices underlying effective cyber security management. Students learn strategic components of managing for successful cyber security, with emphasis on information protection, compliance, standards and ethics. Students are equipped to design an effective cyber intelligence framework and draft appropriate security policies aligned with business requirements.  ", "CSY3055 \u2013 Natural Language Processing  Description:  This module introduces the most recent theories, methods, and tools in Natural Language Processing (NLP) to develop high-performance NLP-driven applications. Students apply traditional and advanced NLP methods to common use-cases, with a focus on establishing successful Machine Learning-based NLP solutions using cutting-edge Deep Learning algorithms and Transfer Learning methods.  ", "CSY3046 \u2013 Mobile Application Development 2  Description:  The purpose of this module is to understand modern mobile computing in terms of its hardware and software and the networks that support mobile devices as well as to implement software to run in a mobile computing context.  ", "CSY3062 \u2013 Cybersecurity and Applied Cryptography  Description:  This module provides students with the necessary practical skills and theoretical understanding of the technologies used to secure communications and protect the privacy of users within an online environment. Concepts introduced, and skills learnt, provide the necessary technical underpinning to enable the student to address the issues of effective Security.  ", "CSY3034 \u2013 Business Intelligence  Description:  The purpose of this module is the link between business and IT, allowing student to use and evaluate technologies and infrastructures needed to synthesize valuable information providing businesses with a competitive edge. Data analysis, reporting, and query tools are used to develop insights for business decisions. Business Intelligence (BI) represents a category of applications and technologies for gathering, storing, visualising, analysing, and providing access to data to make informed business decisions.  ", "CSY3060 \u2013 Advanced AI and Applications  Description:  The purpose of this module is to: teach students the fundamental theories and practical applications of advanced artificial intelligence techniques including artificial neural networks, image classification and object detection.  The underpinning concepts will be introduced, followed by examples of how responsible and ethical artificial intelligence applications are developed and tested.  ", "CSY2133 \u2013 Games Production  Description:  This module guides students towards producing working finalised levels of digital games using approaches relevant in modern industry and understanding how to make an immersive and fully interactable game. Students will engage with user testing, build cycles, and refined software skills necessary to deliver an effective product.  ", "CSY3056 \u2013 Development Operations and Software Testing  Description:  This module equips students with the skills to work in environments using modern development techniques and knowledge of the development operations role in software development.  ", "CSY2094 \u2013 Systems Design and Development  Description:  This purpose of this module is to extend and apply system design and development to large scale systems; explore building GUIs  so that the idea of specifying general software components and implementing re-usable classes will become familiar; provide tools and skills which the student will require when encountering design projects.  ", "CSY2135 \u2013 Mathematics For Computer Games  Description:  In this module students acquire the essential mathematic skills which underpin computer games programming. Students will develop skills in Algebra, Geometry and Calculus in the context of computer games programming.  ", "CSY2131 \u2013 Design and Development for Games  Description:  This module guides students towards producing working prototypes of digital games using approaches relevant in modern industry and understanding how to make a playable and entertaining game. Students will engage with design principles, iteration cycles, and practical software skills necessary to deliver an impactful game demo.  ", "CSY2091 \u2013 Mobile Application Development  Description:  This module is designed to give an understanding of the technologies (hardware/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ", "CSY2134 \u2013 Interaction Design for Games  Description:  This module develops learner?s knowledge of designing to enhance the overall player experience. Learners will implement essential user experience principles to enable the design of rewarding prototype gameplay mechanics. This will produce interactive experiences that meet the requirements of varying target platforms and most importantly, the player.  ", "CSY2087 \u2013 Data Structures and Algorithms  Description:  This module provides  students with a conceptual understanding of common data structures and algorithms used in Computer Science and Software Engineering. It enables students to implement and evaluate a selection of algorithms and abstract data types, including linked lists, stacks, queues, graphs and binary trees using an object-oriented language.  ", "CSY2084 \u2013 Ethical Hacking and Penetration Testing  Description:  This module equips students with theoretical awareness and practical skills to promote the protection and privacy of user?s data within an online environment.Students examine and use Industry standard tools, techniques, and documentation within the Ethical and legal framework for maintaining an effective Cybersecurity environment  ", "CSY2082 \u2013 Introduction to Artificial Intelligence  Description:  The module introduces fundamentals of data science and machine learning. Students will gain understanding of ethical and legal considerations when analysing data and acquire skills to address bias. Students will practice using data processing, modelling and visualisation tools for problem solving of practical challenges and the development of AI-driven applications  ", "CSY2058 \u2013 Indie Games Development  Description:  The purpose of this module is to: introduce the concepts and the fundamentals of Indie Games design, programming and development; to gain in-depth understanding of real-time animations for computer games applications; to further understand the process of computer games programming and development using game engines; to gain the technical skills by developing a 3D application project.  ", "CSY2092 \u2013 Operating Systems  Description:  The purpose of this module is designed to give an understanding of the theory, application, structure and design principles of operating systems. This module requires a significant practical element delivered as formal laboratory sessions.  ", "CSY2085 \u2013 Server Administration and Security  Description:  This module equips students with the skills to create a secure hosting environment and knowledge on how to deploy a website live on the web using modern concepts such as containerisation and a focus on security.  ", "CSY2137 \u2013 Programming 3D Computer Games  Description:  The purpose of this module is to introduce the skills, principles and concepts necessary to develop high-performance 3D computer games. Students will construct appropriate algorithms to develop interactive gaming applications using contemporary game engines such as Unreal or Unity.  ", "CSY2136 \u2013 2D Graphics Programming for Computer Games  Description:  This module explores the use of 2D graphics for computer games, and primarily focuses on fundamental mathematical techniques that underpin the manipulation and display of 2D images and objects. The module addresses key aspects of the human visual system and how it governs our interaction with the digital domain.  ", "CSY2130 \u2013 Digital Sculpting for Character Art  Description:  The purpose of this module is to develop students? skills in 3D digital character sculpting. Students will design and build 3D character models through the study of organic forms such as anatomy, skin, hair and clothing with consideration of polygonal topology and rigging for animation  ", " CM30082: Individual project To facilitate the development of an individual Computer Science Project according to an agreed project proposal. To develop skills in research and in the application of new and previously acquired knowledge to the on-time development of a computer science product.   The requirements of a final year Computer Science project: selecting a project and preparing the proposal, with project bounding and planning using appropriate Project Management techniques. Effective and ineffective written communication. When to use graphs, diagrams and pictures. Citing and use of references. Styles of written English. The project dissertation. Conducting effective background research. Review and relation to the project of: laws relating to intellectual property, copyright and patent, Data Protection and Freedom of Information laws, professional practice, ethical experimental practice.\n The programme of study for each project will be that defined by the agreed project proposal. Individual project supervisors provide academic direction and appropriate tutorial support during the project. This will include direction to appropriate academic material and skills training that may be required by the student.   1. To apply background research to the development of a new product or the production of original research results;\n 2. To apply appropriate management techniques, preparing and using a project plan, and to adapt the plan in the face of resource constraints;\n 3. To be able to learn independently and transfer knowledge into unfamiliar situations in a spirit of critical enquiry;\n 4. To be able to gather requirements and translate these into objectives within a project plan constrained by available resources;\n 5. To understand the requirements for academic writing, including referencing and the appropriate use of graphs, diagrams and tables;\n 6. To investigate, select and apply appropriate methods, tools and techniques for the development and delivery of a computer science product;\n 7. To demonstrate understanding of relevant legislation and ethical practice in the specification, design and development of a software product or experimental process;\n 8. To be able to evaluate systems in terms of general and specific attributes;\n 9. To be able to critique personal performance and achievement within the project;\n 10. To demonstrate academic writing skills within the production of a project dissertation. \n  ", "CS115 - Integrated Project 1 This class enables participants to apply aspects of their degree course in an industrial context and so to understand the complexities of commercial software development.&nbsp; The nature of the personal development plans and e-portfolio of evidence will vary depending upon the participant\u2019s working environment and will be identified through discussion with the participant, their employer and learning adviser. They will be expected to submit basic portfolio evidence and a reflective commentary associated with their evidence. Formative exercises will be used to establish personal development planning skills, such as objective setting. Participants will also be required to keep a weekly journal. After completing this class participants will be able to:&nbsp; Apply taught theories within an industrial context.&nbsp;  Display an appreciation of good software development practices within their work place.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices. ", "Foundations of Professional Software Engineering COMPSCI1019   This course is intended for Graduate Apprenticeship students only.   &nbsp;   Students on the GA programme will be going straight into a working environment, so it is important that they unde  rstand the fundamentals of working as a professional. This course will introduce them to many facets of software development beyond simply writing code, which will be important to prepare them for professional work.     The aim of this course is to impart a breadth of knowledge about software engineering in a professional environment. This knowledge will cover ethical issues, design lifecycles, development methodologies and security factors. It will also develop their ability to critically assess software development design decisions. Students should also develop an understanding of common software development tools and packages on a conceptual level to make their transition into the workplace more efficient.     By the end of this course students will be able to:    1.   Discuss ethical and legal issues faced by professional software developers  ;    2.   Describe  &nbsp;the basic concepts of software engineering;    3.   D  escribe  &nbsp;different approaches to software testing  ;    4.   Evaluate object-oriented design patterns in order to contrast workplace practices  ;  &nbsp;    5.   Appraise workplace practices and methodologies in order to critically discuss their application  .  ", "CS121 - Programming with Python The aim of this class is to introduce students to basic coding skills, enable them to gain an understanding of basic principles and develop basic competence in programming in a modern industry standard programming language.  Simple data types (numbers, strings, simple list data structures and booleans)&nbsp;  Simple operators (assignment, arithmetic and string manipulation)&nbsp;  Control flow (conditional and iteration)&nbsp;  Manipulating simple data structures (lists, sets, and dictionaries)&nbsp;  Structuring code (functions)&nbsp;  Error handing&nbsp;  Objects&nbsp;  Library classes and Documentation&nbsp;  Testing and Debugging&nbsp;  Input/Output  After completing this class participants will be able to:&nbsp; understand simple data elements and basic data structures of the Python programming language.&nbsp;  understand main control and flow structures of the Python programming language.&nbsp;  understand and be able to develop programs using the Python programming language.&nbsp;  understand and be able to use objects in the Python programming language.&nbsp;  translate a specification for a moderately difficult real-world problem into a working python program which provides a solution to the problem posed.&nbsp; ", "CS4001 - Programming (2023/24)  \nThis is an introductory programming module, designed to develop interest, ability and&nbsp; confidence&nbsp; in&nbsp; using&nbsp; a programming&nbsp; language.&nbsp; Students&nbsp; will&nbsp; gain&nbsp; the&nbsp; basic knowledge&nbsp;&nbsp; and&nbsp;&nbsp; experience&nbsp;&nbsp; to&nbsp;&nbsp; solve&nbsp;&nbsp; simple&nbsp;&nbsp; programming&nbsp;&nbsp; problems&nbsp;&nbsp; using established techniques in program design, development and documentation. It is expected that on completion of this module, students will be able to design, implement and test object-oriented programs. The module also enables to self-study a popular programming language and obtain a completion certificate. The&nbsp; student&nbsp; is&nbsp; also&nbsp; expected&nbsp; to&nbsp; develop&nbsp; their&nbsp; confidence&nbsp; needed&nbsp; to&nbsp; program solutions to problems through a series of practical programming exercises. \n \nAssessment:&nbsp; Multiple&nbsp; choice&nbsp; test (30%) + Programming certificate(10%)&nbsp; +Coursework&nbsp; (60%)&nbsp;&nbsp; [Pass on aggregate]   \n\u2022 Designing, coding, documenting and testing programs using an appropriate environment. (LO3, LO4, LO5) \n \n\u2022 Object-oriented elements, including the use of classes and objects. (LO1, LO3) \n \n\u2022 Data storage and memory concepts. (LO1, LO2) \n \n\u2022 Method calls and parameter passing. (LO1, LO2) \n \n\u2022 Iteration and selection constructs. (LO1, LO2) \n \n\u2022 Relational, logical and arithmetic operators. (LO1, LO2) \n \n\u2022 Inheritance and polymorphism. (LO3) \n \n\u2022 Abstract classes and interfaces. (LO2, LO3) \n \n\u2022 Introduction to collections. (LO3) \n \n\u2022 Graphical user interfaces. (LO3) \n \n\u2022 Exception handling Assertions. (LO1, LO3) \n \n\u2022 Independent study of a popular programming language (LO6)   \nLO1 - Demonstrate an understanding of programming concepts \nLO2 - Analyse a requirements specification and provide a software design satisfying the requirements \nLO3 - Apply object-oriented concepts to solve programming problems in software implementation and build graphical user interfaces \nLO4 - Describe and utilise known techniques for documenting and testing software \nLO5 - Critically evaluate and reflect on their learning, development and achievements within the context of program development \nLO6 \u2013 Independent study of a popular Programming Language. ", "CSY1901 \u2013 Digital Art Practice  Description:  The purpose of this module is to enable students to develop an essential set of creative and technical skills and techniques in order to initiate, originate, develop and communicate creative ideas and concepts within a digital art context.  ", "CS5003 - Data Structures and Specialist Programming (2023/24)  \nThis module further develops students\u2019 knowledge and skills in developing software applications for solving problems. It focuses on the data structures and algorithms in programming and the software technologies for building standalone, networked and Internet applications. The module is designed to enhance employability through the use of modern industrial tools and technologies, and familiarisation with the software development life cycle. \n \nThe key skills and knowledge to be gained are: \n \n\u2022Provide students with an understanding of theoretical concepts related to the use of data structures, algorithms, programming patterns and software infrastructure in standalone, networked and Internet environments. \n \n\u2022Develop students\u2019 analytical skills in the context of processing, generating, transforming, transporting, storing, retrieving, and presenting data. \n \n\u2022Enhance students\u2019 practical skills using appropriate methods and techniques for designing, programming, and integrating software applications using user interfaces, data structures and persistent storage. \n \n\u2022Provide students with an understanding of programming during the different stages of the software development lifecycle. \n \n\u2022Enable students to apply analytical and practical skill in solving typical problems in standalone, networked and Internet environments. \n \n\u2022Enhance students\u2019 experience and employability through the use of appropriate current technologies, enterprise tools and development environments during software development.   \nData structures, such as arrays, linked lists, stacks, queues and trees. (LO1, LO6) \n \n\u2022 Recursion, iteration, files, streams, sorting and searching algorithms. (LO1) \n \n\u2022 Collections. (LO1, LO2) \n \n\u2022 XML. (LO4) \n \n\u2022 Error handling. (LO3) \n \n\u2022 Threads. (LO2) \n \n\u2022 Design patterns e.g. MVC. (LO2, LO3, LO4) \n \n\u2022 Software development environments. (LO4, LO5, LO7) \n \n\u2022 Graphical User Interfaces. (LO3) \n \n\u2022 Persisting Data using e.g. SQL, JDBC. (LO4, LO5) \n \n\u2022 Client/server network programming using e.g. sockets. (LO2) \n \n\u2022 Web Client-side and Server-side Programming using e.g. servlets/JSPs. (LO3, LO4)   \nOn successful completion of this module, students will be able to: \n \n- LO1: Specify suitable data structures, implement corresponding algorithms for data processing and estimate their complexity in terms of execution time and memory occupation. \n \n- LO2: Use appropriate program design patterns and implement interactive programs working in a standalone, client-side, server-side, and client/server mode of operation. \n \n- LO3: Design and implement GUIs for interactivity. \n \n- LO4: Manipulate data sources for efficient storage, retrieval, and exchange of persistent data in formats such as text, XML and databases using libraries. \n \n- LO5: Build dynamic Web sites for server-side processing using libraries. \n \n- LO6: Interpret and transform design specifications into software applications within development environments and test and deploy such applications using libraries. \n \n- LO7: Critically evaluate software development within the various stages of the software product lifecycle. ", "Team Project ESE (H) COMPSCI4044   This course gives students the experience of working on a substantial team based software project.  The course provides the opportunity to apply the principles, practices and tools learned during the associated Professional Software Development (H) course.     To introduce students to the constraints and challenges of substantial, long lived software development projects.  To provide the opportunity to practice software industry standard practices and tools for managing the complexity of large scale software development.     By the end of this course students will be able to:    1.   Manage a substantial team based hardware and software project in a disciplined and organised manner  ;    2.   Work with a customer in a problem domain to elaborate, specify and refine requirements  ;    3.   Select, and employ industry standard software practices and tools as appropriate within a software process  ;    4.   Present project progress through short demonstrations  ;    5.   Review, analyse and adapt project processes within a process improvement framework.  ", "CS5002 - Software Engineering (2023/24)  \nThis module provides a systematic approach to software analysis, design, construction, testing, deployment, and maintenance. The module also broadens the student\u2019s knowledge of software engineering and systems development methods, techniques and tools. The general principles of Software Engineering and Systems Development will be introduced; notably the software life cycle and different software development approaches.&nbsp; Students will be able to choose appropriate software development methods and apply them to case studies. They will use a variety of critical techniques and tools to model requirements and logical design.&nbsp; \n \nStudents will apply their knowledge of computer systems and application areas to produce outline physical designs. Students will develop project planning and management, teamwork and communication skills, taking into consideration risk/safety, security, and professional and legal issues in the development of software products, information systems and services. Experience of working as an individual and a team member on a software development case study will enhance students\u2019 employability.   \nThe main topics of the module syllabus include: \n \n1. The distinction between software products, information systems and services. (LO1) \n \n2. Systems Analysis and Design applied to the development of Information Systems. (LO2, LO3, LO4, LO6) \n \n3. Software Engineering applied to the development of software products. (LO1, LO2, LO3, LO5, LO6) \n \n4. Software Life Cycle: Requirement specification, System Modelling, Design (including system architecture, software components and user interfaces etc.); Construction; Testing; Transition; Maintenance. (LO3, LO5) \n \n5. Classification of software development approaches \u2013 (e.g., iterative/waterfall, data-driven/process-driven, structured/object-oriented, prototyping etc.). (LO2, LO3) \n \n6. Software development methodologies (Agile Software Development, Rational Unified Process, DSDM, Experimental Prototyping etc.): overview description of main stages and their aims, purpose, and relationship between different techniques. (LO2, LO3, LO5) \n7. Modelling techniques: fundamental UML analysis and design modelling techniques \u2013 Use Case models, Communication diagrams, Class diagrams, Sequence diagrams, State Charts, deployment diagrams, etc. (LO3, LO4, LO5) \n \n8. Component Technologies for Software development. Programming Paradigms, Design Patterns and Implementation Frameworks. Development of Software Components using programming languages, IDEs and CASE Tools. Software System Integration and Software reuse. (LO2, LO3, LO5) \n \n9. Introduction to software testing approaches component, integration, system and sub-system testing. (LO1, LO3, LO5) \n \n10. Introduction to information security, risk and security management. (LO4, LO5) \n \n11. Introduction to principles and concepts of software project management, including project planning and estimating, monitoring and control, risk, quality and configuration management. (LO5, LO6) \n \n12. Project management tools and techniques, e.g., Gantt chart, network diagrams, critical path analysis, cost-benefit analysis, earned value, and work breakdown structure. (LO2, LO5, LO6)   \nOn successful completion of this module, students will be able to: \n \n- LO1: Demonstrate an understanding of the concepts and principles of system and software development, considering legal, ethical, social and professional (LESP) issues. \n \n- LO2: Demonstrate a systematic understanding of the main stages of software engineering within a range of standard software development methods and an awareness of supporting CASE tools. \n \n- LO3: Demonstrate practical skills in building fragments of software systems using suitable design patterns and apply a range of key modelling techniques appropriate for development in various problem domains. \n \n- LO4: Recognise information security and security risk issues and demonstrate an awareness of software architectures and design guidelines for safe and secure systems development. \n \n- LO5: Demonstrate an awareness of software architectures and design guidelines for safe and secure systems development and describe the essential concepts of project planning, risk analysis &amp; management, and quality and configuration management. \n \n- LO6: Apply key project management concepts, tools and techniques to a given specification in teams and individually. ", "CS256 - Integrated Project 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Apprentices will undertake the following.&nbsp; A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;  Work-based learning which includes:&nbsp;  Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Producing personal development plans.&nbsp;  Maintaining a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;  Producing evidence that they meet a set of competencies defined by a recognised professional body.    After completing this class participants will be able to:&nbsp; Display an understanding and application of good software development practices within their work place.&nbsp;  Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies. ", "MA4005 - Logic and Mathematical Techniques (2023/24)  \nThis module develops a range of mathematical techniques including set theory, logic, relations and functions, algebra, differentiation and integration.&nbsp; The techniques provide the foundation for further study of Mathematics, Computer Science and Computer Games Programming and Computer Systems Engineering.   \n\u2022 Set Theory: Definitions, Representation, Operations, Laws, Simplification, Cartesian Product and Power Set. (LO1) \n \n\u2022 Propositional Logic: representation of simple verbal arguments; truth-tables; logical equivalence, validity and consequence, logic circuits. Predicate logic. (LO2) \n \n\u2022 Relations &amp; Functions: Relations: representations of relations (matrix and digraph); equivalence relations; partitions; partial orderings. Functions: ways of defining functions; composition; inverse functions. (LO3) \n \n\u2022 Algebra: Basic numbers, indices, brackets; Manipulation of algebraic expressions; Linear and quadratic equations. \n \n\u2022 Functions. Graphs; Exponential function and natural logarithm; Trigonometric functions. Differentiation of basic Polynomial, exponential, Logarithms and Trigonometrical functions; Stationary points. Indefinite and definite integrals; Area under a curve. Application to kinematics. (LO4) \n \n\u2022 Matrices Representation of the co-ordinate plane. Use of matrices to represent the vertices of a plane figure. Simple transformations. Vector Algebra. Matrix Algebra. Application to computer graphics. (LO5)   \nAfter successful completion of this module students should be able to: \n \nLO1 Understand the meaning of mathematical definition of relations and to determine&nbsp;which relations are equivalence relations. \n \nLO2 Understand the meaning of mathematical definitions of sets/propositions and perform set/logic operations. \n \nLO3 Demonstrate skill in formulating, manipulating and solving algebraic equations. \n \nLO4 Use functions appropriately and identify their graphical equivalents. \n \nLO5 Demonstrate skill in, and application of, the techniques of vector algebra,&nbsp;Differentiation and integration. ", "CT4005 - Computer Hardware and Software Architectures (2023/24)  \nThe module introduces students to the basics of Information Technology; past, current and future trend in computer systems. The detailed design of a small-scale Computer Systems is presented where students have the opportunity to build, configure and test a computer system for a given application. Students will identify the basic features of the Windows operating system and its elements. Health Safety issues and the safe disposal of equipment is also covered leading to an understanding and appreciation of social, ethical, environmental and economic issues related to computer\u2019s hardware and software element. The module aims to \n1. Introduce students to the fundamental concepts of Information Technology and basic networking, \n2. Provide a working technical knowledge of modern computer systems and their respective components, \n3. Introduce Operating systems by focusing on Windows products, identifying similarities and differences, \n4. Identify the correct approach to preventive maintenance and upgrading and troubleshooting \n5. Introducing students to Assembly language and how it interacts with hardware \n6. Awareness of social, environmental, commercial and economic aspects of PC technology   \nIntroduction to Information Technology \nComputer Architecture, elements and their operation in a typical computer system \nThe relationship and role of hardware and software \nAssembly language programming \nThe design of Computer Hardware architecture, typical examples.&nbsp; Memory types and IO peripherals, \n \nLearning Outcomes: 1, 2, 5 \n \n&nbsp; \n \nThe detailed design of a PC computer system \nCommunications Channel; Serial, USB etc... \nOperating system fundamentals; Windows MACos Linux and mobile \nAdvanced hardware fundamentals, High performance systems \nServers Architectures and applications \nPrinters and printing \n \nLearning Outcomes: 1 - 3 \n \n&nbsp; \n \nPreventative maintenance and upgrading \nTroubleshooting hardware and software \nCurrent trends in Computer hardware / software architecture \nEthical, social, environmental, and economical issues related to computer hardware and software, users vs. designers \n \nLearning Outcomes: 3 - 5   \nAt the end of this module students should be able to: \nLO1. Describe computer technologies, hardware design and standards. \nLO2. Configure and install operating systems. \nLO3. Select appropriate hardware, installation, configuration and monitoring their operation in a responsible manner giving due consideration to safety, quality, budgeting \nLO4. Identify security threats and vulnerabilities; \nLO5. Evaluate emerging computer technologies. ", "CS357 - Integrated Project 3 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Apprentices will undertake the following.&nbsp; A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;  Work-based learning which includes:&nbsp;  Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Producing personal development plans&nbsp;  Writing weekly journal entries where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;  Producing evidence that they meet a set of competencies defined by a recognised professional body.&nbsp;    After completing this class participants will be able to:&nbsp; Demonstrate their understanding and application of good software development practices within their work place.&nbsp;  Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies. ", "How to Learn a New Language COMPSCI1020   This course is intended for Graduate Apprenticeship students only.    After this course students will be able to learn new programming languages themselves. It is designed to teach th  e fundamentals of programming in such a way that students will very easily be able to pick up new languages and be able to use them quickly in their respective workplaces. Glasgow graduates are good at picking up new languages quickly - we want to distil t  his skill into a single course without teaching specific languages.     The aim of this course is to provide students with the skills and knowledge to pick  &nbsp;up a new programming language.  &nbsp;The students will also be able to develop  &nbsp;existing programming skills in order to embed sound   programming language fundamentals and  &nbsp;techniques for structuring programs appropriately. The course also teaches the basics of  &nbsp;writ  ing  &nbsp;good clean code that is easy to read and maintain.     By the end of this course students will be able to:    1.   Demonstrate the use of a newly learned programming language to write simple programs    2.   Identify common concepts, characteristics and functionality shared by programming languages    3.   Understand the differences and similarities between programming language implementations and programming paradigms    4.   Recognise the importance of appropriate program design standards and clean coding concepts    5.   Apply knowledge of software engineering best practices to write easy-to-read and suitably formed programs    6.   Demonstrate the ability to make additions to a large codebase  ", "CS6006 - Distributed, Cloud and IoT Systems (2023/24)  \nThis module equips the students with professional knowledge and skills for developing contemporary data processing systems on the desktop, on the move, on the net, in the cloud and at the edge of the computational infrastructure. It systematically introduces the principles and models of functioning of modern data processing systems \u2013 distributed, parallel, embedded, portable and wearable. For this purpose, it utilizes the recent advances in infrastructural, technological and methodological support of software development \u2013 structured, semi-structured and connected data, wired and wireless communications, containerized and remote tools, cloud and edge platforms, DevOps movements, etc.   \n Tools  \n\u2022 Programming Languages, Frameworks and IDEs \u2013 JavaSE, JavaEE, Eclipse \n\u2022 Data Markup languages \u2013 XML, JSON, CWL \n\u2022 Software Repositories \u2013 GitHb, GitLab, etc. \n\u2022 Virtual Environments \u2013 Clouds, Virtual Machines, Serverless Programming, Microservices \n \n \n Data  \n\u2022 Data Sources \u2013 Files, Databases, Messages, Streams \n\u2022 Data Models \u2013 Relational, Object-oriented, Graph-based, File-based \n\u2022 Data Formats \u2013 Source, Encoded, Encrypted \n\u2022 Data Repositories \u2013 SQL DBMS, NoSQL DBMS, Graph DBMS, HDFS \n\u2022 Data Storage and Retrieval \u2013 serial, hashed, indexed \n\u2022 Data Serialization \u2013 Format-based, Encoding-based, Markup-based \n \n \n Communications  \n\u2022 Models \u2013 Stream-oriented/message-oriented, Stateless/stateful, Synchronous/asynchronous, Unicast/Multicast, etc. \n\u2022 Transport and Session Protocols \u2013 TCP, UDP, RTP, RPC, Wifi, Bluetooth \n\u2022 Presentation and Application Protocols \u2013 Telnet, FTP, RTP, HTTP, IIOP, SMTP, MQTT, SSL, TTL, etc. \n\u2022 IoT devices \u2013 sensors, microcontrollers and toolkits \n \n \n Software Components  \n\u2022 Data Processing Models \u2013 Operations, Threats, Services, Processes, and Transactions \n\u2022 Software Components \u2013 Modularization, Sharing and Interfacing \n\u2022 Concurrency and Synchronization \u2013 Operation-based, Data-driven, Event-driven \n\u2022 Transaction Processing \u2013 Isolation, Interleaving and Extending \n \n \n System Integration  \n\u2022 Software Architectures - Multilayer, Client/server, P2P, Hybrid \n\u2022 Execution Containers and Virtualisation \u2013 VM, Docker, Kubernetes \n\u2022 Dataflows and Sharing \u2013 Streams, Buffers and Replication \n\u2022 Process Workflows and Orchestration \u2013Drivers, Adapters, Brokers \n \n \n Security and Safety  \n\u2022 Identity Management \u2013 Registration, Identification, Authentication, Authorization \n\u2022 Execution Control \u2013 Sessions, Logging, Tracing \n\u2022 Security Protection \u2013 Network Firewalls, Antivirus software, Application Isolation \n\u2022 Safety Management \u2013 Monitoring, Reporting, Error Handling, Risk Mitigation   \nOn successful completion of this module the student should be able to: \n \nLO1: Demonstrate understanding of different principles, infrastructure and models of complex software systems for enterprise data processing \u2013 distributed, hierarchical and service-oriented. \nLO2: Design software architectures for data processing based on different information technologies, working on different platforms \u2013 desktop, portable, embedded, cloud-based and edge-based. \nLO3: Interpret, transform and implement data models and software specifications written in pseudo-code, UML modelling notation and XML/JSON markup languages into working code using enterprise programming language. \nLO4: Integrate existing software components, off-the-shelf products and cloud services for implementing distributed, mobile, embedded and wearable systems using suitable frameworks, design patterns, development tools and software APIs. \nLO5: Consider alternative solutions for implementation of data processing systems, justify design decisions, estimate trade-offs and critically evaluate their impact at different stages of the software system lifecycle. \nLO6: Undertake risk assessment and recommend appropriate security policy. ", "CS6P05 - Project (2023/24)  \nThe module enables students to demonstrate their acquired knowledge and skills through a systematic and creative investigation of a project work in accordance with their course requirements. The topic of investigation will cover a broad spectrum of various analysis and techniques and will lead to a comprehensive and concise academic/industry-related report. Students will be assisted in exploring areas that may be unfamiliar to them and encouraged to develop innovative ideas and techniques. Students will be able to choose a project that may require the solution to a specific problem, creation of an artefact in a real-world environment or an investigation of innovative ideas and techniques related to an area within their field of study. Collaboration with outside agencies and projects with industrial, business or research partners/ sponsors will be encouraged. \n \nAssessment: Project Report Interim Submission(25%) + Project process (25%) + Project Report Final Submission(40% -Pass on component) + Viva (10% -Pass on component). \n \nThe module aims to develop a wide range of subject specific cognitive abilities and skills relating to intellectual tasks, including practical skills and additional transferable skills of a more general nature and applicable in many other contexts. \n \nParticularly, the module aims to: \n \n\u2022Provide an opportunity to learn, through supervised experience, how to plan and carry out a project through a systematic and creative approach; \n \n\u2022Encourage innovation and originality in approach to investigating a problem in an area that may be unfamiliar to the student; \n \n\u2022Provide opportunity for in depth study of some specialised area of suitable scale and complexity relevant to their course of study; \n \n\u2022Raise awareness in potential business development opportunities in connection to the project work undertaken and of any ethical, legal and professional issues; \n \n\u2022Develop reporting skills as well as the ability to communicate results, conclusions, and the knowledge and rationale underpinning these, to specialists and non-specialist\u2019s audiences, clearly and unambiguously; \n \n\u2022Encourages reflection upon the relationship of design decisions to the appropriateness of the finished task; \n \n\u2022Enhance professional and personal development.   \nThe main areas of the module syllabus include: \n \nExplore unfamiliar territories and adopt a multidisciplinary approach where applicable; (LO1, LO2, LO3, LO4, LO5) \n \nDemonstrate confidence in applying original and innovative ideas; (LO1, LO2, LO5) \n \nApply suitable methodology, including use of software, evaluation and verification of results; (LO3, LO4, LO5) \n \nReflect critically upon the work undertaken and its limitations; (LO1, LO5, LO7) \n \nExecute a plan of work to achieve set targets within time limits; (LO4, LO6) \n \nProduce a clear and well-structured project report/documentation. (LO4, LO7)   \nOn completion of the module the student should be able to: \n \n- LO1: Carry out independent research and investigative work. \n \n- LO2: Apply knowledge, skills and abilities to the solution of a previously unfamiliar real-life problem. \n \n- LO3: Apply a structured design process to the development of the solution. \n \n- LO4: Apply project management techniques to ensure that the project is completed in a timely manner, meeting the requirements of the appropriate professional body or industry standards. \n \n- LO5: Select from a range of alternatives the optimal solution to a problem and to justify that selection, giving due consideration to risk management and security issues. \n \n- LO6: Carry that solution through to final implementation, demonstrating an ability to work in a team, if appropriate. \n \n- LO7: Formally and correctly report on the progress and outcomes of the process, and reflect upon their personal development, legal, social, ethical and professional issues. ", " CM40178: Research project To develop research skills by undertaking an original research project and interacting with other research scientists in an area related to:\n 1. Human computer interaction / media technology\n 2. Mathematical logic, symbolic computation, agents or artificial intelligence.   As a member of a research team, students will undertake original research in a topic related to the stream they have chosen.  Research training, seminar participation training, report and journal/conference paper preparation training will be undertaken by the student.   A student will be able to: \n 1. Identify the tasks to be completed in a research project proposal, plan a scheme of work.\n 2. Undertake a literature search and critically evaluate the contents of this search.\n 3. Assemble and create the necessary software tools.\n 4. Carry out the research to a professional standard, interacting with colleagues and reporting the research. \n 5. Critically evaluate the research.\n 6. Demonstrate the successful completion of the research in a well-structured and coherently written dissertation,\n 7. Report the research to the wider research community via reports, conference participation or research journal submission. \n  ", "CSY1900 \u2013 Studying the Games Industry  Description:  This module provides an insight into the creative industries and the way they function. Through this, students will gain knowledge and understanding of the ways in which content originates, is constructed and is categorised using key theoretical frameworks. Embedded throughout this module, are a range of academic study skills.  ", "Algorithmic Problem Solving This module introduces students to mathematics, algorithms and data structures essential for computer science and computer games. The subject is developed from first principles in an applied context. This module will enjoy a close relationship with programming modules and prepare the student with essential, transferrable problem solving skills.    &nbsp;The module will be assessed by an open-book exam and in-course assessment.   ", "CSC2034 : Introducing Contemporary Topics in Computing The module provides students with an introductory understanding of a range of advanced areas in computing, based on research areas which the School of Computing at Newcastle is renowned for (and not covered in other Stage 2 modules). The module acts as introduction to these contemporary topics, and gives students insight into optional modules and project choices in preparation for Stage 3, while building on skills learned in Stages 1 and 2, accruing experience of how they are applied into more advanced areas of computing. The taught component of the module gives a \u2018taster\u2019 for each contemporary topic through lectures and practical sessions, along with general lectures on key skills and knowledge. This is followed by a period of project work in which students investigate one contemporary topic more deeply through guided independent project work.   \nEach topics taster will: \n\u2022  Introduce key concepts and definitions \n\u2022  Provide an overview of relevant techniques, paradigms, and tools \n\u2022  Cover ongoing research and potential ethical issues \n\u2022  Place the topic in the wider context of computing and industry  \nGeneral lectures cover: \n\u2022  Reflective writing \n\u2022  Reading academic papers \n\u2022  Finding and managing information \n\u2022  Writing technical reports  \nWe aim to cover five topics, delivered by lecturers, and supported by demonstrators, who are active researchers in these areas. Current topics are:  \n\u2022  Science of Programming \n\u2022  Human Computer Interaction \n\u2022  Biocomputing \n\u2022  Computer Game Engineering \n\u2022  Data Science  \nNote that due to the nature of research, these are topics subject to change. ", "CSC1035 : Programming Portfolio 2 By the end of this module students will have gained further experience in, and a knowledge of the basic concepts of all stages of the software engineering lifecycle, both as individuals and as members of a team, namely requirements analysis, design, coding, testing and maintenance, building on the experience gained in Programming Portfolio 1. Emphasis will be placed on the development of programming skills. An active learning, problem-based approach is adopted. \nStudents will be given a series of practical problems that relate to various stages of the software engineering lifecycle. Supplementary lecture materials will introduce the topics to be tackled, and how to tackle them, but these topics will relate to aspects of the material presented in one or more of the co-requisite modules Computer Systems Design, Information Storage and Retrieval, and Fundamentals of Computing, thus giving students practical enrichment of that material, and/or to specialisms that can be studied at Stages 2 and 3 (HCI, Security, Bio, Games, Software Engineering, Data Analytics), thus enabling students to gain a flavour of what is available in the later stages of their programme of study and allowing them to make an informed choice towards the end of Stage 2. Students will have gained further awareness of the legal, social, ethical and professional aspects of being a practicing software engineer. Students expand their knowledge and experience in all stages of the software engineering life- cycle.  \nLectures and tutorials expand upon general principles of:  \nThe building blocks and structure of computer programs  \nData structures, collection classes, generic types and iteration  \nTime, space, speed trade-offs in program design   \nUnderstanding programming abstraction  \nExploring and realizing higher level abstractions   \nError checking/programming with exception handling   \nRecursion with examples from sorting and searching   \nEvent Driven Programming  \nDesign patterns: immutability, factories, singleton, composition.  \nStudents will gain further insight into the legal, social, ethical and professional aspects of being a software engineer ", "CSC2033 : Software Engineering Team Project To provide practical experience of real-world software development and team working. \nTo develop employability skills and provide experience of working with appropriate industrial-strength tool-chains \nThis module gives students the opportunity to work within a team situation that simulates a real-world environment. The module takes place over an intensive period of 7 weeks and consists of some career development activities as well as practical software engineering experience. \nCareer Development. A variety of employability-based activities will take place throughout the module, including CV and covering letter workshops which will be held to help students develop their CV writing skills.  \nPractical Software Engineering. Students will research into relevant skills required for a software engineer (beyond coding, for example project management and collaborative development). All students are allocated into teams and given a project brief, alongside a course of lectures on software processes and lifecycles and techniques. This is supported by toolchain tutorials where experience will be gained with a variety of tools for collaborative planning, building, verification and release of software systems by working on small- scale tutorial examples. \nFor the remainder of the module teams will work on the project, with guest talks from industry practitioners where possible. Progress will be checked regularly during practical labs or tutorials, whereby all team members are expected to be able to briefly explain their current work, and also through timesheets and weekly reports. Project work will continue into the normal semester 2 exam period with a final trade fair and demonstration and submission of final reports, peer assessment and self-reflection. \nThe class will be divided into a number of teams with between 5 and 10 students in each team. Team membership will be determined by the module leader \u2013 team will comprise of students with diverse backgrounds, abilities and skills. Students will need to make the most of the skills within their team and allocate tasks and roles accordingly. Professional skills: \n- &nbsp; &nbsp;  &nbsp; The software engineering skillset \n- &nbsp; &nbsp;  &nbsp; Employability techniques i.e. interviews/CVs \nProcesses and Project Management: \n- &nbsp; &nbsp;  &nbsp; Life-cycle and process models \n- &nbsp; &nbsp;  &nbsp; Team organisation, roles and responsibilities \n- &nbsp; &nbsp;  &nbsp; Configuration management principles \nSoftware Engineering Techniques and Tools \n- &nbsp; &nbsp;  &nbsp; Requirements Engineering,  UML design, Principles of verification \n- &nbsp; &nbsp;  &nbsp; Tools for collaborative planning, building, verification and release of software systems ", "Object-Oriented Programming The module will introduce key aspects of the software development process (i.e. designing solutions, writing application code, developing documentation and formal approaches to testing).&nbsp;    Learners develop the essential skills required for software application development; this will include following best practices used by industry and the wider programming community.&nbsp;    For the assessment learners will need to build a simple application, demonstrate their understanding of programming fundamentals. Learners will also undertake a written reflection.    ", "Workplace Project Supplement COMPSCI4093P   By the time GA students   are in Level 4, they would have had a wide range of experience at the   workplace and  &nbsp;  can be expected to take on increasingly larger roles within their teams.   The  &nbsp;\"Workplace Assessment   Year   4\" module   will assess students on a substantial piece of work that they develop at   the   work  place  . This course  , \"  Workplace Project Supplement\",  &nbsp;is meant as a supplement   to that course,   for those students who wish to   do more,   larger  ,  &nbsp;and/or more ambitious project  (s)  &nbsp;in the workplace  .  &nbsp;This supplementary course will allow them to   spend more time at the workplace to focus on their project(s).  &nbsp;  They will   develop a   substantial piece of work  &nbsp;  which solves a given problem  ,   documenting their progress and rationale throughout the duration of the project  .     The aim of this course is to allow Graduate Apprenticeship students in the final year of the program   to   enhance  &nbsp;their work-based learning by   spend  ing  &nbsp;  more   time in the workplace   on more, larger, and/or more ambitious project(s) on top of the project they are already   submitting as part of the co-  requisite  &nbsp;\"  Workplace Assessment Year 4  \"   module  .  &nbsp;  &nbsp;     By the end of this course, students will be able to:    1.   Independently d  esign and construct   or extend   a substantial software product which demonstrates technical achievements in computer science  .    2.   Apply   technology  &nbsp;and  &nbsp;tools   in the workplace  .    3.   Manage technical skills appropriately to address a challenging problem in computer science  .    4.   Appropriately evaluate the outcome of their work.    5.   Communicate reflectively on their experiences and the relationship to theoretical material delivered at   university  .  ", "CSC1034 : Programming Portfolio 1 By the end of this module students will have gained, at an introductory level, experience in, and a knowledge of the basic concepts of all stages of the software engineering lifecycle, namely requirements analysis, design, coding, testing and maintenance. Particular emphasis will be placed on the development of programming skills. An active learning, problem-based approach will be adopted. Students will be given a series of practical problems that relate to various stages of the software engineering lifecycle. Supplementary lectures and online materials will introduce the topics to be tackled, and how to tackle them. Topics will be selected broadly from across computing,  thus giving students practical enrichment of that material, and/or to specialisms that can be studied at Stages 2 and 3 (HCI, Security, Bio, Trends in Pervasive Computing, Games, Software Engineering, Data Analytics). Students will have gained awareness of the legal, social, ethical and professional aspects of being a practising software engineer. \u2022  An introduction to all stages of the software engineering lifecycle.   \n\u2022  An introduction to general principles of programming languages and their realisation in a representative  \n   language.  \n\u2022  An introduction to the legal, social, ethical and professional aspects of being a software engineer. ", "Development Project This module will give students an opportunity to undertake a programming project. Working in small teams, students will design, develop and demonstrate a software solution that relates to an agreed requirements specification following an agile development methodology. The module is assessed by continuing in-course group assessment that requires the development of a software solution.  ", "   ", "Information Systems Students will learn the tools, techniques and methods associated with information systems development, such as gathering requirements, requirements modelling, designing data models and implementing a solution. The module is assessed by a single individual in-course assessment requiring students to analyse, design and build a small-scale information system.  ", "Systems Engineering (COMP0016)   Aims:  \n\n The module aims to take students through the experience of Research and Development (R and D) processes by developing a reference Proof of Concept design and prototype implementation for a complex and substantial software application over an extended period of time. \n\n Students will work with an external project partner to obtain requirements and get feedback for a project partner-defined problem. Experience of working with team organisation and management; develop and work to a plan, with weekly lab checks, project partner reports and deliverable milestones to be met; develop a practical understanding of how the research experimentation and development of a software system is organised and carried out, both in terms of team working skills and the technical knowledge required; practice using relevant skills and knowledge in completing tasks and milestones; develop writing, media production, presentation and communication (technical and customer facing) skills; and learn how to evaluate their work and team and individual performance. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how to work effectively with an external project partner and professional behaviour. \n\t Understand a software development process involving research and experimentation in an area of Computer Science. \n\t Organise a team and work effectively in a team. \n\t Understand how to undertake research to identify and use relevant ideas and technologies when developing software. \n\t Understand how to develop and test good quality software. \n\t Understand Research and Development approaches to requirements capture, HCI factors, and team-based development relevant to the projects undertaken. \n\t Write documentation and present results. \n\t Understand technical writing skills and share their awareness of legal issues as they apply to software development. \n   Indicative content:  \n\n Students will undertake a systems engineering project within the Computer Science Industry Exchange Programme (IXN) structure. The students will work in small teams, where each team works with an external project partner to develop a cutting-edge solution to a challenging problem defined by the project partner. The project partner will typically be from one of the following types of organisation: public sector, SMEs, large companies, charity, healthcare/NHS, external research institution, or UCL research centre. \n\n The project will be structured as a single major project portfolio, with a series of milestones, where each milestone involves completing a stage of the project: requirements, research into potential solutions, experiments and prototypes, definition of reference design, implementation, testing, and delivery. Each of these stages is to be documented on the projects team website. Each portfolio milestone is also a point of assessment. \n\n A number of teaching methods will be employed, including hackathon-style sessions, project sprints in labs and specific lectures. Weekly communications are needed with project partner, with weekly lab checks and project partner reports to track the project progress and team working. An Elevator Pitch to companies is to be given by each team. The final milestone will require teams to deliver a working version of their application, along with a project website documenting the project results. Any publication of results on behalf of the project partner is seen as an advantage. \n\n In addition, each student will write a technical report assessing the work done, the team members, and reflecting on what they have learnt, in particular the area of technologies they have studied. Each team is allocated a PGTA, who they will meet every teaching week to report on progress and get feedback. Each team also has an academic supervisor, who will monitor the overall status of the team, and can provide more specialised support and feedback. The project finishes with delivery of their software to their project partner in a usable state with a joint code walkthrough, an assessed presentation and delivery of all associated materials such as legal implications, manufacturing processes and others. The taught material will be directly relevant to, and needed for, the project work. The overall project work will be submitted as an online project portfolio made up of the milestones. \n\n  Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have experience of object-oriented programming.   ", "Individual Project for Year 3 BSc (COMP0029)   Aims:  \n\n The module aims to give students the experience of undertaking and completing a substantial piece of individual project work, applying knowledge learned throughout the degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a good academic standard via a written report.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Work individually to undertake a major project. \n\t Plan and coordinate the project activities to meet the deadlines. \n\t Make realistic work commitments. \n\t Write a substantial report to document the project results. \n\t Demonstrate good problem solving and evaluation skills. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  There is no set syllabus; students identify their chosen project topic and find a member of the academic staff who will act as the Project Supervisor. \n\t The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3. \n\t Students are responsible for organising and carrying out their project and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary. \n\t There are two formative milestones: (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what it is required to complete the project. These documents are prepared with advice from the Project Supervisor and must be approved by them to confirm the project is proceeding properly. \n  Project goals: \n\n  A BSc project is expected to have a reasonable level of challenge and depth and may include research-oriented goals as well as the practical application of Computer Science ideas and concepts. \n  Project report: \n\n  The final report documents the results of the project, and is expected to be a substantial, well-written, and properly structured document. Obtaining a higher module mark depends on submitting a good quality report, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content. \n  Reading list: \n\n  As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their Project Supervisor. \n   Requisites:  \n\n To be eligible to select this module, a student must be registered on a programme and year of study for which it is a formally available.   ", "Individual Project for Year 4 MEng (COMP0138)   Aims:  \n\n To give students the experience of undertaking and completing a substantial and challenging individual project running over both teaching terms, applying knowledge learned throughout their degree programme, including the skills of research, analysis, design, implementation, testing and evaluation. To document the results to a high academic standard via a written report. The project work should incorporate advanced ideas and methodologies derived from Year 3 and Year 4 modules, as well as emphasise research and evaluation skills. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Work individually to undertake a major project. \n\t Plan and coordinate the project activities to meet the deadlines. \n\t Make realistic work commitments. \n\t Write a substantial report to document the project results. \n\t Demonstrate good research and evaluation skills. \n\t Investigate and identify solutions to one or more challenging problems. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  There is no set syllabus; students identify their chosen project topic and find a member of the academic staff who will act as the Project Supervisor. \n\t The project begins in October and runs in parallel with normal teaching during terms 1 and 2. The submission deadline is early in term 3. \n\t Students are responsible for organising and carrying out their project and are expected to attend weekly tutorials with their supervisor during term time. Tutorials allow the supervisor to monitor the progress of the project, providing advice and feedback as necessary. \n\t There are two formative milestones: (i) the Project Plan submitted in mid-November, outlining the project aims and objectives, providing a work plan, and confirming that the project has started successfully, and (ii) the Interim Report submitted in late January outlining what has been achieved so far and what it is required to complete the project. These documents are prepared with advice from the Project Supervisor and must be approved by them to confirm the project is proceeding properly. \n  Project goals: \n\n  A MEng project is expected to have significant challenge and depth, reflecting that it is a Masters level project. The student is encouraged to do a research-oriented project and it is possible to submit a research paper in place of a standard project report. \n  Project report: \n\n  The final report documents the results of the project and is expected to be a substantial and properly structured document, or a properly constructed research paper. Obtaining a higher module mark depends on both submitting a good quality report or paper, as well as successfully undertaking the project work. The project guidelines available on Moodle give detailed information about the required content. \n  Reading list: \n\n  As every student undertakes a distinct project, there is no indicative reading list available. The student is expected to locate relevant information sources themselves with advice from their supervisor. \n   Requisites:  \n\n To be eligible to select this module, a student must be registered on a programme and year of study for which it is a formally available.   ", "Enterprise Project  This module will give students an opportunity to develop a solution, proposal, product or service in response to an enterprise challenge set by industry partners or business clients.&nbsp;        Working in small teams, students will take responsibility for determining project aims, objectives, roles, tasks, deliverables, schedules and documentation.&nbsp;         They will take a professional approach, informed by innovative industry practice, to deliver a successful project that meets the set challenge.&nbsp;         The assessment will involve students developing a solution, proposal, product or service and pitching it to academics and/or industry experts. The assessment also requires learners to reflect on the project process as a whole and review sustainability, diversity, ethical and legal issues considered and evaluate team members\u2019 performance. Learners will identify their own strengths and weaknesses and relate those to their future career aspirations.    ", "Secure Computers and Networks This module covers a comprehensive range of issues relating to computer and network security. It includes systematic approaches to managing security risks, identification and authentication, elementary cryptography, network technology and relevant security issues.&nbsp;    The module will also introduce students to basic network technology including devices such as routers, switches, firewalls, cabling and servers deployed as well as communication protocols and topologies to understand how they are used and function in the real-world.&nbsp;     The module is assessed by a\nsingle in-course (100%) assessment involving a mixture of short and longer (scenario-based) questions\ndocumented in a 2500-3000 word report, and producing the output from\ncryptographic tools.   ", "   ", "CS112 - Programming 1 The aim of the class is to give participants a solid foundation in Object-Oriented programming with Java which is probably the most widely used programming language.&nbsp;  Introduction to Objects: Objects and Classes. Class Definition. Fields. Basic Types (int, char, bool) and Strings. Methods. Parameters. Return Types. Scope. Visibility. Object Interaction. Class and Object Diagrams.&nbsp;  Selection and Iteration. Conditional Statements. Boolean Expressions. For Loops. While Loops. Nested Loops. Switch Statement.&nbsp;  Collections Arrays. ArrayLists ArrayLists. HashMaps. HashSets. Java API. Iterators. Foreach Loop. Generic Collections.&nbsp;  Inheritance and Interfaces. Inheritance. Overriding. Static and Dynamic Types. Subtyping. Polymorphism. Type Substitution. Interfaces. Abstract Classes. Object Class&nbsp;  Input-Output and Error Handling. Console Reading and Writing. File Reading and Writing. Exceptions. Defensive Programming. Testing and Test-Driven Development. JUnit. Debugging.&nbsp;  Graphical User Interfaces (GUIs) GUI Components. GUI Layout. Event Handling.&nbsp;  After completing this class participants will be able to:&nbsp; Appreciate the role of a high-level language within the context of a computer system.&nbsp;  Understand the program development process.&nbsp;  Understand the principles of program design and demonstrate their practical application.&nbsp;  Design, implement and test small software systems using a high-level language (currently Java) to conform to a specification.&nbsp;  Demonstrate familiarity with a sophisticated interactive development environment (IDE).&nbsp; ", "   ", "CS251 - Programming 2 The aim of the class is to further participants\u2019 skills in object-oriented programming, provide knowledge of key abstract data types along with their implementation and usage, and to provide experience in the development of larger scale software. The main goal is for participants to be able to develop larger programs with specialised data structures and utilising APIs from a specification. Participants will also gain an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types. The class will begin with a short revision of the concepts covered during year 1, CS112 Programming 1, e.g. Java basics, base types, objects, special types, selection, iteration, input/output, object-oriented design, inheritance, interfaces, abstract classes, exceptions.&nbsp;&nbsp;The following topics will then be covered.&nbsp; ADTs: Lists, Stacks, Queues, Sets, Trees, Graphs, Maps. Collections. Generics. Iterators.&nbsp;  Algorithms: Searching and Sorting. Graph Traversal Algorithms.&nbsp;  Efficiency and Complexity of Algorithms and Data Structures.&nbsp;  After completing this class participants will be able to:&nbsp; Understand and be able to implement a range of fundamental abstract data types.&nbsp;  Understand a number of essential algorithms that are closely associated with these data types.&nbsp;  Use these algorithms and abstract data types in practical applications.&nbsp;  Make a critical assessment of the performance of different implementations of algorithms and abstract data types.&nbsp;  Appreciate a number of fundamental computational problems, and be aware of real-world instances of those problems. ", "Systems Design and Databases  The production of a successful, robust, user-friendly system or application begins with the analysis of the stakeholders\u2019 requirements and a detailed design.&nbsp;&nbsp; \n\t\t \n\t\t\t\t \n\t\t \n\t\t This module introduces you to the concepts and techniques of systems analysis and design, enabling you to break down and simplify complex systems and represent these visually using industry standard approaches.&nbsp; In industry, the visual models are used to communicate designs to the developers and to the stakeholders prior to implementation. \n\t\t \n\t\t\t\t \n\t\t \n\t\t Additional techniques will be taught to design and implement a relational databases part of an information system. Using data modelling techniques, you will be able to define how the system will store the data and interact with it. \n\t\t \n\t\t\t\t \n\t\t \n\t\t A strong emphasis is placed on professional practice and transferrable practical skills, such as communicating design, structuring workflows with process models and requirements gathering, that will provide you with some of the essential skills you will need in industry. \n\t\t \n\t\t\t\t \n\t\t \n\t\t The module assessments comprises two components: A 2,000 word requirements\ndocument (40%) with CV/online profile and a database solution with 3,000 word report (60%). \n\t\t \n\t\t\t\t \n\t\t   ", "Programming Fundamentals An introduction to programming intended for those who have little or no experience in programming, using tools that are easily available, easy to use, and familiar to anyone who has used a computer.&nbsp;    Students will learn how the programming language constructs are applied to different problems of increasing complexity.&nbsp;     The module is assessed by continuing in-course assessment requiring students to demonstrate their ability to implement fundamental programming concepts in a given language.   ", "Team Project (H) COMPSCI4047   This course gives students the experience of working on a substantial team based software project.  The course provides the opportunity to apply the principles, practices and tools learned during the associated Professional Software Development (H) course.     To introduce students to the constraints and challenges of substantial, long lived software development projects.  To provide the opportunity to practice software industry standard practices and tools for managing the complexity of large scale software development.     By the end of this course students will be able to:    1.   Manage a substantial team based software project in a disciplined and organised manner  ;    2.   Work with a customer in a problem domain to elaborate, specify and refine requirements  ;    3.   Select, and employ industry standard software practices and tools as appropriate within a software process  ;    4.   Present project progre  ss through short demonstrations;    5.   Review, analyse and adapt project processes within a process improvement framework.  ", "Introduction to Programming and Discrete Structures This module will enable students to think programmatically about problems that are solved on a computer and help them develop problem-solving skills. There are two strands to the module.\n\n\u2022 The programming strand focuses largely on the practicalities of programming.  A programming language, Python 3, will be introduced, paying much attention to the fundamental elements of programming: algorithmic and functional decomposition, writing assignments, conditionals, loops and functions, and techniques for testing and debugging.  This will be illustrated with a progression of examples to help students develop good comprehension of code and the coding process.\n\n\u2022 The discrete structures strand focuses on understanding and reasoning about mathematical and logical structures that are of relevance to programmers.  It will introduce students to a coherent set of concepts from discrete mathematics and logic, including sets, relations, functions, propositions, predicates, and automata, and will illustrate how they may be applied in the modelling and solving of computational problems.  ", "Principles and Practices of Large-Scale Programming This module provides the knowledge and skills needed for developing a large scale software system using object-oriented tools and techniques, and an appreciation of the professional issues involved in such development, including working in teams.\nAlthough correctness is the sine qua non of software development, good program design which provides for maintainability and re-use will be important elements of assessments. Desirable design principles which foster good design will be woven into the narrative of this module in order to emphasise:\n\u2022\tmodularisation\n\u2022\tabstraction\n\u2022\treduced code duplication\n\u2022\thigh cohesion\n\u2022\tlow coupling\nObject-oriented design guidelines such as the following will be used in early examples and exercises, and then made explicit at a later stage:\n\u2022\tLaw of Demeter \n\u2022\tProgram to an interface not an implementation\n\u2022\tMVC\n\u2022\tRe-factoring\n\u2022\tDesign patterns - a selection  ", "Computational Thinking and Mathematics  This module introduces students to fundamental concepts of problem-solving, algorithms and data structure. It explains how algorithms and data structure can be integrated to construct solutions that can be applied to resolve complex computational tasks. Classic puzzles and recreational games will be used to demonstrate the fundamental building blocks of algorithms. Knowledge of design principles and proficiency in creating algorithmic procedures is developed by cultivating an ability to think computationally in solving puzzles and creating routines for playing simple, computer-enabled games. Assessment for the module will require students to build a portfolio of artefacts demonstrating their knowledge and ability to apply computational thinking principles to problem-solving and the design of algorithmic solutions. This may involve designing and implementing suitable algorithms and data structure for solving a puzzle or implementing a simple board game.   ", "From Silicon To C This module focuses on the principles and practicalities of the multilevel organisation of computer systems. Students will have opportunities to investigate and build computational structures in hardware, and to program with machine instructions and a simplified dialect of the C programming language and see how they support one another.\n\nThe abstractions available at higher levels (programming languages) will be de-mystified by progressively bringing them down to lower levels all the way to the silicon structures that serve as the foundation of any computer system. This will help students to learn high-level programming (when they do) in an informed and efficient way by creating cost intuitions that cannot be developed while keeping solely to abstract constructs such programming normally deals with. Students will be offered a significant number of development exercises ranging from very basic to challenging and will be helped.  Independent learning by practicing is key to this.  ", "   ", "Computational Problem Solving This module builds on concepts and practices taught in 4ECS2026 Introduction to Programming and Discrete Structures, continuing both strands but bringing them closer together.  It makes use of discrete mathematics and logic both as sources of example problems and as tools for describing and reasoning about programs.\n\n\u2022 In the programming strand the emphasis is on designing and implementing solutions to well-specified problems.  Students will be given guidance on problem representation and choice of data structure, and expected to choose / write appropriate algorithms for themselves, and to implement them in Python.\n\u2022 In the discrete structures strand the emphasis is on understanding how mathematical and logical structures and reasoning may be used in the service of programmatic problem-solving. This strand will also serve as a source of example problems for students to solve.  ", "Artificial Intelligence Cognitive technologies, such as Artificial intelligence (AI), are increasingly being used to solve business problems. Artificial intelligence, or AI, is concerned with not just understanding but also building intelligent entities, machines that can compute how to act effectively and safely in a wide variety of novel situations.&nbsp;    This module provides students with a general introduction to artificial intelligence, discussing real-world applications of AI, and its transformative power in our daily life. Thus, this module includes the fundamental concepts of AI, common frameworks used in the analysis and design of intelligent systems, generic algorithms used for their implementation and major techniques used in problem solving. The target is to provide students with the knowledge that will allow you to understand how to address AI problems, studying a wide range of AI techniques, applications, and developing solutions.&nbsp;     This module also introduces popular applications of AI (for example, game design, virtual agents, robotics etc.) and benefits of using AI (for example, how to enhance efficiency, productivity, and reduce costs).&nbsp;     The module will be assessed by a single in course assessment that will require the evaluation of the use of AI in recent and well-known products, and the development of a framework solution using AI techniques.   ", "Software Engineering Project This module is based around the identification and undertaking of an individual project.\nProject definitions will be provided covering a range of problems demanding Software Engineering principles to be explored and applied. The student is guided in their choice of project, based on their proven skills and interests. \nEach project is designed to support the student to develop deep and detailed learning in a subject are which develops Software Engineering principles and practice.\nThe project definition will also enable further development of skills for future employability in industry, including:\n\u2022\tproblem analysis and solution development\n\u2022\ttime management and planning\n\u2022\tcommunication\n\u2022\treport writing\n\u2022\tassessment of risk  ", "CSC2035 : Software Systems Design and Implementation To introduce the design and implementation of software systems.  \nThere are factors that we must take into account when designing and implementing software systems that either do not arise in application development or are less critical in application development. These include the longevity of systems compared to applications, agreement on shared abstractions that are often codified in interfaces and standards, and the conservation of resources to maximise their availability to applications. This module gives students an appreciation of such factors and their implications for good design and software development in general.  \nOperating systems and their extension to networks of systems are used as exemplars. The lessons drawn from their design and implementation are applicable not only to other systems but also to good applications design. The appreciation of their general applicability and the trade-offs involved will inform any future software development students undertake.  \nThe module is directly related to and builds on the Stage 1 module CSC1032 on Computer Systems Design and Architectures. The module is organised into three strands: operating systems, networks of systems and practical systems development work that complements and exemplifies the other two strands.  \nIn operating systems, the focus will be on processes and memory management, scheduling and the need for, and mechanisms to achieve, inter-process communication and concurrency control. In networks we cover the fundamental abstractions presented by the Internet, with a particular focus on achieving reliable communication over an unreliable network of networks.  \nSpecific topics covered in the theoretical strands include: \n-  the process model and process lifecycle \n-  process address space and isolation and virtual memory \n-  process implementation \n-  scheduling requirements and algorithms \n-  concurrent execution and mechanisms for data sharing \n-  the mutual exclusion problem and the implementation of solutions \n-  network topologies \n-  network protocols \n-  network layers and their realisation in TCP/IP \n-  internetworking and reliable communication ", "Team Project 3 COMPSCI3004   This course gives students the experience of working on a substantial team based software project.  The course provides the opportunity to apply the principles, practices and tools learned during the associated Professional Software Development (H) course.     To introduce students to the constraints and challenges of substantial, long lived software development projects.  To provide the opportunity to practice software industry standard practices and tools for managing the complexity of large scale software development.       By the end of this course students will be able to:    1.   Manage a substantial team based software project in a disciplined and organised manner.    2.   Work with a customer in a problem domain to elaborate, specify and refine requirements.    3.   Select, and employ industry standard software practices and tools as appropriate within a software process.    4.   Present project progre  ss through short demonstrations;    5.   Review, analyse and adapt project processes within a process improvement framework.  ", "COMP3012: \nINDIVIDUAL PROJECT (40 Credits)  To allow students to conduct a substantial piece of research into an unfamiliar area of Computing Science. \n\t\t\t To introduce the research methods and skills relevant for conducting such a project. \n\t\t\t To provide an opportunity for students to synthesise what they\u00e2\u20ac\u2122ve learned from other modules. \n\t\t\t To give students experience of working independently. \n\t\t\t To give students experience in writing up and presenting work in a scholarly fashion.   Students are expected to choose a project from a list offered by potential supervisors, or to propose their own project and find a suitable supervisor. \n\t\t\t Projects are inevitably and deliberately very varied in the topic they address and in the type of approach required. \n\t\t\t For example they may be practically or theoretically based. Many projects will consist of a combination of these. \n\t\t\t All projects allow opportunity for initiative by the student, and are open-ended in that they offer the potential for considerably more work than can be achieved in the available time. \n\t\t\t Project selection and a compulsory course on successfully conducting a project will take place during the Easter term of the 2nd year. \n\t\t\t Project work starts at the beginning of the 3rd year. \n\t\t\t One of the main outcomes of the project is a significant academic-quality report. \n\t\t\t Successful completion requires good organisation, communication skills and management. \n\t\t\t Management is the responsibility of the student, in regular consultation with the supervisor.   An understanding of the state of the art in the student\u00e2\u20ac\u2122s chosen area of specialisation. \n\t\t\t\t An in-depth knowledge and understanding of the student's chosen area of specialisation. \n\t\t\t\t An understanding of research methods required in conducting a research based project. ", "Work-Based Project (Assessment)  \n \n\n \n   \n \n This is the capstone project of the Data Science degree.&nbsp; It is a requirement that this is a work-based project which must be completed prior to the Gateway Review.&nbsp; The project will not include a dissertation, as a separate project report must be delivered by the learner as part of the End Point Assessment.&nbsp; Instead, the assessment will be based on a portfolio of project related artifacts.&nbsp; Learners should consult the relevant project brief each academic year, but an indicative set of deliverables is:   Outline Project Agreement  \u2013 An agreement between the learner, the university and employer which i) identifies clear organisational needs, ii) scopes the project and ensures that learner has access to necessary system, data, tools and computer services to complete the project and allows achievement of the necessary KSBs.&nbsp; &nbsp;   Ethical and Legal Assessment  \u2013 Following initial agreement for the project, undertake a review of any legal and ethical considerations, including consideration of local company regulations, and university ethics guidelines.   Initial Project Plan  \u2013 A suitable plan such as a Gantt Chart, or set of User Stories for delivery of the project.   Software Deliverable  \u2013 Evidence of a software that has been designed and delivered, with evidence of progress shown in a suitable software repository.   Reflective Log  \u2013 A weekly, electronic log documenting the progress of the project including design decisions made, problems encountered, reviews against plan and agreed changes to the scope.   Presentation  \u2013 A demonstration of the data science solution, and delivery of findings from the data analysed that meet organisational needs.   KSB Review  \u2013 An evaluation to clarify which KSBs have been met through the project completion.  There is an explicit requirement for learners to undertake a project within the workplace as part of their role (on-the-job and off-the-job) \n \n  Be able to plan and manage a significant work-based, data science project.Can identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data.Can apply knowledge of legal and ethical issues in relation to a data science problem including understanding the limitations of any techniques used.Can communicate effectively through written work and through effective presentation of results.Demonstrate a comprehensive understanding of current and developing data science approaches and apply them where appropriate. KSBs  Knowledge A Data Scientist must understand:K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data.  Skills A Data Scientist is able to:S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. Behaviours  &nbsp;A Data Scientist demonstrates:S1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.S2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.S3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.S4. Consideration of problems in the context of organisation goals.S5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.S6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "CS408 - Project To enable the student to demonstrate practical and documentary competence. Honours and MEng projects are substantial pieces of practical work; they may draw on any aspect of the degree course, or more widely. Topics will be suggested by and supervised by individual members of the Department\u2019s staff.For current year and background information, see material via  MyPlace . On completion of the class, a student should be able to have demonstrated ability: to pull together ideas from one or more of the classes they have undertaken  to build on material acquired throughout the degree course  to undertake independent studying, reading, writing and working  to display a disciplined approach to good practices in the general area of the degree course  to determine and successfully work to a timetable  to tackle successfully a substantial engineering problem ", "MSci Individual Research Project  \n \nTo allow students to study a particular area of Computer Science close to the research frontier in depth.To prepare students for future academic or industrial research-oriented careers in Computer Science.To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a research project in Computer Science supervised by an academic member of staff. The topic should fall within the supervisor's research interests and must further be relevant to the student's programme of study; in particular, projects undertaken by Artificial Intelligence (AI) students must have a strong AI focus. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or even of survey type depending on what is appropriate and feasible for the area and topic. Projects, however, must ultimately be agreed with the supervisor concerned.  The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted (electronically) as supplementary material. A revised version of the paper, possibly co-authored with the supervisor, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard. &nbsp; \n \n  Knowledge and Understanding\u2022&nbsp;&nbsp; &nbsp;Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. &nbsp;Intellectual Skills\u2022&nbsp;&nbsp; &nbsp;Clear and logical thinking. \u2022&nbsp;&nbsp; &nbsp;Understanding complex ideas and relate them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Acquiring and systematically analysing substantial quantities of information. \u2022&nbsp;&nbsp; &nbsp;Thinking independently while giving due weight to the arguments of others. \u2022&nbsp;&nbsp; &nbsp;Depending on the specific project, other intellectual skills may also be addressed. &nbsp;Professional Skills\u2022&nbsp;&nbsp; &nbsp;Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. &nbsp;Transferable Skills\u2022&nbsp;&nbsp; &nbsp;Analytical and problem-solving ability. \u2022&nbsp;&nbsp; &nbsp;Obtaining and critically analysing information from scientific literature. \u2022&nbsp;&nbsp; &nbsp;Devising and carrying out a complex project to meet specific objectives. \u2022&nbsp;&nbsp; &nbsp;Time management. \u2022&nbsp;&nbsp; &nbsp;Communicating complex ideas and information in writing and orally. \u2022&nbsp;&nbsp; &nbsp;Confidence in public speaking \u2022&nbsp;&nbsp; &nbsp;Reflect upon and assess own performance", "CS455 - Individual Work-Based Project This class aims to develop participants' project management skills and advance their practical understanding of software development within a work-related project. Participants are required to undertake a significant individual work-based project with minimal supervision in an area of IT that is relevant to their job role. For British Computer Society accreditation, it is expected that within an undergraduate programme, students will undertake a major computing project, normally in their final year and normally as an individual activity, giving them the opportunity to demonstrate:&nbsp; their ability to apply practical and analytical skills present in the programme as a whole&nbsp;  innovation and/or creativity&nbsp;  synthesis of information, ideas and practices to provide a quality solution together with an evaluation of that solution&nbsp;  that their project meets a real need in a wider context&nbsp;  the ability to self-manage a significant piece of work&nbsp;  critical self-evaluation of the process&nbsp; During term 1, participants will identify a project in consultation with their line manager and academic supervisor. Once the project has been approved, work on the project will take place in terms 2 and 3. After completing this class participants will be able to:&nbsp; Apply analytical and practical skills gained earlier in the programme.&nbsp;  Synthesise information, ideas and practice, to develop a quality solution.&nbsp;  Manage and execute a significant individual work-based project, with minimal supervision, within a field of IT agreed in discussion with the academic \u201cclient\u201d/supervisor and the learner\u2019s employer.&nbsp;  Communicate project progress, business and technical information, and project outcomes in oral and formal written format.&nbsp;  Critically evaluate the project process and outcomes.&nbsp;  Specify, design, test and implement solution(s) appropriate to the (project) task and business domain.&nbsp; ", "MSci Individual Programming Project  \n \nTo allow students to get an in-depth understanding of a chosen area of Computer Science along with practical experience from developing a challenging piece of software in that area;To prepare students for future academic or industrial careers around Software Development;To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a programming project for an External Client under the supervision of an academic member of staff.  The client, which can be a company, charity, research group etc., provides a problem that requires a sufficiently challenging piece of software to be developed.  The client and project idea could be provided by the students or the supervisor. Projects, however, must have aspects that are relevant to each student's programme of study; e.g., there needs to be an Artificial Intelligence (AI) aspect if any AI students are involved.  Each project must ultimately be agreed with the concerned Supervisor.  The main assessed outputs are the developed software, including any end-user documentation, along with a 15,000 word document that outlines the development, design and implementation of the software, highlighting the most interesting aspects.  The software must be developed in a professional and systematic manner appropriate for the problem domain.  The assessment is informed by a statement from the External Client on how well the developed software addresses the problem. \n \n    Knowledge and Understanding   Programming projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes.   Intellectual Skills   Clear and logical thinking; \t Understanding complex ideas and relate them to specific problems or questions; \t Acquiring and systematically analysing substantial quantities of information; \t Thinking independently while giving due weight to the arguments of others; \t Depending on the specific project, other intellectual skills may also be addressed.   Professional Skills   Development skills approaching professional standards, including coding, testing, debugging and use of appropriate tools such as version management systems; \t Programming projects may arise from any area of the curriculum and so may address any of the professional skills outcomes.   Transferable Skills   Analytical and problem-solving ability; \t Obtaining and critically analysing information from scientific literature, including system and library documentation; \t Devising and carrying out a complex project to meet specific objectives; \t Time management; \t Communicating complex ideas and information in writing and orally; \t Confidence in public speaking. ", "CSY2036 \u2013 Learning Through Work (WBL)  Description:  This module gives students the opportunity to apply and develop theoretical knowledge in the execution of an individual project and report.  By completing the module students will gain experience of researching the necessary technical information, of solving cross-disciplinary technical problems, of sourcing and obtaining parts and components and of working to a deadline with others in a team. This module has a strong industrial focus and includes various methods of engagement.  ", "Project - Masters 40 Successful completion of this module is required for students wishing to apply for exemptions from BCS registration.  The final year project enables the student to demonstrate competence as a computing professional and to apply material learnt in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea.  The project is an opportunity for the student to demonstrate problem solving skills. It must include a substantial piece of scientific or engineering work.  The project cannot consist of only a literature review.  The aims of this module are to:  Allow students to carry out a substantial problem solving task of their own choosing, in any area of Computer Science including Artificial Intelligence, Robotics, Software Engineering, Theory, Human-Computer Interaction, Mobile, Security, or Natural Computation.  Allow students to demonstrate their ability in one or more of the following skills: programming, software or hardware development, mathematical proof, empirical investigation, or some other scientific or engineering method, as applied to Computer Science.  Allow students to demonstrate their competence as computing professionals, and to apply what they have learnt in the other components of their degree programme.  Facilitate independent work on a substantial individual project, including prioritisation of different components of the project, as well as prioritising the project as a whole against other work.    By the end of the module students should be able to:  carry out a substantial computer science problem solving task.  work independently and prioritise different components of the work; manage a large project effectively.take decisions and justify them convincingly.  orally present work undertaken, and answer questions about it convincingly.  write a formal report, detailing work undertaken and conclusions reached.  ", "CSY4022 \u2013 Computing Project Dissertation  Description:  This project module provides the opportunity for the student to undertake independent research, development, and self-management of a Computing related project leading to completing a dissertation. An essential outcome for this module is that the student?s project deliverable includes the design and development of a system, or a software application, or a novel functional approach that relates to the main areas of student study, and that can be used, applied or demonstrated in some way. Students on the BSc Business Computing may engage on a research centered project resulting in a report of analysis of an appropriate topic.  ", "Innovation Project  \n The aim of this module is for a student to undertake a large software development project that contributes to the research of the project supervisor,&nbsp;or in collaboration&nbsp;with an industry partner or based within the Informatics Centre. This module encourages the student to explore current and emerging technologies to develop innovative solutions that will keep up with the ever-changing requirements of the industry. \n   \n The student will undertake a large self-directed software project usually defined by the project supervisor. Projects can also be based at the Informatics Centre or with an industry partner. \n Assessing commercial viability and feasibility of innovative ideas and/or researching the current state-of-the-art. \n Business planning&nbsp;(assessment of business benefits, impacts, risks and return on investment, technology roadmap). \n Project documentation. \n Complete an innovative software development&nbsp;project following the software development life cycle, using project management techniques. \n   \n Make concise, engaging and well-structured verbal presentations. \n Construct&nbsp;an appropriate set of project documentation from the business case through to evaluation. \n Create a business case for a technology-enabled business solution or a research-orientated project dissertation. \n Design and implement a feasible, innovative and appropriate solution to the defined problem. \n Critically reflect upon the success of the overall project. \n ", "Extended Independent work  \n             \n            You'll carry out an individual in-depth investigation of a topic of interest, working on your skills in research, problem solving and critical analysis. The project will be selected in consultation with your supervisor and may involve a local company. You'll work on the project throughout the year, culminating in a final report and oral defence.\n                         \n             ", "Honours Project This is a substantial individual piece of work with a significant research dimension based on an appropriate topic from within the student's programme of study and which reflects the student's own interests. This work will be concerned with a specific problem from the student's programme of study and will include as appropriate, a systematic investigation, a survey of literature relevant to the problem, an analysis of appropriate approaches, a detailed planning activity and an implementation of the selected approach. The project will also involve a reflective evaluation of the project outcomes and approach taken and a verbal presentation of the work. At this programme level the student is expected to be significantly autonomous and demonstrate a high degree of initiative in the conduct of the project.  The procedures for allocating and undertaking this module and details of its individual assessment components will be given in the guidance material issued to students in preparation for undertaking this module      On successful completion of this module students should be able to:  1). Demonstrate the ability to plan and carry out an in-depth research or practice-based capstone project as appropriate to the area of study and to work independently (Students on software engineering suite programmes are required to undertake a practice-based capstone project). 2). Demonstrate a clear understanding, as appropriate to the problem, of techniques, technologies and tools for the chosen area of work. 3). Demonstrate literature review, analysis, synthesis and critical evaluation skills appropriate to an Honours level award. 4). Evaluate the success of the project work and the corresponding project process. 5). Analyse the professional and ethical issues which apply within the context of the project. 6). Demonstrate the ability to communicate all aspects of the project in a written, visual and oral form.    ", "Professional Placement  This module is available to all undergraduate students in the School of Science, Engineering and Digital Technologies.&nbsp; The Professional Placement is a year-long period of placement working outside the University in a host organisation.&nbsp; This module may form part of the learning and experience required for a Professional Development Scheme. \n\t\t &nbsp; \n\t\t The Placement is expected to be of 12 months duration,  normally  a duration of 36 weeks (excluding holidays).&nbsp; The Student Futures team may identify placements or the students may apply to organisations of their own choice.&nbsp; Placement Providers then interview and select students for placement. The Student Futures team in collaboration with academic colleagues evaluates the suitability of any proposed Placement and offers guidance and support throughout the placement process.&nbsp; \n\t\t \n\t\t\t\t \n\t\t \n\t\t Host organisations provide placement students with relevant professional experience, under supervision in vocational environments.&nbsp; Undertaking a placement, allows students to use their existing academic knowledge, encourages them in developing professional attitudes, personal and key skills, and should improve their future employability.&nbsp; Students are normally visited once during the year plus a follow-up skype/phone call by appropriate staff who monitor student performance.&nbsp;&nbsp; \n\t\t &nbsp; \n\t\t The module is normally assessed via two elements; a presentation and a written report.&nbsp; \n\t\t \n\t\t\t\t \n\t\t   ", "Individual Project   Summary module description:   \n  In this module, students work individually on their final year project, which is worth 40 credits (out of 120 credits). The student must pass this module in order to be awarded an honors degree as this is a BCS requirement.  \n \n This module also encourages students to develop a set of professional skills, such as problem-solving;&nbsp; creativity; critical thinking; hypothesis generation and testing; literacy; action planning and decision making; self-reflection; negotiation and persuasion; organisation and time management; professional communication (with supervisors and peers); initiative and self-motivation; software design and development; effective use of commercial software; end-user awareness; presentation skills; and technical report writing for technical and non-technical audiences.  \n     Outline content:   \n  The final year project will usually be related to current research and industrial activities in the department. Students will plan their project, carry it out, present it orally in a formal setting, and give a practical demonstration to a panel of academics. Students will be able to express preferences for their choice of final project based on staff project proposals. Students are also able to propose their own projects. All project proposals are scrutinised for suitability for the particular degrees.  \nArrangement for supervision will normally take the form of a regular meeting (in a group) with supervisor and, as part of the formal progress monitoring process, weekly log-book sign off. Full details of the project arrangements, project titles, monitoring, assessment and timetable for submission of reports are made available to all relevant students via Blackboard by the end of Summer Term of Part 2.  \n     Assessable learning outcomes:  \n  To embrace the analytical and methodological approach of a professional. Students are set a major project which they have to plan, design, implement, test, evaluate and present both orally and in written form. By the end of the module, it is expected that the student will be able to:  \n \n  \n independently identify, research and synthesise literature relevant to the problem;  \n apply relevant techniques to systematically design a solution to a problem;  \n implement and/or build a suitable solution, with systematic test and evaluation;  \n develop a professional approach to record-keeping and log-book maintenance which in turn enhances the student\u2019s ability to maintain a professional development record;  \n demonstrate competence in producing professional standard project report; and  \n critically appraise and reflect on their own work about what has been achieved and the extent to which the objectives of the project have been satisfied.  \n  \n  ", "CSY1903 \u2013 Games Art Production  Description:  The purpose of this module is to consider, understand and develop skills to design and produce game characters, game environments and game assets. This will be informed by a sound appreciation of key elements including style, form, scale, structure, perspective, colour, texture and their interrelationship.  ", "Undergraduate Course: Honours Project (Informatics) (INFR10044) This is a major project and is intended to allow students to demonstrate their ability to organise and carry out a substantial piece of work. The project involves both the application of skills learnt in the past and the acquisition of new skills. Typical areas of activity will be: gathering and understanding background information; solving conceptual problems; design; implementation; experimentation and evaluation; writing up. \n \nThe project is conducted individually by the student under the supervision of a member of teaching staff. The project specification is usually provided by a member of staff, but students are also free to specify their own project. All project specifications must be approved by the Project Coordinator. \n \nFor a single honours Informatics degree, the project will normally involve the construction of an artefact, whether software, hardware, a robotic device, some other artefact incorporating computation, or some combination of these. This requirement does not necessarily apply to combined honours degrees. Project dependent Project dependent", "Industrial Team Project module (CS32002) Software engineering projects are often vast and complex. Good project management and teamwork are crucial in successful execution of a project.You will learn about agile methodology in software development and teamwork practices. These will allow you to approach software engineering more systematically and use industry standard processes throughout planning, designing, and implementation of a project.In today's fast-paced and changing environment, mastering agile methodology and teamwork can help you deliver high-quality software products on time and within budget.   learn about software requirement gathering and analysis \n study agile practices and methodologies, focussing on the Scrum framework \n explore tools and techniques for agile software development \n discuss software quality standards \n investigate legal, social, ethical, and professional issues (LSEPI) in software development projects  plan and execute a project applying agile methods to develop a user-centred system \n demonstrate a proficient understanding of agile methods and concepts in software engineering \n demonstrate full understanding of the software development lifecycle \n show awareness of professional codes of conduct and understand the legal and professional responsibilities of software engineers \n make informed judgments on complex ethical and professional issues relating to software engineering \n demonstrate strong client interaction and management skills, including fulfilling regular reporting requirements \n present a software solution for appraisal ", "Statistics and Probability Modelling Assessment  \n \n\n \n   \n \n In this assessment Apprentices will demonstrate their knowledge and skills associated with probabilistic and statistical modelling by conducting applied statistical research and forecasting methods. This will include data analysis, making predictions and interpretating statistical results making use of a statistical software package.  The assessment will comprise of  \t A (continuous) R-portfolio. \t Group presentation \u2013 based on probability models and estimating parameters (this will include an individual reflective log). \t A Statistical report \u2013 demonstrating statistical modelling and reasoning using linear methods. \t A business case report based on the application of Time Series and Forecasting.   Apprentices will be encouraged to relate their outputs to areas of data science applicable to their current jobs. They will develop skills of scientific reasoning and analysis, and transferable skills of communication. The range of skills will be assessed through apprentices\u2019 written work and oral presentations. \n \n  Can apply methods concerning estimation of parameters in standard statistical models; in particular the method of moments and the maximum likelihood method.Can perform statistical hypotheses tests using data from studies (such as t and F-tests, comparison of models and parameter values).Can apply methods for interval estimation; in particular, exact and approximate confidence intervals based on asymptotic theory.Can apply methods for analysing categorical data and methods without having to make distributional assumptions (non-parametric statistics).Can fit a linear model to data, both manually and using statistical software.Can check model fit, diagnose errors, and perform model selection amongst the class of linear models.Can demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science.Can identify and formulate problems in terms of probability and solve them to build up a simple stochastic model.Understands and can apply basic properties of discrete-time Markov chains.Can carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: Data processing and storage, including on-premise and cloud technologies. \t Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. \t Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4. Statistical and mathematical models and methods. 5. Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 6. Applications such as computer vision and Natural Language Processing. 7. An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8. Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.", "Individual Project (H) (Single) COMPSCI4025P   The aim of the individual project is to allow students to undertake a substantial piece of individual work, involving planning, specification, design, execution, evaluation, presentation and report-writing.     The aim of the individual project is to allow students to undertake a substantial piece of individual work, involving planning, specification, design, execution, evaluation, presentation and report-writing.     By the end of the course students will be able to:   &nbsp;   1.   Manage and organise a large independent solo piece of work;    2.   Choose among technologies, tools and approaches and apply them effectively;    3.   Synthesise technical skills appropriately to address a single challenging problem;    4.   Develop a substantial product which demonstrates technical achievement in computer science;    5.   Appropriately evaluate the outcome of their work;    6.   Conduct themselves in a professional manner, taking responsibility for the progress of the project, recording their time and effectively using their supervisor's input;    7.   Write a coherent, literate dissertation that documents the project, justifies decisions made and sets their work in context;    8.   Present their work orally to a technical audience, communicating their project precisely and fluently;    9.   Produce concise, informative video summaries of their work.  ", "Individual Dissertation  \n \nTo give each student the opportunity to study one aspect of computer science in detail. The work will normally involve the development of a software system.\n \n   \n \n Students undertake a project in Computer Science that is relevant to their programme of study; in particular, projects undertaken by Artificial Intelligence (AI) students must have a strong AI focus, and projects undertaken by Software Engineering (SE) students must have a strong SE focus. Each project is supervised by an academic member of staff. A project may be based on theoretical or empirical research or software development. Students must relate their project work to current research and/or professional practice, and a suitable evaluation must be included.    Further, relevant professional and ethical aspects must always be considered. It is normally expected that projects will involve software development, but the extent of this depends on the nature of the project. If no or very little software is being developed, then the project must encompass other aspects of similar rigour and intellectual challenge (eg. mathematical proofs, rigorously conducted research, proper statistical analysis of empirical results, etc.).    Guidelines on the word length of dissertations are flexible to accommodate differing types of project work undertaken. All projects must be agreed with the concerned Supervisor and Course Director. \n \n  Knowledge and Understanding \u2022&nbsp;&nbsp; &nbsp;Individual projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes.&nbsp;Intellectual Skills \u2022&nbsp;&nbsp; &nbsp;Clear and logical thinking. \u2022&nbsp;&nbsp; &nbsp;Understanding complex ideas and relate them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Acquiring and systematically analysing substantial quantities of information. \u2022&nbsp;&nbsp; &nbsp;Thinking independently while giving due weight to the arguments of others. \u2022&nbsp;&nbsp; &nbsp;Depending on the specific project, other intellectual skills may also be addressed. &nbsp;Professional Skills \u2022&nbsp;&nbsp; &nbsp;Enhanced programming abilities.&nbsp; \u2022&nbsp;&nbsp; &nbsp;The ability to comprehend and apply software engineering methodologies. \u2022&nbsp;&nbsp; &nbsp;Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. &nbsp;Transferable Skills \u2022&nbsp;&nbsp; &nbsp;Analytical and problem-solving ability. \u2022&nbsp;&nbsp; &nbsp;Obtaining and critically analysing information from different sources. \u2022&nbsp;&nbsp; &nbsp;Devising and carrying out a project to meet specific objectives. \u2022&nbsp;&nbsp; &nbsp;Time management. \u2022&nbsp;&nbsp; &nbsp;Communicating their results and information in writing and orally. \u2022&nbsp;&nbsp; &nbsp;Reflect upon and assess own performance.", "Workplace Assessment Year 2 COMPSCI2033   This course is intended for Graduate Apprenticeship students only.   &nbsp;   Throughout their second year GA students are expected to   be involved with projects at work   and be making meaningful contributions. They should, at a high level, keep track of the work that they are doing and   use their theoretical knowledge from first and second year classes to   evaluate their progress and   justify their decisions. This work will be detailed in a final report.  &nbsp;  This course, and the equivalent courses in each year of the programme, is intended to create reflective life-long learners.     This project gives students an opportunity to put their programming skills into practice in the workplace. They   will create a portfolio of work which they will contribute to over a year of software development in   their workplace. The report should detail additions they have made, the reasons for making these additions, the reasoning behind their design choices and   reflection on what they learned  .     By the end of this course, students will be able to:    1.   Demonstrate the development   or   extension  &nbsp;  of   a substantial software product which   displays  &nbsp;technical achievements in computer science.    2.   Analyse  &nbsp;software engineering best practices to write easy-to-read and suitably formed   software  .    3.   Create software that include well-justified data structures and test coverage  .    4.   Document   their professional activity in report form  .  ", "MSci (Sandwich Year) Software Engineering Individual Project COMPSCI5082P   The course provides students with the opportunity to conduct an  &nbsp;independent, individual  &nbsp;Software Engineering research  &nbsp;project at level M.  &nbsp; Students undertake a literature survey to formally identify a research problem and then carry out an investigation and write up the results.     The aim of the course is to   provide students with the opportunity to develop practice and demonstrate their research skills within the context of   Software Engineering.  The course develops transferable skills in critical analysis, introspection and research methods that will be useful in professional careers.     By the end of this course students will be able to:    1.   Specify and justify a well-defined research problem in the area of Software Engineering;    2.   Articulate and justify a feasible approach for tackling this problem;    3.   Produce a comprehensive literature survey covering their research problem, offering a critical review of the key relevant work in this area;    4.   Formulate a research plan for the research problem;    5.   Carry out a coherent and well-executed investigation of a research problem in Software Engineering, using appropriate methods and producing valid results;    6.   Write up their research in the form of an academic paper, including the expression of a well-defined thesis and argument, a clear statement of the research methods and results, a critical evaluation of the research results, a consideration of their significance and of their relationship to other relevant work.  ", "MSci Research Proposal and Project (Half) COMPSCI5072P   The aim of this course to enable students to prepare and undertake a substantial, independent, individual research-oriented project at level M. It will include a literature survey, indentifying and refining a research problem in Computing Science, then car  rying out an investigation of the problem and writing up the results.     The aim of the course is to provide students with an opportunity to identify and refine a   research problem in Computing Science of a suitable degree of difficulty while carrying out a literature survey of the problem and then undertake a substantial, independent, individual research-oriented project at level M including the writing up of the re  sults.     By the end of this course students will be able to:    1.   Specify and justify a well-defined research problem in the area of their   MSci  &nbsp;specialism;    2.   Articulate and justify a feasible approach for tackling this problem;    3.   Produce a comprehensive literature survey covering their research problem, offering a critical review of   the key relevant work in this area;    4.   Formulate a research plan for the research problem;    5.   Carry out a coherent and well-executed investigation of a research problem in Computing Science, using   appropriate methods and producing valid results;    6.   Write up their research in the form of an academic paper, including the expression of a well-defined   thesis and argument, a clear statement of the research methods and results, a   critical evaluation of the   research results, a consideration of their significance and of their relationship to other relevant work.  ", "Data Science Group Project Assessment  \n \n\n \n   \n \n Working in groups&nbsp;of&nbsp;3-6 people, you will identify and work on a computer application that relates to the work context and involves the use of programming and AI for a data science application. &nbsp;It will allow you to tackle a significant data science problem/s and follow the full data science pipeline.  This application will be designed, programmed, and documented during the course of the module. Your group will interact online and&nbsp;face-to-face and&nbsp;hold weekly meetings. &nbsp;You will be joined every other week by an academic supervisor. You will agree on roles within the&nbsp;project and&nbsp;develop the software to specification. There will be four introductory online lectures, detailing the process and best practice. At the end of the project you will deliver a written report, and a demonstration of the software that will happen as part of a face-to-face project presentation/wrap-up session.&nbsp; &nbsp; \n \n  Plan, manage and track a significant data science software activityTo work confidently with a wide range of data in databases and database languages so as to be able to tackle substantial data problemsBe able to choose appropriate technologies and models for the use of databases in practical applications and to evaluate the strengths and weaknesses of existing systems. &nbsp;Identify a suitable data science problem, questions and corresponding software which relate to organisational goals.Independently and systematically design, develop and test software as part of non-trivial data science problem. &nbsp;Effectively communicate ideas relating to the software process and data science solutions.Reflect on issues arising within a team environment and learn how to resolve them. In doing so learn from the group project experience.&nbsp;Understand the role of ethical, privacy, bias and legal concerns and to embed this into practice. &nbsp;Can use appropriate visualisation tools and techniques to present data of different types appropriately to different audiences. KSBs K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an&nbsp;organisation\u2019s&nbsp;processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)&nbsp; K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an&nbsp;organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and&nbsp;optimise&nbsp;analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations,&nbsp;optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and&nbsp;organisational&nbsp;resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp; K5. The data landscape: how to critically&nbsp;analyse, interpret and evaluate complex information from diverse datasets:&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp; S1. Identify and clarify problems an&nbsp;organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis,&nbsp;visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve&nbsp;organisational&nbsp;outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning,&nbsp;optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards.&nbsp;Visualise&nbsp;data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of&nbsp;organisation&nbsp;goals.&nbsp; S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of&nbsp;organisational&nbsp;empathy (human,&nbsp;organisation&nbsp;and technical) and build relationships through active listening and trust development.&nbsp; S8. Use project delivery techniques and tools appropriate to their Data Science project and&nbsp;organisation. Plan,&nbsp;organise&nbsp;and manage resources to successfully run a small Data Science project, achieve&nbsp;organisational&nbsp;goals and enable effective change.&nbsp; B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and&nbsp;maximise&nbsp;insights; and relentless creativity in their approach to solutions.&nbsp; B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.&nbsp; B3. Adaptability and dynamism when responding to varied tasks and&nbsp;organisational&nbsp;timescales, and pragmatism in the face of real-world scenarios.&nbsp; B4. Consideration of problems in the context of&nbsp;organisation&nbsp;goals.&nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp; B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community &nbsp;", "Software Portfolio Assessment  \n \n\n \n   \n \n This assessment comprises a progressive series of data science problems which require learners to implement software solutions. &nbsp;It provides an assessment for learning opportunity for learners to draw on the teaching and formative activities in the teaching blocks and demonstrate their knowledge and develop their skills in delivery of data science solutions.  The portfolio will comprise three parts:  Basic data science problem \u2013 requiring learners to demonstrate the implementation a simple data science solution.  Progressive data science problem \u2013 requiring learners to demonstrate a wider range of programming skills on a more difficult data science solution requiring more creativity from learner.  Deeper (preferably work-based) data science problem - for the final part, learners will be encouraged to seek a relevant problem related to their role or employer. &nbsp;The learner will be expected to draw from on-the-job context (organisational, business questions, proprietary data)  The portfolio assessments across this programme provide an opportunity for apprentices to understand how to start structuring a portfolio of evidence to demonstrates the acquisition and application of knowledge, skills and behaviours in line with the apprenticeship standard. One of the conditions for passing through the gateway and on to the end point assessment is a portfolio of evidence which can be used as the basis for the professional discussion in the end point assessment. This therefore helps the apprentices in understanding the expectations and practice in the preparation of an assessed portfolio before reaching the gateway review. &nbsp; \n \n  Can use appropriate tools to write simple programs which solve a problem, especially a data science problem. &nbsp;Understands and can use basic procedural control structures and programming operators to implement simple algorithms. &nbsp;Can store and manipulate different types of data (for example numerical, textual, lists, sets, maps). &nbsp;Can produce simple visualisations of data using using simple programming constructs. &nbsp;Understands the need for software testing and can demonstrate basic software testing principles in practice. &nbsp;Understand and logically evaluate program requirements and specifications.&nbsp; &nbsp;Understand the complex ideas of programming solutions and relate them to&nbsp;particular problems.&nbsp; &nbsp;Design and&nbsp;analyse&nbsp;simple algorithms and data structures.&nbsp;&nbsp; &nbsp;Read, clean and analyse different kinds of data from different sources to produce data science solutions. &nbsp;Apply appropriate software development methods and tools.&nbsp; &nbsp; KSBs K2.&nbsp;How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an&nbsp;organisation\u2019s&nbsp;processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)&nbsp;&nbsp; K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d&nbsp;and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and&nbsp;decisions.&nbsp;&nbsp; K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp;&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp;&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp;&nbsp; K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services,&nbsp;open data, government data, news and social media.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp;&nbsp; &nbsp;&nbsp; S1.&nbsp;Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp;&nbsp; S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp;&nbsp; S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp;&nbsp; S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp;&nbsp; S6.&nbsp;Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.&nbsp;&nbsp; S8.&nbsp;Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.&nbsp;&nbsp; &nbsp;&nbsp; B1.&nbsp;An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.&nbsp;&nbsp; B2.&nbsp;Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.&nbsp;&nbsp; B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp;&nbsp; B4.&nbsp;Consideration of problems in the context of organisation goals.&nbsp;&nbsp; B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner", "LH Computer Science Project   During the course students will have developed a passion for topics in computer science, such as artificial intelligence or computer security, and the project is the ideal opportunity to explore one of those topics in depth. Students will take a complete project through the concept, design, implementation and evaluation phases, giving crucial experience that can be taken into a commercial or research environment. Projects are chosen from staff suggestions or are developed from the student's original idea. The project normally includes writing a substantial piece of software or developing some hardware. Occasionally, it can consist of conducting research other than by writing software.", "MSci Group Programming Project  \n \nTo allow students to get an in-depth understanding of a chosen area of Computer Science along with practical experience from developing a challenging piece of software in a group in that area.To allow students to develop their team working skills.To prepare students for future academic or industrial careers around software development.To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a programming project for an External Client in self-formed groups of two to four students under the supervision of an academic member of staff. The client, which can be a company, charity, research group etc., provides a problem that requires a sufficiently challenging piece of software to be developed.  The client and project idea could be provided by the students or the supervisor. However, projects must have aspects that are relevant to each student's programme of study; e.g., there needs to be an Artificial Intelligence (AI) aspect if any AI students are involved.  Each project must ultimately be agreed with the concerned Supervisor and Course Director. The main assessed outputs are the developed software, including any end-user documentation, along with a 15,000 word document that outlines the development, design and implementation of the software, highlighting the most interesting aspects. The software must be developed in a professional and systematic manner appropriate for the problem domain.  The assessment is informed by a statement from the External Client (if there is any) on how well the developed software addresses the problem. Additionally, the report should explain each student's individual contributions, reflections and giving a critical appraisal of how the project went, including group dynamics. \n \n   Knowledge and Understanding : Programming projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills  Development skills approaching professional standards, including coding, testing, debugging and use of appropriate tools such as version management systems. Work effectively and ethically with others. Programming projects may arise from any area of the curriculum and so may address further professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature, including system and library documentation. Devising and carrying out a complex project to meet specific objectives as a team. Time management, including scheduling tasks and meeting deadlines. Work productively in a collaborative environment. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Reflect upon and assess own performance as well as that of others.&nbsp;", "Data Analysis Portfolio Assessment  \n \n\n \n   \n \n This assessment sees apprentices developing their probabilistic reasoning and skills in collecting, analysing and organising data and information using relative statistical techniques. Apprentices will apply their knowledge through practice by conveying their ideas clearly and fluently via three main components (consisting of either a written assignment or statistical report).  The first two components see students applying fundamental techniques in probability and statistics to a number of smaller data science probability and statistics problems. This will comprise of two small written assignments.  The final component will consist of a more substantial written statistical report making use of a statistical software package (R). Apprentices will use real life data to conduct basic qualitative and quantitative analyses. The focus of the analyses should be a grounded interpretation of the datasets with a narrative of how these findings relate to the wider discipline of data science.  The portfolio assessments across this programme provide an opportunity for apprentices to understand how to start structuring a portfolio of evidence to demonstrates the acquisition and application of knowledge, skills and behaviours in line with the apprenticeship standard. &nbsp;One of the conditions for passing through the gateway and on to the end point assessment is a portfolio of evidence which can be used as the basis for the professional discussion in the end point assessment. &nbsp;This therefore helps the apprentices in understanding the expectations and practice in the preparation of an assessed portfolio before reaching the gateway review.&nbsp; &nbsp; \n \n  Can calculate probabilities and moments using probability mass and density functions &nbsp;Can calculate simple properties of discrete bivariate random variables&nbsp; &nbsp;Can state and apply the central limit theorem &nbsp;Can conduct appropriate hypothesis tests for a variety of situations, and calculate p-values.&nbsp; &nbsp;Can fit and analyse linear models with one covariate.&nbsp; &nbsp;Can analyse categorical data by testing proportions and independence of two variables.&nbsp; &nbsp;Can use statistical software to carry out calculations and interpret the output. &nbsp; KSBs K2.\u202fHow Data Science operates within the context of data governance, data security, and\u202fcommunications. How Data Science can be applied to improve an organisation\u2019s processes, operations\u202fand outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance\u202faffect Data Science work, and the impact of international regulations (including the General Data\u202fProtection Regulation.)\u202f&nbsp;K3.\u202fHow data can be used systematically, through an awareness of key platforms for data and analysis in\u202fan organisation, including:\u202f\u202f&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including\u202fon-premise\u202fand cloud technologies.\u202f&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d\u202fand real-time approaches; the pros and cons of each approach.\u202f\u202f&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and\u202fdecisions.\u202f&nbsp;K4.\u202fHow to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:\u202f&nbsp; 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.\u202f\u202f&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques,\u202fsimulations, optimisation, and automation.\u202f\u202f&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.\u202f&nbsp; 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in\u202fselecting models, algorithms and tools.\u202f&nbsp; 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.\u202f&nbsp; K5.\u202fThe data landscape: how to critically analyse, interpret and evaluate complex information from\u202fdiverse datasets:\u202f&nbsp; 9.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services,\u202fopen data, government data, news and social media.\u202f&nbsp; 10.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.\u202f&nbsp; 11.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.\u202f&nbsp; \u202f&nbsp; S1.\u202fIdentify and clarify problems an organisation\u202ffaces, and\u202freformulate them into Data Science\u202fproblems. Devise solutions and make decisions in context by seeking feedback from stakeholders.\u202fApply scientific methods through experiment design, measurement, hypothesis testing and delivery of\u202fresults. Collaborate with colleagues to gather requirements.\u202f&nbsp; S2.\u202fPerform data engineering: create and handle datasets for analysis. Use tools and techniques to\u202fsource, access, explore, prole, pipeline, combine, transform and store data, and apply governance\u202f(quality control, security, privacy) to data.\u202f&nbsp; S3.\u202fIdentify and use an appropriate range of programming languages and tools for data manipulation,\u202fanalysis, visualisation, and system integration. Select appropriate data structures and algorithms for\u202fthe&nbsp;problem. Develop reproducible analysis and robust code, working in accordance with software\u202fdevelopment standards, including security, accessibility, code quality and version control.\u202f&nbsp; S4.\u202fUse analysis and models to inform and improve organisational outcomes, building models and\u202fvalidating results with statistical testing: perform statistical analysis, correlation vs causation, feature\u202fselection and engineering, machine learning, optimisation, and simulations, using the appropriate\u202ftechniques for the problem.\u202f&nbsp; S5.\u202fImplement data solutions, using relevant software engineering architectures and design patterns.\u202fEvaluate Cloud vs.\u202fon-premise\u202fdeployment. Determine the implicit and explicit value of data. Assess\u202fvalue for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new\u202fapproaches. Compare the pros and cons of software applications and techniques.\u202f&nbsp; S6.\u202fFind, present, communicate and disseminate outputs effectively and with high impact through\u202fcreative storytelling, tailoring the message for the audience. Use the best medium for each audience,\u202fsuch as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable\u202fnarratives. Make recommendations to decision makers to contribute towards the achievement of\u202forganisation goals.\u202f&nbsp; S7.\u202fDevelop and maintain collaborative relationships at strategic and operational levels, using methods\u202fof organisational empathy (human, organisation and technical) and build relationships through active\u202flistening and trust development.\u202f&nbsp; S8.\u202fUse project delivery techniques and tools appropriate to their Data Science project and organisation.\u202fPlan, organise and manage resources to successfully run a small Data Science project, achieve\u202forganisational goals and enable effective change.\u202f&nbsp; \u202f&nbsp; B1.\u202fAn inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques;\u202ftenacity to improve methods and maximise insights; and relentless creativity in their approach to\u202fsolutions.\u202f&nbsp; B2.\u202fEmpathy and positive engagement to enable working and collaborating in multi-disciplinary teams,\u202fchampioning and highlighting ethics and diversity in data work.\u202f&nbsp; B3.\u202fAdaptability and dynamism when responding to varied tasks and organisational timescales, and\u202fpragmatism in the face of real-world scenarios.\u202f&nbsp; B4.\u202fConsideration of problems in the context of organisation goals.\u202f&nbsp; B5.\u202fAn impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and\u202fintegrity in presenting data and conclusions in a truthful and appropriate manner.\u202f&nbsp; &nbsp;", "COMP4013: \nADVANCED PROJECT  To allow students to conduct, via individual initiative, a substantial piece of research into an unfamiliar area of Computing Science. \n\t\t\t To allow students to propose, develop and critically evaluate their work.  \n\t\t\t To allow students to evaluate and select the most appropriate research methods and skills relevant for conducting their project.  \n\t\t\t To provide an opportunity for students to demonstrate originality in their application of the knowledge they have gained throughout their degree, along with the ability to identify appropriate gaps in their knowledge and conduct independent learning to address these gaps.  \n\t\t\t To critically analyse background literature within their chosen domain in order to set their work in context.  \n\t\t\t To enhance students skills in writing up and presenting work in a scholarly fashion.    Students are expected to choose a project from a list offered by potential supervisors, or to propose their own project and find a suitable supervisor. \n\t\t\t Projects are inevitably and deliberately very varied in the topic they address and in the type of approach required; the common factor is that they are research-led. \n\t\t\t For example they may be practically or theoretically based. Many projects will consist of a combination of these. \n\t\t\t All projects are open-ended and contain considerably more work than can be achieved in the available time. Students therefore need to evaluate the problem domain and propose the elements of the greater problem they will address. \n\t\t\t Project work starts at the beginning of the 4th year. \n\t\t\t One of the main outcomes of the project is a significant academic-quality report. \n\t\t\t Successful completion requires good organisation, communication skills and management. \n\t\t\t Management is the responsibility of the student, in regular consultation with the supervisor.   On completion of this module, students will be able to demonstrate a detailed knowledge and understanding of one or more areas of Computer Science leading to research results. \n\t\t\t\t A deep understanding of the state of the art in the student's chosen area of specialisation demonstrated through critical analysis of relevant literature identified by the student. \n\t\t\t\t An in-depth knowledge and understanding of the student's chosen area of specialisation. \n\t\t\t\t Appreciable skills of research methods required in conducting a successful research based project. ", "LM Project - Conversion MSc Projects are normally undertaken individually with supervision from a member of the School's teaching staff. The projects are varied in their aims and cover most areas of Computer Science. Project allocation/selection normally takes place in Spring and may be chosen from a list of topics put forward by the School/Industry or be developed from the student's original idea  By the end of the module students should be able to:   \ndemonstrate the ability to successfully undertake a substantial software project    \ndemonstrate their competence as computing professionals, and to apply what they have learnt in the other components of their degree programme    ", "Workplace Assessment Year 4 COMPSCI4085P   By the time they have reached Year 4, students will have a huge breadth of experience in the workplace and should be capable of taking the lead on their own projects or being a mentor in a   particular software  &nbsp;engineering domain. They should use these skills to develop a substantial piece of work which solves a given problem, documenting their progress and rationale throughout the duration of the project.  &nbsp;  This course, and the equivalent courses in each of the previous years of the programme, is intended to create reflective life-long learners.     This project aims to give the student an opportunity to demonstrate their ability to plan and manage a significant piece of software development work. They should be able to make decisions rationally and justify these decisions convincingly based on research. They should also display their technical writing ability by presenting their work as a dissertation.     By the end of this course, students will be able to:    1.   Independently d  esign and construct   or extend   a substantial software product which demonstrates technical achievements in computer science  .    2.   Apply   technology  &nbsp;and  &nbsp;tools   in the workplace  .    3.   Manage technical skills appropriately to address a challenging problem in computer science  .    4.   Compose and present a dissertation that documents a software engineering project  &nbsp;and d  ebate the decisions   and   set their work in the context of a software suite  .  ", "Project - Masters 60   The project must include a substantial scientific or engineering investigation and cannot consist of only a literature review.  Successful completion of this module enables students to apply for exemptions from BCS registration.  The MEng/MSci project enables the student to demonstrate an ability to use advanced software engineering concepts and to apply material learnt in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea.  Unlike the 40-credit Computer Science project, this 60-credit project demands that the student demonstrate a broader range of the most advanced skills required at masters level. Further, the 60-credit module requires the submission of additional assessment material. This project is suitable for exceptionally independent and self-motivated students.  The aims of this module are to:  allow students to carry out a substantial task of their own choosing in any area of Computer Science including Artificial Intelligence, Software Engineering, Theory, Human-Computer Interaction, Security, or Natural Computation   allow students to conduct an in-depth exploration of advanced computational concepts (that would not be possible in a 40 credit module)   allow students to demonstrate skills in scientific or engineering methods, including software or hardware development, maths, or empirical investigations, applied to computer science problems  allow students to demonstrate their competence as computing professionals, and to apply what they have learnt in the other components of their degree programme  facilitate independent work on a substantial individual project, including prioritisation of different components of the project, as well as prioritising the project as a whole against other work  ", "Honours Project module (CS41001) The aim of your Honours project is to give you experience in carrying out a large, independent software development project. This is the culmination of your years of study in computer science and brings together the knowledge and skills you have gained throughout your studies.There is a wide range of project topics to choose from, which will allow you to select a project that is relevant to your future career plans or personal interests. Some projects may be more technical or research-oriented, while others are more user-centred. Every effort will be made to allocate you the project of your choice but this is not always possible.A typical project consists of all stages of the software development lifecycle. You are responsible for the day-to-day management of your project. Your academic supervisor will offer guidance and monitor your progress in regular meetings.   identify and describe the aims, objectives, and requirements of your project \n review any prior or related work related to your project \n select and apply the tools and technologies needed for your project \n develop a product, methodology, or solution to address the project objectives \n test, evaluate, and critically appraise your solution \n critically reflect upon your work \n communicate the objectives, development process, and outcomes of your work ", "Industrial Placement This module aims to enable the student to experience the Information Systems work environment of an organisation and understand its structure, function and operation. It will also enable students to undertake and demonstrate suitable professional practise within this domain. The student will undertake specific tasks to enhance the work based learning experience.  The students will undertake a series of lectures and tutorials prior to the placement year. The lectures will focus on a variety of issues relevant to the Information Systems Engingineering workplace and profession. They will also be introduced to the concept of work based learning and the workings of learning contracts.  Typical lecture topics: Health and safety issues affecting a moderning Information technology based workplace. The role and application of Quality Standards in an Information Systems Engineering workplace. Organisational structure and function of the modern organisation. Professional practice within the workplace environment. Recruitment practices and skills: Interviewing techniques, Interpersonal and Communication skills       On successful completion of this module the student should be able to:  1. Demonstrate familiarity with the application and operation of the Information Systems Engineering discipline within an Information Systems based workplace environment.  2. Recognise the contribution good professional practice can make to a workplace situation within an Information Systems based workplace environment.  3. Display personal and professional skills consistent with those of an Information Systems Engineering Professional at a level appropriate to their work place environment.  4. Understand the need for self-development in a professional situation. 5. Demonstrate the ability to work collectively with others within an Information Systems Engineering workplace environment. 6. Demonstrate the ability to solve work-based problems and to use appropriate methods in solving such problems. 7. Communicate effectively both verbally and in writing at a personal and technical level. 8. Demonstrate professional report writing skills. 9. Evaluate his/her own strengths and weaknesses.     ", "CSY4021 \u2013 Art Director Portfolio, Final Major Project  Description:  The module integrates and draws together the various aspects of the programme gained during study at levels 4, 5 and 6.The main aim of the module is to ensure students are prepared for their first steps towards the industry, by allowing them opportunity to develop a body of highly polished work demonstrated and refined via regular critiques of work in progress.This module gives them opportunity to specialize on developing content for their portfolio. The work developed will be as close to industry standard and expectations, as feasible, and will be tailored towards the specific areas of the individuals interest such as; Concept Art, Environment Art, Animation, UI design etc.This module is to support through mentoring the individual students on their professional journey.  ", "Dissertation This module is concerned with the development and presentation of an MSc Dissertation on a topic relevant to the student's named programme. The dissertation project will be based on the proposal prepared by the student prior to the start of the MSc Dissertation project period. A series of facilitation sessions are provided to support students in developing their MSc Dissertation proposals, including guidance on how to clearly set out the Background, Objectives, Methods and Work-plan. The project is essentially an independent piece of development or research work, and the skills necessary to carry this through will derive from the programme's taught modules . Students will be provided with up to 2 hours guidance in the form of technical consultancy and with up to 6 hours guidance in the form of process consultancy.  There is no defined syllabus per se, but the student will be expected to follow the project plan laid out in his/her proposal. Normally the proposal will specify a number of milestones at the end of major stages, and the student will be expected to submit appropriate deliverables at that time and receive appropriate feedback on this work. The student will be expected to submit a draft of the complete final dissertation in sufficient time to receive and act upon feedback from a supervisor.      Upon completion of this module, the student should be able to:  Manage a small development or research project in a timely manner. Deliver the contracted results including intermediate (milestone) deliverables and the final Dissertation.  Prepare an appropriately formatted, documented and structured Dissertation reporting on the work carried out.  Correctly cite and reference all sources used in their dissertation report, consistently using one referencing convention e.g. Harvard.     ", "Workplace Assessment Year 3 COMPSCI3011   By the time they have reached Year 3, students should be useful, contributing team members. This project is designed to give them an opportunity to demonstrate their ability to work in a team as a valuable, contributing asset, as well as demonstrating their ability to manage their own time and justify the decisions they make along the way. This course, and the equivalent courses in each year of the programme, is intended to create reflective life-long learners.     This project aims to   exercise  &nbsp;a student's ability   to  &nbsp;make useful contributions to a project. They should document their role in a major software development project in the workplace and indicate the contributions they have made, as well as their reasons for making particular development decisions.     By the end of this course, students will be able to:    1.   Design   or significantly extend   a substantial software product which demonstrates technical achievements in computer science.    2.   Evaluate workplace practices and methodologies in order to critically discuss their application  .    3.   Present a detailed account of the work that they have done to assessors and their workplace team  .  ", "MSc Project for Information Technology + COMPSCI5018P   The aim of the project is to enable students to carry out a substantial, inde  pendent, individual  &nbsp;software development  &nbsp;  proj  ect at level M.  It will   specifically   entail  &nbsp;  the development of a software prod  uct project  . Students will submit a dissertation for assessment.  &nbsp;     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and/or the conduct of a research project. Students will submit a dissertation for assessment.  &nbsp;     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and/or use standard methods to conduct a research project  ;    3.   Write a dissertation that will clearly describe the value of thei  r project as a software   product and/or research project;    4.   Describe their work to both technic  al and   non technical  &nbsp;audiences, demonstrating software products as appropriate.  ", "MSc Project for Computing Science (SOCIAL) COMPSCI5098P   This course is   intended for students registered on   the four year training programme 'PhD with Integrated Stud  y  &nbsp;in Computing Science and Psychology'  &nbsp;as part of an early exit award only.    &nbsp;   &nbsp;    The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and/or the conduct of a research project. Students will submit a dissertation for assessment.     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and/or the conduct of a research project. Students will submit a dissertation for assessment.     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and/or use standard methods to conduct a research project.    3.   Write a dissertation that will clearly describe the value of thei  r project as a software product and/or research project.    4.   Describe their work to both technic  al and non technical audiences, demonstrating software products as appropriate.  ", "CSC3094 : Major Project and Dissertation in Computer Science The individual project is a substantial piece of independent work involving technical and research skills and knowledge developed in the earlier parts of the degree. It develops your independence, your ability to research a relevant field of knowledge, plan and manage your own work.  You will have the opportunity to contribute directly to research or development activities, develop your own specialist expertise in the project topic, and further improve your planning and communication skills. You will work closely with a member of staff from one of the School's research groups, and you may also be working with an industrial partner. The project culminates in a substantial report which can form part of your portfolio for potential employers.   \nResearch skills are at the foundation of innovative projects in computing, whether in professional practice or in the Research &amp; Development lab.   \nGraduate computer scientists, in addition to their core technical competencies, should be able to access and appreciate research results. You will have the opportunity to contribute directly to research or development activities, develop your own specialist expertise in the project topic, and further improve your planning and communication skills. You will work closely with a member of staff from one of the School's research groups, and you may also be working with an industrial partner (possibly in an industry laboratory). The project culminates in a report.    \n\u2022  To deepen through practice the knowledge and skills acquired in the rest of the programme. \n\u2022  To develop an understanding of the character, processes and methods of research.  \n\u2022  To build confidence in approaching, using and appraising the Computer Science and related literature.  \n\u2022  To enhance skills required to define, propose, plan and execute a substantial individual project.  \n\u2022  To grow awareness of the ethical and professional issues that arise in project work. Students will either select a project from a list offered by potential supervisors or propose and refine a project proposal with a supervisor. In every project there will be a research component and a design, programming and/or analytic element.   \n1. Research: Background research will be undertaken in the selected topic using skills developed in the first  \n   part of the module using library and online resources. The supervisor will advise on the quality of sources  \n   and standards in the topic area.   \n2. Development and Analytic Skills: The core of the project will involve defining and carrying out a project  \n   plan largely independently, but with guidance from the supervisor.   \n3. Report: A report will be prepared, describing the technical background, the work undertaken, the analysis and  \n   evaluation of results and suggestions for further work. Guidance on the style and content of the report will  \n   be provided by means of examples and through the supervisor.   \nThe taught components support students with the following:   \n\u2022  What is Research? Principles of originality, knowledge (including fallibility) and gain. Relating research,   \n   innovation and impact.   \n\u2022  Scientific method and intellectual discovery. Reasoning techniques (deductive, abductive, inductive).   \n   Presentation of claims with supporting arguments: comparing and evaluating sources, critical evaluation of   \n   published material. Types of research activity in Computer Science, from theoretical studies to development  \n   or application studies.   \n\u2022  The Computer Science Knowledge Base: the peer review process; understanding, searching, and appraising   \n   literature including technical reports, conference proceedings, journals of record, identifying information  \n   need, locating and accessing information.   \n\u2022  Project Proposal and Planning: the elements of a project proposal; identifying aims and objectives, project   \n   definition, planning and risk management; ethical and professional context and considerations.   \n\u2022  Conducting a Project: review of process models; practical guidance on monitoring and management.   \n\u2022  Communicating findings: elements of scholarship including citation, referencing, the structure and style of   \n   research reports and papers, oral presentations and posters. ", "Enhanced MSc Dissertation in Computer Science  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science. To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills. To train students in original research and to develop their innovative and creative skills.\n \n   \n \n Building on research carried out in COMP4099, under the supervision of their COMP4099 supervisors, students will further study the topic areas of their COMP4099 module, to gain a deeper understanding of the background, the theoretical underpinnings, the state of the art development, and the applications of the their research topic in COMP4099, with the objective of developing new theoretical insights, novel methods, innovative solutions, and better applications. The results from further study and are to be distilled into a final MSc dissertation (which may incorporate main results of COMP4099 as appropriate). The major results of the dissertation will be condensed into a suitably formatted research paper, authored by the student. The dissertation and the paper form the assessed output of the module. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised submission will not form a part of the assessment for this module). \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Creativity and innovative. Original thinking.", "Research Project in Cyberphysical Systems  \n \nTo develop students\u2019 research, design, evaluation, presentation and scientific-writing skills.\n \n   \n \n You will conduct a piece of empirical and/or theoretical research in an area of cyber physical systems, under the supervision of a member of academic or research staff, and using an appropriate methodology. Where appropriate, your project may also be conducted in conjunction with an external organisation. \n \n  On completion of this module, students should be able to: conduct independent research in an appropriate strand of the degree, prepare and write scientific reports, under the supervision of a member of academic staff. &nbsp;Transferable Skills  Problem-solving, analysis &amp; synthesis, creative thinking, independence of thought, critical evaluation, independent learning.  Professional Skills  Oral and written communication, project design and management, time management, professional/ethical conduct and academic and client-focused reporting.  Technical Skills  Expanding knowledge by investigating the research literature and other technical documentation as needed. Advanced technical skills in an area appropriate to the agreed project topic.&nbsp;  Intellectual Skills  To be able to investigate a problem, question, hypothesis or idea in the cyber physical systems area, conduct independent research in that area, and prepare and write scientific reports. ", "Research Project in Data Science  \n \nTo develop students\u2019 research, design, evaluation, presentation and scientific-writing skills.\n \n   \n \n You will conduct a piece of empirical and/or theoretical research in an area of data science, under the supervision of a member of academic or research staff, and using an appropriate methodology. Where appropriate, your project may also be conducted in conjunction with an external organisation. &nbsp; \n \n  On completion of this module, students should be able to: conduct independent research in an appropriate strand of the degree, prepare and write scientific reports, under the supervision of a member of academic staff, at a level acceptable for publication in a conference or journal.Intellectual Skills:To be able to investigate a problem, question, hypothesis or idea in the data science area, conduct independent research in that area, and prepare and write scientific reports.&nbsp;Transferable Skills:Problem-solving, analysis &amp; synthesis, creative thinking, independence of thought, critical evaluation, independent learning.Professional Skills:Oral and written communication, project design and management, time management, professional/ethical conduct and academic and client-focused reporting.&nbsp;Technical Skills:Expanding knowledge by investigating the research literature and other technical documentation as needed. Advanced technical skills in an area appropriate to the agreed project topic.", "Enhanced MSc Research Project in Computer Science  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science. To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of computer science. The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking.", "LM Responsible Data Science Project   This module enables the student to demonstrate professional competence in a substantial data science task, to apply material learned in other components of the degree programme, and to design solutions that take full account of the appropriate legal and ethical frameworks. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.", "LM Artificial Intelligence and Machine Learning Project This module enables the student to demonstrate professional competence in a substantial artificial intelligence or machine learning task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.  By the end of the module students should be able to:    Carry out a substantial individual data science task, including appropriate background research, demonstrating a professional approach.    Work independently, prioritising different components of the work and managing a large project effectively    Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes    ", "Research Project in Computer Science  \n \nTo develop students\u2019 research, design, evaluation, presentation and scientific-writing skills.\n \n   \n \n You will conduct a piece of empirical and/or theoretical research in an appropriate strand of the degree, under the supervision of a member of academic or research staff, and using an appropriate methodology. Where appropriate, your project may also be conducted in conjunction with an external organisation. \n \n  On completion of this module, students should be able to: conduct independent research in an appropriate strand of the degree, prepare and write scientific reports, under the supervision of a member of academic staff, at a level acceptable for publication in a conference or journal. Transferable Skills  Problem-solving, analysis &amp; synthesis, creative thinking, independence of thought, critical evaluation, independent learning. Professional Skills  Oral and written communication, project design and management, time management, professional/ethical conduct and academic and client-focused reporting. Technical Skills  Expanding knowledge by investigating the research literature and other technical documentation as needed. Advanced technical skills in an area appropriate to the agreed project topic. Intellectual Skills  To be able to investigate a problem, question, hypothesis or idea in the computer science area, conduct independent research in that area, and prepare and write scientific reports.", "Project - Advanced MSc Each student undertakes a piece of research work that is expected to be based on a previously completed mini-project under the supervision of a research-active member of academic staff. Students should demonstrate an ability to define aims, objectives and plans; manage their project and time; use the results of systematic literature searches and communicate in writing and verbally. There is no requirement for the main project to include development of a program. The project may be completed in industry in the form of a work placement.  By the end of the module the student should be able to:  Define aims and objectives for a research project and propose feasible working plans to accomplish the work.  Manage their project and their time.  Search the literature of their topic in a systematic fashion.  Demonstrate good written and verbal communication.  Reach a level where they could work in their area of computing at a level appropriate to a first year research student or move into advanced work in industry.  ", "CS425 - Synoptic Project This class aims to develop participants' project management skills and advance their practical understanding of software development within a work-related project. Participants are required to undertake a significant individual work-based project with minimal supervision in an area of IT that is relevant to their job role. For British Computer Society accreditation, it is expected that within an undergraduate programme, students will undertake a major computing project, normally in their final year and normally as an individual activity, giving them the opportunity to demonstrate:&nbsp; their ability to apply practical and analytical skills present in the programme as a whole&nbsp;  innovation and/or creativity&nbsp;  synthesis of information, ideas and practices to provide a quality solution together with an evaluation of that solution&nbsp;  that their project meets a real need in a wider context&nbsp;  the ability to self-manage a significant piece of work&nbsp;  critical self-evaluation of the process&nbsp; During term 1, participants will identify a project in consultation with their line manager and academic supervisor and produce a draft scope followed by the final scope. Project delivery will take place in terms 2 and 3. A report will be submitted at the end of term 3 followed by and End Point Assessment presentation. After completing this class participants will be able to:&nbsp; Apply analytical and practical skills gained earlier in the programme.&nbsp;  Synthesise information, ideas and practice, to develop a quality solution.&nbsp;  Manage and execute a significant individual work-based project, with minimal supervision, within a field of IT agreed in discussion with the academic supervisor and the participant\u2019s employer.&nbsp;  Communicate project progress, business and technical information, and project outcomes in oral and formal written format.&nbsp;  Critically evaluate the project process and outcomes.&nbsp;  Specify, design, test and implement solution(s) appropriate to the (project) task and business domain.&nbsp; ", "   ", "LM Data Science Project This module enables the student to demonstrate professional competence in a substantial data science task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.  By the end of the module students should be able to:   Carry out a substantial individual data science task, including appropriate background research, demonstrating a professional approach.    Work independently, prioritising different components of the work and managing a large project effectively    Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes    ", "LM Project - HCI MSc   This module enables the student to demonstrate professional competence in a substantial HCI-related task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. The project may be completed in industry in the form of a work placement under the lead supervision of an academic member of staff from the School. ", "LM Project - Robotics MSc This module enables the student to demonstrate professional competence in a substantial robotics-related task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. The project may be completed in industry in the form of a work placement under the lead supervision of an academic member of staff from the School.  By the end of the module students should be able to:   Carry out a substantial individual robotics-related task, including appropriate background research, demonstrating a professional approach.  Work independently, prioritising different components of the work and managing a large project effectively.  Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes.  ", "Enhanced MSc Dissertation in Computer Science (Artificial Intelligence)  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science. To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills. To train students in original research and to develop their innovative and creative skills.\n \n   \n \n Building on research carried out in COMP4097, under the supervision of their COMP4097 supervisors, students will further study the topic areas of their COMP4097 module, to gain a deeper understanding of the background, the theoretical underpinnings, the state of the art development, and the applications of the their research topic in COMP4097, with the objective of developing new theoretical insights, novel methods, innovative solutions, and better applications. The results from further study and are to be distilled into a final MSc dissertation (which may incorporate main results of COMP4097 as appropriate). The major results of the dissertation will be condensed into a suitably formatted research paper, authored by the student. The dissertation and the paper form the assessed output of the module. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised submission will not form a part of the assessment for this module.&nbsp; \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills : Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Creativity and innovative. Original thinking.", "Computing Science Project  Content and aims \n                 \n                    Module overview\n                  The dissertation is your capstone project that runs through the whole of your final year and allows you to demonstrate your competence as an independent, critical and reflective computer professional, drawing on the skills you have developed throughout your degree programme. \n\n\n For the dissertation you will independently undertake the systematic development of a software application of your choice.&nbsp; \n\n\n With the guidance and advice of your dedicated supervisor, you will: \n\n\n \n\t review the published literature and available technical solutions to identify the project aims and objectives; \n\t review and compare implementation technologies; \n\t plan and implement your technical solution (including obtaining ethical approvals); \n\t test your software and/or analyse the results using appropriate methods; \n\t interpret and present the findings in a variety of formats (written reports, poster, talk).&nbsp; \n \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  conduct a substantial and largely-independent piece of work in a professional manner;   work with a range of research methods and critically apply problem-solving skills to define, conceptualise, contextualise and analyse a practical problem requiring a technological solution;   develop technological solutions to problems, integrating core and specialist knowledge;   apply critical evaluation based in a broad range of technical knowledge;   document and verbally present your work in a variety of formats to general and specialist audiences.    ", "Research Project in Computer Science (Artificial Intelligence)  \n \nTo develop students\u2019 research, design, evaluation, presentation and scientific-writing skills.\n \n   \n \n You will conduct a piece of empirical and/or theoretical research in artificial intelligence, under the supervision of a member of academic or research staff, and using an appropriate methodology. Where appropriate, your project may also be conducted in conjunction with an external organisation. \n \n   On completion of this module, students should be able to:   Intellectual Skills   To be able to investigate a problem, question, hypothesis or idea in the artificial intelligence area; \t Conduct independent research in that area and \t Prepare and write scientific reports.  Transferable Skills  Problem-solving, analysis &amp; synthesis, creative thinking, independence of thought, critical evaluation, independent learning.  Professional Skills  Oral and written communication, project design and management, time management, professional/ethical&nbsp;conduct&nbsp;and academic and client-focused reporting.  Technical Skills  Expanding knowledge by investigating the research literature and other technical documentation as needed. \t Advanced technical skills in an area appropriate to the agreed project topic. ", "MSc Project for Computing Science+ COMPSCI5086P   The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and/or the conduct of a research project. Students will submit a dissertation for assessment.     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and/or the conduct of a research project. Students will submit a dissertation for assessment.  &nbsp;     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and/or use standard methods to conduct a research project.    3.   Write a dissertation that will clearly describe the value of thei  r project as a software product and/or research project.    4.   Describe their work to both technic  al and   non technical  &nbsp;audiences, demonstrating software products as appropriate.  ", "Enhanced MSc Research Project in Computer Science (Artificial Intelligence)  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science (artificial inteliigence). To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of artificial intelligence (e.g., automatic scheduling and optimization, intelligent modelling and analysis, intelligent human computer interaction, agents, machine learning, computer vision, data mining and related areas). The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding : Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking.", "Enhanced MSc Dissertation in Cyber Physical Systems  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern cyber physical systems. To prepare students for future academic or industrial research-oriented careers in cyber physical systems. To develop students' research, planning, organisation, presentation and scientific writing skills. To train students in original research and to develop their innovative and creative skills.\n \n   \n \n Building on research carried out in then Enhanced MSc Research Project module, under the supervision of their project supervisors, students will further study the topic areas of their Enhanced MSc Research Project module, to gain a deeper understanding of the background, the theoretical underpinnings, the state of the art development, and the applications of the their research topic in that project module, with the objective of developing new theoretical insights, novel methods, innovative solutions, and better applications.&nbsp;  The results from further study and are to be distilled into a final MSc dissertation (which may incorporate main results of the Enhanced MSc Research Project module as appropriate). The major results of the dissertation will be condensed into a suitably formatted research paper, authored by the student. The dissertation and the paper form the assessed output of the module. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Creativity and innovative. Original thinking.&nbsp; &nbsp;", "Individual Project: Human-Computer Interaction  \n \nTo develop students' research, design, evaluation, presentation and scientific-writing skills. The topic can be any area of interactive systems design which is of mutual interest to both the student and supervisor, but there is an expectation that the project involves significant design and/or evaluation work.\n \n   \n \n You will undertake a project which is relevant to Human-Computer Interaction, developing your skills in research, such as: planning research activities, empirical investigation, literature review, critical reflection, evaluation, oral and written communication, individual learning and time management. Collaboration with business, industry, and other outside bodies is encouraged. \n \n   Knowledge and Understanding:  Individual projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. &nbsp;&nbsp; &nbsp; Intellectual Skills:  On completion of the module the student should be able to: \u2022&nbsp;&nbsp; &nbsp;acquire, and analyse systematically and effectively, substantial quantities of information; think independently while giving due weight to the arguments of others; \u2022&nbsp;&nbsp; &nbsp;think independently while giving due weight to the arguments of others; \u2022&nbsp;&nbsp; &nbsp;understand complex ideas and relate them to specific problems or questions. \u2022&nbsp;&nbsp; &nbsp;Depending on the specific project other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any areas of the curriculum and so may address any of the professional skills outcomes.  Transferable Skills:  \u2022&nbsp;&nbsp; &nbsp;The ability to obtain information from scientific and industrial literature and from software systems including the internet. \u2022&nbsp;&nbsp; &nbsp;The ability to critically analyse such information. \u2022&nbsp;&nbsp; &nbsp;The ability to organise and manage their own (and others' time) including scheduling tasks and meeting deadlines. \u2022&nbsp;&nbsp; &nbsp;The ability to prepare individual and written reports and oral presentations. \u2022&nbsp;&nbsp; &nbsp;The ability to undertake self-directed study, including information acquisition and analysis to enable continued learning during a professional career. \u2022&nbsp;&nbsp; &nbsp;The opportunity to exhibit innovation and creativity in problem solving. \u2022&nbsp;&nbsp; &nbsp;The ability to reflect upon and assess their own progress, strengths and weaknesses.", "End Point Assessment (Data Scientist Apprenticeship)  \n \n\n \n   \n \n This module is the integrated End-Point Assessment (EPA) which is the final assessment in the Data Scientist apprenticeship. All apprentices must undertake an EPA. This is a synoptic assessment of the knowledge, skills and behaviours that have been learnt throughout the apprenticeship. The purpose of the assessment is to make sure you meet the standard set by employers and that you are occupationally competent.  The EPA has three assessment methods;  \t &nbsp;&nbsp;&nbsp; Knowledge test followed by \t &nbsp;&nbsp;&nbsp; Report (based on a work-based project) and \t &nbsp;&nbsp;&nbsp; Professional discussion (informed by portfolio)   Successful completion of the EPA will signify the completion of the apprenticeship as well as the full Degree. The EPA must be completed over a maximum total assessment time of 6 months after the apprentice has met the EPA gateway requirements.  Further details of gateway requirements and the EPA assessment plan can be found in the End Point Assessment guidance documentation. https://www.instituteforapprenticeships.org/media/1973/st0585_data-scientist-integrated-degree_l6_ap-for-publication_230718.pdf \n \n  To demonstrate the knowledge, skills and behaviours of the Data Scientist apprenticeship standard. KSBs  Knowledge Test K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; Report S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B4. Consideration of problems in the context of organisation goals.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp; Professional Discussion K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp;3.Data-driven decision making and the good use of evidence and analytics in making choices and decisions.K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:3.Common patterns in real-world data.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B4. Consideration of problems in the context of organisation goals.B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "Project (CompSci - MSc) This module enables the student to demonstrate professional competence in a substantial software-related task and to apply material learned in other components of the degree programme.  Projects are chosen from staff suggestions or are developed from the student's original idea stages of the software life-cycle.  By the end of the module the student should be able to:Carry out a substantial individual software-related task, including appropriate background research, demonstrating a professional approach;Work independently, prioritising different components of the work and managing a large project effectively;Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes.", "Enhanced MSc Research Project in Cyber Physical Systems  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern cyber physical systems. To prepare students for future academic or industrial research-oriented careers in cyber physical systems. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of cyber physical systems (e.g., artificial intelligence, robotics, cyber security, modelling and simulation, ethical design and interactive systems, and related areas) supervised by a member of the University academic staff. The topic should fall within the supervisors\u2019 research interests and supervisors must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisors or the student, and may be theoretical, empirical, or other suitable types depending on what is appropriate chosen area and topic. Projects, however, must ultimately be agreed with the supervisors concerned.&nbsp;  The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted (electronically) as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking.", "MSci Research Proposal and Project COMPSCI5073P   The aim of this course to enable students to prepare and undertake a substantial, independent, individual research-oriented project at level M. It will include a literature survey,   indentifying  &nbsp;and refining a research problem in Computing Science, then carrying out an investigation of the problem and writing up the results.     The aim of the course is to provide students with an opportunity to identify and refine a research problem in Computing Science of a suitable degree of difficulty  &nbsp;while  &nbsp;carry  ing  &nbsp;out a literature surve  y of the problem and t  hen undertake a substantial, independent, individual resear  ch-oriented project at level M including the   writing up   of   the results.     By the end of this course students will be able to:    1.   Specify and justify a well-defined research problem in the area of their   MSci  &nbsp;specialism;    2.   Articulate and justify a feasible approach for tackling this problem;    3.   Produce a comprehensive literature survey covering their research problem, offering a critical review of the key relevant work in this area.    4.   Formulate a research plan for the research problem;    5.   Carry out a coherent and well-executed investigation of a research problem in Computing Science, using appropriate methods and producing valid results;    6.   Write up their research in the form of an academic paper, including the expression of a well-defined thesis and argument, a clear statement of the research methods and results, a critical evaluation of the research results, a consideration of their significance and of their relationship to other relevant work.  ", "LI Bridging Coursework Module   ", "LM Data Science and Artificial Intelligence Project   This module enables the student to demonstrate professional competence in a substantial data science or artificial intelligence task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from both institutions or be completed in industry under the lead supervision of an academic member of staff.", "Computer Science Study Abroad   The module allows the student to complete a year of study related to computer science in an approved institution in another country.  Such study may include a component of the language of instruction, where this is not the student's native language.  Computer science topics studied will be specified by the Module Co-ordinator to be appropriate to a second year Computer Science student at the University of Birmingham.Normally a student studying in his or her native language will be expected to undertake 2/3 of the relevant year in that institution; a student studying in another language will be expected to undertake 1/3 of the relevant year.  (These proportions include a substantial allowance made for necessary individual study, eg to meet different prerequisites or become proficient in the language of instruction).", "Computer Science Industrial Placement   The module allows the student to complete an industrial year", "COMP3986: \nComputer Science Placement Module  To provide the experience of working in a professional environment as complementary to academic study and to contribute to the overall aims of the BSc or MEng degree programmes. This will enable students to develop personally and to acquire transferable skills unlikely to be obtained during the taught levels of the degree.   This will be chosen in agreement with the Placement Provider and will depend on the nature of the placement.   Dependent on the Placement Provider and role ", "120 Credit Computer Science No Qual Research Student Module  \n \n\n \n   \n \n  \n \n  ", "Study Abroad Year   Summary module description:   \n  This module provides opportunities for students who wish to study abroad at a university with which the University of Reading has an exchange agreement. The student first applies to a host university abroad, and selects modules offered by the host university. These modules are equivalent to 120 credits from the University of Reading.&nbsp;&nbsp;  \n     Outline content:   \n  The module is based on exchange programmes with universities in other countries. It consists of an approved number of credits from a host university amounting to the equivalent of 120 credits from the University of Reading. Support and advice about applying for places can be obtained from the Study Abroad office in the University of Reading.  \n     Assessable learning outcomes:  \n  By the end of the module, it is expected that the student will be able to successfully pass oral and/or written examinations according to the requirements of the host university.  \n  ", "Computer Science Study Abroad (COMP0032)   Study Abroad Year:  \n\n This module represents the Study Abroad Year of an MEng International Programme. The Study Abroad Year is a year of study taken at an approved international partner institution in Year 3, which replaces the equivalent Year 3 study at UCL. Students resume the standard Year 4 curriculum when they return to UCL. \n\n More information about Study Abroad is available at  UCL\u2019s Study Abroad website  and in the  Computer Science Student Handbook, Section 8 . The department will notify students about the Study Abroad scheme at the start of Year 2. \n\n  Aims:  \n\n The educational aims of the Study Abroad Year follow exactly those of their existing MEng Computer Science or MEng Mathematical Computation programme, with the additional aims of extending the educational experience of students through: (a) continuing advanced education in computer science, (b) experience of education in a different cultural and/or linguistic setting, and (c) access to high level teaching and research expertise from outside UCL. \n\n  Intended learning outcomes:  \n\n Students will have studied modules / courses at an appropriate breadth and depth to enable them to progress to Year 4 of their&nbsp;MEng International Programme, whilst at the same time having benefited from the experience of Higher Education in a different linguistic and/or cultural setting.   Content:  \n\n Students studying abroad must follow a programme that satisfies the following criteria: \n\n  Be of overall of equivalent depth to that of their UCL Year 3 MEng&nbsp;programme. \n\t Be substantially composed of courses in computer science. \n\t Have a significant engineering orientation (as defined by UK-SPEC) and&nbsp;be compliant with the QAA subject benchmark framework. \n\t Be of equal workload to that of their&nbsp;UCL Year 3 MEng that is, using accepted equivalence measures, be of 120 credits. \n\t Be formally assessed by the host institution and the results of the assessment independently reported to the Study Abroad Tutor. \n\t Include taught modules/ courses, that should not consist solely of project work. \n   Requisites:  \n\n To be eligible to select this module, a student must: (1) be registered on a programme and year of study for which it is formally available; and (2) have been approved to commence the Study Abroad Year.   ", "Industrial Year   Summary module description:   \n  This module is taken by students entering a placement year in industry. The placement is for a minimum of 9 months (40 weeks) and is completed in one academic year. The students carry out work within the company with which they are placed that is related to Computer Science/IT. The students are assessed on the basis of written and oral presentations of their work and experience during the placement.  \n \n Successful completion of a placement does not contribute to the student\u2019s final degree classification but earns them a \u2018with Industrial Year\u2019 degree in their subject area.  \n     Outline content:   \n  The area of work undertaken on the placement will be related to the student's programme in the Department of Computer Science. The day-to-day content of the work will be set by the company. The work placement should provide the student with the opportunity for independent problem solving and working in a team.  \n     Assessable learning outcomes:  \n  .  \n  ", "Software Engineering Full Year Industrial Placement H COMPSCI4079   Software engineering stu  dents will undertake a   ten to twelve month  &nbsp;assessed placement in industry to gain relevant practical experience.  &nbsp; Assessment materials engage students in the wider software engineering literature and encourage students to reflect on and share their experiences on placement.     To give students the experience of a real software development environment.    To embed the software engineering theory, principles and tools studied during the previous three years through practical experience.    Enable students to contextualise their own experiences of software engineering within an understanding of the wider discipline    To develop a student's ability to evaluate and enhance their personal software process.     By the end of this course students will be able to:    \u25a0&nbsp;  Describe applicability of practices, methods and tool taught in software engineering and other academic computing science courses to real world software development efforts.     \u25a0&nbsp;  Select appropriate sources of information on Software Engineering in practice.    \u25a0&nbsp;  Critically analyse empirical software engineering, case studies and experience reports.    \u25a0&nbsp;  Communicate reflectively on their experiences on placement and the relationship to theoretical material delivered at University  .  ", "Foundations in Software Development  \n \nThis teaching block aims to introduce the basics of software development aimed at a learner who has little or no previous experience. It will show learners the basic principles of coding and will give the technical skills for them to break down simple problems and produce solutions to them using software. The focus will be on software that processes data and applies mathematical and data science techniques.\n \n   \n \n Indicative content:  Creating a basic program from writing it to compiling and running it Reading / Writing data to / from a file Storing and manipulating variables Using fundamental control structures Decomposing problems and using functions and libraries Basic testing and debugging Handling strings and basic text mining \n \n  Can use appropriate tools to write simple programs which solve a problem, especially a data science problem. &nbsp;Understands and can use basic procedural control structures and programming operators to implement simple algorithms. &nbsp;Can store and manipulate different types of data (for example numerical, textual, lists, sets, maps). &nbsp;Can produce simple visualisations of data using simple programming constructs. &nbsp;Understands the need for software testing and can demonstrate basic software testing principles in practice. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;", "Introduction to Probability and Statistics  \n \nThe purpose of this module is toprovide an introduction toprobability,probabilistic reasoning, andan introduction to statistical inference.It will also equip Apprentices with a good grounding in practical data analysis as well as the ability to use a computer package and write a report.Apprenticeswill acquire knowledge and skills of relevance to a professional statistician.\n \n   \n \n This teaching block&nbsp;provides an introduction to&nbsp;probability and statistics required to underpin further statistical analysis in data science. The module introduces the mathematical framework for the logic of uncertainty using Bayes\u2019 Theorem and demonstrates how it can be applied to analyse data and base conclusions on it (with particular reference to the Central Limit Theorem). A range of statistical ideas and skills are also developed, building on the foundations&nbsp;of probability preceding this. &nbsp;In particular, this will involve modelling the data using probability models and estimating important parameters or using techniques such as hypothesis testing to draw conclusions about that data and linear regression to estimate trends. Use is made of an appropriate statistical package to apply the principles and methods described in the material. &nbsp; \n \n  Calculate probabilities and moments using probability mass and density functions&nbsp; &nbsp;Calculate simple properties of discrete bivariate random variablesState and apply the central limit theoremConduct appropriate hypthesis tests or a variety of situations and calculate p-valuesBe able to fit and analyse linear models with one covariateAnalyse categorical data by testing proportions and independence of two variables.&nbsp;Use statistical software to carry out calculations and interpret the output. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an&nbsp;organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and&nbsp;optimise&nbsp;analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations,&nbsp;optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and&nbsp;organisational&nbsp;resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp; K5. The data landscape: how to critically&nbsp;analyse, interpret and evaluate complex information from diverse datasets:&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp;S1. Identify and clarify problems an&nbsp;organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions&nbsp;in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis,&nbsp;visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve&nbsp;organisational&nbsp;outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning,&nbsp;optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards.&nbsp;Visualise&nbsp;data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of&nbsp;organisation&nbsp;goals.&nbsp; S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of&nbsp;organisational&nbsp;empathy (human,&nbsp;organisation&nbsp;and technical) and build relationships through active listening and trust development.&nbsp; S8. Use project delivery techniques and tools appropriate to their Data Science project and&nbsp;organisation. Plan,&nbsp;organise&nbsp;and manage resources to successfully run a small Data Science project, achieve&nbsp;organisational&nbsp;goals and enable effective change.&nbsp; &nbsp; B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and&nbsp;maximise&nbsp;insights; and relentless creativity in their approach to solutions.&nbsp; B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.&nbsp; B3. Adaptability and dynamism when responding to varied tasks and&nbsp;organisational&nbsp;timescales, and pragmatism in the face of real-world scenarios.&nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;", "Databases  \n \nOn completing this module students should:\u2981 be able to design an appropriate database for a particular scenario, drawing on a wide range of knowledge of different kinds of databases and their capabilities and limitations\u2981 be able to evaluate the appropriateness of different databases and data modelling techniques for a given application\u2981 be able to practically implement database systemsbe aware of privacy, ethical and legal concerns in the use of databases\n \n   \n \n To give learners broad overview of concepts, practical skills and applications in the databases area, including:  \t Core ideas of what a database is and how it is structured, focusing on relational databases \t How databases are designed, including entity-relationship models, designing a high-quality data model and evaluating the quality of a database schema \t How information is inserted, modified, processed and extracted from a database, including an introduction to SQL \t Alternative models of databases such as NoSQL and graph databases \t How to choose the appropriate tools and data representations for a particular application \t How databases handle different kinds of data, including media data, text, and \u201cunstructured\u201d data \t Basic ideas of where databases are located physically, including local servers and cloud storage; concurrency, real-time and update issues; and how data is coordinated in large organisations, including ideas of data warehousing and OLAP \t Ideas of database systems at different scales and the technologies needed to handle data at various scales, including basic ideas of \u201cbig data\u201d \t Legal and ethical concerns such as privacy, rights to access data, freedom of information \t Case studies, including both examples of good practice and examples of problems and failures \t&nbsp;  \n \n  To work confidently with a wide range of data in databases and database languages so as to be able to tackle substantial data problems. &nbsp;Be able to choose appropriate technologies and models for the use of databases in practical applications and to evaluate the strengths and weaknesses of existing systems. &nbsp;Understand the role of ethical, privacy, bias and legal concerns and to embed this into practice. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an&nbsp;organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and&nbsp;optimise&nbsp;analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations,&nbsp;optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and&nbsp;organisational&nbsp;resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp; K5. The data landscape: how to critically&nbsp;analyse, interpret and evaluate complex information from diverse datasets:&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp;S1. Identify and clarify problems an&nbsp;organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis,&nbsp;visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve&nbsp;organisational&nbsp;outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning,&nbsp;optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp;B3. Adaptability and dynamism when responding to varied tasks and&nbsp;organisational&nbsp;timescales, and pragmatism in the face of real-world scenarios.&nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.", "Computer Science First Year Tutorial  \n \nTo provide general academic as well as module specific support.\n \n   \n \n This module consists of a series of tutorials for first-year students. It forms part of the personal tutor system within&nbsp;the School of Computer Science. There is one tutorial per week and they normally take place in the personal tutor's office together with a handful of other first-year students assigned to the same personal tutor, forming a tutor group.  There are two types of tutorials:  \t General: covering academic life and practical aspects related to your studies. \t Module-specific: providing academic support for first-year modules   The tutorials are timetabled centrally and will thus appear in the personalised timetables. All tutorials, except the ones designated \u201cdrop in\u201d are compulsory. There are also compulsory associated elements of assessment; this may be in the form of Moodle quizzes, for example. \n \n  Reflect upon and assess their own progress, strengths and weaknesses to develop reflective and adaptive learning skills.", "Becoming a Professional Data Scientist  \n \nThis teaching block allows apprentices to prepare for work as a professional data scientist by supporting apprentices in their development of professional skills, attitudes and behaviours necessary for employment in a diverse and changing environment.\n \n   \n \n This teaching block allows apprentices to prepare for work as a professional data scientist. &nbsp;  Apprentices will be introduced to relevant literature and professional networks so that they may prepare for further study, research and lifelong learning opportunities as they progress their career. They will build a portfolio of projects representing the development of their individual knowledge, skills and behaviours as well as reflecting and adapting their current CV so that apprentices may identify gaps and consequently prioritise and plan personal development targets for successful ongoing achievement.&nbsp; This portfolio will be necessary for learners to proceed through the Gateway and will be used as a basis for the professional discussion part of the end-point assessment.  Learners will be expected to reflect on their current role and future direction (considering the on-the-job activities within this reflection) \n \n  Teaching Goal 1Demonstrate an awareness of professional skills relevant to that of a data scientist as well as attitudes and behaviours necessary for employment in a diverse and changing environment.Teaching Goal 2Demonstrate an awareness of development and employability skills by keeping an up to date portfolio and CV.Teaching Goal 3Demonstrate a comprehensive understanding of current and developing data science approaches and apply them where appropriate. KSBs K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "Further Mathematical Methods for Data Science  \n \nTo develop familiarity and advanced use of differential and integral calculus;To give a firm foundation in linear mathematics and associatedtechniques;To provide confidence in core mathematical techniques for use in subsequent modules.\n \n   \n \n This teaching block consolidates core mathematical topics in the differential and integral calculus of a function of single variable. Basic theory is extended to more advanced topics in the calculus of several variables. In addition, the basic concepts of logic and matrix algebra are established as well as theory and&nbsp;tests for determining the limits of sequences and series. An emphasis in this block is to develop general skills and confidence in applying the methods of calculus and developing techniques and ideas that are widely applicable and used in subsequent modules. Apprentices will&nbsp;use&nbsp;a computer package to plot graphs and implement basic algorithms. Major topics include:&nbsp;  \u2981 Logic \u2981 Differential calculus of several variables;&nbsp; \u2981 Matrix&nbsp;algebra; \u2981&nbsp;Sequences and Series&nbsp; \u2981 Basic graph theory and&nbsp;optimisation.&nbsp; \n \n  Understand and apply the concepts of propositional logicUnderstand and apply the basic concepts of single and&nbsp;multivariate calculus;&nbsp; &nbsp;Apply tests for convergence of sequences and&nbsp;series;&nbsp; &nbsp;Apply manipulation&nbsp;of&nbsp;matrices&nbsp;to solve systems of linear equations and eigenvalue&nbsp;equations;&nbsp; &nbsp;Solve&nbsp;optimisation&nbsp;problems.&nbsp; &nbsp;Apply knowledge and techniques of graph theory to solve problems. &nbsp;", "Introduction to Software Development for Data Science  \n \n\u2981 To introduce the principles, techniques and applications of a range of data analysis and modelling techniques.\u202f\u2981 To enable the\u202fapprentices\u202fto appreciate some of the most widely used data analysis and modelling techniques and to know which one to choose for their applications.\u202fTo enable the\u202fapprentices\u202fto understand and be able to put into practice computer-based data analysis and modelling techniques\n \n   \n \n This module builds on learners understanding of the basic principles of programming and algorithms and&nbsp;addresses some of the key concepts required for data management, and data analytics.&nbsp;  Learners will acquire a practical understanding of how to access, query and manage data, using traditional relational databases and contemporary NoSQL approaches. Using real-world datasets, standard software packages and data\u202fvisualisation\u202ftechniques,\u202fapprentices\u202flearn how to\u202forganise\u202fand\u202fanalyse\u202fdata to answer questions about the world, as well as developing an appreciation of user needs surrounding data systems.\u202f&nbsp;  Indicative topics covered\u202finclude: data ingress; data modelling; data pre-processing methods including data imputation; forecasting methods; clustering and classification. \n \n  Understand and logically evaluate program requirements and specifications.&nbsp; &nbsp;Understand the complex ideas of programming solutions and relate them to&nbsp;particular problems.&nbsp;&nbsp; &nbsp;Design and&nbsp;analyse&nbsp;simple algorithms and data structures.&nbsp;&nbsp;Read, clean and analyse different kinds of data from different sources to produce data science solutions. &nbsp;Apply appropriate software development methods and tools.&nbsp; &nbsp; KSBs K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions. B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;", "Foundations in Maths for Data Science  \n \nTo provide a foundation of mathematical skills to equip apprentices with both confidence and competence in a range of fundamental elementary mathematical techniques and basis for advanced mathematical methods used in the study and analysis of data science problems.\n \n   \n \n This course provides a basic course in algebra and calculus, introducing key elements of definition, manipulation, graphical representation of functions, as well as quadratic equations, simultaneous linear equations, differentiation and integration. \n \n  Demonstrate algebraic facility with algebraic topics including linear, quadratic, exponential, logarithmic and trigonometric functions.Produce and interpret graphs of basic functions of these typesDemonstrate the skill of computation with real sequences and seriesCompute limits, derivatives and definite and indefinite integrals of basic functions of these typesUnderstand and be able to apply the basics of vector algebra KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; &nbsp; S1. Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; &nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;", "AI and Machine Learning  \n \nTo give an understanding of contemporary artificial intelligence (AI) and machine learning (ML) methods.To develop skills in the practical implementation of AI and ML methods.To learn how to choose which methods to apply to a specific problem, and how the methods can be applied to solve practical problems in data science.To enable apprentices to apply data mining techniques on real data sets, some of which can be described as big data sets. Apprentices will also learn to appreciate both the potential and limitations of big data.\n \n   \n \n This module gives brief introductions to a range of Artificial Intelligence and Machine Learning techniques.&nbsp; The module will cover the history of AI and techniques such as local search techniques, evolutionary algorithms, neural networks and deep learning.  It will prepare learners for further independent work on selecting appropriate techniques and developing their understanding and application of AI and ML techniques in practice. \n \n  Understand key concepts of artificial intelligence and machine learning.Be able to apply a range of artificial intelligence and machine learning techniques to data science problems.Independently and systematically design, develop and test software as part of non-trivial data science problem.Be able to implement AI techniques using languages and systems used in the contemporary workplace. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; Data processing and storage, including on-premise and cloud technologies. \t Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. \t Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: Statistical and mathematical models and methods. &nbsp; \t Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t Applications such as computer vision and Natural Language Processing. \t An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;", "Probability Models and Time Series  \n \nThe purpose of this module is to provide a thorough grounding in a broad range of techniques required in the analysis of probabilistic and statistical models, and to provide an introduction to stochastic processes by studying techniques and concepts common in the analysis of discrete time Markov Chains. It will also deepen and broaden the students\u2019 knowledge and experience of statistics by studying the theory and methods used in time series and forecasting.\n \n   \n \n In this teaching block the ideas of probability introduced in the first year are extended to continuous random variables. It will provide an introduction to stochastic processes, (i.e. random processes that evolve with time) and time series analysis (i.e. series of observations evolving in time and observed at discrete points in time). There will be a particular focus on discrete-time Markov chains and forecasting methods which are fundamental to the wider study of techniques required in the analysis of probabilistic and statistical models.&nbsp; &nbsp; \n \n  Demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science. &nbsp;Identify and formulate problems in terms of probability and solve them to build up a simple stochastic model. &nbsp;Understand and apply basic properties of discrete-time Markov chains. &nbsp;Carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 9.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 10.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 11.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;", "Team Working Skills  \n \nThe aim of this block is to enable learners to understand basics of running an agile software development team in order to apply this knowledge and skills in their academic software projects and in the workplace.\n \n   \n \n This teaching block is intended to provide some up-front learning in relation to successful working software development teams.  The module will cover:  The nature of teams and building successful teams. Software development methodology \u2013 especially agile development and how to run an agile project in practice.  The teaching block will also provide ongoing supervision support for each software development project group to ensure that the approach to each team\u2019s software development teamwork is developmental, and improving through the project. \n \n   Team Goals To learn approaches to working successfully in software development teams. &nbsp; &nbsp;To understand how to establish software specifications and deliver code against those specifications. &nbsp;Reflect on issues arising within a team environment and learn how to resolve them. In doing so learn from the group project experience.&nbsp;Plan, manage and track a significant data science software activity. &nbsp;Identify a suitable data science problem, questions and corresponding software which relate to organisational goals. KSBs K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions. B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "Statistical Models and Methods  \n \nThe purpose of this course is to introduce a wide range of statistical concepts and methods fundamental to applications of statistics in data science. It will also introduce the key concepts and theory of linear models, illustrating their application via practical examples drawn from real-life situations. Apprentices will acquire knowledge and skills of relevance to a professional statistician.\n \n   \n \n This teaching block provides an introduction to statistical concepts and methods to provide an appreciation of the scope of the subject and to demonstrate the central role of parametric statistical models. The key concepts of inference including estimation and hypothesis testing will be described, as well as confidence intervals and likelihood ratio tests. The second part of this block introduces a wide class of techniques such as regression, analysis of variance, analysis of covariance and experimental design which are used in a variety of data science applications. &nbsp;Practical experience will be obtained by the use of a statistical computer package. &nbsp; \n \n  Apply methods concerning estimation of parameters in standard statistical models; in particular the method of moments and the maximum likelihood method. &nbsp;Apply methods for interval estimation; in particular, exact and approximate confidence intervals based on asymptotic theory. &nbsp;Perform statistical hypotheses tests using data from studies (such as t and F-tests, comparison of models and parameter values). &nbsp;Apply methods for analysing categorical data and methods without having to make distributional assumptions (non-parametric statistics). &nbsp;Fit a linear model to data, both manually and using statistical software. &nbsp;Check model fit, diagnose errors, and perform model selection amongst the class of linear models. &nbsp; KSBs K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp; K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp; S1.&nbsp;Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; &nbsp; B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp; B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner", "Visualisation Techniques  \n \nUnderstand how human perception and cognition influences the design of visual representation of data.Visually represent data with the aim to summarise, understand, extract hidden patternsGain practical skills using commercially available software to create dashboards and apply visualisation techniques to real world data science problems.This module will highlight how visualisation plays a key role in data driven decision making.\n \n   \n \n Data Visualisation is the process of extracting knowledge from complex data, and presenting it to a user in a manner that this appropriate to their needs to make it easier to pull insights from. This module provides an understanding of data visualisation concepts, terminology, methods, and its importance in data processing. You will learn about using a range of visual elements and software to see and understand trends outliers and patterns in data. &nbsp;You will also learn a productive way to convey stories form your data highlighting useful information.  This module enhances human perception and cognition to make sense of data in a way to effectively communicate conclusions drawn for the data to a wider audience. You will also learn about the challenges associated with visualising large or ambiguous or time-based datasets. You will also learn about psychological theories that help explain how humans process information and consider their relevance to the design of effective visualisations. Using example images, we will critique them, building up knowledge about what works, and what doesn't.  We will also explore visualisation techniques linked to textual analysis.  Learners will be encouraged to use visualisation tools used within their organisation to present findings in their role. \n \n  Understand the key concepts of data visualisation. &nbsp;Can use appropriate visualisation tools and techniques to present data of different types appropriately to different audiences.Effectively communicate and ideas relating to the software process and data science solutions. &nbsp; KSBs     K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp;          Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp;            Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp;            Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp;          K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp;          Statistical and mathematical models and methods.&nbsp;&nbsp;            Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp;            Applications such as computer vision and Natural Language Processing.&nbsp;            An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp;            Development standards, including programming practice, testing, source control.&nbsp;          K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp;          Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp;            Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp;            Common patterns in real-world data.&nbsp;          S1.&nbsp;Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp;        S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp;        S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp;        S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp;        S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp;        S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.    &nbsp;    B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp;      B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;  ", "Responsible Decision Making  \n \nTo introduce the principles of ethics, bias and responsible decision making in the context of artificial intelligence and data science.To introduce case studies in responsible decision making, including cases in which lack of oversight had real-world consequences.To enable the apprentices to understand and be able to put in to practice responsible decision-making techniques.\n \n   \n \n This module will introduce the principles of ethical data-driven development of decision-making tools. It will enable apprentices to understand real-world implications and consequences of developing AI techniques and appreciate the range of data science techniques that can be used to analyse and manage biased data. &nbsp;Learners will need to investigate and understand specific legal and governance issues relevant to their role (pulling from, working with and enhancing their on-the-job knowledge and experience)  Indicative Content  Data security and governance Privacy and Data Protection Ethics of AI (Accountability and transparency in AI) Creating trustworthy algorithms Algorithmic fairness and diversity Legal frameworks, codes of ethics and professional responsibility. &nbsp; \n \n  Understand the role of ethical, privacy, bias and legal concerns and to embed this into practice. &nbsp;Understand how data science operates within the context of data governance, data security, and communications. &nbsp;Identify a suitable data science problem, questions and corresponding software which relate to organisational goals. &nbsp;", "Introduction to Data Science  \n \nTo provide learners with a high-level view of what data science is and where it came from. The teaching block will help learners to understand the goal of data science to provide answers and insight in relation to questions that impact on organisational goals. It will present the basic mathematical and computer science underpinnings and the concept of a data pipeline as a methodology to sourcing different types of data, processing it in appropriate ways and presenting it appropriately to different audiences. This will be done within context of a professional framework which must pervade all data scientist activity to ensure that legal, ethical and security concerns are continuously addressed.\n \n   \n \n Indicative content:&nbsp;  \t Attitude to learning&nbsp; \t Professionalism and Ethics&nbsp; \t The history and context of Data Science&nbsp; \t Data Processing Pipeline&nbsp; \t Introduction to Data&nbsp;  \n \n  Understanding of the context and history of data scienceUnderstanding of the purpose of data science and the professional data scientistAn understanding of the natre of data and the different types of dataA high-level understanding of ethics and proffesionalism especially with respect to the use of dataCan assess and make progress towards achieving the data scientist apprenticeship KSBs KSBs: K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.", "Scaling up Data Science  \n \nThis block aims to introduce the concepts required to deliver data science projects at scale, tackling problems which cannot be solved on a single computer. Learners will understand how to do this from a practical point of view as well as understanding the limitations of such approaches.\n \n   \n \n \u201cBig Data\u201d involves data whose volume, diversity and complexity requires new technologies, algorithms and analyses to extract valuable knowledge, which go beyond the normal processing capabilities of a single computer. The field of Big Data has many different faces such as databases, security and privacy, visualisation, computational infrastructure or data analytics/mining some of which you will already have learned.&nbsp; This teaching block is about scaling that up, and making use of multiple machines, possibly in the cloud, to produce data science solutions.  This module will provide the following concepts:  1.&nbsp; Introduction to Big data: introducing the main principles behind distributed/parallel systems with data intensive applications, identifying key challenges: capture, store, search, analyse and visualise the data.  2. Big Data frameworks and how to deal with big data: this includes the MapReduce programming model, as well as an overview of recent technologies (Hadoop ecosystem, and Apache Spark). Then, you will learn how to interact with the latest APIs of Apache Spark (RDDs, DataFrames and Datasets) to create distributed programs capable of dealing with big datasets (using Python and/or Scala) &nbsp;  3. Finally, we will dive into the data mining and machine learning part of the course, including data preprocessing approaches (to obtain quality data), distributed machine learning algorithms and data stream algorithms. To do so, you will use the Machine learning library of Apache Spark (MLlib) to understand how some machine learning algorithms (e.g. Decision Trees, Random Forests, k-means) can be deployed at a scale.  Learners should consider whether there are relevant problems in their workplace that require the use of high performance computing and techniques to address Big Data problems (joining up with the on-the-job acctivity). \n \n  Teaching Goal 1Understand the principles that allow the processing of big data sets.Teaching Goal 2Understand the limitations of big data technologies for distributed processing.Teaching Goal 3Demonstrate practical skills required to implement big-data solutions using modern large-scale data and compute infrastructures.Teaching Goal 4Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; &nbsp;S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. &nbsp;&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.", "Project Support  \n \nThis teaching block will enable apprentices to successfully undertake a critical exploration of what skills are required to complete a successful data science project. It introduces the concepts of project planning, writing and communication supported through online workshops and individual supervision tutorials.\n \n   \n \n This teaching block provides apprentices with an opportunity to develop independent planning and research abilities synthesising and further developing their project planning and writing skills previously gained in the programme. &nbsp;  It will allow apprentices to critically analyse and understand the nature of project planning using appropriate tools and methods. It will also allow apprentices to critically analyse research/business problems and propose appropriate research strategies/methods for successfully completing a data science project. Content will be supported through online workshops and individual supervision tutorials. Group online sessions will provide opportunities for formative assessment of progress and sharing of ideas within a team environment. \n \n  Teaching Goal 1Be able to plan and manage a significant work-based, data science project.Teaching Goal 2Can demonstrate independent research skills, identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Teaching Goal 3Demonstrate communicate skills through a formal technical report/poster/oral presentation.Teaching Goal 4Can communicate effectively through written work and through effective presentation of results. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B4. Consideration of problems in the context of organisation goals.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.", "Programming  This unit introduces computer programming in a high-level programming language and includes principles and practice in problem-solving, program design, solution implementation and testing. You will gain practical experience in developing software using industry-standard programming languages and tools.   ", "Databases  This unit introduces you to the use of the relational model to structure data for efficient storage and retrieval. You will gain practical experience in the construction and usage of relational databases in an industry-standard relational database management system.   ", "Computer Architecture  This unit introduces you to the fundamental building blocks of digital systems, including the basic architecture of microprocessors and digital logic. You will learn how microprocessors are programmed at a low level and gain an appreciation for working with numeral systems commonly used in the computing domain (eg: binary).   ", "Team Project  This unit offers you the opportunity to collaborate on a programme-specific team project, collecting ideas from across their first year of study. Working in a team offers you the chance to develop both independent and team working skills, project planning, and helps you prepare for the second year of study.   ", "Web Development  This unit introduces you to the key concepts, standards and technologies that underpin the modern web. You will gain practical experience with contemporary client-side web programming tools and techniques to build websites compliant with widely adopted industry standards.   ", "Graduate Skills  This unit introduces a range of skills required for you to succeed both on your degree and into graduate employment. The unit aims to help you to develop your own personal, independent, and proactive studying methodology to be effective life-long learners.   ", "Mathematics for Computing  This unit provides the essential mathematical foundation for further study in computing, covering a variety of applied mathematical topics suitable for a range of computing disciplines.   ", "Networks  This unit explores the theoretical and practical operation of computer networks, exploring different models and protocols of networking, and an exploration of contemporary problems and challenges in modern networking solutions.   ", "Thematic Project  Building on the knowledge and skills that you have developed so far on the programme, the thematic project will allow you to further develop your project management, team working and communication skills by applying those skills to a given industry, or research, inspired project. Wider aspects such as social, security, ethical and legal issues will be embedded in the project work where appropriate.   ", "Ethical Hacking  This unit focuses on infrastructure and web testing, based around \u2018capture the flag\u2019 (CTF) style exercises.   ", "Industry and Community Engagement  This unit capitalises on the uniquely vibrant technology community in Manchester, challenging you to curate a portfolio of professional interests within the field by engaging with the local tech community at various events. Through self-reflection, you will develop new interests, and learn to see your course in a wider technological, social and ethical context.   ", "Software Development Processes  You will study the software development lifecycle, including the analysis, modelling, specification, design, implementation, testing and maintenance of software systems. You will be able to contrast different project management methodologies, selecting individual techniques to suit the project at hand.   ", "Operating Systems  This unit introduces the theory and practice of computational operating systems, with emphasis on the fundamental aspects concerning the structure and organisation of operating systems and study of associated problems.   ", "Computer Graphics  This unit offers you an introduction to an industry-standard API for graphical programming, exploring both the theoretical underpinning of rendering graphical output, and the practical considerations and applications of rendering interactive 3D graphics.   ", "Algorithms and Data Structures  This unit explores a range of fundamental algorithms and data structures used to solve a number of computational challenges fundamental to the study of computer science disciplines. Students will learn to consider and discuss algorithm complexity and efficiency through practical implementation.   ", "Mobile Computing  This unit offers you the opportunity to explore the development of applications designed to run on mobile computing devices. You will gain practical experience of using device emulators, frameworks, APIs and libraries for the development of mobile apps that utilise specialist features of mobile devices.   ", "Rapid Applied Problem Solving  This unit challenges you to develop your problem-solving skills under pressure. By participating in a series of rapid, applied problem solving challenges, you will develop core essential skills aimed at bridging the employment gap. You will become well-versed in analysing problems, identifying appropriate algorithms and data structures, creatively solving those problems, implementing and evaluating solutions. You will enhance your employability by practising assessment tasks commonly used in tech industry recruitment.   ", "Artificial Intelligence  This unit presents the underlying theory and industrial applications of contemporary artificial intelligence (AI) paradigms, exploring the implementation of AI techniques and the open questions surrounding AI solutions.   ", "Research Methods  This unit will prepare you for the synoptic project by introducing the scientific method and presenting the main approaches to perform, analyse, classify and communicate research.   ", "Distributed Computing  This unit presents the fundamental concepts of distributed algorithms designed to run on distributed processing systems without a strong centralised control. The unit explores different examples of architectures, and suitability of algorithms for those architectures.   ", "Programming Languages and Paradigms  This unit examines the design and evolution of programming languages with a focus on comparative analysis and critical evaluation of programming language concepts and paradigms.   ", "User Experience and Interaction Design  Stressing the importance of a user-centred design approach from the outset, this unit affords you the chance to widen your knowledge of the ways in which humans interact with digital systems and services. It draws upon theories and principles from human-computer interaction, user experience, and interaction design, exploring how these can be applied and evaluated in a variety of technological contexts with the overarching aim of promoting an improved and impactful solution.   ", "Research in Computing  The Research in Computing option cluster offers you the opportunity to engage with the Department of Computing and Mathematics\u2019 Centre for Advanced Computational Science, by choosing an option which relates to one of the centre\u2019s main themes. By undertaking a focused research study in a specialist area, you have the opportunity to engage in cutting-edge computational research informed by world-leading theoretical and applied research.   ", "Synoptic Project  The synoptic project allows you to consolidate your learning from your degree programme into a final project, bringing together ideas and techniques from throughout your study. From this project, you will produce the centrepiece of their degree work portfolio.   ", "Work Placement module (CS43001)   ", "Undergraduate Course: Informatics Experiential Learning (Level 10) (INFR10084)  Informatics Experiential Learning is available only with permission to students participating in one of the School's approved IEL activities. Please see the IEL Information Page at https://uoe.sharepoint.com/sites/IEL2 for the current year's approved activities and how to apply. \n \nThis course forms part of the Student-Led Individually Created Course (SLICC) University-wide framework for self-designed experiential learning, where students reflect throughout their chosen extra-curricular experience, by the development of an e-portfolio to provide evidence of their learning. As a participating student, undertaking a SLICC will enable students to create a unique learning experience, while demonstrating their learning and academic achievement against defined learning outcomes.  \n \nThis level 10 course will require students to demonstrate the development of their skills and understanding in terms of critical analysis, application, reflection, recognising and developing your skills and mindsets, and evaluation within a defined context of their learning experience. This course will also enable students to demonstrate your ability to exercise autonomy and initiative at a professional level in practice and/or in a subject/discipline (or other approved) area.  \n \nThis course will require students to specifically demonstrate learning in the context of the higher order skills such as analysis, evaluation, and creation and demonstration of meta-cognitive development.  \n \nIt is expected that students taking this course would not only engage in the EUFS team effort, but take on additional responsibility in team management and organisation. None"]