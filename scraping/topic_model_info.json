{"Topic":{"0":-1,"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18,"20":19,"21":20,"22":21,"23":22,"24":23,"25":24,"26":25,"27":26,"28":27,"29":28,"30":29,"31":30,"32":31,"33":32,"34":33,"35":34,"36":35,"37":36,"38":37,"39":38,"40":39,"41":40,"42":41,"43":42,"44":43,"45":44,"46":45,"47":46,"48":47,"49":48,"50":49},"Count":{"0":145,"1":86,"2":70,"3":51,"4":49,"5":44,"6":39,"7":34,"8":28,"9":27,"10":26,"11":25,"12":24,"13":24,"14":23,"15":23,"16":17,"17":16,"18":15,"19":14,"20":14,"21":13,"22":13,"23":13,"24":13,"25":13,"26":12,"27":12,"28":12,"29":12,"30":11,"31":11,"32":11,"33":10,"34":10,"35":8,"36":8,"37":8,"38":8,"39":8,"40":8,"41":7,"42":7,"43":7,"44":7,"45":6,"46":6,"47":6,"48":6,"49":5,"50":5},"Name":{"0":"-1_research_students_data_project","1":"0_software_development_engineering_testing","2":"1_programming_language_languages_programming language","3":"2_mobile_interaction_user_design","4":"3_description_games_game_description module","5":"4_operating_systems_memory_operating systems","6":"5_security_secure_cyber security_cyber","7":"6_description_description purpose_purpose module_module","8":"7_text_processing_speech_retrieval","9":"8_project_work_students_individual","10":"9_database_relational_databases_sql","11":"10_networks_network_networking_internet","12":"11_web_web application_javascript_web applications","13":"12_ai_agents_intelligent_search","14":"13_learning_machine learning_machine_neural","15":"14_algorithms_data structures_structures_data","16":"15_cdt_horizon_phd_research","17":"16_placement_industrial_year_abroad","18":"17_vision_image_computer vision_computer","19":"18_data_data science_science_data protection","20":"19_professional_ethical_social_society","21":"20_cryptography_cryptographic_blockchain_security","22":"21_professional_competencies_defined_evidence","23":"22_game_games_engine_design","24":"23_logic_relations_mathematical_mathematics","25":"24_calculus_linear_equations_algebra","26":"25_3d_graphics_geometry_computer graphics","27":"26_research_area_project_research problem","28":"27_statistical_statistics_data_models","29":"28_visualisation_data_data visualisation_visualisations","30":"29_data_data science_science_python","31":"30_functional_functional programming_programming_languages","32":"31_big_big data_data_nbspnbspnbsp","33":"32_data_learning_machine learning_machine","34":"33_cloud_iot_cloud computing_service","35":"34_project_dissertation_research project_research","36":"35_teaching_school_pupils_teachers","37":"36_robot_robotic_robotics_robots","38":"37_complexity_computation_problems_computability","39":"38_machines_turing_finite_automata","40":"39_data_data science_science_assessment","41":"40_business_entrepreneurial_innovation_strategy","42":"41_year_computer science_bschons_bschons computer","43":"42_quantum_quantum computing_quantum computation_computation","44":"43_distributed_systems_distributed systems_cyberphysical","45":"44_software engineering_experience_workplace_engineering","46":"45_investigation_cyber_cybercrime_intelligence","47":"46_community_interests_vibrant technology_vibrant","48":"47_databases_database integrity_database_databases description","49":"48_learning_ai_neural_reinforcement","50":"49_optimization_constraint_constraint programming_discrete optimization"},"Representation":{"0":["research","students","data","project","systems","learning","skills","algorithms","module","methods"],"1":["software","development","engineering","testing","software engineering","management","software development","project","team","design"],"2":["programming","language","languages","programming language","objectoriented","programming languages","programs","java","code","using"],"3":["mobile","interaction","user","design","hci","humancomputer","humancomputer interaction","interactive","ubiquitous","systems"],"4":["description","games","game","description module","3d","computer games","2d","module","animation","students"],"5":["operating","systems","memory","operating systems","computer","hardware","architecture","computer systems","programming","concurrency"],"6":["security","secure","cyber security","cyber","computer security","attacks","vulnerabilities","systems","threats","nbsp"],"7":["description","description purpose","purpose module","module","purpose","description module","development","develop","systems","development description"],"8":["text","processing","speech","retrieval","language","information","models","recommender","natural language","course"],"9":["project","work","students","individual","professional","study","relevant","programme","skills","problem"],"10":["database","relational","databases","sql","database systems","query","data","relational database","systems","database management"],"11":["networks","network","networking","internet","protocols","computer","computer networks","systems","routing","layer"],"12":["web","web application","javascript","web applications","applications","application","clientside","frameworks","development","technologies"],"13":["ai","agents","intelligent","search","intelligence","artificial","artificial intelligence","planning","reasoning","learning"],"14":["learning","machine learning","machine","neural","ml","neural networks","regression","methods","learning methods","networks"],"15":["algorithms","data structures","structures","data","algorithms data","algorithm","nbsp","nbsp nbsp","complexity","abstract data"],"16":["cdt","horizon","phd","research","horizon cdt","activities","engagement","digital identity","public engagement","students"],"17":["placement","industrial","year","abroad","study abroad","study","host","institution","degree","industrial placement"],"18":["vision","image","computer vision","computer","image processing","segmentation","processing","images","detection","visual"],"19":["data","data science","science","data protection","ethics","protection","ethical","governance","projects","staff"],"20":["professional","ethical","social","society","issues","information","computing","legal","professional issues","social ethical"],"21":["cryptography","cryptographic","blockchain","security","signatures","encryption","attacks","publickey","hash functions","digital signatures"],"22":["professional","competencies","defined","evidence","eportfolio","personal development","learning","personal","development","demonstrate"],"23":["game","games","engine","design","game design","game engine","development","games development","industry","games industry"],"24":["logic","relations","mathematical","mathematics","logical","predicate","discrete","predicate logic","theory","proof"],"25":["calculus","linear","equations","algebra","matrices","vectors","mathematical","mathematics","functions","linear algebra"],"26":["3d","graphics","geometry","computer graphics","rendering","computer","tracing","ray","geometry processing","mesh"],"27":["research","area","project","research problem","paper","results","specific","skills","supervisors","topic"],"28":["statistical","statistics","data","models","probability","analysis","methods","bayesian","hypothesis","hypothesis testing"],"29":["visualisation","data","data visualisation","visualisations","information visualisation","information","visualisation techniques","techniques","visualization","data integration"],"30":["data","data science","science","python","analysis","data analysis","visualisation","analysis modelling","using","techniques"],"31":["functional","functional programming","programming","languages","type","programming languages","advanced functional","types","haskell","advanced"],"32":["big","big data","data","nbspnbspnbsp","processing","cloud","solutions","storage","challenges","distributed"],"33":["data","learning","machine learning","machine","data mining","mining","pattern","techniques","pattern recognition","mining techniques"],"34":["cloud","iot","cloud computing","service","services","web","web services","computing","virtualisation","web service"],"35":["project","dissertation","research project","research","nbspnbsp","product","product andor","conduct research","software product","software"],"36":["teaching","school","pupils","teachers","schools","teacher","classroom","skills","science","computer science"],"37":["robot","robotic","robotics","robots","control","mobile robots","mobile","perception","real","course"],"38":["complexity","computation","problems","computability","algorithms","problem","classes","machines","theory","npcompleteness"],"39":["machines","turing","finite","automata","turing machines","computation","languages","np","formal","problems"],"40":["data","data science","science","assessment","analysis","statistical","organisational","nbspcan","including","organisation"],"41":["business","entrepreneurial","innovation","strategy","business plan","entrepreneurship","technological","eip","plan","new"],"42":["year","computer science","bschons","bschons computer","mcomphons","mcomphons computer","science","computer","placement year","abroad year"],"43":["quantum","quantum computing","quantum computation","computation","quantum information","quantum mechanics","quantum algorithms","mechanics","quantum computers","classical"],"44":["distributed","systems","distributed systems","cyberphysical","fault","cyberphysical systems","fault tolerance","tolerance","distributed algorithms","physical"],"45":["software engineering","experience","workplace","engineering","software","course","students","nbsp","encountered","skills"],"46":["investigation","cyber","cybercrime","intelligence","law","evidence","forensic","law enforcement","investigations","enforcement"],"47":["community","interests","vibrant technology","vibrant","various events","capitalises","uniquely vibrant","technology community","technological social","tech community"],"48":["databases","database integrity","database","databases description","description purpose","integrity","purpose module","description","purpose","language sql"],"49":["learning","ai","neural","reinforcement","artificial","intelligence","reinforcement learning","artificial intelligence","neural computation","learning problems"],"50":["optimization","constraint","constraint programming","discrete optimization","linear discrete","discrete","problems","linear","optimization problems","solving"]},"Representative_Docs":{"0":["Research Skills and Professional Issues (CSN) This module provides the research skills and professional issues knowledge necessary to underpin degree and honours level project work. It will also consider research and development as undertaken in professional practice, as well as the recognition of the legal, social, ethical and professional issues involved in the exploitation of software systems or digital and computer technology, as appropriate to the area of study. This module provides detailed coverage of the research skills required to underpin the final honours project and to prepare for professional practice and includes the review of a variety of research methods and their applicability to a range of contexts. It further develops scholarly study skills, analytical writing skills, and presentation skills. The final coursework for this module will be an individual project proposal. Note: Subject-based module co-ordinators will advise students on suitable topics for project proposals. It is recognised that some programmes will have a requirement for a specific project type to ensure external body accreditation.  The nature of research: The research process, Classifying research. Types of Capstone project e.g. Practice-based, Develop and Test, Design-Based, Case Study, Experimental evaluations, Survey-based. Research methods and applicability to different project types: Quantitative and Qualitative approaches. Data Gathering and Analysis Techniques: questionnaire design, interview and focus group design, statistical analysis, data evaluation, software tools for data analysis. Searching for and reviewing literature: Critical evaluation of literature sources, Literature review writing, Plagiarism in academic writing. Project Proposals: Project scoping, stakeholders and their involvement, Developing a research question, Hypothesis formulation, project planning, risk management. Identify and reflect on different research methods (both qualitative and quantitative research), that are and can be used within research Use this knowledge to evaluate literature critically and reflect on its implications for research using appropriate methods for evaluating qualitative and quantitative research Integrate statistical principles in analysing data being able to delineate the appropriate methods to use for differing data sets Demonstrate their research and statistical knowledge and skills. Ethical concepts and ethical theories, Professional Body or Industry codes of conduct\/practice and moral responsibility. Examples of codes of ethics Whistleblowing Liability and accountability Bribes and gifts. Ethical and social contexts to research Involving Human Subjects. Ethics of Intellectual Property and Software Protection \/DRM. Fair use policies, Trade secrets, Digital piracy, Open Source software, Free software. Applicability of ethics in the application and exploitation of key current and emerging digital and computing technologies.      On successful completion of this module, students should be able to:  1. Source and critically review academic, technical &amp; professional literature relevant to a chosen project using a variety of bibliographic tools. 2. Demonstrate an awareness of current trends and developments in technologies, processes and practices relevant to the area of study. 3. Understand the relevant legal, social, ethical and professional issues which relate to the current and emerging use of software, digital and computing technologies. 4. Evaluate the suitability of a range of research and data analysis methods in relation to specific project objectives. 5. Apply academic, technical and professional writing skills to the development of a proposal and associated project plan for projects appropriate to the programme of study. 6. Identify and discuss professional responsibilities related to projects such as social and ethical considerations and the management of risk.     ","Introduction to Software Development for Data Science  \n \n\u2981 To introduce the principles, techniques and applications of a range of data analysis and modelling techniques.\u202f\u2981 To enable the\u202fapprentices\u202fto appreciate some of the most widely used data analysis and modelling techniques and to know which one to choose for their applications.\u202fTo enable the\u202fapprentices\u202fto understand and be able to put into practice computer-based data analysis and modelling techniques\n \n   \n \n This module builds on learners understanding of the basic principles of programming and algorithms and&nbsp;addresses some of the key concepts required for data management, and data analytics.&nbsp;  Learners will acquire a practical understanding of how to access, query and manage data, using traditional relational databases and contemporary NoSQL approaches. Using real-world datasets, standard software packages and data\u202fvisualisation\u202ftechniques,\u202fapprentices\u202flearn how to\u202forganise\u202fand\u202fanalyse\u202fdata to answer questions about the world, as well as developing an appreciation of user needs surrounding data systems.\u202f&nbsp;  Indicative topics covered\u202finclude: data ingress; data modelling; data pre-processing methods including data imputation; forecasting methods; clustering and classification. \n \n  Understand and logically evaluate program requirements and specifications.&nbsp; &nbsp;Understand the complex ideas of programming solutions and relate them to&nbsp;particular problems.&nbsp;&nbsp; &nbsp;Design and&nbsp;analyse&nbsp;simple algorithms and data structures.&nbsp;&nbsp;Read, clean and analyse different kinds of data from different sources to produce data science solutions. &nbsp;Apply appropriate software development methods and tools.&nbsp; &nbsp; KSBs K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions. B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;","Project Support  \n \nThis teaching block will enable apprentices to successfully undertake a critical exploration of what skills are required to complete a successful data science project. It introduces the concepts of project planning, writing and communication supported through online workshops and individual supervision tutorials.\n \n   \n \n This teaching block provides apprentices with an opportunity to develop independent planning and research abilities synthesising and further developing their project planning and writing skills previously gained in the programme. &nbsp;  It will allow apprentices to critically analyse and understand the nature of project planning using appropriate tools and methods. It will also allow apprentices to critically analyse research\/business problems and propose appropriate research strategies\/methods for successfully completing a data science project. Content will be supported through online workshops and individual supervision tutorials. Group online sessions will provide opportunities for formative assessment of progress and sharing of ideas within a team environment. \n \n  Teaching Goal 1Be able to plan and manage a significant work-based, data science project.Teaching Goal 2Can demonstrate independent research skills, identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Teaching Goal 3Demonstrate communicate skills through a formal technical report\/poster\/oral presentation.Teaching Goal 4Can communicate effectively through written work and through effective presentation of results. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B4. Consideration of problems in the context of organisation goals.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner."],"1":["Software Engineering: Fundamentals and Professional Development   Summary module description:   \n  This module introduces students to the concepts, practice and management in software engineering and the professional development to support it. It addresses the lifecycle activities associated with developing software as part of a system as well as the management activities required to ensure that the software is developed on time, within budget and is fit for purpose. The module also incorporates case studies and examples to show the application of the concepts and principles to real-world systems.  \n \n A learning approach is adopted which reflects software engineering theory and practice. Students &nbsp;&nbsp;are given course material to read\/view prior to the lectures, and are required to produce a number of assessments in teams.  \n     Outline content:   \n  The module draws on the IEEE\u2019s articulation of knowledge on the subject, as presented in the Software Engineering Book of Knowledge v3 (SWEBOK).  \n \n  \n &nbsp;Introduction to Software Engineering (e.g. models, methods, processes, and management).  \n Human factors in Software Engineering  \n Software requirements fundamentals, processes, requirements elicitation techniques\/tools  \n Software design fundamentals, architecture, design techniques and modelling approaches  \n Software construction fundamentals, technologies\/tools, environments  \n Software validation methods, and testing techniques  \n Software maintenance and configuration management  \n Software quality requirements, measurement, and management  \n Software Engineering professional practices (e.g. professionalism, legal, ethical, economic impact of software, documentation, communication skills in written and presentation form)  \n Software Engineering in the modern computing era (e.g. DevOps transformation)  \n  \n     Assessable learning outcomes:  \n  By the end of the module, it is expected that the student will be able to:  \n \n  \n Understand the software engineering theory, and practice them in developing software applications in the wide domain context  \n Describe the software lifecycle and the activities associated with each phase of it (feasibility, requirements, design, implementation, testing, handover, maintenance, evolution, and decommissioning)  \n Create software application development project plans, and conduct risk analysis, configuration management and testing  \n Distinguish the difference between plan-based and agile-based approaches to software development  \n Appreciate the importance of software engineering to real-world projects  \n Work jointly with others in a group project as well as being able to work independently  \n Demonstrate innovative, creative, and critical thinking towardsa development of solution  \n Perform in communication and documentation  \n  \n  ","Fundamentals of Software Engineering This module will provide students with an introduction to the fundamental concepts, processes and practices in software engineering. This includes business analysis, requirements engineering, the software lifecycle and the software development process, developing secure systems, testing software systems, software documentation, as well as the challenges of dealing with legacy systems. It will also provide the student with an introduction to key professional practices in relation to the initial analysis and modelling of the development of commercial computer-based software systems.  Systems and Software Engineering Processes and Activities: The systems development process: Basic stages in the systems development lifecycle: project initiation and definition, user and system requirements definition, analysis and design, implementation and testing, deployment (including user documentation and training) and maintenance, developing secure systems Conceptual foundations of OO systems modelling: use case model, design model, deployment model, implementation model, test model The role of ethics and professional issues in software engineering processes The role of DevOps in the Software Lifecycle Software testing concepts: testing stages, acceptance and system testing principles: functional testing, usability testing, reliability testing, security testing, performance testing Software maintenance and evolution: the nature of software maintenance, maintenance activities and managing the maintenance process, the software re-engineering process and common approaches such as business analysis and as-is process model creation legacy system maintenance Software Life Cycles: Principles that characterise successful software development practice Traditional (waterfall) lifecycle model verses Agile approaches Agile life cycles: principles and concepts agile process models, e.g. DSDM, SCRUM,FDD Agile methods and practices, e.g. extreme programming\/XP Requirements Engineering: The role of the requirements engineer The requirements engineering process System stakeholders Requirements elicitation Requirements classification: functional non-functional requirements classification frameworks, e.g. FURPS+ Requirements modelling: the use of use case analysis to capture and document requirements Use case descriptions, specifying test criteria in use cases  Initial domain modelling      On successful completion of the module the student should be able to:  1.Understand the nature of the key systems and software engineering processes and activities necessary for the development and deployment of successful commercial computer systems including the need for security 2.Compare the characteristics of the range of modern software lifecycle models and approaches in relation to the suitability of each for different types of computer system development 3.Understand the basic processes involved in software maintenance and evolution (including for legacy systems) 4.Apply basic requirements engineering techniques to the development and documenting of the specification and high-level modelling of functional and non-functional computer system requirements      ","CS5002 - Software Engineering (2023\/24)  \nThis module provides a systematic approach to software analysis, design, construction, testing, deployment, and maintenance. The module also broadens the student\u2019s knowledge of software engineering and systems development methods, techniques and tools. The general principles of Software Engineering and Systems Development will be introduced; notably the software life cycle and different software development approaches.&nbsp; Students will be able to choose appropriate software development methods and apply them to case studies. They will use a variety of critical techniques and tools to model requirements and logical design.&nbsp; \n \nStudents will apply their knowledge of computer systems and application areas to produce outline physical designs. Students will develop project planning and management, teamwork and communication skills, taking into consideration risk\/safety, security, and professional and legal issues in the development of software products, information systems and services. Experience of working as an individual and a team member on a software development case study will enhance students\u2019 employability.   \nThe main topics of the module syllabus include: \n \n1. The distinction between software products, information systems and services. (LO1) \n \n2. Systems Analysis and Design applied to the development of Information Systems. (LO2, LO3, LO4, LO6) \n \n3. Software Engineering applied to the development of software products. (LO1, LO2, LO3, LO5, LO6) \n \n4. Software Life Cycle: Requirement specification, System Modelling, Design (including system architecture, software components and user interfaces etc.); Construction; Testing; Transition; Maintenance. (LO3, LO5) \n \n5. Classification of software development approaches \u2013 (e.g., iterative\/waterfall, data-driven\/process-driven, structured\/object-oriented, prototyping etc.). (LO2, LO3) \n \n6. Software development methodologies (Agile Software Development, Rational Unified Process, DSDM, Experimental Prototyping etc.): overview description of main stages and their aims, purpose, and relationship between different techniques. (LO2, LO3, LO5) \n7. Modelling techniques: fundamental UML analysis and design modelling techniques \u2013 Use Case models, Communication diagrams, Class diagrams, Sequence diagrams, State Charts, deployment diagrams, etc. (LO3, LO4, LO5) \n \n8. Component Technologies for Software development. Programming Paradigms, Design Patterns and Implementation Frameworks. Development of Software Components using programming languages, IDEs and CASE Tools. Software System Integration and Software reuse. (LO2, LO3, LO5) \n \n9. Introduction to software testing approaches component, integration, system and sub-system testing. (LO1, LO3, LO5) \n \n10. Introduction to information security, risk and security management. (LO4, LO5) \n \n11. Introduction to principles and concepts of software project management, including project planning and estimating, monitoring and control, risk, quality and configuration management. (LO5, LO6) \n \n12. Project management tools and techniques, e.g., Gantt chart, network diagrams, critical path analysis, cost-benefit analysis, earned value, and work breakdown structure. (LO2, LO5, LO6)   \nOn successful completion of this module, students will be able to: \n \n- LO1: Demonstrate an understanding of the concepts and principles of system and software development, considering legal, ethical, social and professional (LESP) issues. \n \n- LO2: Demonstrate a systematic understanding of the main stages of software engineering within a range of standard software development methods and an awareness of supporting CASE tools. \n \n- LO3: Demonstrate practical skills in building fragments of software systems using suitable design patterns and apply a range of key modelling techniques appropriate for development in various problem domains. \n \n- LO4: Recognise information security and security risk issues and demonstrate an awareness of software architectures and design guidelines for safe and secure systems development. \n \n- LO5: Demonstrate an awareness of software architectures and design guidelines for safe and secure systems development and describe the essential concepts of project planning, risk analysis &amp; management, and quality and configuration management. \n \n- LO6: Apply key project management concepts, tools and techniques to a given specification in teams and individually. "],"2":["Principles of Programming Languages module (CS42001) Programming paradigms form the fundamental principles of programming languages. They refer to a specific style or approach to writing computer programs, such as procedural or functional programming.You will already be familiar with procedural and object-oriented programming. While these are powerful paradigms suitable for many software development contexts, other paradigms might be better suited to more specialist applications.Logic programming languages, such as Prolog, are popular in fields such as theorem proving, pattern matching, and natural language processing. Functional programming languages, like Haskell, are preferred when code optimisation and correctness are of high importance.A strong understanding of programming principles and paradigms will enable you to understand the capabilities and limits of specific programming languages. This will allow you to make educated decisions on which programming language to use for certain problems and help you write more optimised solutions.   study basic abstraction mechanisms in programming languages, such as variables, expressions, recursion, and macros \n explore procedural programming using C \n explore lambda calculus and functional programming using Haskell \n explore logic programming using Prolog \n explore concurrent and parallel programming using Erlang \n study the fundamentals of type theory \n look at formal reasoning about programs  understand the differences between various programming paradigms and their representative languages \n understand principles of formal reasoning about properties of programs \n explain the common building blocks of programming languages \n demonstrate an understanding of basic type theory \n apply the fundamentals of parallel programming to write simple parallel programs \n relate the theoretical ideas around programming languages to practical problems in computing ","Advanced Programming This module aims to encourage students to become polyglot programmers. It will equip them with a broad understanding of the nature of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module also introduces a range of advanced programming techniques, such as asynchronous messaging, parallel computation and distributed programming. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 10%.  Comparison of programming paradigms -Object-oriented -Functional -Procedural -Declarative -Logic -Classifying languages  Functional programming -Lambda calculus -First-class functions -Higher -order functions -Effect-free functions -Recursive types -Function closures -Functional reactive programming -Functional features of object-oriented languages  Declarative programming -Markup languages -Regular expressions -Domain Specific Languages -Rules engines  Scripting languages -Static\/Dynamic typing -Interpreted languages  -Integrating scripts with compiled code  Managed vs. unmanaged languages -Memory management &amp; pointers -Static and dynamic libraries  -Integrating managed and unmanaged code  Advanced programming techniques -Lazy evaluation and infinite streams -Control abstractions: exception handling, continuations, monads -Object-oriented abstractions: multiple inheritance, mixins, traits, multimethods -Dynamic code evaluation (\"eval\") -Asynchronous and parallel computation -Remote procedure calls -Messages and queues  Emerging trends in programming       On completion of this module, students should be able to:  1 - Explain the nature and applicability of a range of programming paradigms, including object-oriented, functional, procedural, declarative, and the support provided for each in currently popular programming languages.  2 - Explain the nature and applicability of a range of programming language types with respect to whether they are compiled\/dynamic, managed\/unmanaged, concurrent or domain specific.  3 - Evaluate emerging trends in advanced programming languages and techniques.  4 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques available within that language.     ","Programming Paradigms Programming paradigms provide a way to classify programming languages based on their features. This module is concerned with the nature of programming languages and the appropriate uses of a range of languages, including their use in concurrent applications. It will equip students with a broad understanding of a range of programming paradigms and the support provided for each paradigm in currently popular programming languages. Thus it will equip students to be able to make appropriate choices to best meet the requirements of a specific programming problem. The module will focus in greater depth on the principles and techniques of functional programming, and on low-level programming using the capabilities available in an appropriate compiled language. The module also introduces a range of concurrent programming techniques and the support provided for these at operating system level and in high level languages. The module will additionally provide coverage of current and emerging programming paradigms, languages and techniques.  Comparison of programming languages Type systems Parameter passing Paradigms: Imperative, Object-oriented, Procedural, Declarative, Functional, Logic, Concurrent  Code translation: Compilation, Interpreters Execution: Native code, Virtual machine Memory management: Manual, Automatic Constructs and core data structures  Functional programming Functional principles: Immutability, Pure functions Recursion and tail-recursive calls Functions: First-class functions, Lambda, expressions, Higher-order functions, Composition, Partial application, Closures, Currying, Folding, Streams and lazy evaluation Types Algebraic Data Types including option types and lists, Pattern-matching, Functors, Monads  Low level programming  Pointers and memory management Unmanaged data structures Using Operating System Libraries and functions: programming with standard libraries, calling from high-level code Network socket programming  Concurrent programming Processes and threads Controlling access to shared resources using mechanisms such as synchronized methods, mutexes and semaphores  Inter-process communication using shard memory and message passing. Concurrent programming models, e.g. futures\/promises, actor model  Emerging trends in programming      On completion of this module, students should be able to:  1 - Explain the nature and applicability of a range of programming paradigms (including object-oriented, functional, procedural, declarative, concurrent) and programming language features (including type systems, constructs, compilation, execution, memory management)  2 - Demonstrate an understanding of the principles of functional programming and the use of techniques associated with these  3 - Demonstrate an understanding of the use of low level programming techniques in an appropriate compiled programming language.  4 - Demonstrate an understanding of the issues involved in concurrent programming including access to shared resources and message passing.  5 - Develop and test a software application by selecting a programming language appropriate to the requirements and making appropriate use of a range of advanced programming techniques covered in this module     "],"3":["Mobile Human-Computer Interaction for MSc COMPSCI5112   Mobile Human-Computer Interaction for MSc gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods  &nbsp;and evaluation techniques  .    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (M) COMPSCI5015   Mobile Human-Computer Interaction (H) gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (H) COMPSCI4068   Mobile Human-Computer Interaction   (H)   gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  "],"4":["CSY1091 \u2013 3D Game Asset Production  Description:  This module introduces students to the technical 3D modelling skills and creative processes required to produce 3D digital assets within creative industry projects. The module will also introduce students to the study of professional developers and their product standards, to contextualise and understand current market trends and platform limitations.  ","CSY1090 \u2013 2D Game Asset Production  Description:  The purpose of this module is to introduce students to the principles and technical skills used to create 2D digital graphics for video games and other creative industries, and to explore the creative processes required to produce their own digital assets to professional standards.  ","CSY1079 \u2013 Programming 2D Computer Games  Description:  This module introduces students to the skills, principles and concepts necessary to develop 2D computer games. Students apply aspects of High-Level Programming Language (HLPL) and development platforms to develop 2D computer games.  "],"5":["Advanced Systems Programming (M) COMPSCI5083   This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.     The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system.    &nbsp;   The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing  &nbsp;  systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.     By the end of this  &nbsp;course students will be able  &nbsp;to  :    \u25a0&nbsp;  D  iscuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust;   to   d  iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;    \u25a0&nbsp;  D  iscuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;    \u25a0&nbsp;  D  iscuss the advantages and disadvantages of integrating automatic memory management with the operating system\/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and\/or operating systems;     \u25a0&nbsp;  U  nderstand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and    \u25a0&nbsp;  C  onstruct and\/or analyse simple programming to demonstrate understanding of novel techniques for memory management and\/or concurrent programming, to understand the trade-offs and implementation decisions.  ","Advanced Systems Programming (H) COMPSCI4089   This course covers advanced topics systems programming, building on the material in Systems Programming (H) to explore new techniques for safer and more effective systems programming. It will focus on programming in an unmanaged environment, where data layout matters, and where performance is critical. This might include operating systems kernels, device drivers, low-level networking code, or other areas where the software-machine interface becomes critical.     The computing landscape has changed radically in the last decade. The desktop personal computer has become largely irrelevant, and heterogeneous, multicore, mobile, and real-time systems - smart mobile phones, netbooks, and laptops - are now ubiquitous. Yet, despite this shift, these systems are still programmed in C, and the majority run some variant of the Unix operating system.    &nbsp;   The course aims to explore the features of modern programming languages and operating systems that can ease the challenges of systems programming, considering type systems and run-time support. It will review the research literature on systems programming and operating system interfaces, discuss the limitations of deployed systems, and consider how systems programming might evolve to address the challenges of supporting modern computing  &nbsp;  systems.  Particular emphasis will be placed on system correctness and secure programming, to ensure the resulting systems are safe to use in an adversarial environment.     By the end of this  &nbsp;course students will be able  &nbsp;to  :    \u25a0&nbsp;  Discuss the advantages and disadvantages of C as a systems programming language, and to compare and contrast this with a modern systems programming language, for example Rust;   to   d  iscuss the role of the type system, static analysis, and verification tools in systems programming, and show awareness of how to model system properties using the type system to avoid errors;    \u25a0&nbsp;  Discuss the challenges of secure low-level programming and write secure code in a modern systems programming language to perform systems programming tasks such as parsing hostile network input; show awareness of security problems in programs written in C;    \u25a0&nbsp;  Discuss the advantages and disadvantages of integrating automatic memory management with the operating system\/runtime, to understand the operation of popular garbage collection algorithms and alternative techniques for memory management, and know when it might be appropriate to apply such techniques and managed run-times to real-time systems and\/or operating systems;     \u25a0&nbsp;  Understand the impact of heterogeneous multicore systems on operating systems, compare and evaluate different programming models for concurrent systems, their implementation, and their impact on operating systems; and    \u25a0&nbsp;  Construct and\/or analyse simple programming to demonstrate understanding of novel techniques for memory management and\/or concurrent programming, to understand the trade-offs and implementation decisions.  ","CS106 - Computer Systems &amp; Organisation  Semester 1:  to enable the student to develop an understanding and appreciation of a computer system\u2019s functional components \u2013 both hardware and software, their characteristics, their interactions, and their fundamental role in the manipulation of data. Semester 2:  to further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.  Semester 1:  Machines and Computation: Brief history of computers and the nature of computation, e.g. how arithmetic expressions are evaluated.  Introduction to Operating Systems: brief history, role and purpose, basic functionality and operation, the tradeoffs in operating systems design, the influences of different computer systems and environments, security and open source software on operating system design.  Introduction to Net-centric computing: brief history and the development of the Internet, the range of specialisations within net-centric computing, emerging technologies and their capabilities, limitations and near-term potential.  Introduction to a simple computer: CPU basics and organisation (registers, the ALU, the Control Unit and datapath); the bus; clocks; I\/O; memory; interrupts).  Basic Functional (Hardware) Components of Computer Systems: for example, CPU, memory, I\/O, networks.  Basic Functional (Software) Components of Computer Systems: for example, assemblers, compilers, and operating systems.  Elementary assembly language programming: simple computations involving loops, counters, and accumulation; awareness of bugs.  Representation of numeric data: unsigned binary, signed magnitude, and twos complement, floating point; twos complement arithmetic; range, precision, and errors in floating point arithmetic.  Representation of text, audio, and images; issues associated with compression and communication, e.g. how JPEG works and when it doesn\u2019t; Huffman coding.  Function of logic gates; sum of products expressions, Boolean algebra, combinatorial and sequential logic circuits, for example those for multiplexers, adders, registers, shift registers, counters, overflow detection; PLAs.  Semester 2:  Introduction to instruction set architecture, micro-architecture and system architecture.  Processor instruction set architecture: instruction types and formats, register sets, addressing modes.  Processor structures: memory-to-register architectures; load\/store architectures; overview of Flynn\u2019s classification of computer architectures.  The relationship between low-level and high-level programming languages.  Instruction sequencing, flow-of-control, subroutine call and return mechanisms.  Low-level architectural support for high-level languages.  Low-level architectural support for operating systems.  Low-level architectural support for concurrency.  Memory: types of memory, overview of the memory hierarchy.  Input\/Output: types of I\/O; overview of common I\/O devices and interfaces.  Networks: types of network; overview of common network standards, protocols, and interfaces.  Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments.  On completion of the first half of the class, a student should have developed an understanding of: The function and basic operation of the fundamental hardware components of computer systems.  The function and basic operation of the fundamental software components of computer systems.  The hierarchy of, and the interaction between, the components of a typical computer system.  The concept of a logical layer and the benefits of building abstract layers in hierarchical fashion.  The need for APIs and middleware and how computing resources are used by application software and managed by system software.  The evolution of early networks and the Internet and the structure of a typical, current, network architecture.  The concept of an instruction set architecture (ISA), and the nature of a machine-level instruction in terms of its functionality and use of resources (registers and memory).  The various classes of instruction: data movement, arithmetic, logical, and flow control; their use and abuse in simple programs.  The typical types of data\/number\/information representations and the implications of these for calculations and transformations.  Boolean functions and logic expressions and their implementation in digital logic gates, and combinational and sequential circuits. On completion of the second half of the class, a student should be able to: Demonstrate their knowledge of data\/number\/information representations and the limitations of such representations.  Appreciate how a CPU may be constructed from combinational and sequential logic circuits.  Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.  Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.  Appreciate how conditional operations are implemented at the machine level.  Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.  Appreciate how an ISA has an impact on high-level languages and the design of compilers.  Understand the basic principles of operation of the memory, I\/O and network subsystems of a typical computer.  Appreciate how future developments in computer systems may be influenced by current trends and technologies. "],"6":["CS454 - Fundamentals of Cyber Security The aim of this class is to develop fundamental understanding of key aspects of cyber security and how they relate to modern professional practice.&nbsp; Principal topics to be covered include access control, network security, cryptography, threat modelling and management of cyber security within an enterprise environment.&nbsp; After completing this class participants will be able to:&nbsp; Compare and contrast secure communication solutions.  Evaluate an existing or proposed system in terms of potential vulnerabilities and recommend the most appropriate security solution to apply.  Summarise the key vulnerabilities, threats, and attacks with regards to network security and propose suitable approaches to mitigate these issues.  Plan and implement an aspect of technical security such as log analysis. ","Undergraduate Course: Computer Security (INFR10067) Computer Security is concerned with the protection of computer systems and their data from threats which may compromise integrity, availability, or confidentiality; the focus is on threats of a malicious nature rather than accidental. This course aims to give a broad understanding of computer security. Topics include security risks, attacks, prevention and defence methods; techniques for writing secure programs; an overview of the foundations for cryptography, security protocols and access control models. \n \n ***This course replaces INFR10058 Computer Security (10 credits).*** The goal of this course is to introduce students to fundamental security concepts and offer them working knowledge of threats and counter-measures. \n \nThe topics covered in the course are: \n-  Introduction:   fundamental  concepts,  access  control  models,  threat modelling.  \n-  Network security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection. \n-  Usable  security:  basic  human  factors,  warning  design,  phishing,  authentication, device authentication. \n-  Cryptography:   symmetric  ciphers,  asymmetric  ciphers,  MACs  and hash functions, digital signatures. \n-  Cryptographic protocols:  identification, authentication and key agreement, SSL\/TLS, anonymity protocols, TOR. \n-  OS security:  OS concepts, memory and file system, access control, file permissions, memory safety, stack-based buffer overflows. \n-  Malware:  viruses, trojan horses, worms, rootkits. \n-  Web security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defences, server-side attacks, SQL injection, RFI, LFI. On completion of this course, the student will be able to:\n     \n         describe common security threats against computer systems, and identify appropriate mechanisms to address them.  explain techniques and design principles that underlie the common mechanisms for protecting the security, privacy, and trust of computer systems and networks.  complete a basic security analysis of computer systems or networks.  independently collect, filter out, and contextualise information about security vulnerabilities and their mitigations. \n     ","Cyber Security  \n \nTo develop an understanding of the nature and scope of the cyber security and its relevance in protecting data confidentiality, integrity and availability across a range of devices, systems and networks. To understand the nature of attacks and vulnerabilities in principle and in existing systems. To develop core skills to select, apply and implement security controls necessary for the security of a system. To recognise and evaluate the organisational and human impacts of cyber security, and the related impacts of technology choices and decisions in these contexts.\n \n   \n \n Cyber security is an essential consideration for the protection of IT-based devices, systems, networks and data, providing safeguard and reassurance to the organisations and individuals that rely on them. We provide coverage of both technical and human\/organisational perspectives. Students gain an understanding the principles of cyber security, including attacks, vulnerabilities and secure designs. You will gain knowledge and practical experience across a range of key cyber security topics, including foundational concepts and principles, access control, device and system security, authentication, cryptographic mechanisms and applications, network and Internet security, security management, risk assessment, cyber-attacks and threat intelligence, intrusion detection and incident response, and human aspects. You will learn about the challenges and attacks that need to be considered when designing and implementing secure systems, along with associated approaches to ensure that security is addressed appropriately.&nbsp; \n \n  Knowledge and Understanding:Knowledge and understanding of the important security properties (Confidentiality, Integrity, Availability, Authenticity, Accountability, Non-Repudiation). Knowledge of security controls and protocols. Knowledge of practical attacks on real systems and an understanding of classes of attacks on generic systems. Knowing and understanding secure practices on a technical, human and organisational level.Intellectual Skills:To understand security controls and protocols on a fundamental level, and an ability to analyse novel controls and protocols. To identify the existence of attacks on insecure systems, and to propose the appropriate security controls to improve the security of the system. To analyse and reflect upon the effectiveness of security and protection decisions in practical contexts.&nbsp;Professional Skills:To design and implement cyber security solutions, taking appropriate account of the context and constraints. To recognise the professional issues involved in the design, development and deployment of cyber security solutions. &nbsp;Transferable Skills:To think independently while giving due weight to the arguments of others. To understand complex ideas and relate them to specific problems or questions. To communicate ideas effectively in writing to specific problems or questions. To communicate ideas effectively in writing.&nbsp;"],"7":["CSY2091 \u2013 Mobile Application Development  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ","CSY2061 \u2013 Mobile Application Development 1  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ","CSY3046 \u2013 Mobile Application Development 2  Description:  The purpose of this module is to understand modern mobile computing in terms of its hardware and software and the networks that support mobile devices as well as to implement software to run in a mobile computing context.  "],"8":["Text as Data - An Introduction to Document Analytics (H) COMPSCI4074   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches.  &nbsp;  The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka\/Spark Mlib).     This course aims to introduce students to   language modelling, geometric interpretations of documents, information theory, network models and in general the use of   stochastic thinking (including building on the probability theory learned during the   Data Fundamentals  &nbsp;c  ourse). This is  &nbsp;illustrated through   a number of  &nbsp;supervised and unsupervised text processing and analytics approaches  &nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics  .   &nbsp;  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka\/Spark   Mlib  ).     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the vector space, network graphs, language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.  ","Text as Data for MSc COMPSCI5106   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze and critique recent   developments   in  &nbsp;  natural language and   text processing   academic literature.     8.   Evaluate and explain the appropriate application of recent research developments to real-world problems.  ","Text as Data - An Introduction to Document Analytics (M) COMPSCI5096   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze   and critique   recent   developments   in  &nbsp;  natural language and   text processing   academic  &nbsp;literature  .     8.   Evaluate and explain the appropriate application of   recent   research   developments   to real-world problems.  "],"9":["Work Based Project 1 The module is concerned with the development of a solution to a realistic work based problem relevant to the Graduate Apprentice (GA) role within the workplace and level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution to a work based problem.  The emphasis of this module is on: understanding the contribution which digital technologies and skills relevant to the GA's area of study are making to current global business and society, and how these are changing and developing understanding the development lifecycle practiced by professionals in their area of study gaining an insight into the organisational structures and business functions within which the modern professional associated with their current role operates and their current role. GA's should also consider the behaviours and issues which occur within their workplace and working practices, and how they as individuals function as part of their workplace environment.  The project will normally be undertaken on an individual basis, however, the work completed within the module may require the GA to work with a group of individuals within the organisation. The GA will most likely assume the role of a project member taking into account their relative experience at this stage in their role. They should, however, have a role of responsibility on the project or may also work on a small individual project \/ piece of work. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project.  The GA, on submission of a project specification and approval of the specification prior to the module commencing, is expected to develop and follow a project plan and its constituent processes and activities under direct supervision of a work based supervisor and guidance of the module tutor as well as and work in a self-motivated way within defined schedules, working towards well defined deliverables that meet the project aims and objectives. GA's are expected to develop confidence in their ability to work with others on analysing and creatively solving problems, and evaluating their work within the context of the original project requirement. This module will ground students in project management, problem solving, team working skills, and the use of reflective practices to support personal and professional development.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation.  The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 68%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team working Time management Independent working and self-reliance Communication skills Presentation skills Personal reflection and review  Work and the Workplace The 21st Century Workplace Professional practices and life cycles Enterprise and organisational types and structures Business functions Corporate values and responsibilities Diversity at work and mobility considerations  Digital Technologies and Society Digital Enterprise, Digital Culture and Digital Society Case Studies Trends and Developments  Introduction to Careers and Employability Careers profiles and pathways Graduate Attributes and Enhancing Employability Careers information sources and resources Guest external speakers and Guru seminars from industry practitioners and employers      Upon successful completion of this module, students should be able to:  1. Use relevant defining technical and enabling soft skills to follow a project plan and appropriate lifecycle process within a work based environment to solve a problem relevant to the programme of study. 2. Develop an understanding of the structure, function and operation of the modern workplace, the opportunities and roles and technical and transferable skills required for success. 3. Demonstrate an awareness of how digital technologies and know how relevant to the GA's programme of study interact with business, society, and culture. 4. Utilise reflective practices to support personal and professional development and demonstrate the ability to effectively communicate in both written and oral form.      ","Work Based Project 2 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the GA role within the workplace and current level of study in producing an appropriate solution  The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study to frame and follow a project plan that leads to a solution for a given project specification\/design brief relevant to the student's chosen study pathway.  The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. The project will be undertaken on an individual basis, however, the work completed within the module is likely to require the GA to work with groups of individuals within the organisation. Therefore, the GA can assume the role of a project leader or significant project member carrying out a role of responsibility on the project. Where more than one GA on this module is working within the same team in the workplace then this may be assessed as a group project. Project specifications\/design briefs are expected to be derived from the student's workplace. At this programme level the GA is expected to contribute significantly to the development and conduct of a project plan framed around a relevant development process for a well-defined problem area under direct supervision of a work based supervisor and a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.  The GA requires to work in a self-motivated way, coordinated with colleagues and within collectively defined schedules ,further developing confidence in their ability to work with others on analysing and creatively solving problems. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), GAs will also reflect upon strengths and weakness of the team and relevant professional and ethical issues introduced.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.   The percentage of Work Based Learning for this module, as represented by the Independent Learning \"Activity Type\", is 62%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team dynamics, personalities and traits Meeting participation skills Listening, questioning skills Negotiation and assertiveness skills Critical thinking and decision making Giving and receiving feedback Coping with pressure Working with different cultures Stakeholder relationship management Landscape of legislative frameworks governing work and enterprise in the digital economy.   Project Lifecycle Management Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities Configuration Management and Source Code Control: the role of configuration management defect Tracking, Management and supporting tools  Software Testing:testing techniques and practices automated testing and test frameworks integration of testing with automated build and defect tracking systems software security testing tools and techniques Process Improvement Approaches and Quality Schemes Software Process Improvement concepts and frameworks Software Quality, Quality Assurance, Assessing System Quality and the relationship to testing  Careers and Employability Recruitment and selection processes Career planning Professional profile, digital Identity and the role of social media Professional bodies and societies Business and workplace ethics and professional issues - differentiating between good and bad employers and employees Internships and Placements      On successful completion of this module students should be able to:  1. Develop a project plan that applies an appropriate development lifecycle process and practices, and supporting developmental resources and tools (e.g. testing, versioning, configuration management, continuous integration and automation) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study.  2. Analyse the concepts underlying software quality schemes and process improvement.   3. Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making.  4. Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.    ","Integrated Project 2 The module offers students the opportunity to develop a solution to a realistic problem relevant to the domain of the student's programme of study and appropriate to the student's level of study. It will involve the utilisation of the knowledge and skills developed throughout the student's current level of study in producing an appropriate solution  The emphasis of this module is on applying the development lifecycle practiced by professionals in their area of study (e.g. the software application development lifecycle and its constituent parts the game development process) to frame and follow a project plan that leads to a solution for a given project specification\/design brief relevant to the student's chosen study pathway.  The balance of activities will depend on the specific objectives of the topics covered but the problem is intended to provide challenges and learning experiences that further help develop the student's insight into practices and skills associated with their intended career pathway within a working environment, and develop their competence to operate successfully as part of a team. It is a group-based project and the work completed within this module by an individual student will require the student to work as part of a team within the workplace.. Project specifications\/design briefs are expected to be derived from the student's workplace. At this programme level the group are expected to develop and follow a project plan framed around a relevant development process for a well-defined problem area as a group with the assistance of, and under the supervision of, a module tutor and work towards well defined deliverables that meet defined requirements using specified resources.  Students require working in a self-motivated, coordinated way within collectively defined schedules and further developing confidence in their ability to work with others on analysing and creatively solving problems. As well as reflecting on their personal performance (strengths and weaknesses, professional development needs), students will also participate in peer reflection and evaluation, and reflect upon relevant professional and ethical issues introduced.  The primary assessable outcome of the project will be an artefact appropriate to the problem set, developed through significant coordinated practical work, together with supporting documentation. The assessment will include an evaluation of the level of professionalism which teams and individuals have adopted within their work.   The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 79%. The percentage of Work Based Assessment for this module is 100%.  The Individual at Work Team dynamics, personalities and traits Meeting participation skills Listening, questioning skills Negotiation and assertiveness skills Critical thinking and decision making Giving and receiving feedback Coping with pressure Working with different cultures Stakeholder relationship management Landscape of legislative frameworks governing work and enterprise in the digital economy.   Project Lifecycle Management Project planning and management fundamentals: Contents of a project plan Work Breakdown Sturucture (WBS), Project Deliverables and Milestones Scheduling of project tasks Project Monitoring and Review activities Mapping lifecycles to plans Project lifecycle management resources and tools relevant to the programme of study (e.g. software engineering tools to support verification, testing, configuration and release management, deployment and maintenance).  Careers and Employability Recruitment and selection processes Career planning Professional profile, digital Identity and the role of social media Professional bodies and societies Business and workplace ethics and professional issues - differentiating between good and bad employers and employees Internships and Placements Guest external speakers and Guru seminars      On successful completion of this module, students should be able to:  1 - Develop a project plan that applies an appropriate development lifecycle process (e.g. the software application development lifecycle and its constituent parts; the game development process) and supporting developmental resources and tools (e.g. testing, versioning) to enable a team to develop a solution to a practical and realistic problem relevant to the programme of study.  2 - Develop and demonstrate appropriate competence in, and an understanding of, the roles and transferable skills required in the project's development, and the constraints under which work is undertaken.  3 - Explain the nature of professional responsibility and evidence a sensitivity to account for ethical, cultural, and legal issues in their work and decision-making. 4 - Reflect upon their own strengths and weaknesses and those of fellow team members and utilise reflective practices to support personal and professional development.     "],"10":["CC5051 - Databases (2023\/24)  \nIntroduces techniques for analysing, designing and implementing database systems. An understanding of data modelling and design concepts is provided and database programming language skills are taught. The practical aspect of developing database systems is emphasised and use is made of a widely-used commercial database system (e.g. Oracle) for this purpose.&nbsp; \n \nThe module will enable students to give an introduction to the issues governing the design and implementation of database systems. Theoretical aspects of designing sound database systems, as well as the practical aspects of implementing such systems are presented. This therefore allows students to understand, and put into practice, the techniques available for analysing, designing and developing database systems.   \nThe main areas of the module syllabus include: \n \nDatabases and Database Management Systems: architectural framework, data independence. LO5 \nData analysis and modelling: conceptual data model notation, Entity-Relationship modelling, normalisation theory. LO1, LO2, LO3 \nDatabase models: historical background, hierarchical, network, relational models. LO3, LO5 \nRelational database theory: the model and its terminology, primary\/foreign keys, integrity constraints, logical schema transformation. LO2, LO3 \nRelational Database languages: querying, insertion, deletion, update, views and reporting with SQL. LO4, LO5 \nRelational Algebra: algebraic operations, reference to SQL. LO4, LO5 \nCase study: practical application of database design and implementation. LO1, LO2, LO3, LO4   \nOn successful completion of this module, the student will be able to: \nLO1: Produce an Entity-Relationship model from a realistic problem specification \nLO2: Use formal design techniques (e.g. normalisation) to produce a database schema \nLO3: Design and implement a database system from a conceptual data model \nLO4: Manipulate and extract data stored in a database using relational algebra and SQL \nLO5: Discuss the relative merits of the relational environment ","CS273 - Introduction to Databases The aim of the class is to provide participants with a conceptual and practical understanding of data modelling, database design and database technology. The class then builds on a basic understanding of the relational database approach, covering more complex SQL query design and efficient execution. 1. Introduction to the Database Environment: functions of a database management system; 2. Entity Relationship modelling. 3. The Relational Data Model, relational algebra, integrity constraints. 4. Relational query languages. 5. Normalisation. 6. JDBC 6. NoSQL On completion of this class, participants should be able to: show an appreciation of the facilities and services which should be provided by a fully featured database management system.  demonstrate knowledge of commonly occurring data models.  display knowledge of the process of designing a database system, starting from an informal specification.  display skill in formulating database queries using SQL.  demonstrate ability to utilise triggers \/ stored procedures, and understand the importance of indexing.  display knowledge of potential future developments in database technology. ","Databases, Interfaces and Software Design Principles  \n \nTo provide students with a general introduction to the theory and practice of database systems. To enable students to gain experience with a modern (relational) database system through the use of the SQL language. To give an understanding of the structure and workings of relational database systems and provide some insight into recent developments. To enable students to gain experience with design and implementation of database driven web interfaces. To give an understanding of the principles of software engineering design through determining user needs and requirements capture.\n \n   \n \n Databases are everywhere. Via a multitude of different user interfaces, we interact with many different databases every day, whether using the web, electronic calendars, diaries or timetables, searching for contact details, or looking for directions using a mobile phone. As such databases need to be both easy to use and fast. This module focusses on both the theory and practice of databases and interfaces to them. We examine the fundamentals of the relational database model, as well as implementations of the model in database management systems (DBMS) and languages to interact with them such as Structured Query Language (SQL). We explore relevant software design principles such as understanding user needs, requirements and software specifications and how this relates to database design and implementation. And because databases do not exist in isolation, we also examine how to design and build ways to interact with them, specifically via web development for which database access is key. \n \n  Knowledge and Understanding:An understanding of the relational models of database systems. Ability to understand and use SQL. Understanding of the principles of web development and software engineering design.Intellectual Skills:Basic knowledge of the theory underlying relational database systems. Ability to design and implement database systems. Ability to design user interfaces for a database.&nbsp;Professional Skills:The use of SQL for database specification and manipulation. The use of web technologies for database front-end development.&nbsp;Transferable&nbsp;Skills:Understanding the use and applications of database systems. Understanding the use of web technologies and user interfaces. Understanding the user needs when designing software \/ database prototypes.&nbsp;"],"11":["CS272 - Introduction to Computer Networks The aim of this class is to equip participants with knowledge and understanding of computer networking. Participants will gain a practical understanding of the topic via assessed programming assignments. The class aims to provide a good grounding in the basics of computer networking. It provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.  It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.  Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas: The role of web services for tactical battlefield communications  Adaptive, user experience driven video streaming in 5G mobile networks  Autonomous network management in virtualised, software defined networks  On completion of this class, participants will be able to: demonstrate a broad knowledge of the area of computer networking and its terminology.  demonstrate an understanding of the operation of a range of networking protocols and devices.  demonstrate an understanding of the TCP\/IP model.  demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks). ","Undergraduate Course: Computer Communications and Networks (INFR10074) This is a comprehensive first course in Computer Communications and Networks, focusing on fundamental concepts, principles and techniques. The course will introduce basic networking concepts, including: protocol, network architecture, reference models, layering, service, interface, multiplexing, switching and standards. An overview of digital communication from the perspective of computer networking will also be provided.  \n \nTopics covered in this course include: Internet (TCP\/IP) architecture and protocols, network applications, congestion\/flow\/error control, routing and internetworking, data link protocols, error detection and correction, channel allocation and multiple access protocols, communication media and selected topics in wireless and data centre networks. It will cover recent advances in network control and management architectures by introducing the concepts of software-defined networking (SDN) and network (function) virtualisation.  \n \nStudents taking this course will gain hands-on experience in network programming using the socket API; network traffic\/protocol analysis; and on assessment of alternative networked systems and architectures. * Introduction to Computer Networking and the Internet \n* Digital Communication Basics \n* The Application Layer with comprehensive treatment of networked applications (incl. multimedia data and applications) \n* The Transport Layer \n* The Network Layer \n* The Data Link Layer \n* The Medium Access Control Sub-Layer \n* The Physical Layer \n* Software-defined networking (SDN) \n* Network virtualisation and network function virtualisation (NFV) \n* Network management \n* Introduction to data centre and wireless networks \n* Overview and selected aspects of network security On completion of this course, the student will be able to:\n     \n         explain key networking concepts, principles, design issues and techniques at all protocol layers  contrast between different types of networks (e.g., wide area networks vs. local area networks, wired vs. wireless) in terms of their characteristics and protocols used  describe different types of networked applications and what underlying network protocols are needed to meet their diverse requirements  distinguish between control and data planes in computer networks, and their corresponding architectures in real-world networks (including the Internet)  understand reliable transport protocols and networked system architectures via implementation using Socket APIs, measurement and analysis \n     ","CS321 - Computer Networks To provide the participant with a solid foundation in the principles of computer networking and a basic understanding of the operation of the latest networking technologies. On completing this class, the participant should have the necessary skills to be able to design, build and test a small-scale communications network in a virtual environment.&nbsp; The class aims to provide a good grounding in the basics of computer networking. This module provides participants with an \u201cunder the hood\u201d look at how computers (and other digital devices such as mobile phones and tablets) communicate with each other across a network. It begins by introducing the basic principles, terminology, protocols and network devices which, when deployed together, form an end to end communications network.&nbsp;It then, through a series of step by step videos and tutorials, shows the participant how to build, configure and test a small communications network such as that used by a multi-site SME.&nbsp;&nbsp;Finally, the participant is introduced to the latest cutting-edge networking technologies and, while working in a group, undertakes a small case study based on one of three areas:&nbsp; The role of web services for tactical battlefield communications&nbsp;  Adaptive, user experience driven video streaming in 5G mobile networks&nbsp;  Autonomous network management in virtualised, software defined networks&nbsp; Main topics covered:&nbsp; Introduction to Computer Networks: The uses of computer networks, network Hardware &amp; types of networks, protocols, layers &amp; network services, OSI &amp; TCP\/IP reference models&nbsp;  Network architectures &amp; services&nbsp;  Layers of a network protocol stack: the physical layer, data link layer, internet layer, application layer  IP addressing and sub-netting&nbsp;  Network devices&nbsp;  Message passing and real time traffic support&nbsp;  Building a virtual network&nbsp;  Local Area Network design&nbsp;  Current trends in networking: cloud services, software defined networks, network function virtualisation  Emerging trends in networking: autonomous network management, 5G mobile networks&nbsp;  After completing this class participants will be able to:&nbsp; Demonstrate a broad knowledge of the area of computer networking and its terminology.&nbsp;  Demonstrate an understanding of the operation of a range of networking protocols and devices.&nbsp;  Demonstrate an understanding of the TCP\/IP and OSI models.&nbsp;  Demonstrate a basic understanding of the underpinning mechanisms of cutting-edge networking technologies such as software defined networking, network function virtualisation and fifth generation mobile networks (5G Networks)&nbsp;  Design, implement and test a basic communications network in a virtual environment.&nbsp; "],"12":["Front-End Web Development This module provides students with the technical foundation to enable them to develop applications which are executed within a web browser. The module covers HTML5, JavaScript frameworks and libraries and other appropriate technologies with implementations that allow client-side scripts to interact with the user, control the browser, communicate asynchronously and alter document content. In addition, widely applied patterns used for client-side web application development are covered.  While undertaking the module students develop applications that consume remote services using appropriate technologies and data formats within browser-based applications.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.  Advantages and disadvantages of large-scale browser-based JavaScript applications  HTML\/CSS :  -HTML 5 capabilities, ie.g. canvas, video and audio,  -new and emerging features e.g. offline support and client-side storage elements, -CSS pre-processing, for example LESS, SASS  JavaScript :  -current programming techniques and practices in JavaScript including DOM scripting techniques and applying object-oriented principles in JavaScript -design patterns relevant to web applications e.g. Module, Revealing Module, Singleton, Constructor MVC, MV*  Creating large-scale browser-based JavaScript applications : -architecture and design issues, including architecture patterns, modularisation and dependencies, routing\/navigation\/history, templating\/binding, data access, event-driven messaging  -libraries and frameworks which support development of large-scale JavaScript applications, for example e.g. jQuery, Bootstrap, AngularJS  -application building and deployment -security: preventing cross-site scripting, Content Security Policy  Working with services :  -REST services -asynchronous requests and callbacks -XMLHttpRequest\/AJAX -cross-origin requests -authentication  Real-time web communication :  -server push  -publish-subscribe  -peer-to-peer  -techniques and technologies for real-time web communication, including: polling, long polling, WebSocket, HTML5 Server-Sent Events, WebRTC  -frameworks which support development of real-time web applications   Testing and debugging :  -unit testing in JavaScript  -client-side test frameworks  -use of tools for debugging JavaScript  -use of tools for debugging HTTP requests\/responses  Alternatives to JavaScript, for example WebAssembly, TypeScript      On successful completion of this module, students should be able to:  1 - Determine an appropriate distribution of functionality between the front end (client) and back end (server) tiers of a web application 2 - Demonstrate an understanding of the architectures and design patterns commonly used to create front-end web applications.  3 - Critically appraise and select frameworks and libraries which meet specific purposes within the architecture of front-end web applications. 4 - Evaluate the requirement for real-time functionality to enhance responsiveness within a web application. 5 - Develop and test a rich, responsive, secure and scalable front-end web application which can be executed within a modern web browser and interacts with remote services, making use of appropriate technologies, libraries and frameworks.      ","Web Platform Development 2 This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.  Web platform architectures -n-tier-architectures -scalable\/distributed architectures -RESTful architectures  Design patterns relevant to web applications, -Model-View-Controller -Dependency Injection   Server-side application design: -Business logic -Routing and URL design -Handling requests -Using MVC frameworks: models, views and templates, controllers -REST APIs: using request methods and headers, content negotiation including serialisation and de-serialisation, formatting responses  Client-side application design -Review of HTML, CSS, JavaScript and JavaScript libraries, DOM and event handling -View generation  Interfacing with external data sources and services -Database interfaces -Data in JSON format -Data from web services  The use of third party services, e.g. for authentication.  Testing, debugging and error handling. The use of test frameworks.  Web platform frameworks.   Session management, including distributed session management.   Performance management. -DNS management -Scaling -http cache specification -memcached (distributed in-memory cache) -edgecaching\/CDN  Tool chains in the context of web application development.   Web application specific security vulnerabilities and their prevention. -Injection (SQL, JavaScript) -Cross-site scripting -Cross-site request forgery -Broken authentication and session management  Deployment and hosting.  Architectural comparison of large scale web application such as YouTube, Facebook or Twitter.      On completion of this module, students should be able to:  Critically appraise different web platforms.  Critically appraise different web architectures.  Critically appraise design patterns relevant to web applications and their components. Design, develop and deploy a web application with a web browser client, application logic implemented using the capabilities of a scalable web server platform and a database-driven backend leveraging external services such as authentication using appropriate tools and frameworks. Analyse web application security vulnerabilities and their prevention.     ","Web Application Development 2 This module equips the students with the knowledge and understanding to design, implement and deploy scalable web applications consisting of a web browser client interacting with a server which uses a database as well as external services. Students examine web application platforms, architectures and design patterns including the Model-View-Controller design pattern. Aspects of practical importance such as testing, tooling and security are covered in a web application context.  Web platform architectures and architectural styles: - n-tier-architectures - communication over HTTP - front-end and back-end functionality - REST - cloud functions  Web application architecture, including Model-View-Controller  Server-side web application design issues: - server-side scripts - request handling - business logic - validation - using MVC frameworks: models, views, controllers, routing and URL design, dependency injection  - session management - error handling and logging   Interfacing with data sources   Implementing web APIs   Web application security: - authentication and authorisation in web applications  - web application specific security vulnerabilities and their prevention, including injection (SQL, JavaScript), cross-site scripting, cross-site request forgery  Testing and debugging web applications  Deployment and hosting      On successful completion of this module, students should be able to:  1 - Demonstrate an understanding of web application architectures, frameworks and design 2 - Demonstrate an understanding of web application security vulnerabilities and their prevention 3 - Critically evaluate the use of the Model View Controller architecture in the development of web applications  4 - Design, develop, test and deploy a robust data driven web application utilising appropriate tools and frameworks 5 - Implement authentication to secure a web application using appropriate schemes and services       "],"13":["CS453 - Introduction to Artificial Intelligence The aim of the class is to give learners a basic introduction to modern AI. Participants will develop a practical understanding of AI algorithms which enable autonomous systems to make rational decisions, AI systems which encompass a variety of such algorithms to achieve an overall goal, and the implementation of these in a suitable high-level programming language.  What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.&nbsp;  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).&nbsp;  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.&nbsp;  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.&nbsp;  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing, Monte Carlo Tree Search.&nbsp;  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches., PDDL (Planning Domain Definition Language).  After completing this class participants will be able to:&nbsp; Understand and define the problem of AI as it relates to autonomous systems.&nbsp;  Implement key AI algorithms and build AI systems.&nbsp;  Apply search techniques to enable autonomous systems to choose actions that are appropriate to their goals.&nbsp;  Apply key techniques to adversarial problems, such as Mini-Max and Monte Carlo Tree search.&nbsp;  Define problems as planning problems using PDDL and solve them using a planner. ","CS6053 - Artificial Intelligence and Machine Learning (2023\/24)  \nThis module surveys essential principles, methods, and techniques in AI and machine learning. It covers a broad range of AI topics such as problem solving, knowledge representation, logical and probabilistic inference, and machine learning using methods of automata theory, logics, probability theory and statistics. It discusses examples of intelligent systems and studies how to develop applications that can learn from experience such as expert systems, automatic classifiers and autonomous systems planning their actions and communicating in natural language. Students will be offered lectures, which introduce key concepts, explain main principles and techniques in AI, and demonstrate how to apply them in areas such as image recognition and price forecasting. \n \nThe workshop will provide practical sessions to help students understand the content of the lectures and build the necessary skills to develop AI-applications using suitable problem descriptions and datasets.   \nThe main topics of the study will include: \n \n1. Introduction to Artificial Intelligence and Machine Learning. Rational reasoning and intelligent behaviour. Human and Artificial Intelligence. Examples of AI systems. (LO1) \n \n2. Rational Agents. Conceptual model of rational agents. Environment types and agents classification. (LO2, LO3) \n \n3. Problem Solving in State Space. Uninformed search and Heuristic Search. Comparison of the search algorithms. (LO2, LO3) \n \n4. Knowledge Representation and logics. Facts, heuristics, assumptions, conditions, and conclusions. Logical modelling and logical inference. Logical theories and ontologies. (LO2, LO3) \n \n5. Actions and Knowledge-based Planning. Linear, hierarchical and non-linear planning. Continuous planning and replanning. (LO2, LO3) \n \n6. Uncertainty and Probabilistic Reasoning. Decision making under uncertainty. Probabilistic space and degree of truth. Probabilistic distributions. Conditional, prior and posterior probability. Bayes Rule. (LO2, LO3) \n \n7. Learning Agents. Conceptual model. Supervised and unsupervised learning. Learning from observations. Decision tees, space of hypotheses and performance measurement. (LO2, LO3) \n \n8. Statistical Learning. Classification, approximation and prediction. Probabilistic inference. Parameters learning using Bayes nets. Linear regression. (LO2, LO3) \n \n9. Neural Networks. Computation in the brain and artificial neuron models. Linear neural networks, multi-layer networks. Backpropagation. Application to image processing. (LO2, LO3) \n \n10. Natural Language Processing. Communication and language. Language structure and linguistic data. Parsing and syntactic processing of written texts. Problems. (LO2, LO3) \n \n11. Legal, Social, Ethical and Professional Issues in AI. AI and explanation. AI and law. Ethics of AI and impact of AI on society. (LO4)   \nOn completing the module, the student will: \n \n- LO1: Understand the principles of rational reasoning and intelligent behaviour, the similarities and the differences between natural and human intelligence. \n \n- LO2: Know the most popular models, methods and algorithms for building and operation of rational and learning agents and processing information. \n \n- LO3: Be able to develop basic AI programs which demonstrate intelligent behaviour and rational thinking in typical environment using available data sets. \n \n- LO4: Understand the Legal, Ethical &amp; Professional Issues brought by AI and the impact of AI on individuals, organisations and the society as a whole. ","CS310 - Foundations of Artificial Intelligence To help the student to a broad appreciation of the scale and nature of the problems within Artificial Intelligence and to a detailed understanding of some of the fundamental techniques used to address those problems. The class will cover the first 12 chapters of the 3rd edition of AI: A Modern Approach by Russell and Norvig. The topics to be covered will include: Introduction: What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing.  Constraint satisfaction problems: defining CSPs, constraint propagation, backtracking search in CSPs, local search in CSPs, exploiting problem structure.  Logical agents: propositional logic for agent behaviour, propositional theorem proving, propositional model checking and SAT solving, agents based on propositional logic.  First-order logic: syntax and semantics, knowledge engineering in first-order logic.  Inference in first-order logic: unification and lifting, forward chaining, backward chaining, resolution.  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches.  Planning and acting in the real world: time, schedules and resources, hierarchical planning, planning and acting in non-deterministic domains, multi-agent planning.  Knowledge representation: ontological engineering, events, mental events and objects, reasoning with default information, an example application. The class will focus on the practicalities of using these techniques to build intelligent agents. Practical work will be set, including the programming of an intelligent agent for a specified task. On completion of the class, a student should be able: to understand the modern view of AI as the study of agents that receive percepts from the environment and perform actions  to demonstrate awareness of the major challenges facing AI and the complexity of typical problems within the field  to exhibit strong familiarity with a number of important AI techniques, including in particular search, knowledge representation, planning and constraint management  to assess critically the techniques presented and to apply them to real world problems "],"14":["Machine Learning (M) COMPSCI5014   A practical introduction to the foundations of machine learning.     To present students with an introduction to the   general   theory  &nbsp;of learning from data and to  &nbsp;a number of   popular   Machine Learning methods  .  &nbsp;   To present students with the practical application of Machine Learning techniques in a variety of domains, including Human Computer Interaction, Information Retrieval, Bioinformatics and Computer Vision and Graphics.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Contrast  &nbsp;the strengths and weaknesses of   different  &nbsp;algorithms  &nbsp;for different tasks and datasets  ;    6.   Analyse the benefits and drawbacks of  &nbsp;some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ","Machine Learning (H) COMPSCI4061   A practical introduction to the foundations of machine learning.     To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Explain the   typical   strengths and weaknesses of a selection of common algorithms    6.   Appreciate some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ","Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130) Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and\/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods. \n \nThis is an advanced course. Students should not choose this class without the required background (see \"Other Requirements\" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211). The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable. \n \n- Classification and Regression: \n                  Linear Regression, logistic regression, Bayes classifiers \n- Expanded feature representations:  \n                  Basis functions, neural networks, kernel methods \n- Generalization, regularization and inference:  \n                  Penalised cost functions, Bayesian prediction, learning theory \n- Model selection, pruning and combination:  \n                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods. \n- Representation and metric learning:  \n                  Dimensionality reduction, clustering, feature learning \n \nTo support these topics we will also cover: \n- Optimization and Inference algorithms:  \n                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required. \n- Practical issues:  \n                   Formulating problems as machine learning, adapting methods to fit problems.  \n                   Numerical and programming issues important for machine learning. \n                   Ethical issues, such as responsible application of methods and privacy concerns. On completion of this course, the student will be able to:\n     \n         frame an applied problem as a machine learning task, identifying appropriate methods  critically compare and contrast alternative machine learning methods for a given task  derive and motivate novel variants of machine learning methods  create accessible and useful explanations of the workings and failure modes of machine learning methods  check and refine implementations of learning algorithms, while applying them in practice \n     "],"15":["Algorithms And Data Structures (M) COMPSCI5004   To study the concept of algorithms, and how to analyse their efficiency  ;    To study the concept of abstract data types, and the abstract data types most commonly used in software development  ;   To study the basic data structures most commonly used to represent these abstract data types, together with algorithms operating on these data structures.     To study the concept of algorithms, and how to analyse their efficiency  ;   To study the concept of abstract data types, and the abstract data types most commonly used in software development  ;   To study the basic data structures most commonly used to represent these abstract data types, together with algorithms operating on these data structures.     By the end of the course students will be able to:    1: Discuss the concepts of algorithms and algorithm complexity;    2: Use an abstract data type (ADT);    3: Identify commonly used to represent the above ADTs (arrays  ,  &nbsp;linked lists  ,  &nbsp;search trees  ,  &nbsp;hash tables);    4: Describe algorithms expressed in a suitable notation;    5: Use basic insertion  ,  &nbsp;deletion  ,  &nbsp;searching  , merging,  &nbsp;and sorting algorithms;    6: Implement these algorithms in a suitable programming language;    7: Detail complexity of these algorithms;    8: Use recursion in algorithms and programs;     9: Describe ADTs specified informally;    10: Design  ,  &nbsp;specify  ,  &nbsp;and implement ADTs;    11: Code standard ADTs (strings  ,  &nbsp;stacks  ,  &nbsp;queues  ,  &nbsp;lists  ,  &nbsp;sets  ,  &nbsp;maps  ,  &nbsp;trees  ,   graphs);    12: Recognise how to decide which ADTs are suitable for use in particular programs;    13: Implement these data structures in a suitable programming language;    14: Describe how the complexity of ADT operations is affected by the choice of data structures.  ","Data Structures and Algorithms This module covers the concepts associated with data structures and algorithms including the design of algorithms considering factors such as efficiency and complexity. A range of widely employed data structures such as Arrays, Lists, Trees and Queues are investigated. Coverage of algorithms such as searching and sorting as well as those associated with graph data structures are also included. The topic is covered in the context of object-oriented development and enables students to develop an appropriate object-oriented software solution given a simple set of requirements where consideration has been given to the use of the most appropriate data-structures and algorithms.   The percentage of Work Based Learning for this module, as represented by the Independent Learning 'Activity Type', is 61%. The percentage of Work Based Assessment for this module is 0%.  Data Structure and Algorithm Concepts: - History - Data Structure Definition: Relationship to OO, Container Classes, ADT - Algorithm Definition: Representing algorithms, Flowcharts, UML, Pseudo Code - Cost Estimation: Algorithm Analysis, Trade-Offs, Recursion, Algorithm Complexity, Big-O Notation  Data Structures and their Implementations:  - Arrays: one-dimensional, two-dimensional, n-dimensional, jagged - Lists: Singly Linked, Doubly Linked, Circular, Array List - Maps and Sets - Collections and Generics - Hashing: Hash Tables, Rehashing, Perfect, Universal  - Stacks and Queues - Trees: Binary, Binary Search, Expression, Splay, B-Trees and Tries - Graphs  Sorting and Searching:  - Bubble, Shell, Quicksort, Heap - Red-Black and AVL trees - Pattern matching and Regex expressions  Graph Algorithms: - Shortest Path, Depth First\/Breadth First, Maximum Flow, NP Complete  Algorithm Design Techniques: - Divide and Conquer - Big-O  - Compression (LZW, Huffman)  - Encryption  - Searching and Sorting  - Data Structures      On completion of this module, students should be able to:  1 - Understand the concepts which underpin data structures and algorithms such as cost estimation and algorithm complexity.  2 - Understand the fundamental data structures and algorithms commonly used when developing software systems.   3 - Critically evaluate the data structures used with searching, sorting and graph algorithms.  4 - Develop an object-oriented solution which demonstrates the appropriate the use of a range of data structures and algorithms.     ","Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026) This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics. This course is an important foundation for all areas of Informatics.  \n \nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis.  \n \nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications). \n \nThe following is an indicative list of topics covered: \nAsymptotic notation and algorithmic analysis \nSequential data structures (lists, stacks, queues) \nBasic and more advanced sorting algorithms \nTree data structures, heaps and priority queues \nHashing and dictionaries \nGraphs and graph algorithms \nDynamic programming \nThe classes P and NP \n \nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples. On completion of this course, the student will be able to:\n     \n         explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms  describe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings  work with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)  describe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems  define informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance \n     "],"16":["Horizon CDT Future Products  \n \nWhen developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading to the development of videos of utopian and dystopian visions of the future of digital identity.\n \n   \n \n When developing and analysing future products that engage with technologies and systems to capture, store and interact with personal data it is important to understand the different contexts in which topics related to personal data and digital identity are of importance. This module will consider four thematic areas: transport; healthcare; creative and cultural industries; and future cities, to identify the different requirements and the implications of these different domains for digital identity research topics. The module will be built around theme days which will combine presentations from external participants, Nottingham researchers and student-led discussions, leading tothe development of videos of utopian and dystopian visions of the future of digital identity. All students are required to attend all four theme days of this module, along with sessions dedicated to preparing for and undertaking the assessment. \n \n  By the end of the module, students will be aware of: How we creatively express our digital identities through new forms of television, home entertainment and the arts. \t How digital identity can enable long-term relationships with consumer goods in the home. \t How personal data can enable well-being and new modes of engagement with well being. \t How smart environments, from future energy services to intelligent transportation systems will draw on personal data to provide more adaptive, safe and sustainable services. They will demonstrate this through the production of videos and participation in four one day sessions built around the topics of infrastructure, well-being, culture and the home.","Horizon CDT Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of their CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company\/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement; outlining expectations, duties and outcomes.\u2022&nbsp;Communicate an awareness and understanding of their placement partner\u2019s specific concerns and how they re-oriented their existing skills and knowledge base to suit. Contextualise their placement experience in relation to their future PhD research activities. \u2022&nbsp;Demonstrate a developing understanding of the differing organisational structures and demands on team members across industry and academia.\u2022&nbsp;Be able to understand and communicate the relationship between the work completed within their placement and the DE programme as a whole (i.e. \u2018Creating our lives in data\u2019).\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement; and how they relate to both academia and industry.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career.\u2022&nbsp;Demonstrate the ability to respond to the needs of others and transfer skills across disciplines.","Horizon CDT Optional Placement  \n \nTo reflect on the placement completed as part of the Horizon CDT training programme. To enable to student to identify links between placement work and the Horizon CDT theme of Creating our Lives in data in general. To develop communication skills and reflective practice.\n \n   \n \n This module enables Horizon CDT students to reflect and report on the experience of a second CDT placement. The placement should be reported via EITHER: a) a scheduled talk to all students who have not yet organised a placement or b) a video on the Horizon student profile page of the Horizon website describing the placement (this could be in the form of one student asking another questions about the internship, or a VoiceOver PowerPoint) or c) a description of the placement for publication on the Horizon student profile page on the Horizon website.  In the case of the video or webpage, approval for content must be sought by the student from the company\/partner before publication; in the case of the talk the slides must be submitted by email to the Centre Manager for distribution to future students. \n \n  Students who complete this module will: \u2022&nbsp;Be able to demonstrate their experience of working in a commercial or research-based placement. &nbsp;\u2022&nbsp;Be able to understand the relation between the work completed within their placement and the DE programme as a whole.\u2022&nbsp;Be able to identify the professional and research skills developed as part of their placement.\u2022&nbsp;Demonstrate the ability to undertake continued learning during a professional career."],"17":["CS415 - Industrial Placement To enable the student to experience the application of aspects of their degree course in an industrial context and so to understand the complexities of commercial software development. The period of industrial placement lasts for approximately twelve months; students are expected during their fourth year to take an active part, in cooperation with the placement coordinators, in securing an appropriate placement. If, after displaying due diligence, students are unable to secure any form of suitable external placement then arrangements will be found within the University or, alternatively and probably more likely, transfer to the Honours degree in Computer Science can be arranged. The nature of the work undertaken will vary substantially; it is expected that the majority of the students (like those on industrial placement for related degrees) will find placements where they will be working close to the frontiers of what is presently achievable. It is also expected that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp;  to build on and consolidate material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to undertake independent writing and working  to display an appreciation of good practices in software engineering ","CS552 - Industrial Placement 2 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the Computer Science MEng degree, but if circumstances require it can be undertaken later in the course than the end of third year.The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the reports submitted will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. On completion of the class, a student should be able: to build on material acquired in the first three years of the degree course  to work in industry as a member of an industrial team  to pull together ideas from one or more of the classes they have undertaken  to display a disciplined approach to good practices in the general area of the degree course to undertake independent writing and working","CS416 - Industrial Placement 1 To enable the student to experience the application of aspects of their degree course in an industrial context and the group work which such experience requires. The period of industrial placement lasts for approximately three months, from June or early July to late August or September; students are expected during their third year to take an active part, in cooperation with the Year or Placement Coordinators, in securing an appropriate placement. A placement must be satisfactorily completed prior to graduating with the MEng Computer Science degree, but if circumstances require it can be undertaken later in the course than the end of third year. The nature of the work undertaken will naturally vary substantially; it is expected that the majority of students will (like those on industrial placement for closely related degrees) find placements where they will be working close to the frontiers of what is presently achievable. It is also strongly hoped that students will participate as members of an industrial team, as opposed to working in relative isolation. However, the work reported will be judged in terms of what was possible within a particular placement, rather than according to some absolute standard. &nbsp; \u2022 to build on material acquired in the first three years of the degree course \u2022 to work in industry as a member of an industrial team \u2022 to pull together ideas from one or more of the classes they have undertaken \u2022 to display a disciplined approach to good practices in the general area of the degree course \u2022 to undertake independent working &nbsp;"],"18":["COMP4107: \nADVANCED COMPUTER VISION  To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies.  \n\t\t\t To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.   Themes will be chosen from contemporary areas of computer vision including the following: \n\t\t\t Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D\/3D.  \n\t\t\t Computer vision for advanced visual semantic models, attribute learning, zero-shot learning, visual question and answering.  \n\t\t\t Computer vision for advanced object and scene understanding.  \n\t\t\t Computer vision for behaviour understanding.  \n\t\t\t Computer vision for security and biometrics.  \n\t\t\t Computer vision for image manipulation and augmentation.    On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a\n\t\t\t\t\tcritical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.   ","Computer Vision Methods and Applications (H) COMPSCI4066     The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of  &nbsp;  building advanced image-based applications. Examples of potential vision-based applications include:   image understanding in   mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production  &nbsp;tools  , interactive gaming, augmented reality and visual biometrics  , forensic image analysis, security and surveillance,   and medical imaging.   The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:  &nbsp;face detection,  &nbsp;object recognition, tracking, segmentation and 3D imaging.     \u25a0&nbsp;  To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.    \u25a0&nbsp;  To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above  &nbsp;(section 13)  . Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines.     \u25a0&nbsp;  To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.     By the end of the course students   will   be able to:     1.   Analyse  &nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;    2.   Implement feature extraction and object recognition algorithms;    3.   Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D   surfaces from stereo-pair images, or motion fields from image sequences;    4.   Demonstrate the ability to apply the rudiments of information theory and basic image compression   &nbsp;                                     techniques to the design of image coding\/decoding algorithms;    5.   Demonstrate competence in the use of the   programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.  ","Computer Vision  \n \nTo provide a grounding in existing techniques and current research in computer vision.To give experience in implementing computer vision solutions to real world problems.\n \n   \n \n You'll examine current techniques for the extraction of useful information about a physical situation from individual and sets of images. You'll learn a range of methods and applications, with particular emphasis being placed on the detection and identification of objects, image segmentation, pose estimation, recovery of three-dimensional shape and analysis of motion. These problems will be approached with both traditional and modern Computer Vision approaches including Deep Learning. You will spend 5 hours per week in lectures, tutorials, and computer classes for this module. \n \n   Knowledge and Understanding  Understanding of current techniques in image analysis and computer vision and an awareness of their limitations. \t An appreciation of the underlying mathematical principles of computer vision. \t &nbsp;Experience in designing and implementing computer vision systems.  Intellectual Skills  Apply knowledge of computer vision techniques to particular tasks. \t Evaluate and compare competing approaches to vision tasks. \t Evaluate vision systems.  Professional Skills  Develop a working knowledge of computer vision\/image analysis algorithms and evaluate the applicability of various algorithms and operations to particular tasks.  Transferable Skills  Apply knowledge of the methods and approaches presented to different problem domains using the available resources (libraries, internet, etc.)&nbsp; "],"19":["Data Protection and Ethics This module will provide students with essential knowledge and understanding in the field of data protection and ethics in the context of data science. Students will develop an awareness of the complications that come with user data, what privacy means and how data protection relates to the developer and user. This module will utilise case studies to demonstrate the consequences of when data protection is not upheld. It will also introduce techniques to deal with private data such as anonymising big? data sets and the various laws that enforce data protection. Students will learn about the fundamental principles of data ethics, a branch of ethics that evaluates moral issues related to data. This involves thinking about transparency, accountability, fairness, privacy, the law, moral dilemmas, and the risks involved in creating data-driven technology from the outset. Students will be trained to consider the ethical implications of their own data-based work.. Focus will be given to the ethics of using data science, data protection and privacy, and algorithmic governance. Students will be able to provide advice on ethical decision making based on modern corporate values. The percentage of Work Based Assessment for this module is 10%.  Data definitions and concepts Contextualisation of Data Data Protection and Privacy in utilisation, storage, sharing, purging and archiving Data laws\/legislation and their implications Data collection and consent Data anonymization and usage Data Security and Distribution Algorithmic fairness and types of bias Ethical Machine Learning Research in Ethics. Accountability and governance?      On successful completion of the module the student should be able to:-  1. Understand the requirement for data protection 2. Understand the various concepts of ethics and privacy 3. Understand the ethical implications of using data 4. Understand the laws surrounding data protection 5. Demonstrate an awareness of sources of, and effects of, bias or discrimination in terms of data utilisation 6. Implement data anonymization practices 7. Conduct ethics\/privacy assessments for data-driven projects     ","LM Data Science Project This module enables the student to demonstrate professional competence in a substantial data science task and to apply material learned in other components of the degree programme. Projects are chosen from staff suggestions or are developed from the student's original idea. Projects may involve a co-supervisors from multiple disciplines, or be completed in industry under the lead supervision of an academic member of staff.  By the end of the module students should be able to:   Carry out a substantial individual data science task, including appropriate background research, demonstrating a professional approach.    Work independently, prioritising different components of the work and managing a large project effectively    Present work undertaken both orally and in a formal project report, justifying decisions taken and evaluating outcomes    ","Introduction to Data Science  \n \nTo provide learners with a high-level view of what data science is and where it came from. The teaching block will help learners to understand the goal of data science to provide answers and insight in relation to questions that impact on organisational goals. It will present the basic mathematical and computer science underpinnings and the concept of a data pipeline as a methodology to sourcing different types of data, processing it in appropriate ways and presenting it appropriately to different audiences. This will be done within context of a professional framework which must pervade all data scientist activity to ensure that legal, ethical and security concerns are continuously addressed.\n \n   \n \n Indicative content:&nbsp;  \t Attitude to learning&nbsp; \t Professionalism and Ethics&nbsp; \t The history and context of Data Science&nbsp; \t Data Processing Pipeline&nbsp; \t Introduction to Data&nbsp;  \n \n  Understanding of the context and history of data scienceUnderstanding of the purpose of data science and the professional data scientistAn understanding of the natre of data and the different types of dataA high-level understanding of ethics and proffesionalism especially with respect to the use of dataCan assess and make progress towards achieving the data scientist apprenticeship KSBs KSBs: K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community."],"20":["CS255 - Professional Issues The aim of the class is to ensure that participants are aware of the legal, social, ethical and professional issues commensurate with the practice of Computer Science\/Software Development.  Professional Competence: codes of practice and competence; the role of the professional body; ethical practice; appreciation of business practices and change management; duties to client, employer and public; professional responsibilities; involvement in continuing education and professional development.&nbsp;  ICTs and society: the information society; impact of ICT on society; cyber crime; digital evidence.&nbsp;  General and Specific Statute Law including reference to, but not limited to, intellectual property law, Freedom of Information, Data Protection Act, Computer Misuse Act, health and safety legislation, industrial relations legislation, public liability, employer liability.&nbsp;  After completing this class participants will be able to:&nbsp; Understand the legal and regulatory issues facing information and computing professionals.&nbsp;  Appreciate the characteristics of professionalism.&nbsp;  Understand how their organisation addresses the legal, ethical, social and professional issues that arise within the IT sector. ","Professional Skills and Issues (H) COMPSCI4038   This course introduces the social, ethical, legal, and professional issues involved in the widespread deployment of information technology. It stimulates students to develop their own, well-argued positions on many of these issues.     Graduates in Computing Science, Software Engineering, and related disciplines need to understand the   social, ethical, legal, and   professional   as well as technical   issues   inherent in the  &nbsp;widespread deployment of   information technology  &nbsp;(IT)  .    They  &nbsp;  ne  ed to develop the ability to ask serious questions about the social impact of   IT  &nbsp;and to evaluate proposed answers to those questions.   &nbsp;They need to know the   laws and   professional   codes of conduct relevant to the IT industry  &nbsp;(e.g.,   intellectual property, privacy  ,  &nbsp;  freedom of information,  &nbsp;computer  &nbsp;and Internet  &nbsp;misuse,   and professional responsibilities).    This course aims to:    stimulate thinking about the social and ethical implications of the widespread and sustainable use of IT  ;    develop students' awareness of the laws and professional codes of conduct governing the IT industry;    expose students t  o IT industry working practices, including the need for   continuing professional development  ;    devel  op information gathering skills;    encourage students to adopt principled, reasoned stances on important issues in the topic area;    develop   students'   verbal and written argumentation skills.     By the end of this course students will be able to:    1.   I  dentify the principal social, ethical, legal, and professional issues in information technology (IT);    2.   E  xplain the laws and codes of conduct relevant to the IT industry, and relate them to examples of IT in practice;    3.   U  se analytical tools to break down complex ethical issues in IT;    4.   D  evelop and present arguments on social, ethical, legal, and professional issues in IT;    5.   C  onstructively criticise the arguments of others.  ","CS5071 - Professional and Ethical Issues (2023\/24)  \nThis module focuses on professional, social, ethical issues within the context of social responsibility and covers relevant computer laws (LSEPI) underpinning the Computing discipline.&nbsp; The focus of the module is empowering student to take their place in society as socially responsible professionals and allowing the exploration of self-awareness, empathy, self-efficacy and engagement in students \n \nAssessment: Coursework (100%) \n \nThe aims of this module are to: \n\u2022 Expose students to a range of professional and ethical issues to prepare them to develop their own response to working with a professional outlook. \n\u2022 Prepare students for the world of work and equip them with the knowledge and appreciation of professional bodies, code of conducts and professional certifications. \n\u2022 Provide students with knowledge and understanding of the regulations governing the digital environment (e.g. Internet) and social, ethical and professional issues (LSEPI) underpinning the Computing discipline. \nIntroduce students to academic research and research ethics, and to academic writing.   \n\u2022 Professional Issues (LO1,LO2) \n\u2022 Regulating the digital environment \n\u2022 Professional bodies\u2019 Codes of Conduct \n\u2022 Electronic Information, risks, misuse and criminal activity \n\u2022 Social &amp; Ethical issues (LO1) \n\u2022 Current issues, AI, Big Data, Cyber Security etc \n\u2022 Professional ethics and responsibilities \n\u2022 Social and Environmental concerns \n\u2022 Legal Issues (LO3,LO4) \n\u2022 An understanding of current laws regulating computing (e.g. Computer Misuse act and others) \n\u2022 Digital content and intellectual property rights \n\u2022 Introduction to research (LO5) \n\u2022 Research ethics and the University code of conduct \n\u2022 Literature search and review, academic writing, referencing and avoiding plagiarism   \nLO1 Demonstrate an awareness of the importance of Legal, social, ethical and \nprofessional issues (LSEPI) underpinning the computing discipline, and present a piece of \ncritical analysis of their relevance to a topic of current importance. \nLO2 Appreciate and explain current regulations, and professional body guidelines (such \nas BCS Code of Conduct) governing the computing discipline. \nLO3 Provide evidence of personal reflection and evaluation on the importance of \nacademic, professional and technical skills, their relationship to employability and the \nneed to plan for improvement and continuing professional development. \nLO4 Demonstrate an awareness of the importance of ethical issues underpinning \nacademic research and professional accountability. \nLO5 Effectively research, plan, structure and deliver an academic report. "],"21":[" CM30173: Cryptography To introduce students to the techniques, tools and pitfalls of cryptography (including authentication etc.).   Introduction to the problem: security, privacy, authentication, repudiation, revocation. The key distribution problem: public vs private keys. The mathematics of cryptography: Fermat-Euler Theorem, structure of finite fields and elliptic curves. Cryptographic algorithms: Diffie-Hellman, RSA, El-Gamal. Cryptanalysis: discrete logarithms, factoring. The Coppersmith attack. Elliptic Curve analogues. Private-key algorithms: DES, 3DES and AES. Common hashing algorithms: MD5, SHA-1. Characteristics of safe keys.\nUsing cryptography: digital signatures: how to find the public key.Repudiation and revocation, examples in practice: PGP, digital certificates.   1. Students will understand the basic mathematics behind private-key and public-key cryptography; \n 2. Students will be able to describe several well-known techniques for cryptographic security and authentication. \n  ","Cryptography  \n \nTo develop an understanding of the common algorithms and techniques underpinning cryptography. To understand how symmetric ciphers are designed and used to secure communication. To understand the theory and application of public-key cryptography, including the mathematics that drives it. To understand how other cryptographic primitives such as hash functions and random numbers play a role within secure systems.\n \n   \n \n This course covers the basic theory and practice of cryptographic techniques commonly used in computer security. You will learn the theory and mathematics behind commonly used algorithms, and how cryptographic primitives are used to build modern secure systems. Topics will include both private and public key encryption schemes, common algorithms and cryptanalysis, key exchange, hash functions, and elliptic curve cryptography. Important applications of these techniques such as cryptographic protocols, digital signatures and Public Key Infrastructure will also be covered. Students will learn how to evaluate the strength of algorithms, make informed decisions on their selection, and how to make use of cryptographic techniques in practice. \n \n  Knowledge and Understanding: - Knowledge of the mechanisms, strengths and weaknesses of historic and modern cryptographic techniques. - An understanding of the mathematics behind the implementation of modern algorithms.Intellectual Skills: - The ability to understand complex ideas and relate them to specific situations. - The ability to identify both capabilities and limitations of a cryptographic technique.Professional Skills - The ability to implement selected cryptographic primitives, and apply existing cryptographic algorithms within real-world applications. - The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task.Transferable Skills: - The ability to address real problems and assess the value of their proposed solutions - To communicate effectively in writing (reports, proposals, etc.)","Introduction to Cryptography (COMP0025)   Aims:  \n\n Cryptography is the practice and study of techniques for secure communication in the presence of adversarial entities. For many centuries the goal of cryptography was the protection of privacy of communications. However, computers, digital communication and in particular the Internet have brought an abundance of new security objectives such as anonymity, authenticity, non-repudiation, authorized wiretapping (called law enforcement), or traceability. These developments have turned cryptography into an indispensable tool to protect the information in computing systems and it is utilized nowadays by billions of people on a daily basis to safeguard their data at rest and in transit. \n\n The goal of this module is to make students familiar with the basic paradigms and principles of modern cryptography. In particular, students will be confronted with a range of security objectives, different levels of security that can be achieved, and some of the available cryptographic techniques that can be used to achieve these goals.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Model security precisely and formally in terms of adversarial objective and system access. \n\t Explain and reason about basic cryptographic tools to protect and authenticate data. \n\t Suggest security parameters that protect against standard attacks. \n\t Read scientific articles and international standards in the field of cryptography. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Classical ciphers: \n\n  Cryptanalysis of classical ciphers. \n\t Probability theory. \n\t Perfect security; Block ciphers. \n\t DES. \n\t AES. \n\t Block cipher modes of operation. \n  Private-key encryption: \n\n  Chosen plaintext attacks. \n\t Randomised encryption. \n\t Pseudorandomness. \n\t Chosen ciphertext attacks. \n  Message authentication codes: \n\n  Private-key authentication. \n\t CBC-MAC. \n\t Pseudorandom functions. \n\t CCA-secure private-key encryption. \n  Hash functions: \n\n  Integrity. \n\t Pre-image resistance. \n\t Collision-resistance. \n\t SHA-256. \n\t NMAC\/HMAC. \n  Key distribution: \n\n  Key distribution centres. \n\t Modular arithmetic and group theory. \n\t Diffie-Hellman key exchange. \n  Public-key distribution: \n\n  EIGamal encryption. \n\t Cramer-Shoup encryption. \n\t Discrete logarithm problem. \n  Digital signatures: \n\n  RSA signatures. \n\t RSA-FDH and RSA-PSS signatures. \n\t DSA signatures. \n\t X.509 certificates. \n\t Certification paths. \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 7) as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have successfully completed a module in mathematics or probability theory at FHEQ level 6 or higher. \n\n The module is theoretically and mathematically demanding.   "],"22":["CS362 - Work Based Learning 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, to record experience gained in the workplace and to develop their broader professional skills. This is achieved by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet appropriate professional competencies. Participants will undertake the following. weekly journalling, providing the opportunity to capture their weekly work activities at a high level.  self-assessment, where they will review their performance with respect to a defined set of competencies.  produce personal development plans that contain objectives to progress competencies identified as requiring development.  create evidence, in the form of short written task summaries, that they meet a set of competencies defined by a recognised professional body and clearly link evidence with competencies.  On completion of this class, participants should be able to: demonstrate reflective work practices.  demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.  identify areas and strategies for self-improvement within a professional context. ","CS322 - DTSP Work Based Learning 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Participants will undertake the following.&nbsp; Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Produce personal development plans.&nbsp;  Maintain a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp; Produce evidence that they meet a set of competencies defined by a recognised professional body.  After completing this class participants will be able to:&nbsp; Demonstrate reflective work practices.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate their understanding and application of digital and technology solutions concepts within their work-place.&nbsp; ","CS256 - Integrated Project 2 This class enables participants to demonstrate the application of aspects of their degree course within an industrial context, and to develop their professional skills by undertaking personal development planning and building an e-portfolio of work-related evidence to show that they meet various professional competencies. Apprentices will undertake the following.&nbsp; A work-based project (or series of mini-projects and tasks), identified through discussion with their line manager and the University.&nbsp;  Work-based learning which includes:&nbsp;  Self-assessment (they will be asked to evaluate their skills with respect to a defined set of competencies).&nbsp;  Producing personal development plans.&nbsp;  Maintaining a weekly journal where they briefly record tasks carried out at work, work-related events or courses that they have attended.&nbsp;  Producing evidence that they meet a set of competencies defined by a recognised professional body.    After completing this class participants will be able to:&nbsp; Display an understanding and application of good software development practices within their work place.&nbsp;  Demonstrate an understanding of how to manage a project (or series of projects) to completion, including management of risk.&nbsp;  Present their work effectively (e.g. through oral presentations, written reports).&nbsp;  Demonstrate reflective work practices.&nbsp;  Identify areas and strategies for self-improvement within a professional context.&nbsp;  Demonstrate (via an e-portfolio of evidence) that they satisfy defined professional competencies. "],"23":["Further Games Theory and Implementation To further develop awareness of some of the key professional issues within a games development team To equip students with the knowledge and skills to design, build and evaluate multiplayer games To develop skills in design and planning documentation for games development  \n Professional issues in the games development industry\n \n Comparing industry standard game engines \n Recommending a game engine based on a given scenario   \n \n \n The principles of effective game and level design\n \n Multiplayer game design theory \n Balancing multiplayer games for cooperation and competition \n Potential issues and design of networked games \n Multiplayer level design concepts such as wayfinding, visualisation, and level flow \n The level design workflow and processes \n \n \n  \n Applied knowledge of multiplayer game development\n \n Utilising an industry standard game engine to implement a multiplayer game \n Supporting two or more players simultaneously \n Supporting different input methods, such as game controllers and a keyboard\/mouse. \n Further development of programming and game engine implementation skills   \n \n \n Design, testing and planning documentation\n \n Creating game design documents that focus on multiplayer games \n An introduction to games testing and processes \n Creating and utilising test plans \n Meeting milestones and deadlines \n \n \n  &nbsp; 1. Outline and explain more of the key professional issues in the computer games industry &nbsp; 2. Demonstrate an awareness of a variety of games platforms and related development issues  &nbsp; 3. Demonstrate proficiency in wayfinding and visualisation techniques within game environments &nbsp; 4. Provide evidence of applied knowledge in multiplayer game development &nbsp; 5. Understand the importance of games testing processes &nbsp; 6. Demonstrate proficiency in the development of design and planning documentation for games","Adv. Games Theory and Implementation To further develop understanding of key professional issues within the games industry To equip students with the knowledge and skills to design, build and evaluate single-player game levels To further develop skills and knowledge in the testing and iteration processes as part of the games development pipeline To equip students with the knowledge and skills to design and develop games for non-PC platforms. E.g. mobile, console and VR.  \n Further professional issues in the games development industry\n \n The free-to-play game business model \n The mobile game market and its nuances \n Different funding options for game studios \n Marketing techniques for traditional and mobile games   \n \n \n Further single player game design theory and development\n \n Mobile game design and its differences \n General mobile games design theory \n Free-to-play mobile game design techniques \n Identifying and selecting appropriate control methods for mobile games \n Developing games suitable for mobile devices in an industry standard game engine \n Further development of programming and game engine implementation skills \n Optimisations required for games running on mobile devices \n \n \n  \n Audio production for interactive digital environments\n \n Implementing audio in an industry standard game engine \n Optimising audio for mobile devices \n Acquiring and licensing audio for games. \n \n \n  \n Design and planning documentation\n \n Understanding pitch documents and their uses \n Creating a pitch document for a mobile single player game \n Pitching mobile game designs ideas to others for feedback \n \n \n  &nbsp; 1. Develop an understanding of, and critically evaluate, the key professional issues in the computer games industry &nbsp; 2. Critically review the key skills required to produce, source and implement audio for games &nbsp; 3. Provide evidence of applied knowledge in single-player game development &nbsp; 4. Analyse and evaluate a game utilising recognised games industry techniques &nbsp; 5. Demonstrate proficiency in the development of design and planning documentation for games","Introduction to Games Theory and Implementation  \n To introduce&nbsp;students to game design concepts and theories that&nbsp;enable them to design effective computer games \n To provide students with knolwedge of&nbsp;the tools and practical skills needed to implement and develop&nbsp;computer games in a game engine \n To equip students with the knowledge and skills to design and build interactive environments for computer games \n To give students an understanding of the various professional issues and conventions required as part of a games development team \n To enable students to develop research and communication skills \n To ensure the students understand the process of developing their skills both inside and outside formal workshops, and tackle formative work as well as assignments&nbsp;to develop a game portfolio piece. \n  1. Introduction to the games development industry  \n \n How games are funded, developed, distributed and sold to consumers \n How game studios and game development teams are structured&nbsp; \n Job roles that are available and found in the games industry \n Different game platforms and how they impact game design choices \n \n 2. Introduction to the principles of effective game design and documentation. \n \n Components and design choices that make up a computer game \n An introduction&nbsp;to common&nbsp;game design theories and techniques \n Balancing difficulty and progression in games \n The importance of the user experience and methods used to improve the players' experience \n Developing and maintaining industry standard documentation. E.g. Game design documents, level design documents, etc. \n \n 3. Introduction to digital interactive storytelling and world design \n \n Level design theory for single player games \n Designing and authoring digital environments and worlds \n Storytelling techniques that can be applied to interactive products \n \n 4. Introduction to game engines and development environments \n \n Developing a game using a&nbsp;modern game development engine \n Creating&nbsp;a game using a modern game programming language. \n How to structure a game development project \n Combining&nbsp;assets from multiple&nbsp;development environments into a single project \n \n 5. Evaluating and utilising information sources \n \n Researching topics through advanced google searches and journal databases \n How to search and utilise game engine documentation to aid game development \n Searching for solutions to problems and&nbsp;adapting information to meet the needs of a&nbsp;project \n   \n Examine game mechanics and principles applied to effective computer game&nbsp;design and development \n Demonstrate an understanding of the skills required to develop interactive environments and storytelling components \n Explain&nbsp;the differences&nbsp;of varying games development platforms and their impact on game design choices \n Demonstrate a range of practical skills using&nbsp;a modern game engine to develop a computer game \n Outline and explain the key professional issues in the computer games industry \n Describe the professional roles and teams involved in the games development industry \n "],"24":["MA4005 - Logic and Mathematical Techniques (2023\/24)  \nThis module develops a range of mathematical techniques including set theory, logic, relations and functions, algebra, differentiation and integration.&nbsp; The techniques provide the foundation for further study of Mathematics, Computer Science and Computer Games Programming and Computer Systems Engineering.   \n\u2022 Set Theory: Definitions, Representation, Operations, Laws, Simplification, Cartesian Product and Power Set. (LO1) \n \n\u2022 Propositional Logic: representation of simple verbal arguments; truth-tables; logical equivalence, validity and consequence, logic circuits. Predicate logic. (LO2) \n \n\u2022 Relations &amp; Functions: Relations: representations of relations (matrix and digraph); equivalence relations; partitions; partial orderings. Functions: ways of defining functions; composition; inverse functions. (LO3) \n \n\u2022 Algebra: Basic numbers, indices, brackets; Manipulation of algebraic expressions; Linear and quadratic equations. \n \n\u2022 Functions. Graphs; Exponential function and natural logarithm; Trigonometric functions. Differentiation of basic Polynomial, exponential, Logarithms and Trigonometrical functions; Stationary points. Indefinite and definite integrals; Area under a curve. Application to kinematics. (LO4) \n \n\u2022 Matrices Representation of the co-ordinate plane. Use of matrices to represent the vertices of a plane figure. Simple transformations. Vector Algebra. Matrix Algebra. Application to computer graphics. (LO5)   \nAfter successful completion of this module students should be able to: \n \nLO1 Understand the meaning of mathematical definition of relations and to determine&nbsp;which relations are equivalence relations. \n \nLO2 Understand the meaning of mathematical definitions of sets\/propositions and perform set\/logic operations. \n \nLO3 Demonstrate skill in formulating, manipulating and solving algebraic equations. \n \nLO4 Use functions appropriately and identify their graphical equivalents. \n \nLO5 Demonstrate skill in, and application of, the techniques of vector algebra,&nbsp;Differentiation and integration. ","Logic (COMP0009)   Aims:  \n\n The module aims to introduce and familiarise students with logical and mathematical inference. Students learn a number of logical inference methods for classical logics and for non-classical logics. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how axiomatic systems can be used for propositional and predicate logic. \n\t Understand the notions of soundness and completeness. \n\t Understand how propositional and predicate tableaus work. \n\t Have familiarity with other logics, including modal and temporal logics. \n\t Analyse algebras of relations. \n   Indicative content:&nbsp;  \n\n The following are indicative of the topics the module will typically cover:&nbsp; \n\n Propositional logic, Predicate logic, Modal Logic and Temporal Logic: \n\n  Review of syntax and semantics. \n\t Deduction and Inference. \n\t Truth tables. \n\t Decidability of propositional logic. \n  Mathematical proofs: \n\n  Proof by contradiction. \n\t Induction and structured induction. \n\t Hilbert systems. \n\t Axioms and inference rules for propositional logic. \n\t Axioms and inference rules for predicate logic. \n\t Axioms and inference rules for modal and temporal logics. \n\t Tableau construction for propositional logic, predicate logic, modal logics. \n\t Soundness and completeness theorems for first order logic. \n\t Semi-decidability of first order logic. \n\t Undecidability of arithmetic. \n  Algebras of Relations: \n\n  Algebras of binary relations \n\t Kleene Algebra \n\t Relation Algebra \n\t Other Algebras of Relations. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: \u200b(1) be registered on a programme and year of study for which it is a formally available; (2) have taken Theory of Computation (COMP0003) and Algorithms (COMP0005); and (3) have some programming experience (as the assessment will require them to implement a program in C).   ","CS208 - Logic &amp; Algorithms To equip students with the tools to model and measure computation. To build on CS103 Machines, Languages and Computation and develop further understanding of the mathematical foundations of computation. To foster an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types. First Semester: Propositional Logic revisited: natural deduction systems; translation between real and formal domains; inference, proofs, axioms; equivalence of systems  Formal Systems and Interpreted Formal Systems: language, inference and interpretation, syntax and semantics, satisfaction, soundness, completeness  Predicate Logic: predicates, universal and existential quantification; generalisation, specialisation by symbolic substitution; awareness of free variables, bound variables, and alpha-equivalence  Relations: relations as predicates, relations as graphs; equivalence relations, preorders, partial orders; functions and partial functions as special cases of relations; simple logic (Prolog) programming as proof search  Models of Computation: simple abstract machines, Turing machines, expression evaluation, lambda-calculus reduction, imperative execution, correspondence between models of equivalent strength, the Church-Turing thesis Second Semester: Algorithms: algorithms and processes; iteration and recursion, studied comparatively; preconditions, postconditions, and invariants; specification as relation between inputs and outputs  Introduction to Algorithmic Complexity: basic algorithmic classification, with examples; the order notation (Big-oh); elementary complexity and estimation of run times; the tyranny of growth  Searching and Sorting: the complexity of a range of techniques, including the divide and conquer approach; the relative complexity of searching and sorting algorithms; the sorting algorithms covered will include bubble sort, insertion sort, merge sort and quick sort; searching, including sequential search and the binary chop; hashing  Binary Trees revisited: implementations by array and by nodes with pointers; expression trees; binary tree implementation of sorted list; algorithms covered include traversal, searching, balancing and deletion; awareness of ordering and balancing invariants and their implications for correctness and complexity  Graphs revisited: directed and undirected graphs; representations of graphs; basic graph algorithms; topological sorting; applications of graphs to real world problems (for example telecommunications, transportation systems, dependencies between objects)  Complexity Implications of ADT Implementation: e.g. for priority queues, graphs; access times  Fundamental Techniques: divide and conquer, greedy algorithms, dynamic programming, backtracking search  Additional Problems, Algorithms and Techniques: as selected by class lecturers  Practical Work: Further exploration of algorithms and abstract data types, empirical evaluation of performance, one or two larger scale exercises.  On completion of the class, a student should be able: to understand a mathematical basis for a simple natural deduction system and perform rigorous proof construction given a well-defined framework  to work confidently with propositional logic in a natural deduction setting and develop an understanding of predicate logic  to understand the concept of an interpreted formal system, along with the concepts of soundness and completeness in this context  to have a good understanding of the Church-Turing thesis and the general concept of computation, making correlations between different models of computation, e.g., lambda calculus, Turing machines, Hoare\u2019s IMP  to appreciate the concepts of logical invariant, precondition and postcondition, with respect to data structures and algorithms  to study a number of fundamental algorithms, including in particular the fundamental algorithms of searching and sorting, identifying the invariants on which they rely  to make a critical assessment of different implementations of algorithms and abstract data types  to carry out a number of empirical studies of the performance of algorithms and abstract data types  to appreciate a number of fundamental computational problems, and be aware of real world instances of those problems "],"25":["CS259 - Quantitative Methods in Computer Science The class will teach the quantitative and numerical methods needed through practical examples. Teaching these methods through practical examples will both show the relevance of the methods being taught and strengthen the programming skills of the students in this important area.To teach the quantitative and numerical methods that underpin modern Computer Science, such as (but not restricted to) Artificial Intelligence and Data Analytics. The class will also provide students with the numerical methods needed to perform quantitative evaluations of algorithms and software.L Obj 1 : to understand and use linear algebra techniques as used in modern AI and data analytics: scalars, vectors, matrices, tensorsL Obj 2 : to understand multivariate calculus techniques as used in modern AI and data analytics: derivatives, gradients, integrals, convex optimisationL Obj 3 : to understand and apply probability theory as used in modern AI and data analytics: randomness, probability distributions, variance and expectation, expected valueL Obj 4 : understand and apply statistical techniques as used modern AI, data analytics and quantitative evaluation of software and algorithms: basic data analysis, significance tests, basic Bayesian statistics 1. Linear algebra notation is used in Machine Learning to describe the parameters and structure of different machine learning algorithms. This makes linear algebra a necessity to understand how neural networks are put together and how they are operating. This part of the course will cover: Scalars, Vectors, Matrices, Tensors  Matrix Norms  Special Matrices and Vectors  Eigenvalues and Eigenvectors 2. Multivariate calculus is used to supplement the learning part of machine learning. It is what is used to learn from examples, update the parameters of different models and improve the performance. This part of the course will cover: Derivatives  Integrals  Gradients  Differential Operators  Convex Optimization 3. Probability: probability used to make assumptions about the underlying data when we are designing these deep learning or AI algorithms. It is important for us to understand the key probability distributions, and we will cover it in depth in this course. This part of the course will cover: Elements of Probability  Random Variables  Distributions  Variance and Expectation  Special Random Variables 4. Statistics: statistical methods are used in AI to analyse data and quantify the performance of agents.&nbsp; &nbsp; Statistical concepts: mean, standard deviation, variance, confidence intervals.&nbsp; &nbsp; Statistical methods for data analytics&nbsp; &nbsp; Use of statistics in performance measurement&nbsp; &nbsp; Introduction to Bayesian methods L Out 1 : ability to apply basic data analysis to a range of problems in Computer Science and Software Engineering.L Out 2:L Out 3:L Out 4:","Undergraduate Course: Calculus and its Applications (MATH08058) Calculus is one of the most fundamental tools in mathematics and its applications. This course presents an introduction to the two main branches of calculus: differential calculus and integral calculus. At the heart of both lies the notion of the limit of a function, sequence, or series. In addition to promoting a conceptual appreciation of these foundations of calculus, the course will develop calculational facility, both of which are essential for further mathematical study. \n \nA suggested syllabus for the course is as follows. Functions. Limits and continuity. Differentiation: techniques and applications. Inverse functions. Integration: techniques and applications. Fundamental theorem of calculus. Sequences and series. Taylor and Maclaurin series. Differential equations, moments, and exponential growth. It is probably fair to say that calculus represents one of the biggest achievements in the history of human thought. It took mankind almost two millennia to go from Archimedes first attempts to estimate areas to the birth of the subject as we know it today with the work of Newton and Leibniz in the 1600s and even after that it took another two centuries before the foundations of the subject were firmly laid. \nIn that sense, calculus marks the birth of modern mathematics: its influence on scientific and technological developments over the centuries since its inception cannot be overstated. This course provides a comprehensive introduction to calculus; the focus will be firmly on the two traditional branches: differential calculus and integral calculus. Roughly speaking, the former is concerned with rates of change (\"derivatives\"), while the latter studies accumulated quantities (\"integrals\"). The connection between the two is established by the fundamental theorem of calculus which lies at the heart of the subject, and which in turn relies on the notion of the limit of a function.  \nThe course will explore some of the implications of these and related notions, and will cover a variety of techniques and applications of both differentiation and integration; examples include the mean value theorem, curve sketching, and (unconstrained or constrained) optimisation, as well as areas and volumes, arc length, and improper integrals. The convergence of infinite sequences and series will be another focus in the course. Further applications may include (elementary) differential equations from physics, ecology, and engineering, moments from probability theory, and growth models from economics \nDepending on the mode of delivery, lectures or screencasts on assigned reading will be augmented through (formal and informal) collaborative discussion, thus implementing a \"flipped classroom\" setting. Real-time workshops will involve group-based activities to cement concepts, and expand on applications introduced in lectures or screencasts. Opportunities for practice will be provided through worksheets, online quizzes, and biweekly written homework.   On completion of this course, the student will be able to:\n     \n         Demonstrate an understanding of limits and continuous functions by evaluating and manipulating them.  Exhibit fluency in differentiation by identifying and applying standard techniques for evaluating derivatives.  Exhibit fluency in integration by identifying and applying standard techniques for evaluating integrals.  Apply calculus to a variety of mathematical applications that include curve sketching,optimisation problems and the calculation of rates of change, areas, and volumes.  Demonstrate a basic understanding of infinite sequences and series by describing their convergence properties. \n     ","Mathematics for Data Science This module aims to study the following mathematical topics which are fundamental to the application of mathematics in an engineering context. Basic algebraic manipulation, basic concepts of vectors and matrices, functions, complex numbers with applications, calculus with applications, numerical methods and an introduction to Python.  Algebra: Partial fractions, Inequalities, Binomial expansion, Vector algebra-vectors and scalars, Cartesian components, scalar and vector products and their applications. Trigonometry: Angles, radian measure, trigonometric identities, solutions of trigonometric equations, trigonometric functions, engineering waves, angular frequency, amplitude, period and frequency, adding waves of the same frequency, phase angle, phase-shift of a wave, Asin ( x+a ) form and the oscilloscope trace. Complex Numbers: Rectangle form, addition, subtraction, multiplication, division of complex numbers, graphical representation (the Argand diagram), polar form (multiplication and division), De Moivre's theorem, roots, exponential forms, phasors. Matrices &amp; Determinants: Basic operations of matrices, determinants, inverse of a matrix, solving simultaneous linear equations using Cramer's rule and inverse technique. Co-ordinate Geometry: Equations of straight lines and circles, equations of tangents and normal, determination of points of intersection, polar form. Differentiation: Derivatives of standard functions Product, quotient and chain rules equations of tangents and normal to a curve maximum, minimum and points of inflection curve sketching using the second derivative optimisation problems. Partial differentiation of 2 variables functions, Del operator. implicit functions and logarithmic differentiation, Tangent and normal, velocity, acceleration, turning points, maxima and minima. Integrations: Standard integrals involving algebraic, trigonometric, exponential and logarithmic functions integration by substitution, integration using partial fractions, integration by parts, definite integrals, the link with integration as area, integration as the limit of a sum.      On successful completion of the module the student should be able to:-  1. understand, manipulate and apply algebraic functions to data problems  2. describe and manipulate complex numbers in Cartesian and polar forms, phasors  3. describe and manipulate matrices, determinant of matrices, inverse of matrices  4. understand and apply differential calculus change and use it to solve selected optimisation problems  5. describe and use integral calculus analytically and numerically and apply it to physical expressions    "],"26":["Computer Graphics  \n \nTo show the mathematical basis of 3D computer graphics through modelling and transformation of 3D objects, viewing 3D objects in different ways, and projecting 3D objects onto the 2D computer screen.To provide practical means for learning and understanding the 3D computer graphics pipeline, methods and programming skills for modelling, transforming, viewing and projecting 3D objects, and adding realism to them.\n \n   \n \n You will learn the principles of 3D computer graphics, focusing on modelling and viewing objects\/scene in a three-dimensional (3D) world on the computer, rendering the objects\/scene to give it realism, and projecting objects\/scene onto 2D display in analogy to your taking a photo of a 3D world using a camera. Through weekly lectures and laboratory sessions, you will explore various computer graphics techniques and develop your OpenGL programming skills required for 3D computer graphics. The module demonstrates the benefits of linking theory and practice. \n \n    Knowledge and Understanding&nbsp;   Knowledge and understanding of the principles and techniques and the ability of implementing 3D computer graphics applications, increasing the employability of the students, especially in the creative industry.   Intellectual Skills   The ability to write OpenGL programs to create realistic 3D graphical objects on the computer.   Transferable Skills   Computational techniques and programming skills and the ability to apply these in variety of application domains.&nbsp; ","Acquisition and Processing of 3D Geometry (COMP0119)   Aims:  \n\n The module aims to expose students to the challenges and potential of geometry processing in relevant application areas. To explain how to use acquire 3D model, and subsequently process, analyse, and manipulate the data. To familiarize students with handling real data sets and apply machine learning algorithms in the context of 3D geometric data.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Read and understand recent advancements in this area (theory). \n\t Obtain a grasp of the key tools in geometry processing (theory) and understand current machine learning approaches in the context of geometry processing. \n\t Gain necessary coding and practical skills to work directly with real-world 3D data (practice). \n\t Learn to formulate and solve problem using the geometric tools they learn as part of the module (practice). \n   Indicative content:  \n\n The module introduces basics of geometry processing covering important aspects of acquisition, analysis, and manipulation of 3D data. The module will consist of a mix of theory and applications to real-world scenarios. \n\n The module intends to introduce students to the various stages of a typical geometry processing pipeline. With the recent growth in popularity of 3D acquisition devices (e.g., depth cameras) and modeling frameworks, geometry processing now plays a central role in a diverse set of applications including city planning, architectural geometry, reverse engineering, interactive modeling, etc. \n\n Topics will include but not restricted to mesh representations, mesh smoothing, remeshing, mesh reconstruction, and shape analysis. Necessary topics in differential geometry will be covered in the module. \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction: \n\n  Applications. \n\t Surface representations. \n  Geometry Registration: \n\n  Local and global registration (ICP, branch-and-bound). \n\t Geometry Acquisition. \n\t 3D acquisition using laser scanners. \n\t Structure from motion-based acquisition. \n  Differential Geometry: \n\n  Introduction to curves and surface. \n\t Mesh Smoothing and Decimation. \n\t Parametrization and Remeshing. \n\t Mesh Deformation. \n\t Laplace Beltrami Operator. \n\t Shape Analysis. \n\t Shape Synthesis. \n\t ML in the context of geometry processing. \n   Requisites:  \n\n To be eligible to select this module as an option or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; (2) should have an understanding of linear algebra; and (3) have coding experience.   ","Computer Graphics (COMP0027)   Aims:  \n\n Understanding the theoretical concepts behind computer that generate pictures from virtual worlds and teaching practical skills to implement them.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Perform operations to 3d primitives using linear algebra. \n\t Write a simple ray-tracer to intersect primitives with rays through pixels. \n\t Understand how all steps of rasterization work and being able to code that from scratch. \n\t Understand the concept of Monte Carlo simulation and how it relates to image synthesis. \n\t Implement Monte Carlo simulations. \n\t Use scene graphs, including light, material and textures to describe virtual 3D worlds. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Introduction: \n\n  The painter\u2019s method. \n  Creating an image using ray tracing: \n\n  Ray casting using a simple camera. \n\t Local illumination. \n\t Global illumination with recursive ray tracing. \n  Specifying a general camera: \n\n  World \/ image coordinates. \n\t Creation of an arbitrary camera. \n\t Ray tracing with an arbitrary camera. \n  Constructing a scene: \n\n  Scene hierarchy. \n\t Transformations of objects \/ rays. \n\t Other modelling techniques. \n  Acceleration Techniques: \n\n  Bounding volumes. \n\t Space subdivision. \n  From ray tracing to projecting polygons: \n\n  Graphics pipeline. \n\t Transforming the polygons to image space. \n\t Sutherland-Hodgman clipping. \n\t Scan conversion. \n\t Z-buffering. \n\t Interpolated shading. \n\t Texture mapping. \n\t Back-face culling. \n  Shadows: \n\n  Shadow volumes. \n\t Shadow buffer. \n\t Shadow mapping. \n\t Soft shadows. \n  The nature of light: \n\n  Transport theory, Radiance, luminance, radiosity. \n\t The radiance equation. \n\t Photon mapping. \n\t Monte Carlo integration. \n  Parametric curves and surfaces: \n\n  Bezier Curves. \n\t B-Splines Curves. \n\t Parametric surfaces. \n   Requisites:  \n\n To be eligible to select the module delivery Undergraduate (FHEQ Level 6) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming. \n\n To be eligible to select the module delivery Postgraduate (FHEQ Level 7) as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have understanding of linear algebra and basic programming.   "],"27":["Enhanced MSc Dissertation in Cyber Physical Systems  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern cyber physical systems. To prepare students for future academic or industrial research-oriented careers in cyber physical systems. To develop students' research, planning, organisation, presentation and scientific writing skills. To train students in original research and to develop their innovative and creative skills.\n \n   \n \n Building on research carried out in then Enhanced MSc Research Project module, under the supervision of their project supervisors, students will further study the topic areas of their Enhanced MSc Research Project module, to gain a deeper understanding of the background, the theoretical underpinnings, the state of the art development, and the applications of the their research topic in that project module, with the objective of developing new theoretical insights, novel methods, innovative solutions, and better applications.&nbsp;  The results from further study and are to be distilled into a final MSc dissertation (which may incorporate main results of the Enhanced MSc Research Project module as appropriate). The major results of the dissertation will be condensed into a suitably formatted research paper, authored by the student. The dissertation and the paper form the assessed output of the module. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Creativity and innovative. Original thinking.&nbsp; &nbsp;","Enhanced MSc Research Project in Computer Science (Artificial Intelligence)  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science (artificial inteliigence). To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of artificial intelligence (e.g., automatic scheduling and optimization, intelligent modelling and analysis, intelligent human computer interaction, agents, machine learning, computer vision, data mining and related areas). The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding : Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking.","Enhanced MSc Research Project in Computer Science  \n \nTo allow students to carry out a significant piece of independent research work in a specific area at the cutting edge of modern computer science. To prepare students for future academic or industrial research-oriented careers in computer science. To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a substantial research project on a contemporary topic of computer science. The topic should fall within the supervisor's research interests and the supervisor must have the necessary expertise and experience in the topic areas. The project may be proposed by either the supervisor or the student, and may be theoretical, empirical, or otherwise depending on what is appropriate to the chosen area and topic. Projects, however, must ultimately be agreed with the supervisor concerned. The results from the project are to be distilled into a conference-format research paper, authored by the student and constituting the main assessed output. There may, however, be further deliverables as dictated by the nature of the project. Any such deliverables are to be submitted as supplementary material. A revised version of the paper, possibly co-authored with the supervisors, may subsequently be submitted for publication to an external venue, such as a conference or journal, if the work is judged to be of sufficiently high standard (this revised version is not part of the assessment for the module). In addition, students also submit a project plan and deliver a presentation as assessment components. \n \n   Knowledge and Understanding:  Research projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills:  Individual projects may arise from any area of the curriculum and so may address any of the professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature. Devising and carrying out a complex project to meet specific objectives. Time management. Communicating complex ideas and information in writing and orally. Confidence in public speaking."],"28":["Probability and Statistics This module aims to provide students with a solid foundation in Probability and Statistics which are used  extensively in Data Science. Students will be introduced to an appropriate statistical software package such as R.  This module will provide students with the understanding of probability theory and how to apply statistics to real  world examples. It will cover a range of topics and methods such as probability distributions, Bayes theorem,  hypothesis testing and statistical inference, linear and multivariate regression analysis. Students will be able to  apply statistical methodologies and techniques to solve Data Science problems.  Probability  - Axioms basic laws of probability, Bayes theorem.  Probability Distributions  - properties discrete and continuous distributions central limit theorem.  Exploratory Data Analysis  - numerical and graphical summaries - measures of location, robust statistics, expectation confidence intervals.  Hypothesis testing  - Experimental design, null and alternative hypothesis, type I and II errors p-values anova, t-tests, A\/B testing.  Regression and correlation  - Correlation, linear regression, multivariate regression  Software implementation  - Statistical software packages      On successful completion of the module the student should be able to:-  1. Understand basic probability theory and its application  2. Understand joint and conditional distributions  3. Apply exploratory data analysis techniques  4. Understand hypothesis testing and statistical inference  5. Utilise linear and multivariate regression on datasets    ","Statistical Models and Methods  \n \nThe purpose of this course is to introduce a wide range of statistical concepts and methods fundamental to applications of statistics in data science. It will also introduce the key concepts and theory of linear models, illustrating their application via practical examples drawn from real-life situations. Apprentices will acquire knowledge and skills of relevance to a professional statistician.\n \n   \n \n This teaching block provides an introduction to statistical concepts and methods to provide an appreciation of the scope of the subject and to demonstrate the central role of parametric statistical models. The key concepts of inference including estimation and hypothesis testing will be described, as well as confidence intervals and likelihood ratio tests. The second part of this block introduces a wide class of techniques such as regression, analysis of variance, analysis of covariance and experimental design which are used in a variety of data science applications. &nbsp;Practical experience will be obtained by the use of a statistical computer package. &nbsp; \n \n  Apply methods concerning estimation of parameters in standard statistical models; in particular the method of moments and the maximum likelihood method. &nbsp;Apply methods for interval estimation; in particular, exact and approximate confidence intervals based on asymptotic theory. &nbsp;Perform statistical hypotheses tests using data from studies (such as t and F-tests, comparison of models and parameter values). &nbsp;Apply methods for analysing categorical data and methods without having to make distributional assumptions (non-parametric statistics). &nbsp;Fit a linear model to data, both manually and using statistical software. &nbsp;Check model fit, diagnose errors, and perform model selection amongst the class of linear models. &nbsp; KSBs K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.&nbsp; K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp; 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp; 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp; 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.&nbsp; S1.&nbsp;Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; &nbsp; B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp; B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner","Probability Models and Time Series  \n \nThe purpose of this module is to provide a thorough grounding in a broad range of techniques required in the analysis of probabilistic and statistical models, and to provide an introduction to stochastic processes by studying techniques and concepts common in the analysis of discrete time Markov Chains. It will also deepen and broaden the students\u2019 knowledge and experience of statistics by studying the theory and methods used in time series and forecasting.\n \n   \n \n In this teaching block the ideas of probability introduced in the first year are extended to continuous random variables. It will provide an introduction to stochastic processes, (i.e. random processes that evolve with time) and time series analysis (i.e. series of observations evolving in time and observed at discrete points in time). There will be a particular focus on discrete-time Markov chains and forecasting methods which are fundamental to the wider study of techniques required in the analysis of probabilistic and statistical models.&nbsp; &nbsp; \n \n  Demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science. &nbsp;Identify and formulate problems in terms of probability and solve them to build up a simple stochastic model. &nbsp;Understand and apply basic properties of discrete-time Markov chains. &nbsp;Carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 9.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 10.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 11.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;"],"29":["Visualisation Techniques  \n \nUnderstand how human perception and cognition influences the design of visual representation of data.Visually represent data with the aim to summarise, understand, extract hidden patternsGain practical skills using commercially available software to create dashboards and apply visualisation techniques to real world data science problems.This module will highlight how visualisation plays a key role in data driven decision making.\n \n   \n \n Data Visualisation is the process of extracting knowledge from complex data, and presenting it to a user in a manner that this appropriate to their needs to make it easier to pull insights from. This module provides an understanding of data visualisation concepts, terminology, methods, and its importance in data processing. You will learn about using a range of visual elements and software to see and understand trends outliers and patterns in data. &nbsp;You will also learn a productive way to convey stories form your data highlighting useful information.  This module enhances human perception and cognition to make sense of data in a way to effectively communicate conclusions drawn for the data to a wider audience. You will also learn about the challenges associated with visualising large or ambiguous or time-based datasets. You will also learn about psychological theories that help explain how humans process information and consider their relevance to the design of effective visualisations. Using example images, we will critique them, building up knowledge about what works, and what doesn't.  We will also explore visualisation techniques linked to textual analysis.  Learners will be encouraged to use visualisation tools used within their organisation to present findings in their role. \n \n  Understand the key concepts of data visualisation. &nbsp;Can use appropriate visualisation tools and techniques to present data of different types appropriately to different audiences.Effectively communicate and ideas relating to the software process and data science solutions. &nbsp; KSBs     K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp;          Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp;            Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp;            Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp;          K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp;          Statistical and mathematical models and methods.&nbsp;&nbsp;            Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp;            Applications such as computer vision and Natural Language Processing.&nbsp;            An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp;            Development standards, including programming practice, testing, source control.&nbsp;          K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp;          Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp;            Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp;            Common patterns in real-world data.&nbsp;          S1.&nbsp;Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp;        S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp;        S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp;        S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp;        S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp;        S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.    &nbsp;    B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp;      B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;  ","Data Visualisation This course aims to equip students with knowledge and skills required for successful data visualisation. The goal of data visualisation is to expose the underlying structure of a dataset using visual representations which are targeted towards the human visual perceptual system. Students will gain experience in the theory, design, implementation and evaluation of data visualisation systems. Appropriate software tools will be utilised throughout the module to create effective visual representations to translate complex data into clear information, allowing the target audience to extract value from it. Students will learn how to use advanced visualisation techniques such as data storytelling and interactive visualisations to communicate information clearly. By the end of this module, students will be capable of analysing the appropriateness of a given visualisation in relation to a problem, select and implement appropriate data visualisation systems for a given dataset and evaluate the effectiveness of this system.  -Fundamentals of data visualisation: data, information, visual representation, perception   -Understanding differences between data visualisation, infographics, scientific visualisation and information visualisation  -Types of data visualisations: graphs, statistical\/temporal\/multivariate data visualisation, hierarchies and networks  -Effective data visualisation: good\/bad data visualisation design, evaluation of visualisation techniques   -Storytelling using data visualisations  -Interactive and immersive visualisation techniques  -Industry standard tools and technologies      On successful completion of this module a student should be able to:  1. Discuss the main methods and tools for data visualization, including the underlying fundamental concepts 2. Differentiate between different types of data and identify appropriate visualisation solution based on the data and task 3. Implement an appropriate data visualisation solution, justify its design in relation to a specific problem and evaluate its effectiveness 4. Develop advanced data visualisations such as data stories or interactive visualisations     ","Data Integration and Visualisation   Summary module description:   \n  This module focuses on key aspects of data integration and data visualisation, covering concepts, principles, techniques and tools for the effective analysis of data. Students will learn techniques for processing various types of data for information visualisation. The students will be encouraged to test their technical abilities for data integration and develop their creative skills in visualising data to support data-driven decision making.  \n     Outline content:   \n   \n Context: Importance of data visualisation and its historical account.  \n Nature of data and data sources diversity  \n Data integration methods and technologies, e.g. ETL (extraction, transformation and load)  \n Data warehousing strategy, architecture and design (star schemas, temporal dimensions, cubes, etc.)  \n Critical analysis using multidimensional datasets  \n Types of data visualisation methods (e.g., distribution correlation, ranking) and charts  \n Data visualization design techniques and effective presentation (e.g., understanding data statistics)  \n Interactive Dashboards  \n Impact of designs on the presented statistics Type of tools (e.g., Tableau)  \n Real-world application domains and requirements (e.g., financial trends, genetics, regression)  \n  \n     Assessable learning outcomes:  \n  On successful completion of the module, students will be able to:  \n \n  \n Critically choose and then apply appropriate methods to conduct data integration and data visualisation;  \n Have a sound understanding of the essential concepts and principles of data integration and data visualisation techniques;  \n Develop data-driven approaches for information discovery and processing in a domain context through data integration and data visualisation;  \n Design and implement a data integration and visualisation tool which can perform a set of functions, such as ETL, multidimensional datasets, data warehouse, and interactive dashboards;  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n  \n  "],"30":["Data Science Applications  Content and aims \n                 \n                    Module overview\n                  Data science is a rapidly emerging discipline at the intersection of computer science, statistics, and substantive application domains. From computer science comes machine learning, cloud computing, and databases; from statistics, a long tradition of exploratory data analysis, modelling, inference, hypothesis testing and visualisation; from application domains in business and science, comes the challenges to tackle, the questions to answer, and the evaluation standards to assess the relevance of the insights and results obtained.&nbsp; \n\n\n The main goal of data science is to extract knowledge and insight from data, which can then be turned into positive action. There is a multitude of data science applications in science, industry, and society. &nbsp; \n\n\n Data Science Applications starts by setting the scene and discussing what data science and big data are and why they matter. It then moves on to describe the data science process and how it is applied in a variety of contexts from scientific to commercial. This is supported by specific case studies and a set of invited talks by data science designers and practitioners from science and industry.&nbsp; \n\n\n The module does not cover computer programming or hands-on data analysis. This is left to other modules in the programme. The idea is instead to provide a high-level discussion of important principles and study the conceptual steps of the data science process, with more in-depth coverage of some relevant techniques and case studies. The module is assessed by a critical assessment and an oral presentation of a specific data science case study (from a recent selection of journal articles). \n\n\n\n                 \n                    Learning outcomes\n                 \n                  After successful completion of this module, you'll be able to:  \n                  evaluate data science projects in commerce, in science and in academia;   understand the stages of a data science project;   critically assess the stages of a data science project.    ","Software Development for Data Science This module will focus on the development of software programming skills used for data science using an appropriate programming language such as Python or R. Implementation methods for the foundation topics in data science such as data capture, wrangling, analysis, processing, visualisation and reproducible reports will be covered. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.  Data Science Ecosystem Introduction to the software development libraries available for data science vectors, matrices and data representations. Fundamentals of Data Science Software Development Sequence, selection and iteration in a suitable programming language for data science. Data Preparation Data collection, pre-processing, cleaning, wrangling, transformation and integration. Exploratory Data Analysis Basic statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance. Hypothesis testing Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value, Bayes factor, test for the mean, comparing two means (dependent and independent samples). Linear Regression Simple linear regression, multiple regression, forecasting, classification and clustering. Data Visualisation Visualisation of large and small data sets using open source software libraries.      On successful completion of the module, students should be able to:  1. Demonstrate a detailed understanding of the available tools within the data science software ecosystem. 2. Demonstrate a detailed understanding of software development processes for data science. 3. Analyse and evaluate data analysis modelling methods. 4. Develop software applications to conduct data analysis and visualisation. 5. Critically interpret and evaluate the outputs generated by analysis techniques.    ","Introduction to Data Science This module will introduce the development of software programming skills used for data science using an appropriate programming language. The module will give the student the opportunity to explore software development methods for the key aspects of data science such as data capture, wrangling, analysis,  processing and data visualisation. The student will gain an understanding of the various data science software ecosystems in order to apply statistical data analysis techniques (descriptive and inferential), machine learning and information visualisation techniques. This will be introduced via practical examples using both data simulation and real-world datasets to allow the student to make decisions that are supported by data.  The percentage of Work Based Learning for this module, as represented by the proportion of the Activity Types which take place off campus, is 80%. The percentage of Work Based Assessment for this module is 10%.  Data Science basics - Matrix and Vector Representations Python Data Science Software Ecosystem: Numpy - SciPy - SciKitLearn - Matplotlib - Pandas  Exploratory Data Analysis Basic Statistics: Population vs Sample, mean, median, mode, standard deviation, skewness, variance, correlation, covariance. Hypothesis testing, Statistical distributions, standard error and confidence interval, type 1 and 2 errors, p-value Data Manipulation: Software implementation using Pandas Data Visualization: Software implementation using Matplotlib Data Science Applications - Statistical Models - Analysis Techniques - Line Fitting - Prediction - Applying Algorithms - Forecasting Introduction to Machine Learning - Classification and Regression       On successful completion of this module students should be able to:  1. Demonstrate familiarity with the problems and issues surrounding real world data sources 2. Apply filtering, cleaning and transformation techniques to data 3. Understand how probability theory and statistical methods are applied to data 4. Detail how the output of statistical models are interpreted to form an insight into data 5. Understand the basics of Machine Learning including Classification and Regression 6. Implement Data Science methods in an appropriate software programming language     "],"31":["LH Advanced Functional Programming   This module exposes students to state of the art functional programming languages and their mathematical foundations in the lambda calculus and type theory. Students can expect to develop advanced functional programming skills and awareness of experimental programming languages.","Functional Programming (H) COMPSCI4021   Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.     Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills,   applying  &nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.    The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.     By the end of the course students will be able to:    1.   Write simple programs involving elementary Haskell techniques, including pure function definitions;     2.   Define new algebraic data types and use recursion to define functions that traverse recursive types,   and use common higher-order functions such as map, fold, and filter;    3.   Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;    4.   Understand parametric polymorphism, and ad-hoc polymorphism through   typeclasses  ;    5.   Demonstrate understanding of the differences between strict and lazy evaluation, and the   tradeoffs  &nbsp;of the two approaches;    6.   Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;    7.   Understand and use common functional abstractions such as functors and applicative functors;    8.   Develop substantial functional software applications including external libraries;    9.   Use formal methods   and property-based testing  &nbsp;to reason about the correctness of functional programs;    10.   Construct, adapt, and analyse   code using standard Haskell   tools   such as Stack and   HUnit  ","Functional Programming (COMP0020)   Aims:  \n\n This module explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management. \n\n The module explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the module students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to (at a level commensurate with FHEQ level 6): \n\n  Understand the basics of the lambda calculus and combinators and how they are used in the implementation of functional languages. \n\t Understand the main features of a lazy functional language. \n\t Understand type checking, type-inference and the operation of the Miranda (Hindley-Milner) type system. \n\t Write and understand non-trivial functional programs in Miranda. \n\t Understand the computation and memory management issues affecting the sequential implementation of lazy functional languages. \n\t Solve problems relating to any aspect of the module's syllabus, under examination conditions. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Classification of programming languages:\n\t  Distinctive features of Functional Programming Languages. \n\t  \n\t The Lambda Calculus and Combinators:\n\t  Versions of the Lambda Calculus. \n\t\t Syntax and semantics. \n\t\t Reduction orders, strong normalisation. \n\t\t Combinators and computationally complete sets. \n\t  \n\t Introduction to Miranda:\n\t  Programming environment. \n\t\t Types and simple polymorphic types. \n\t\t Recursion. \n\t\t Pattern-matching. \n\t\t Lists. \n\t\t Higher-Order functions. \n\t\t User-defined types. \n\t  \n\t Type polymorphism and type systems. \n\t Recursive programming techniques. \n\t Introduction to implementation techniques:\n\t  Strict evaluation and lazy evaluation. \n\t\t The need for automatic memory management. \n\t  \n\t Automatic memory management:\n\t  Garbage collection techniques. \n\t  \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must both: (1) be registered on a programme of study for which it is formally available; and (2) have either taken all Term 1 modules of the MSc Computer Science programme at UCL or have studied the following at FHEQ level 6 or higher: \n\n  Programming in one high-level programming language and one assembly language. \n\t Formal systems of logic such as Boolean algebra, propositional logic or predicate calculus. \n\t Virtual machines, virtual memory and memory paging. \n\t Compilers, including lexical analysis, parsing and code generation. \n\t Dynamic data structures and abstract data types. \n\t Models of storage in computer systems. \n\t Algorithmic complexity. \n  Students must be proficient in the English language to UCL's Level 4 standard or better.   "],"32":["Big Data Landscape This module covers the process of managing Big Data throughout its lifecycle, from requirements through retirement. The lifecycle crosses different application systems, databases and storage media. Students will gain an understanding of the full Big Data value chain. They will be able to analyze the challenges and opportunities associated with the different stages which Big Data passes through.  Landscape Overview Introduction Applications Infrastructure Technologies Types of Big Data: Graph, Social, Security, Telematics etc Metadata  Big data lifecycle management Data lineage, provenance and infrastructure Data at rest and in motion Data Warehousing, marts, lakes  Big data value chains:  From big data to intelligence\/knowledge  From big data to decision making  The interface of artificial intelligence and Big Data Data visualisation  Big data ecosystems Big data reference architecture  Data integration Data virtualization Data federation Linked open data: RDF, Semantics and Ontology  Big data applications Big Data privacy, security, legal and governance  Examples of tasks undertaken by students in practical sessions are: Configuring and using the Hadoop file system. Implementing parallel, distributed algorithms on a cluster using MapReduce. Creation, deployment and testing of an end-to-end information value-chain in a virtual environment. Utilising NoSQL databases.      On completion of the module the student should be able to:  Demonstrate a detailed understanding of the requirements, concepts and principles of Big Data systems. Demonstrate a detailed understanding of Big Data storage, transmission, processing and analytics from an enterprise system perspective. Critically appraise the data components of an enterprise system. Analyse the role of enterprise system data components in the Big Data information value chain. Critically appraise Big Data technologies, infrastructure, services and standards.    ","Big Data: Systems, Programming, and Management (M) COMPSCI5088   Big Da  ta is nowadays manifested in a   very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.     The course aims to endow students with:    An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.    Exposure to a number of different cloud data stores and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.    Familiarity with modern programming paradigms (e.g., MapReduce, RDDs, etc.), so to enable them to design and develop programs which can execute in massively parallel infrastructures in the cloud.    The ability to discuss and appraise the internals of (NoSQL) cloud data storage systems, and the ability to enrich these systems with additional functionality.    A deep knowledge of the latest evolutions in the field of big data systems.     By the end of this course students will be able to:    1.   Design, develop and evaluate   programs to access big data repositories in a massively parallel manner  ;    2.   Discuss  &nbsp;and   contrast  &nbsp;the internals of the design and implementation  &nbsp;of current cloud data storage and processing systems;     3.   Identify and   analyse  &nbsp;  issues related to the scalability and efficiency challenges   of  &nbsp;processing complex queries  \/algorithms  &nbsp;against big data systems  , and develop and assess ways of addressing said challenges;    4.   Explain and appraise state-of-the-art research in the field of big data systems.    5.   D  emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.  ","Scaling up Data Science  \n \nThis block aims to introduce the concepts required to deliver data science projects at scale, tackling problems which cannot be solved on a single computer. Learners will understand how to do this from a practical point of view as well as understanding the limitations of such approaches.\n \n   \n \n \u201cBig Data\u201d involves data whose volume, diversity and complexity requires new technologies, algorithms and analyses to extract valuable knowledge, which go beyond the normal processing capabilities of a single computer. The field of Big Data has many different faces such as databases, security and privacy, visualisation, computational infrastructure or data analytics\/mining some of which you will already have learned.&nbsp; This teaching block is about scaling that up, and making use of multiple machines, possibly in the cloud, to produce data science solutions.  This module will provide the following concepts:  1.&nbsp; Introduction to Big data: introducing the main principles behind distributed\/parallel systems with data intensive applications, identifying key challenges: capture, store, search, analyse and visualise the data.  2. Big Data frameworks and how to deal with big data: this includes the MapReduce programming model, as well as an overview of recent technologies (Hadoop ecosystem, and Apache Spark). Then, you will learn how to interact with the latest APIs of Apache Spark (RDDs, DataFrames and Datasets) to create distributed programs capable of dealing with big datasets (using Python and\/or Scala) &nbsp;  3. Finally, we will dive into the data mining and machine learning part of the course, including data preprocessing approaches (to obtain quality data), distributed machine learning algorithms and data stream algorithms. To do so, you will use the Machine learning library of Apache Spark (MLlib) to understand how some machine learning algorithms (e.g. Decision Trees, Random Forests, k-means) can be deployed at a scale.  Learners should consider whether there are relevant problems in their workplace that require the use of high performance computing and techniques to address Big Data problems (joining up with the on-the-job acctivity). \n \n  Teaching Goal 1Understand the principles that allow the processing of big data sets.Teaching Goal 2Understand the limitations of big data technologies for distributed processing.Teaching Goal 3Demonstrate practical skills required to implement big-data solutions using modern large-scale data and compute infrastructures.Teaching Goal 4Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; &nbsp;S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. &nbsp;&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner."],"33":["AI and Machine Learning  \n \nTo give an understanding of contemporary artificial intelligence (AI) and machine learning (ML) methods.To develop skills in the practical implementation of AI and ML methods.To learn how to choose which methods to apply to a specific problem, and how the methods can be applied to solve practical problems in data science.To enable apprentices to apply data mining techniques on real data sets, some of which can be described as big data sets. Apprentices will also learn to appreciate both the potential and limitations of big data.\n \n   \n \n This module gives brief introductions to a range of Artificial Intelligence and Machine Learning techniques.&nbsp; The module will cover the history of AI and techniques such as local search techniques, evolutionary algorithms, neural networks and deep learning.  It will prepare learners for further independent work on selecting appropriate techniques and developing their understanding and application of AI and ML techniques in practice. \n \n  Understand key concepts of artificial intelligence and machine learning.Be able to apply a range of artificial intelligence and machine learning techniques to data science problems.Independently and systematically design, develop and test software as part of non-trivial data science problem.Be able to implement AI techniques using languages and systems used in the contemporary workplace. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; Data processing and storage, including on-premise and cloud technologies. \t Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. \t Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: Statistical and mathematical models and methods. &nbsp; \t Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t Applications such as computer vision and Natural Language Processing. \t An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;","Machine Learning (20cr)  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You will also have the opportunity to work on real-world datasets and gain experience in technical paper writing in the format of conference publications. &nbsp;  You'll spend around six hours each week in lectures and computer classes for this module. \n \n  Knowledge and Understanding:&nbsp;Understanding the capabilities, strengths and limitations of machine learning paradigms(A3)&nbsp;an appreciation of learning systems and learning algorithms (A4)Intellectual Skills:&nbsp;The ability to understand complex ideas and relate them to specific situations (B4)&nbsp;The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)Professional Skills:The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1)&nbsp;The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)Transferable Skills:&nbsp;The ability to address real problems and assess the value of their proposed solutions (D1)&nbsp;The ability to describe the method, evaluation process and result analysis in technical expressions in the form of scientific papers (D4)","Machine Learning  \n \nTo introduce the principles, techniques and applications of machine learning and pattern recognition;To enable students the to appreciate some of the most widely used machine learning and pattern recognition algorithms and applications, as well as data mining techniques and their applications;To enable the students to understand and be able to put into practice a variety of machine learning and pattern recognition algorithms, as well as data mining techniques;To enable students to apply data mining techniques on real data sets, some of which can be described as big data sets;To allow students to appreciate the potential and limitation of big data.\n \n   \n \n Providing you with an introduction to machine learning, pattern recognition, and data mining techniques. This module will enable you to consider both systems which are able to develop their own rules from trial-and-error experience to solve problems, as well as systems that find patterns in data without any supervision. In the latter case, data mining techniques will make generation of new knowledge possible, including very big data sets. This is now fashionably termed 'big data' science. You'll cover a range of topics including: machine learning foundations; pattern recognition foundations; artificial neural networks; deep learning; applications of machine learning; data mining techniques and evaluating hypotheses. You'll spend around six hours each week in lectures and computer classes for this module. \n \n   Knowledge and Understanding:  Understanding the capabilities, strengths and limitations of machine learning paradigms(A3) \t an appreciation of learning systems and learning algorithms (A4)  Intellectual Skills:  The ability to understand complex ideas and relate them to specific situations (B4) \t The ability to identify both capabilities and limitations of a machine learning or pattern recognition method (B4)  Professional Skills  The ability to implement selected machine learning operations including learning algorithms and apply them in real world applications (C1) \t The ability to evaluate available machine learning models and learning algorithms and select those appropriate to a given task (C3)  Transferable Skills:  The ability to address real problems and assess the value of their proposed solutions (D1) \t The ability to retrieve and analyse information from a variety of sources and produced detailed written reports on the result (D4) "],"34":["Internet of Things This module provides fundamental and practical coverage of the set of converging technologies known as the Internet of Things (IoT). It focuses on representative IoT applications, technologies, frameworks and associated standards that support and underpin IoT applications, such as sensor networks, messaging protocols, security, data storage, analytics, services and human interaction. The module provides in-depth practical coverage of representative IoT implementation frameworks including cloud-based service delivery models.  IoT application domains and related business-awareness. Societal impact. Historical perspective related to machine-to-machine (M2M) systems. Technology evolution and convergence of consumer, business and industrial Internet. IoT architectural models. Enabling technologies. Overview of Wireless Sensor Networks. Reliable and secure messaging for IoT. Service-oriented architectures and cloud-based computing for IoT. Data collection, management and analysis. Complex event processing. High velocity data processing. Privacy, security and governance. The role of standardisation. Critically appraisal of current IoT platforms such as IBM Bluemix and Microsoft Azure IoT. Implementation of end-to-end solutions using industry-standard technology frameworks, including cloud-based computing with web-services. Challenges for IoT industry applications. IoT case studies in representative areas such as smart cities, transportation, health and smart buildings. IoT strategic research directions. Knowledge of international affairs.  Examples of tasks undertaken by students in practical sessions are: Configuring and applying a wireless-sensor-network. Using messaging protocols to connect to cloud-based IoT services. Implementing cloud-based analytics for IoT. Generating actions based on data-analytics. Implementing an end-to-end solution for IoT. Building human-interfaces for IoT systems.      On successful completion of this module a student should be able to:  Demonstrate in-depth knowledge of the requirements and implementation strategies for a representative range of IoT applications. Demonstrate a detailed understanding of how IoT applications can add value to business, industry and society. Critically appraise IoT technology, standards and services including cloud system technology, architecture and deployment models. Demonstrate the ability to analyse and solve representative problems in the IoT domain. Develop IoT applications that generate\/process data-streams, provide cloud-based storage, provide\/consume analytical services and feature appropriate human interfaces.     ","Cloud Platform Development This module provides analytical and practical coverage of cloud computing and web services. The module provides in-depth coverage of cloud computing technology exploring scalability, cloud architecture, platform and data virtualisation (relational and non-relational), delivery and deployment models and issues concerning cloud security. It also focuses on the technology, frameworks and associated standards which support and underpin web services, such as SOA and web service architectural styles. Students will also be introduced to Platform as a Service (PaaS) software development.  Web Service Concepts  SOA and web service architectural styles, strong and loose coupling, separation of concerns Common SOA patterns for web services XML and JSON for web services (including XML namespaces and XML Schema) SOAP, WSDL and WS-* profiles REST, REST architectural constraints Higher Level Services Security in web services Transactions Cloud Computing Concepts Definition of cloud computing Key characteristics of cloud computing including scalability, availability and replication Virtualization concepts Service bus messaging and load balancing Cloud storage including legacy relational and non-relational data Common SOA patterns for cloud computing Cloud Service Delivery and Deployment Models Cloud service model architectures: IaaS, PaaS and SaaS  Cloud deployment models Cloud Security Cloud Security Alliance guidelines for secure cloud application development Identity management and access control in cloud applications  PAAS Cloud Computing Platforms  Features of current industry cloud PAAS platforms e.g. Amazon Web Services , Microsoft Azure Software development of multi-tier applications using a current industry standard cloud PAAS platform       On completion of this module, students should be able to:-  Critically appraise web service technology, standards and services including SOA, web service architectural styles including SOAP and REST and higher level services such as transactions and security. Critically appraise cloud system technology and architecture, cloud service delivery models such as IaaS, PaaS and SaaS, cloud deployment models and cloud security. Discuss commonly used SOA patterns used in web-service and cloud-based applications. Develop multi-tier web service applications hosted on an industry standard PaaS cloud platform.     ","Cloud Computing and Web Services This module provides analytical and practical coverage of cloud computing and web services. It focuses on the technology, frameworks and associated standards: cloud models, cloud platforms and scalability. It also provides coverage of current web service technology and data transport representations, and integrated cloud and web service application development. Current examples from industry technology are used throughout  Cloud Models -Service Delivery Models (IaaS, PaaS and SaaS) -Deployment Models (public, private, hybrid clouds)  Cloud infrastructure and Services -Virtualization: hypervisors and containers -Resource management and provisioning -Cloud service management including lifecycle management and SLA management and enforcement  Cloud Scalability -Reliability -Distribution and replication -Service-oriented principles for scalable architectures -Cloud storage - blobs, queues and non-relational tables  Web Services and Data -XML and JSON -SOAP and REST  Security -Security threats and best practice for critical areas of cloud computing -Secure web service technologies  Technology Case Studies -Web services e.g. Microsoft WCF, Microsoft Web API, Java JAX-WS and\/or JAX-RS  -Cloud Computing e.g. Amazon Web Services (EC2, Elastic Beanstalk etc.), VMware vSphere and vFabric, Microsoft Azure, Google App Engine, OpenStack, IBM SoftLayer\/BlueMix  Cloud Service Application Development -PaaS cloud application development using multiple VM instances and cloud storage with software development tools and APIs currently used in industry  Examples of tasks undertaken by students in practical sessions are: -Writing, building and running locally multi-tier cloud applications in an industry standard IDE e.g. Visual Studio with current SDKs, e.g. Microsoft Azure SDK. -Deploying coursework applications on a real data-centre e.g. a Microsoft Cloud data-centre.      On successful completion of this module a student should be able to:  Critically appraise cloud technologies, platforms, services and standards. Critically appraise web service technology including data transport representations. Develop integrated cloud and web service applications using a mainstream industry cloud platform and development technologies.      "],"35":["MSc Project for Information Technology + COMPSCI5018P   The aim of the project is to enable students to carry out a substantial, inde  pendent, individual  &nbsp;software development  &nbsp;  proj  ect at level M.  It will   specifically   entail  &nbsp;  the development of a software prod  uct project  . Students will submit a dissertation for assessment.  &nbsp;     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and\/or the conduct of a research project. Students will submit a dissertation for assessment.  &nbsp;     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and\/or use standard methods to conduct a research project  ;    3.   Write a dissertation that will clearly describe the value of thei  r project as a software   product and\/or research project;    4.   Describe their work to both technic  al and   non technical  &nbsp;audiences, demonstrating software products as appropriate.  ","MSc Project for Computing Science (SOCIAL) COMPSCI5098P   This course is   intended for students registered on   the four year training programme 'PhD with Integrated Stud  y  &nbsp;in Computing Science and Psychology'  &nbsp;as part of an early exit award only.    &nbsp;   &nbsp;    The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and\/or the conduct of a research project. Students will submit a dissertation for assessment.     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and\/or the conduct of a research project. Students will submit a dissertation for assessment.     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and\/or use standard methods to conduct a research project.    3.   Write a dissertation that will clearly describe the value of thei  r project as a software product and\/or research project.    4.   Describe their work to both technic  al and non technical audiences, demonstrating software products as appropriate.  ","MSc Project for Computing Science+ COMPSCI5086P   The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and\/or the conduct of a research project. Students will submit a dissertation for assessment.     The aim of the project is to enable students to carry out a substantial, inde  pendent, individual   proj  ect at level M.  It will entail  &nbsp;  the development of a software product and\/or the conduct of a research project. Students will submit a dissertation for assessment.  &nbsp;     By the end of the course students will be able to:    1.   Formulate and execute a project plan for an appropriate software development   or research   project;    2.   Use standard methods to carry out appropriate analysis, design, implementation (including testing) and critical evaluation of a system;  &nbsp;and\/or use standard methods to conduct a research project.    3.   Write a dissertation that will clearly describe the value of thei  r project as a software product and\/or research project.    4.   Describe their work to both technic  al and   non technical  &nbsp;audiences, demonstrating software products as appropriate.  "],"36":["COMP3421: \nCOMPUTER SCIENCE INTO SCHOOLS  To develop a range of key skills in the student and to offer an early taste of teaching to those interested in pursuing it as a career or for other career pathways where public understanding of science is required. \n\t\t\t To help students gain confidence in communicating Computer Science, develop strong organisational and interpersonal skills, and understand how to address the needs of individuals. \n\t\t\t To learn to devise and develop Computer Science projects and teaching methods appropriate to engage the relevant age group they are working with. \n\t\t\t To help inspire a new generation of Computer Scientists as prospective undergraduates by providing role models for school pupils. \n\t\t\t To help teachers convey the excitement of their subject to pupils by showing them the long-term applications of school studies, especially the cross disciplinary relationships of Computer Science. \n\t\t\t To help teachers by providing an assistant who can work with and support pupils at any point on the ability spectrum.   A competitive interview system will be used to match students with appropriate schools and a specific teacher in the local area, and each student selected will be given a chance to visit the school they will be working in before commencement of the placement.   \n\t\t\t One day training course on working in schools and with pupils.   \n\t\t\t Series of lectures on key transferable skills.   \n\t\t\t The student will be required to spend half a day (approx 4hrs) a week in the school every week for at least 10 weeks.   \n\t\t\t Tutorials which will provide an opportunity for students to share their experiences.   \n\t\t\t The students will be involved in the following activities in support of their learning and teaching:   \n\t\t\t Classroom observation and assistance: Initial contact with the teacher and pupils will be as a classroom assistant, watching how the teacher handles the class, observing the level being taught and the structure of the lesson, and offering practical support to the teacher.   \n\t\t\t Teaching assistance: The teacher will assign the student with actual teaching tasks, which will vary dependent on specific needs and the student's own ability as it develops over the term. This could include for example offering problem-solving coaching to a smaller group of higher ability pupils, or taking the last ten minutes of the lesson for the whole class. The student will have to demonstrate an understanding of how the level of the knowledge of the pupils they are teaching fits in to their overall learning context in other subjects.   \n\t\t\t Whole class teaching: Students will typically be offered, in collaboration with their teachers, at least one opportunity to undertake whole class teaching, albeit that it may be only for a small part of the lesson.   \n\t\t\t University awareness: Students will represent and promote their academic discipline as a potential university choice to pupils across the social and academic range represented at their partner schools.   \n\t\t\t Special projects: The student will devise a special Computer Science project on the basis of discussion with the teacher and module co-ordinator and their own assessment of what will interest the particular pupils they are working with. The student will implement the special project and evaluate it. The student will be required to show that they can analyse a specific teaching problem and devise and prepare appropriately targeted teaching materials, practical demonstrations and basis 'tests' where appropriate.   \n\t\t\t Extra-curricular projects: The student may be supervised by the teacher in helping to run an out-of-timetable activity, such as a lunchtime club or special coaching periods for higher ability pupils. The student will have to demonstrate an ability to think laterally in order to formulate interesting ways to illustrate more difficult scientific concepts.   \n\t\t\t Written reports: The student will keep a journal of their own progress in working in the classroom environment, and they will be asked to prepare a written report on the special project.   \n\t\t\t The teachers will act as the main source of guidance in the schools but, in addition, the students will also be able to discuss progress with the module co-ordinator or a member of the Science Outreach and Engagement Team whenever necessary. \n\t\t\t Solutional methods for computational problems.   On successful completion of this module students:  \n\t\t\t\t Will be able to assess and devise appropriate ways to communicate a difficult principle or concept. \n\t\t\t\t Will have gained a broad understanding of many of the key aspects of teaching in schools. \n\t\t\t\t Will have an advanced understanding of Computer Science through having to explain to others. \n\t\t\t\t Will have an advanced understanding of the problems of public perception of science.   ","LM Teaching Computer Science in Schools (Extended)   The module is the implementation of the national Student Ambassador Scheme by the School of Computer Science at the University of Birmingham. Its design follows closely the recommendations and guidelines of the UAS.  The module will reward students with course credit for working as a \u2018student-tutor\u2019 with teachers in local schools and help them develop some valuable transferable skills.   Students will learn important, marketable and transferable skills of benefit to them in employment and in life, specifically:  Organisational and interpersonal skills  Addressing the needs of individuals  Time management skills  Working in a challenging and unpredictable environment  Staff responsibilities and conduct  The ability to improvise  Giving (and taking) feedback  Handling difficult and potentially disruptive situations  Public speaking and communication skills  Team-working  Standard teaching methods  Students will gain experience of working in a professional educational environment and will learn about the key issues affecting school education today.  They will have the satisfaction of making a positive impact on the education of pupils of all ages and the chance to act as a role model for your subject.  It is a chance to put something back into the community by sharing  knowledge and helping to motivate young people and raise their aspirations towards science.  They will develop confidence in answering questions about their own subject and in devising appropriate ways to communicate a difficult principle or concept.  They will develop communication skills and gain a better understanding of their own level of expertise.    For those of who are interested in teaching as a profession, this will be an opportunity to explore whether it is a path they want to pursue.  They will learn to devise and develop computer science projects and teaching methods appropriate to engage the relevant age group.      The module will involve:  Undergoing a Criminal Record Bureau (CRB) check prior to entering the classroom  Being paired with a specific teacher at a local school who will work with students to identify their aims and objectives for the term  Spending \u00bd  day a week in school for 10 weeks, developing a role within the classroom  Presentation and interview  11 training sessions  Completion of a Special Project (agreed with the teacher)","LH Teaching Computer Science in Schools   The module is the implementation of the national Student Ambassador Scheme by the School of Computer Science at the University of Birmingham. Its design follows closely the recommendations and guidelines of the UAS.  The module will reward students with course credit for working as a \u2018student-tutor\u2019 with teachers in local schools and help them develop some valuable transferable skills.   Students will learn important, marketable and transferable skills of benefit to them in employment and in life, specifically:  Organisational and interpersonal skills  Addressing the needs of individuals  Time management skills  Working in a challenging and unpredictable environment  Staff responsibilities and conduct  The ability to improvise  Giving (and taking) feedback  Handling difficult and potentially disruptive situations   Public speaking and communication skills  Team-working  Standard teaching methods  Students will gain experience of working in a professional educational environment and will learn about the key issues affecting school education today.  They will have the satisfaction of making a positive impact on the education of pupils of all ages and the chance to act as a role model for your subject.  It is a chance to put something back into the community by sharing  knowledge and helping to motivate young people and raise their aspirations towards science.  They will develop confidence in answering questions about their own subject and in devising appropriate ways to communicate a difficult principle or concept.  They will develop communication skills and gain a better understanding of their own level of expertise.    For those of who are interested in teaching as a profession, this will be an opportunity to explore whether it is a path they want to pursue.  They will learn to devise and develop computer science projects and teaching methods appropriate to engage the relevant age group.    The module will involve:  Undergoing a Criminal Record Bureau (CRB) check prior to entering the classroom  Being paired with a specific teacher at a local school who will work with students to identify their aims and objectives for the term  Spending \u00bd  day a week in school for 10 weeks, developing a role within the classroom  Presentation and interview  11 training sessions  Completion of a Special Project (agreed with the teacher)"],"37":["Undergraduate Course: Introduction to Mobile Robotics (INFR10085) A mobile robot is a machine controlled by software that uses sensors and other technology to identify its surroundings and move around its environment. This course provides a general understanding of mobile robotics and related concepts, covering topics such as sensing, computer vision (i.e., visual perception), state estimation (e.g., localisation and mapping) and motion planning. The emphasis is on algorithms, probabilistic reasoning, optimization, inference mechanisms, and behaviour strategies, as opposed to electromechanical systems design. Practically useful tools and simulators for developing real robotic systems will also be covered in this course. \n \nAt the end of the course, students will develop sufficient skills in the analysis of predominant mobile robots, being able to understand the visual perception and navigation system for a self-driving car. Delivery Method: \n \nThe course will be delivered through a combination of: (1) live lectures, (2) practical labs, (3) tutorials, and (4) an online discussion forum. \n \nContent\/Syllabus: \nThe exact set of methods and algorithms explored in the course will vary slightly from year to year, \nbut will include many of the following topics: \n \n-\tIntroduction of Robotics: concept, use cases, and system architecture on sensing, perception &amp; control. Ethical and privacy implication of robots. \n-\tMath refresher: basic operations of matrix, algebra, probability theory, derivatives. \n-\tRobot Motion Model: Coordinate transformations and  Representation of Rotations; Forward kinematics. \n-\tSensor Model and Measurement: Proprioceptive and exteroceptive models; a case study with cameras, lidar, radar, ultrasonic, inertia etc. \n-\tRecursive State Estimation: Kalman filters, EKF etc.  \n-\tLocalization &amp; Tracking: Monte Carlo Localization, Ranging based Triangulation, Fingerprinting etc. \n-\tMapping: environment model, grid map. \n-\tRobot Operating System: basic principles, use cases, and examples. \n-\tSLAM: Framework &amp; systems, loop closing, pose graph optimization. \n-\tPlanning and Navigation: Obstacle avoidance, Path planning, receding horizon control. \n-\tSelf-driving Car Development Platform: Basic understanding of usage of CARLA like platform in sensing, perception and navigation. \n-\tBasic Control Theory for Robotics: Open-loop and closed-loop control. Basic Idea on PID control. On completion of this course, the student will be able to:\n     \n         recall and explain the essential facts, concepts, principles and potential ethi-cal concerns of mobile robotics and related concepts, demonstrated through written answers in exam-ination conditions  describe and evaluate the strengths and weaknesses of some specific sensor and motor hardware; and some specific software for sensory processing and perception, demonstrat-ed through written answers  employ useful software and tools (e.g. robot simulator, robotic operating sys-tem) to solve a core problem of mobile robots, and will show a working system via proof-of-concept simulation environments  in writing a joint report, identify problem criteria and context, discuss design and development, test, analyse and evaluate the behaviour of typical mobile robots they have developed in simulation \n     ","Robotics Foundations (H) COMPSCI4076   This course will introduce students to the computational  &nbsp;and mathematical  &nbsp;concepts, information processing and software frameworks of robotic systems. It will also consider the sensory and actuation systems required by a robot to sense, understand and interact with its environment. The primary aim is to give students an understanding of how to prototype and implement   autonomous   robotic systems by making use of   a   sophisticated robotic middleware (e.g. Robot Operating System (ROS)), its associated data transmission channels  ,   software   robotic   stacks  &nbsp;and the underlying mathematics required to operate a robot  .   This  &nbsp;is a hands-on course, designed to provide   student  s with the required programming  , mathematical  &nbsp;and debugging skill-set to implement robotic solutions based on  &nbsp;the  &nbsp;use of off-the-shelf commercially available real and virtual robots.  &nbsp;P  ython skills are a requirement for this course  ;   C\/C++ skills are desirable but not essential  .     The aims of Robotics Foundations are:    \u25a0&nbsp;  To facilitate students understanding of   core concepts involved in robot  ic software   development  , from perception to planning and action  ;    \u25a0&nbsp;  To   understand  &nbsp;  how sensed data and pre-obtained information, or world\/domain \"knowledge\", is used to plan interaction with the environment    \u25a0&nbsp;  To understand matrix and   transformation   mathematical   operators to accomplish complex robotic motions.    \u25a0&nbsp;  To develop the ability to implement, test  , validate and deploy a   mobile\/manipulation robotic problem, based on   the   use of   the  &nbsp;  R  obot   O  perating   S  ystem  .    \u25a0&nbsp;  The relationship between physical robots and their virtual equivalents required for simulation, development   and debugging  &nbsp;will also be considered.    \u25a0&nbsp;  To develop a complete robotic application using off-the-shelf virtual robotic platforms.     By the end of this course  ,  &nbsp;students will be able to:   &nbsp;   1.   Describe   and understand   what constitutes a robot system    2.   Formulate  &nbsp;robot's information capabilities within robotic middleware and understand how data is transformed   from basic  &nbsp;control, sensor and perception functions to robot actions    3.   Create and implement  &nbsp;robot kinematics and motions in mobile robots and robot manipulators    4.   Apply techniques for path and motion planning that allows a robot to move    5.   Design control\/behaviour tasks for mobile robots and robot manipulators    6.   Apply  &nbsp;practical software engineering principles during the development of a robotic application    7.   Understand the facilities provided by ROS and how to structure robot control software systems using ROS and vision systems in   OpenCV  .    8.   Be able to program a data processing pipeline consisting of a robot control system in the ROS environment to carry out a specific task, such as locating an object, grasping it and placing it in another location.  ","Postgraduate Course: Advanced Robotics (INFR11213) ***This course replaces Robotics: Science and Systems (INFR11092)*** \n \nRobotics is about turning high level goals into plans for action, i.e. robots sense the environment and produce physical motions and interactions with the environment to achieve a goal. In this course, students will learn the major algorithmic techniques and practical skills in robotics that can be applied and transferred to many real-world applications, such as manipulation of surgical robotics and robot assembly in automobile and manufacturing.  \n \nThe course assumes no prior knowledge of robotics, so begins with a high-level overview of the major areas in robotics and then introduces core topics: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation and optimal control; robot motion planning and basics of robot learning.  \n \nBuilding on these fundamentals, the course then focuses on the advanced control and task planning of articulated robotic systems, e.g. robotic manipulators. Students develop a lab practical in both simulation and on a real robot, so as to consolidate theoretical knowledge and develop practical skills. This is a fast-paced course that starts with the fundamentals and then proceeds to go in-depth with core elements in robotics. The focused topics cover: kinematics, dynamics and control; state estimation and signal processing; digital control systems; optimisation, robot motion planning; and robot learning.  \n \nThe aim of the course is to present essentials in robotics, articulated robots in particular, culminating in a robotic lab practical. The lab involves the development of an integrated robotic system which embodies the major algorithmic techniques used in real-world robotic applications. To bridge the lectures on algorithms and lab sessions, the course also provides tutorials dedicated to the practice of programming and the implementation of algorithms - from the equations to code. \n \nLectures on these topics will be complemented by labs that exercise knowledge of a cross section of these techniques, based on realistic tasks driven by real-world applications, such as dual-arm robot manipulation. The practical lab consists of 2 parts: individual-based simulation (80%), and group-based real robot demonstration (20%). The lab demonstration will be carried out on an advanced humanoid robot and students will work in groups to deploy their work on the real robot. Modern Robotics: Mechanics, Planning, and Control, Frank C. Park and Kevin M. Lynch  \nIntroduction to Robotics, Fourth Edition, J. J. Craig, Pearson, 2017 \nFranklin, Gene F., et al. Feedback control of dynamic systems. Vol. 3. Reading, MA: Addison-Wesley, 1994."],"38":["CS411 - Theory of Computation Building on the previous material in software development, to extend and to formalise the student\u2019s abilities in the area of computational complexity. Introduction: the need for formality in the analysis of problems in computation.Computation by Abstract Machines: classification, finite automata, deterministic and non-deterministic machines, Turing Machines, the halting problem, solvable, semi-solvable and unsolvable problems.Analysis of Algorithms and Complexity Theory: Measuring complexity of algorithms, Big-O and Small-o notations, analysing certain algorithms, polynomial time algorithms, the PATH problem, tree searchers (depth-first search &amp; breadth-first search), the HAMPATH problem, the Composites problem, the class NP, polynomial time reducibility, the CLIQUE problem, NP-completeness, the Cook-Levin Theorem. On completion of the class, a student should be able: to categorise abstract machines and to construct machines appropriate to specific problems  to display an understanding of the merits and limitations of the analytical techniques of software development  to recognise the significance of complexity classes and analysis and to deduce the complexity of certain types of algorithm  to demonstrate a deeper and broader understanding of classes of complexity and of the ability to deduce the complexity of specific algorithms  to display an extended ability to determine the complexity of software by the application of analytical techniques  to demonstrate practical competence in the range of issues associated with the class ","Computability  \n \nThe overall aim of the course is to provide an understanding of the concepts of computability and computational complexity.In particular, courseobjectives are as follows: To provide an appreciation of the many attempts that have been made to define the class of computable functions and to indicate that all the sensible attempts to do this have been shown to be equivalent. To appreciate impossibility proofs based upon diagonalisation arguments. To introduce the fact that there are problems that cannot possibly be solved on a computer. To show how, apparently different, computable problems of practical importanceare related in respect of their algorithmic complexity and how this relates to the design and choices of algorithms for solving them.\n \n   \n \n You will begin by considering the attempts to characterise the problems that can theoretically be solved by physically possible computational processes, along with the practical implications. You will then consider the area of complexity theory, looking at&nbsp;whether or not&nbsp;problems can be solved under limitations on resources such as time or space. You will examine the classes P and NP, and how to show problems are NP-complete. You will also consider other practically important classes such as: PSPACE, and its relevance to adversarial games, ontologies, and the semantic web; and&nbsp;also&nbsp;complexity classes such as NC relevant to understanding of parallel computation and the limitations of its effectiveness. You will look at the practical implications of computability and complexity in the context of real-world problems, such as vehicle routing, scheduling, timetabling, and machine learning.&nbsp;&nbsp; \n \n   Knowledge and Understanding  To understand the theory of computation via mathematical methods.  Intellectual Skills  To apply and deploy mathematical ability, practices and tools; \t To understand and logically evaluate the problems in computability and complexity; \t To think independently about the issues while giving due weight to previous work; \t To understand the ideas of the theory of computability and complexity and relate them to particular problems.  Professional Skills  To extend their own abilities by specialising or generalising from their previous knowledge.  Transferable Skills  The ability to solve problems using mathematics, by consulting external sources if necessary. ","Computability and Complexity Theory (COMP0017)   Aims:  \n\n The module addresses the theoretical and practical limitations of computation and provides a mathematical framework for proving properties of programs. The concepts of undecidability and intractability are formally introduced and discussed through a number of examples. The module will convey the proof techniques that are used to classify problems. It is intended that students learn how to apply them to classify unfamiliar problems for themselves. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Analyse the complexity of a variety of problems and algorithms. \n\t Prove that a problem is undecidable. \n\t Prove the equivalence of different models of computation. \n\t Find a polynomial time reduction from one problem to another. \n\t Determine the complexity class of a decidable problem. \n\t Categorise the complexity of a language. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Models of Computation: \n\n  Deterministic Turing machines. \n\t Alternative models: variations of the concept of Turing machine. \n\t Alternative models: register machines, imperative programming languages. \n  Languages: \n\n  Language acceptance. \n\t Language recognition. \n\t Decidable and Recognisable languages. \n\t Closure properties of languages. \n  Undecidability: \n\n  The Halting Problem and other unsolvable problems. \n\t Problem reduction. \n\t Rice\u2019s Theorem. \n\t Cantor\u2019s diagonal argument and the cardinality of unrecognisable languages. \n\t Undecidability of the tiling problem. \n\t Undecidability of first-order logic and incompleteness of arithmetic. \n  Basic Concepts of Complexity Theory: \n\n  Tractable and intractable problems and algorithms. \n\t Definition of Time Complexity. \n\t Decision vs Optimisation Problems. \n\t Travelling Salesman and its variants. \n  Polynomial-time reduction: \n\n  Definition and properties. \n\t Lemmas and proofs. \n\t Hamiltonian Graphs and Travelling Salesman. \n  Complexity classes: \n\n  Non-deterministic Turing machines. \n\t P, NP, and NP-complete classes. \n\t Complement and Co-Complete Classes. \n  Proving NP-hardness: \n\n  Cook\u2019s theorem. \n\t Satisfiability and its variants. \n\t Reductions between variants. \n  Other Complexity Classes: \n\n  Space complexity, PSPACE, and PSPACE-Completeness. \n\t Savitch\u2019s theorem. \n\t Logarithmic space. \n\t Time and space hierarchy theorems. \n\t Exponential time and hardness. \n\t Probabilistic classes. \n\t Approximation algorithms and hardness. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Theory of Computation (COMP0003), Algorithms (COMP0005), and Logic and Database Theory (COMP0009).   "],"39":["CS6055 - Formal Languages (2023\/24)  \nFinite automata or finite state machines (and their languages) are structures that can be used as abstract models for computational devices, capturing many of their essential features without the complications of hardware considerations. This module will enable students from the mathematics and computing areas to appreciate the powers and limitations of computers and will introduce them to some of the factors in complier design through development of some of the standard mathematical models of computational devices. \n \nThe aims of this module are: \n \n\u00b7To introduce a range of models of computational devices. \n\u00b7To investigate the expressive power of different models. \n\u00b7To introduce the idea of decision problems in mathematics. \n\u00b7To demonstrate that interesting decision problems in computer science will often be unsolvable.   \n\u2022 Words, alphabets and languages. Operations on words and languages. Closure of languages. (LO1, LO2, LO4) \n \n\u2022 Deterministic finite automata. DFAs as language recognisers. Equivalent DFAs. Completion of DFAs. The DFA Pumping Lemma. Simplification and minimisation of DFAs. (LO2, LO3) \n \n\u2022 Non-deterministic finite automata. Algorithm for converting NFAs to DFAs. (LO2,&nbsp; LO3, LO4) \n \n\u2022 Distinguishable and indistinguishable states. Union, concatenation, and closure of&nbsp; finite automata. Intersection of two FAs. (LO1, LO2, LO5) \n \n\u2022 Introduction to regular expressions. Examples and notation. Converting FA to&nbsp; regular expressions and vice versa. Expressive power and equivalence of regular expressions and FAs. Using regular expressions in programming. (LO1, LO2,&nbsp; LO3) \n \n\u2022 Context free grammars. Introduction and notation. Derivations and syntax trees.&nbsp; Ambiguity in CFGs. Expressive power of FAs and CFGs. PDA implementation. (LO2, LO3) \n \n\u2022 Simplification of CFGs. Binary Form, Chomsky Normal Form. (LO1, LO2, LO3,&nbsp; LO4) \n \n\u2022 Universal computational machines. Turing machines and the Halting Problem. (LO2)   \nOn completing the module, the student should be able to: \n \nLO1&nbsp; Demonstrate understanding of the advantages of using formal specification and&nbsp; understanding of specifications written by others. \n \nLO2&nbsp; Develop formal specifications from informal problem statements. \n \nLO3&nbsp; Describe and recognise the characteristics of major established architecture styles. \n \nLO4&nbsp; Evaluate the quality of their specification and implementation, and their experiences of group work, the processes of producing their coursework and the product produced. ","Undergraduate Course: Introduction to Theoretical Computer Science (INFR10059) This course introduces the fundamental concepts of the theory of computer science, which include some of the greatest intellectual advances of the last century: what does `computing' mean? Are all `computers' basically the same? Can we tell whether our programs are `correct' - and what does `correct' mean, anyway? Can we solve problems in reasonable time, and can we tell whether we can? \n \nThe course concentrates primarily on conceptual understanding, but adds enough detail to allow students to go on to further courses, and illustrates how the fundamental concepts are reflected throughout the discipline. The first section of the course asks the question, what does it mean to compute? We start with the finite automata introduced in earlier years, and then generalise to pushdown automata, and show that they have more power. Next we generalize further to very simple abstract general computers, and argue they can do everything real computers can do. We then ask, can we solve every computational question? The answer, with which Turing shocked the mathematicians of the 1930s, is \"no\", with a remarkably easy but beautiful argument (introduced at the end of Inf2-IADS INFR08026). We then explore some different, but always equivalent, ways of defining \"a computer\". We finish the section by asking how we can compare the difficulty of different problems, and introduce the idea of \"reduction\" as a way of compiling one problem into another. Technically, this covers register machines, undecidability, Turing machines, and reductions. \n \nThe second section thinks about how hard it is to solve solvable problems, leading to one of the most important problems in all mathematics, and the foundation of internet security. We start by reprising Inf2-IADS INFR08026 analysis of algorithms, and then discuss the idea of classifying problems as `tractable' (easy) or `intractable' (hard). We find that the idea of algorithms whose running time grows polynomially in the problem size is a good mathematical definition of `tractable', though not always a practical one. After making this more precise, we ask what happens if we're allowed to just check all the possible answers in parallel - does this give us more problem-solving power? The question is made precise by the concept of NP, and we show that there are \"hardest\" such problems, such as the famous Travelling Salesman. Although the question is easy to ask, nobody knows how to answer it. This is P = NP - if you can solve it, you win a million dollars, and fame for as long as civilization lasts.   So far, NP problems are very hard to solve in practice, so we discuss how to deal with them. We finish the section by talking about much harder problems still. Technically, this section covers P, NP, hardness and completeness, Cook's Theorem, P = NP, and the complexity hierarchy above NP. \n \nThe third section takes brief look at a different way of seeing computation. Haskell needn't be seen as a programming language, it can be the computer itself. We'll show how the lambda-calculus (on which Haskell is based) can do all the computing our other models could, and how the halting problem was actually first solved (or rather unsolved) within lambda-calculus. On completion of this course, the student will be able to:\n     \n         explain (non-)deterministic finite and pushdown automata and use the pumping lemma to show languages non-regular  explain decidability, undecidability and the halting problem  use reductions to show (un)decidability  explain P and NP and use reductions to show (non)-membership of them  write short programs in lambda-calculus \n     ","CS103 - Machines, Languages &amp; Computation To help students to achieve a broad knowledge of the essence of computation and computational systems, as embodied by the notions of computable functions, formal languages and recursion, logic and computability and abstract machines.  Computable and Non-Computable Functions: an introduction to the ideas of functions, computable functions, infinite sets of different cardinalities and the symbolic derivation of theorems, leading up to a proof of the existence of non-computable functions; an introduction to symbolic systems and the notion of theoremhood in such a system; the idea of lambda-calculus as a notation for computable functions; the relationship between computable functions and computer programs.  Recursion and Languages: a first look at context-free grammars and the idea that finite grammatical rules can capture infinitely many strings through recursion; the idea that recursion can be used in functions and in logical rules and definitions; an introduction to formal languages and the specification of grammatical rules to capture the structure of a given language; recognising and understanding recursive definitions; proof by structural induction.  Logic and Computability: introducing the propositional calculus as a set of symbolic rules and proving theorems in propositional calculus by natural deduction; lambda-calculus as a notation for proofs; the notions of soundness and completeness for a symbolic system; the idea of a decision procedure and a decision procedure for theoremhood in the propositional calculus; the three classes of problems: tractable, intractable and undecidable; the P=NP question.  Abstract Machines: finite state machines as simple abstract models of computation with some examples; what finite state machines can\u2019t do and an example; adding memory to a finite state machine to form a Turing machine; Turing machines as computable function boxes; the idea of the Universal Turing machine; the Church-Turing thesis: the limits of computational power; some examples of some undecidable problems.  On completion of this class, a student should be able: To understand the difference between computable and non-computable functions and to demonstrate that non-computable functions can exist.  To understand the concept of a formal language for specifying structures and the concept of recursion in both grammatical rules and function specifications.  To understand the concept of a rewriting system for symbolic manipulation and to produce derivations using such a system.  To understand the propositional calculus as a set of symbolic rules, and to derive theorems in the propositional calculus using these rules.  To understand the difference between tractable, intractable and undecidable problems and to understand what a decision procedure is.  To understand the concept of an abstract machine for performing computation, with reference to finite state machines and Turing machines. "],"40":["Statistics and Probability Modelling Assessment  \n \n\n \n   \n \n In this assessment Apprentices will demonstrate their knowledge and skills associated with probabilistic and statistical modelling by conducting applied statistical research and forecasting methods. This will include data analysis, making predictions and interpretating statistical results making use of a statistical software package.  The assessment will comprise of  \t A (continuous) R-portfolio. \t Group presentation \u2013 based on probability models and estimating parameters (this will include an individual reflective log). \t A Statistical report \u2013 demonstrating statistical modelling and reasoning using linear methods. \t A business case report based on the application of Time Series and Forecasting.   Apprentices will be encouraged to relate their outputs to areas of data science applicable to their current jobs. They will develop skills of scientific reasoning and analysis, and transferable skills of communication. The range of skills will be assessed through apprentices\u2019 written work and oral presentations. \n \n  Can apply methods concerning estimation of parameters in standard statistical models; in particular the method of moments and the maximum likelihood method.Can perform statistical hypotheses tests using data from studies (such as t and F-tests, comparison of models and parameter values).Can apply methods for interval estimation; in particular, exact and approximate confidence intervals based on asymptotic theory.Can apply methods for analysing categorical data and methods without having to make distributional assumptions (non-parametric statistics).Can fit a linear model to data, both manually and using statistical software.Can check model fit, diagnose errors, and perform model selection amongst the class of linear models.Can demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science.Can identify and formulate problems in terms of probability and solve them to build up a simple stochastic model.Understands and can apply basic properties of discrete-time Markov chains.Can carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: Data processing and storage, including on-premise and cloud technologies. \t Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. \t Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4. Statistical and mathematical models and methods. 5. Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 6. Applications such as computer vision and Natural Language Processing. 7. An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8. Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.","End Point Assessment (Data Scientist Apprenticeship)  \n \n\n \n   \n \n This module is the integrated End-Point Assessment (EPA) which is the final assessment in the Data Scientist apprenticeship. All apprentices must undertake an EPA. This is a synoptic assessment of the knowledge, skills and behaviours that have been learnt throughout the apprenticeship. The purpose of the assessment is to make sure you meet the standard set by employers and that you are occupationally competent.  The EPA has three assessment methods;  \t &nbsp;&nbsp;&nbsp; Knowledge test followed by \t &nbsp;&nbsp;&nbsp; Report (based on a work-based project) and \t &nbsp;&nbsp;&nbsp; Professional discussion (informed by portfolio)   Successful completion of the EPA will signify the completion of the apprenticeship as well as the full Degree. The EPA must be completed over a maximum total assessment time of 6 months after the apprentice has met the EPA gateway requirements.  Further details of gateway requirements and the EPA assessment plan can be found in the End Point Assessment guidance documentation. https:\/\/www.instituteforapprenticeships.org\/media\/1973\/st0585_data-scientist-integrated-degree_l6_ap-for-publication_230718.pdf \n \n  To demonstrate the knowledge, skills and behaviours of the Data Scientist apprenticeship standard. KSBs  Knowledge Test K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; Report S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B4. Consideration of problems in the context of organisation goals.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp; Professional Discussion K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp;3.Data-driven decision making and the good use of evidence and analytics in making choices and decisions.K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:3.Common patterns in real-world data.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B4. Consideration of problems in the context of organisation goals.B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.","Synoptic Data Science Assessment 2  \n \n\n \n   \n \n This assessment is intended to help learners remember consolidated knowledge from their second year of learning.&nbsp; It will be delivered in two parts:  1)&nbsp;&nbsp; &nbsp;A multiple-choice knowledge test intended to mirror the knowledge test in the End Point Assessment 2)&nbsp;&nbsp; &nbsp;An open paper which poses higher level questions to data science learners which requires them to apply their first-year learning to problems from across the curriculum.&nbsp; This paper will include a section for the learner to review their progress against the KSBs.  While this assessment should be considered as \u201cAssessment of Learning,\u201d it is also intended as an instrument for learning to clearly signpost to learners that they are working towards an End Point Assessment, and that the knowledge, skills and behaviours should be developed in an integrated fashion, and that data science is not just a series of siloed domains.  The paper will include a reflective piece on the learner\u2019s progress towards the KSBs as part of a demonstration of their approach to their own professional development, and to foster an ongoing positive attitude to their development beyond their apprenticeship journey. \n \n  Understands how data science as a field and a community has developed and functions in relation to other disciplines.Understands the importance Ethics and Professionalism in relation to data science.Demonstrates progress towards achieving all the KSBs for the Data Scientist Apprenticeship KSB K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods. 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community."],"41":[" CM40179: Entrepreneurship  *  Develop critical understanding of different schools of entrepreneurial thought\n *  Develop critical understanding of the importance of entrepreneurship in developing an invention or process into a solid business proposition. \n *  Develop key skills in business and operational planning\n *  Develop systematic understanding of key business risk (including but not limited to financial, legal, professional, ethical and environmental risks). \n *  Develop key skills in the development of a business idea from initial concept to business plan.   The course will cover the following content:\n *  History of entrepreneurial thought, finding and developing an idea, market analysis, corporate structure, business funding, hiring, operations, marketing, risk management, legal, social, ethical and professional issues, writing a business plan.   Having taken this module, students should be able to: \n 1. Identify and analyse market opportunity.\n 2. Develop business strategy to take advantage of that opportunity.\n 3. Critically consider key operational issues.\n 4. Investigate alternative funding and financial strategies.\n 5. Identify and address key IPR, legal, social, ethical and professional issues\n 6. Locate and use entrepreneurial resources\n 7. Develop a business plan. \n  ","Technology Entrepreneurship (COMP0039)   Aims:  \n\n This is UCL Computer Science\u2019s principal entrepreneurship module for students seeking to develop and test a new business idea. Over the past ten years we have taught entrepreneurship to thousands of students, resulting in the launch of several innovative businesses. \n\n The module covers the new business lifecycle (selecting and testing a moneymaking idea, preparing a business plan, raising finance, the Exit),&nbsp;aspects of new business operation (registering a company, setting up your office, understanding financial statements),&nbsp;and exploiting new e-commerce tools and techniques (doing business electronically, company web sites, online business software and services.)   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Apply first-hand experience of the selection and deployment of tools, techniques and theories for the identification, validation and structuring of a new business venture. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Invention and innovation, finding and qualifying new opportunities. Business Model Generation. \n\t Confirming customer needs and testing market demand. Customer development. \n\t Lean Start-ups: what is your minimum viable product? The value of prototyping. \n\t Delivery channels and customer relationships. Business Plan and Preparing a Pitch. \n\t Financial Forecasting, Costing and Pricing. Management accounts. Cash-flow and profit and loss. \n\t Developing sustainable competitive advantage.&nbsp;Intellectual Property Rights. \n\t Corporate form and structure. Founder dilemmas - team, equity, remuneration etc. Developing your brand. \n\t Defining and testing critical business model uncertainties. Measuring progress. \n\t Common start-up metrics. \n\t Sources of Funding.&nbsp;Presenting to VCs. \n\t Class presentations, conclusions and next steps. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ","Undergraduate Course: Entrepreneurship and Innovation Project (INFR09053) The Entrepreneurship and Innovation Project course enables Informatics students to approach real life problems with an entrepreneurial perspective, through developing their ability to apply disciplinary knowledge, resources and academic skills. The teaching environment for the EIP course will be in-person, face-to-face, with a core teaching facilitator who organises the weekly lesson plans, the guest lecturers, and who serves as a facilitator and introducer of weekly learning. Teaching will be delivered in a way that enables students to build on their entrepreneurial knowledge each week through formal and informal interactions with the course organiser. The Entrepreneurship and Innovation Project covers three levels of cognitive domains (Knowledge, Comprehension, and Application): it exposes the enrolled students to entrepreneurial knowledge, and then teaches them how to explain and represent their new knowledge through applying it to constructing a solution to a problem that they have identified. Students will be assessed on their ability to develop and execute a semester-long project and team management plan. On a weekly basis, each individual in the team will be required to reflect on\/provide a personal perspective of the effectiveness of their teamwork. Like a real-life business with co-founders, the EIP course requires students face and address challenges as a team. \n \nStudent teams will be provided with formative assessment throughout the semester on the basis of their contributions to weekly reflective exercises, which evaluate their progress on collaboratively planning for and presenting a group business plan as their final project. All students will be required to attend weekly business planning workshops, which will guide students on how to research for and populate sections of their business plans that will be assessed as a summative portfolio of each team's collaborative learning journey throughout the semester. Weekly class attendance and effective team work are both essential in order for students to get a good grade for EIP. \n \nThe EIP course provides students with an opportunity to define and engage with an entrepreneurial project that they can continue pursue beyond the 1-semester of the EIP course delivery. \n \nThe course organiser of EIP will provide students with a guided learning pathway, which enables the teaching team (organiser and tutors) to get to know the individual teams 'intimately' through the semester, so as to offer them individualised\/team-specific feedback within the context of the larger learning outcomes and with regard to the components of the business plan that are assessed for a final team and individual grade. On completion of this course, the student will be able to:\n     \n         identify appropriate market segments for their innovations and justify decision to choose one market over another  communicate the process through which they achieve their final product to stakeholders  differentiate and appraise the different aspects of business models, financial plans and customer channels  collaboratively construct a business plan and model associated financial statements (for their entrepreneurial idea)  work as a member of a team to demonstrate multidisciplinary application of their Informatics' knowledge and skills to delivering an entrepreneurial solution \n     "],"42":[" CM12005: Programming 2 Building on Programming 1, you will learn about the concept of, and write programs in, the object-oriented programming style. You will also learn about and implement advanced programming techniques. Working in a team, you will plan, organise, and implement programs using a modern software engineering paradigm. You will learn about basic data structures and algorithms and implement server-client interaction.    CM12005 is a Must Pass Unit on the following courses:  \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  By the end of the unit, you will be able to: \n  write programs in an object-oriented programming language,  \n design and construct basic data structures and algorithms,  \n understand the basics of, and write programs containing, advanced programming techniques,  \n plan, organise and implement programs to support reuse and maintainability of the software,  \n apply a modern paradigm of software development.  \n \n  "," CM12003: Programming 1 You will write programs in two high-level computer programming styles, functional and imperative. You will learn about fundamental programming concepts such as data structures, loops, recursion, and types. No programming background is assumed.    CM12003 is a Must Pass Unit on the following courses:  \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  By the end of the unit, you will be able to: \n  write programs in a typed functional programming language,  \n write programs in a high-level imperative programming language,  \n use imperative control structures and recursion,  \n use basic inductive data structures and algorithms,  \n use basic higher-order programming constructs,  \n apply basic debugging and testing methods,  \n evaluate the complexity of given algorithms in basic terms.  \n \n  "," CM12001: Artificial intelligence 1 You will engage with the fundamental concepts of Artificial Intelligence (AI). You will learn the strengths and limitations of a range of AI techniques, and apply these in solving simple problems, while considering the social, legal, and ethical implications of AI.    CM12001 is Compulsory on the following courses: \t\t\n Department of Computer Science  \t\t\n   USCM-AFB30  : \tBSc(Hons) Computer Science \t  (Year 1)  \n   USCM-AFB31  : \tBSc(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKB31  : \tBSc(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFB32  : \tBSc(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKB32  : \tBSc(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKB30  : \tBSc(Hons) Computer Science with study abroad \t  (Year 1)  \n   USCM-AFM30  : \tMComp(Hons) Computer Science \t  (Year 1)  \n   USCM-AFM31  : \tMComp(Hons) Computer Science and Artificial Intelligence \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with professional placement \t  (Year 1)  \n   USCM-AKM31  : \tMComp(Hons) Computer Science and Artificial Intelligence with study abroad \t  (Year 1)  \n   USCM-AFM32  : \tMComp(Hons) Computer Science and Mathematics \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with professional placement \t  (Year 1)  \n   USCM-AKM32  : \tMComp(Hons) Computer Science and Mathematics with study abroad \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with professional placement \t  (Year 1)  \n   USCM-AKM30  : \tMComp(Hons) Computer Science with study abroad \t  (Year 1)  \n  On completion of the unit, the students will be able to:\n\n1. demonstrate understanding of a range of AI techniques, their strengths, and their limitations, \n\n2. demonstrate understanding of the fundamentals of probability theory and its role in AI, \n\n3. apply various AI techniques to simple problems, \n\n4. identify social, legal, and ethical issues in applications of AI. \n  "],"43":["LH Quantum Computing   Quantum computing is a non-classical paradigm for computation that uses the properties and effects of quantum mechanics to represent and manipulate information. Certain computations can be performed more efficiently on quantum computers than on classical computers, an example of this is sublinear search of unstructured data. Quantum computing also leads to new approaches to cryptography. In this module we will study the principles of operation of quantum computers, the algorithms and protocols that are designed to use them, and different ways of reasoning about quantum computation. We will also consider the physical realisations of quantum computers, and their potential future impact.","Quantum Computation (COMP0157)   Aims:  \n\n The aim of the module is to introduce the students to the principles of quantum mechanics from a computer science perspective, and to the field of quantum computation and algorithms. \n\n  Intended learning outcomes:   \n\n On successful completion of the module, a student will be able to: \n\n  Understand (i.e., be able to describe, analyse and reason about) quantum computation, and how it differs from classical probabilistic computation. \n\t Analyse the behaviour of simple quantum circuits. \n\t Understand how quantum superposition and interference can give quantum speedups over classical algorithms in certain cases and apply these concepts to the design of quantum algorithms. \n\t Derive the Quantum Fourier Transform, and apply it to the design of quantum algorithms \n\t Derive Grover\u2019s unstructured search technique and apply it to the design of quantum algorithms. \n   Indicative content:  \n\n The module provides a first course on quantum computation. The following is indicative of the topics the module will typically cover: \n\n The basic mathematical formalism of quantum mechanics is be introduced from a computer science perspective, assuming no prior knowledge of quantum mechanics or physics. Building on this, the module develops the standard circuit model of quantum computation and basic quantum complexity theory. Most of the module is devoted to quantum algorithms, including rigorous derivations and algorithm analysis. This section of the course starts from simple examples, and builds up to the major quantum algorithms, such as Shor\u2019s quantum factoring algorithm and Grover\u2019s unstructured search algorithm. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ","Quantum Information and Communication (COMP0196)   Aims:  \n\n In this module, students will develop their understanding of the fundamental concepts and techniques of quantum information science, building on those covered in Quantum Computation (COMP0157). The aims are to capacitate students to understand and reason with quantum mechanics, and to introduce the basics of quantum cryptography, fault-tolerant quantum computation and quantum communication networks. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand the mathematical structure of quantum mechanics and perform calculations with it. \n\t Analyze some of the building blocks of quantum information (teleportation, no-cloning, dense coding, and Bell inequalities) and understand the advantages that they provide over classical information. \n\t Analyze and prove the security of some quantum key distribution protocols. \n\t Analyze some quantum error correction codes and understand the basics of fault-tolerant quantum computation. \n\t Understand how to reliably send classical and quantum information through quantum networks. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Quantum mechanics. \n\t Quantum teleportation and dense coding. \n\t Quantum cryptography. \n\t Quantum error correcting codes. \n\t Quantum communication networks. \n   Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must: (1) be registered on a programme and year of study for which it is a formally available; and (2) have passed Quantum Computation (COMP0157) with a mark of 40% or greater.   "],"44":["Introduction to Cyber Physical Systems  \n \nThe aim of this module is to provide a broad understanding of the fundamental theories and techniques and introductory practical skills of cyber physical systems.Given that this is an emerging area, the module will use up-to-date literature to underpin the concepts and present the state of the art in developing physical and computational components and the intersection of these.\n \n   \n \n In this module you will gain a broad overview of the fundamental theories and techniques of cyber-physical systems. You will explore the architecture of cyber physical systems as a network of interacting elements with physical input and output and intelligent mechanisms, and develop an understanding of how to increase their adaptability, autonomy, efficiency, reliability, safety, and usability in different contexts of use.&nbsp; You will explore the various potential applications of cyber-physical systems including autonomous automotive systems, assistive robots to support health and well-being, medical monitoring and process control systems.  This is an interdisciplinary subject area and as such you will gain knowledge and understanding of the following topics: - Cyber-physical system architectures, standards and platforms &nbsp;(including design tools and methodologies that support scalability and complexity management through modularity) - Internet-of-Things networks, sensors and smart devices (including understanding state-of-the art technologies that are being used in various application areas)&nbsp; - Sensor data processing, modelling and management&nbsp; (including an overview of methods and algorithms for real-time feedback systems) - Pervasive computing and real-time automation and control (how sensor data can be used to generate control signals to actuators of the physical components of the cyber-physical system) - Principles of cyber security (Overview of aspects such as resilience, privacy, malicious attacks, as well as issues relating to safety and hazard analysis) - Application domains (eg. Industry 4.0, Healthcare, Robotics and Autonomous Systems \u2013 including Assistive Robots and Autonomous Automotive Systems, Smart Homes and Building Energy Management) \n \n   Knowledge and Understanding:  Students will acquire a broad understanding of the fundamental theories and techniques of cyber physical systems, including the various potential applications of cyber-physical systems in area such as healthcare, autonomous automotive systems, smart home and building automation and energy management. Intellectual Skills:  Students will learn to apply concepts, theories and techniques to critically evaluate and develop the various components of Cyber-Physical Systems. Professional\/Practical Skills:  Students will learn practical design and implementation skills and techniques to develop working Cyber-Physical Systems, particularly gaining hands-on skills with integrating Internet of Things sensors and actuators in demonstrator applications. Transferable\/Key Skills:  Programming, problem solving.","COMP4227: \nDistributed Network Computing and Algorithms  To introduce students to network based distributed computing paradigms  and algorithm design concepts.   \n\t\t\t To equip students with the ability to design and analyse efficient distributed algorithms and data structures.   Network abstracted as a graph.   \n\t\t\t Distributed computing models and analysis: LOCAL, CONGEST . . .   \n\t\t\t Fundamental and classic distributed algorithms: Flooding, Leader Election, etc.   \n\t\t\t Centralised to distributed via classic graph problems: Maximal Independent Set (MIS), Colouring, Matching, Minimum Spanning Tree (MST), etc.   \n\t\t\t (Advanced) Topics from the following:   \n\t\t\t (Secure) Computation despite faults: Fault-tolerant distributed com\u00acputation despite attacks and\/or edge\/node insertions\/deletions.   \n\t\t\t Byzantine fault-tolerance: Foundations of Blockchain\/Cryptocurrency.   \n\t\t\t Autonomous systems: Self-stabilization, Self-healing, Mobile robots.   \n\t\t\t Algorithm complexity and general design techniques: Network Decomposition and Graph Shattering.     On completion of the module, students will be able to demonstrate:   \n\t\t\t\t An understanding of computing, abstraction, and algorithms for networks and decentralised systems; \n\t\t\t\t An understanding of formal concepts for designing and analysing distributed algorithms; \n\t\t\t\t An understanding of fundamental distributed algorithms and distributed variants of classic graph problems; \n\t\t\t\t An understanding of advanced distributed concepts such as fault-tolerant algorithms.   ","Distributed Systems  \n \nTo teach students about the nature and applications of distributed systems, how distributed systems are constructed and the key characteristics and challenges of distributed systems.\n \n   \n \n This module is part of the Operating Systems and Networks theme. This module covers the following topics: overview of parallel and distributed computing; applications of distributed systems; fundamental concepts of distributed systems (processes and message passing, naming and discovery, fault tolerance and partial failure, consistency and cacheing, security); reliable network communication; distributed system design approaches (direct vs indirect communication, client-server vs peer-to-peer, stateful vs stateless interfaces); introduction to distributed data management; introduction to distributed algorithms. \n \n   Intellectual Skills  Think independently while giving due weight to the arguments of others. \t Understand complex ideas and relate them to specific problems or questions  Professional Skills  Evaluate approaches, technologies and algorithms for distributed systems, and select those which are fit for purpose within a given domain.  Transferable Skills  Solve problems. \t Retrieve information from appropriate resources (eg. learning resource centre, internet, etc.). "],"45":["Advanced Professional Software Engineering COMPSCI2025   This course is intended for Graduate Apprenticeship students only.   &nbsp;   After a year and a half with their employers, students will inherently have learned a lot about their workplace p  ractices and procedures. An earlier course (  Foundations of   Professional Software Engineering) has already developed the students' understanding of workplace practices. This course will return to many of these fundamental concepts and push students to think  &nbsp;more deeply about them, tying their year and a half of experience into reflection and discussion sessions. It will also include a significant team element to ensure that all students have had a breadth of team-working experiences   with their peers.     The aim of this course is to further develop a breadth of professional software engineering concepts which students have been exposed to in a previous course and the workplace. It will also give them the opportunity to show their ability to work as part of a functional team and plan a group project effectively.     By the end of this course, students will be able to:  &nbsp;    1.   Appraise workplace practices which they have encountered throughout their academic career  .  &nbsp;    2.   Evaluate leadership qualities in the workplace  .    3.   Assemble a significant piece of software as part of a team of peers  .  &nbsp;    4.   Assess team working practices in a team project of peers  .  &nbsp;    5.   Can break down and adequately estimate   the scale of   tasks  .  ","Industrial Experience  \n \nThe aim of the module is to accredit students that have experienced industry work involving independent self-management, proactive work and the ethical application of their knowledge and skills in areal worldcontext. Students collect evidence of their competence that they will use in their assessedportfolio, andmust reflect on their developed knowledge and understanding of applied software engineering practices in relation to other taught Software Engineering principles taught in their course.\n \n   \n \n Students taking part in activities relating to industrial experience in a Computer Science or Software Engineering enterprise may obtain academic credit for them. Activities will be related to demonstration of involvement in development of complex software in a team situation, subject to quality control procedures of an industrial or business practice. The module, therefore, accredits reflection on practical real-world experience of Software Engineering that cannot be taught with normal university lectures and assessments. The nature of the activities undertaken will be subject to the approval of the module convenor before acceptance on the module. Students must have gained their industry software experience prior to enrolling on the module. \n \n   Transferable, work-related and employability skills:  - knowledge of the language and culture of working environments; - career planning, including occupational awareness and judgement, awareness of work-related personal values, interests and skills, application and selection process skills; - skills and competences specific to Computer Science related roles; - practical skills appropriate to a discipline or profession; - professional communication skills (oral and written). Higher Skills:  - critical thinking and analysis; - project and personal management skills.&nbsp;","Professional Issues in the Workplace COMPSCI3012   This course is intended for Graduate Apprenticeship students only.   &nbsp;   By their third year, Graduate Apprentices will have gained significant experience of working as a Software Engineer. During their time in the workplace, they will have already encountered many of the ethical and social issues associated with professional Software Engineering. Drawing on this experience, and building on the material taught in years one and two, this course will allow apprentices to synthesise and evaluate what they have learned, while being exposed to an even broader range of issues via seminars and suggested readings. Acknowledging that apprentices will have encountered potentially quite disparate issues in their respective workplaces, the assessment of this course allows significant flexibility in the issues considered.     The aim of this course is to formalise and consolidate apprentices' understanding of ethical, social, and professional issues that relate to Software Engineering. The course also aims to develop apprentices' verbal and written argumentation skills, honing their ability to construct   well argued  &nbsp;and properly researched positions on issues encountered in their professional experience as Software Engineers. In addition, the course aims to develop apprentices' critical thinking skills by encouraging them to critically engage with the arguments put forward by others.     By the end of this course, students will be able to:    &nbsp;   1.   Explain the ethical and social issues they have encountered in the workplace.    2.   Apply relevant professional codes of conduct in the workplace.    3.   Analyse the ethical and social issues that relate to the profession of Software Engineering more broadly.    4.   Evaluate, synthesise and present arguments about issues related to Software Engineering.  "],"46":["CS459 - Digital Forensics The aim of the class is to enable participants to understand issues associated with the nature of cybercrime, digital evidence, detection methods and proof, in a variety of digital forensic contexts, including computers, networks and portable digital devices. Indicative topics&nbsp; Context, Legal and Practical Considerations&nbsp;  Cybercrime; Forensic process; Legal process and law enforcement; ACPO guidelines; Digital evidence; Incident response&nbsp;    Computer Forensics&nbsp;  File Systems (File system organisation, Memory, Registry, System logs); Disk imaging; Programs and their traces; Searching and analysis; Investigative tools (Open Source and Proprietary)&nbsp;    Network Forensics&nbsp;  Intrusion detection; Attack trace-back; Packet inspection; Log analysis&nbsp;    Anti-Forensics and Hostile Code&nbsp;  Other topics&nbsp;  Mobile devices, Virtual forensics&nbsp;    After completing this class participants will be able to:&nbsp; Understand the varieties and impact of cybercrime.&nbsp;  Understand how to undertake digital forensic examinations, where evidence is collected to support or oppose a hypothesis.&nbsp;  Understand the role of the file system in detecting and mapping user activity.&nbsp;  Understand network-based detection techniques.&nbsp;  Understand the nature of anti-forensics.&nbsp; ","Law Enforcement of Cybersecurity  \n This module aims to provide the student with the opportunity to utilise their skills and knowledge to enable them to gather and critically examine source data and intelligence gathered during a professional investigation and present findings within a court setting. \n To further develop the student\u2019s knowledge and practical skills in relation to professional investigation by critically analysing their investigation and exercising appropriate judgment by making professional policy decisions, underpinned with academic theory that would provide control and direction to the investigation. \n Develop student skills in more focussed research and presenting written communication. \n The module will progress to look at specialist network and forensic investigation used by the industry. \n The student will be able to critically examine relevant case law relating to Cybercrime and identify the implications for policing cybercrime. \n Introduce an understanding of the developments and implications of Artificial Intelligence in law enforcement. \n   \n This module builds upon modules CO4608 Cyber Legislation and Introduction to Professional Investigation module and CO5608 Conducting Cyber Investigations. \n The student will critically examine the investigative techniques and information associated with professional cybercrime investigation identifying the limitations and legislative restrictions. \n The student will understand and then conduct the role of the analyst in gathering information and intelligence during cybercrime investigations and then critically examine the data and present information in a manner that would stand robust scrutiny with the criminal justice system. \n The student will critically examine the case law surrounding cybercrime investigation and its application enabling specialist investigators to conduct professional investigations and present their findings. \n Students will be introduced to the latest developments and implications of Artificial Intelligence for Law Enforcement. \n  On completion students should be able to;  \n 1. Gather available intelligence and evidence from a case study and critically examine the data, making and recording professional policy and investigative strategy to direct the cybercrime investigation. \n 2. Present finding from the analysis of the data in oral tribunal and answer questions under cross examination \n 3. Review case law and its application in relation to cybercrime investigations. \n 4. Show an understanding of the development and implications of Artificial Intelligence in law enforcement.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ","Conducting Cyber Crime Investigations  \n To provide students with the knowledge, understanding and practical skills to plan, prepare and conduct interviews with witnesses to Cyber Crime and to achieve best evidence in Cyber Crime investigations. \n To give students opportunities to use and develop their skills, to exercise appropriate judgment in making professional decisions underpinned with academic theory and to record and present rationale and evidence that would withstand scrutiny in the criminal justice system. \n To broaden the student\u2019s skills to effectively investigate the Internet and to understand how intelligence can be acquired, submitted and used in cyber investigations. \n To introduce the development of Artificial Intelligence and its application by Law Enforcement and Criminal Justice Agencies. \n  This module will have an underlying theme on investigative interviewing with both victims and witnesses as part of a serious and complex cybercrime investigation.&nbsp; It&nbsp;involves;  \n \n The Investigatory Mind-set and recording rational. \n Core Investigative Doctrine. \n Decision Making (National Decision Making Model) in the criminal investigation. \n Investigating the Internet and the use of open source research. \n Introduction of role &amp; impact of Artificial Intelligence in Policing \n Understanding and investigating the dark web. \n Intelligence and the National Intelligence Model. \n The Regulation of Investigatory Powers Act 2000 (RIPA). \n The role of communications data within the cyber investigation. \n Enhanced and practical application of ACPO Good Practice and Principles for Digital Evidence. \n Enhanced and practical application of methodology and good practice relating to Cyber Crime Scene Investigation. \n The PEACE Interview Framework. Planning and preparation for interviews with victims of Cyber Crime, identifying the requirements of relevant others including prosecutors and the court. \n Understanding the purpose of the Achieving Best Evidence Guidance. \n Presenting evidence in criminal proceedings and the role of the expert witness and defence. \n Students will be introduced to the latest developments and implications of Artificial Intelligence for Law Enforcement. \n  On completion students should be able to;  \n \n Make sound decisions and record rationale underpinned with academic theory in relation to Cyber Crime investigations. \n Demonstrate an understanding of interview techniques used to gather information and evidence from victims and witnesses. \n Demonstrate application of good practice and legislative requirements in relation to the seizure of and presentation of digital evidence. \n To demonstrate an understanding of how social media and other open source information can be used in a cybercrime investigation. &nbsp; &nbsp; &nbsp; \n Produce investigative and forensic strategy, policy and rationale. \n Demonstrate an understanding of how RIPA impacts upon the cybercrime investigation. \n Demonstrate an understanding of the implications to Law Enforcement and the criminal justice system with the development of Artificial Intelligence. \n "],"47":["   ","   ","Industry and Community Engagement  This unit capitalises on the uniquely vibrant technology community in Manchester, challenging you to curate a portfolio of professional interests within the field by engaging with the local tech community at various events. Through self-reflection, you will develop new interests, and learn to see your course in a wider technological, social and ethical context.   "],"48":["CSY1082 \u2013 Database Design for Computer Games  Description:  In this module students apply the principles of database integrity to the design and development of database structures for computer games. Students apply data modelling techniques to establish, modify and maintain database integrity and data structures, using industry software and languages such as MySQL and Structured Query Language (SQL) PHP.  ","CSY2093 \u2013 Object-Relational Databases  Description:  The purpose of this module is to develop the fundamental concepts and skills of Entity Relational Models (ERMs) and Structured Query Language (SQL).  It introduces extended-relational databases; user-defined types, their practical creation, application along with valuable data extraction methods to provide intelligence and database programming (PL\/SQL).  ","CSY2038 \u2013 Databases 2  Description:  The purpose of this module is ?To develop the fundamental concepts and skills of Entity Relational Models (ERMs) and Structured Query Language (SQL).  It focuses on the key areas of extended-relational databases; user-defined types, their practical creation, application along with valuable data extraction methods to provide intelligence.  Database programming (PL\/SQL) is introduced.  The module employs industry standard software to achieve the maximum economic saleability.  "],"49":["Artificial Intelligence   Summary module description:   \n  The main goal of this module is to familiarise students with fundamental methods in Artificial Intelligence such as supervised, unsupervised, reinforcement and deep learning. The students will learn how to apply these methods to real-life problems.  \n \n The module aims to provide students with theoretical and practical knowledge of Artificial Intelligence from various techniques and applications.  \n     Outline content:   \n   \n Nature and goals of artificial intelligence, its application areas  \n Training machine learning models  \n Natural language processing  \n Image processing  \n Deep learning  \n Reinforcement learning  \n  \n     Assessable learning outcomes:  \n  By the end of the module, students should be able to:  \n \n  \n understand the basic algorithms and techniques of artificial intelligence;  \n apply state-of-the-art artificial intelligence algorithms and methods to real-world problems to create a small-scale AI project.  \n  \n  ","Artificial Intelligence and Machine Learning This module covers the fundamental concepts, theory and techniques that enable artificial intelligence (AI). It focuses on the history, basic and advanced methods of AI and their practical uses in today's society and businesses. Students will learn the role of machine learning and deep learning in modern AI and will apply and implement traditional and modern AI methods based on real world examples. By the end of this module students will have gained an advanced understanding in the core concepts of AI and are able to determine whether a problem-solving approach using AI is appropriate, how to implement it and then evaluate it efficiently using local as well cloud-based tools.  1.Introduction, history, and basic concepts in AI 2.Intelligent agents, problem solving, search methods 3.Machine learning: introduction, features, tasks, traditional and modern machine learning models 4.Types of machine learning (supervised, unsupervised, semi-supervised), generalization, transfer learning, active learning, ensembling 5.Tools, programming languages, libraries and hardware for AI and machine learning 6.Deep learning: loss functions, optimization, backpropagation, and neural networks 7.Training neural networks: activation functions, hyperparameters, training procedures, learning rates, augmentation 8.Reinforcement learning 9.Machine learning pipelines 10.Applications and modern examples or AI: machine vision, natural language processing, data mining, robotics) 11.Ethics and bias in AI      On successful completion of the module, the student should be able to:  1. Demonstrate in-depth knowledge of the concepts, requirements and principles of artifical intelligence and machine learning. 2. Develop approaches that apply AI principles, algorithms and models for problem solving. 3. Demonstrate proficiency in implementing AI solutions using relevant programming languages and tools. 4. Demonstate a detailed understanding of the classical and modern techniques of AI. 5. Demonstrate a detailed understanding of how AI applications can be used to add value to businesses and society. 6. Critically appraise the shortcomings and ethical issues of AI.    ","LM Neural Computation (Extended) This module introduces the basic concepts and techniques of neural computation, and its relation to automated learning in computing machines more generally. It covers the main types of formal neuron and their relation to neurobiology, showing how to construct large neural networks and study their learning and generalization abilities in the context of practical applications. It also provides practical experience of designing and implementing a neural network for a real world application.  By the end of the module students should be able to:   Understand the relationship between real brains and simple artificial neural network models   Describe and explain some of the principal architectures and learning algorithms of neural computation    Explain the learning and generalisation aspects of neural computation\t    Demonstrate an understanding of the benefits and limitations of neural-based learning techniques in context of other state-of-the-art methods of automated learning\t    Apply neural computation algorithms to specific technical and scientific problems    "],"50":["Computational Thinking and Mathematics  This module introduces students to fundamental concepts of problem-solving, algorithms and data structure. It explains how algorithms and data structure can be integrated to construct solutions that can be applied to resolve complex computational tasks. Classic puzzles and recreational games will be used to demonstrate the fundamental building blocks of algorithms. Knowledge of design principles and proficiency in creating algorithmic procedures is developed by cultivating an ability to think computationally in solving puzzles and creating routines for playing simple, computer-enabled games. Assessment for the module will require students to build a portfolio of artefacts demonstrating their knowledge and ability to apply computational thinking principles to problem-solving and the design of algorithmic solutions. This may involve designing and implementing suitable algorithms and data structure for solving a puzzle or implementing a simple board game.   ","Linear and Discrete Optimization  \n \nTo develop an understanding of linear and discrete optimization, one of the most important areas within operations research. To develop the skills for modelling a range of optimization problems in business and industry using mathematical models. To implement those mathematical models using algebraic and spreadsheet optimization solvers in order to obtain solutions to the corresponding optimization problem. To develop skills for identifying, analyzing, modelling and solving real-world linear and discrete optimization\n \n   \n \n The module provides an entry point to computational optimization techniques, in particular for modelling and solving linear and discrete optimization problems like diet optimization, network flows, task assignment, scheduling, bin-packing, travelling salesmen, facility location, vehicle routing and related problems. Computational optimization is one of the most important areas within operations research (OR), which is a discipline that uses modelling techniques, analytics and computational methods to solve complex problems in industry and business. In this module you will learn to interpret and develop algebraic models for a variety of real-world linear and discrete optimization problems to then use powerful optimization software (linear, integer and mixed-integer solvers) to produce a solution. The module covers topics such as linear programming, integer programming, combinatorial optimization, modelling and optimization software, and multi-objective optimization among others. Optimization technology is ubiquitous in today's world, for applications in logistics, finance, manufacturing, workforce planning, product selection, healthcare, and any other area where the limited resources must be used efficiently. Optimization enables prescriptive analytics in order to support and automate decision-making. You will spend around four hours per week in lectures and workshops for this module. \n \n   Knowledge and Understanding:  Linear and discrete optimization from the computer science and mathematical perspectives; \t Algebraic models for linear and discrete optimization problems; \t Post-optimality analysis; \t Simplex method and Branch and Bound algorithm. \t&nbsp;  lntellectual Skills:  Analytical methods; \t Ubiquitous nature of optimization. \t&nbsp;  Professional Practical Skills:  Use of algebraic and spreadsheet optimization software; \t Solution of real-world optimization problems in a range of applications. \t&nbsp;  Transferable Skills:&nbsp;  Problem solving; \t Communication skills; \t Computer-based solutions and mathematical skills. \t&nbsp; ","Constraint Programming (M) COMPSCI5006   We cover Constraint Programming and its use in solving a number of combinatorial problems.  We also c  over the underlying technology, and related combinatorial optimisation approaches.     To enable students to implement constraint programming solutions to a number of combinatorial problems using a state of the art constraint programming toolkit.   To give students a critical appreciation of the fundamental concepts of constraint satisfaction and constraint programming  , and the ability to compare to related search approaches.   To give the student an appreciation of, and exposure to, commer  ci  al applications and the research directions in constraint programming.   To understand the basic mechanics of a constraint programming toolkit (such that they might implement such a toolkit).     By the end of this course students will be able to:    1: Model complex problems (such as scheduling problems, design and configuration problems) as constraint programs, using a state of the art constraint programming toolkit;    2: Implement the algorithms for achieving constraint propagation, and critically appreciate the costs and benefits of different levels of consistency;    3: Demonstrate extensive, detailed and critical knowledge and understanding of constraint satisfactio  n  &nbsp;from a theoretical point of view  , and be able to compare to other combinatorial approaches  ;    4: Implement, the search algorithms typically used in constraint programming;    5: Use various variable and value ordering heuristics;    6: Discuss current issues and research direction in constraint programming.  "]}}