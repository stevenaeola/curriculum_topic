{"Topic":{"0":-1,"1":0,"2":1,"3":2,"4":3,"5":4,"6":5,"7":6,"8":7,"9":8,"10":9,"11":10,"12":11,"13":12,"14":13,"15":14,"16":15,"17":16,"18":17,"19":18},"Count":{"0":81,"1":269,"2":78,"3":71,"4":61,"5":55,"6":50,"7":47,"8":35,"9":35,"10":34,"11":32,"12":30,"13":27,"14":26,"15":20,"16":14,"17":13,"18":12,"19":12},"Name":{"0":"-1_data_science_techniques_module","1":"0_project_software_research_students","2":"1_systems_operating_computer_networks","3":"2_security_quantum_cryptography_cyber","4":"3_programming_language_languages_objectoriented","5":"4_algorithms_complexity_structures_problems","6":"5_interaction_mobile_user_design","7":"6_description_games_game_3d","8":"7_ai_learning_intelligence_artificial","9":"8_database_databases_relational_sql","10":"9_description_module_purpose_development","11":"10_vision_image_computer_3d","12":"11_learning_machine_neural_data","13":"12_text_retrieval_language_processing","14":"13_data_calculus_linear_mathematics","15":"14_data_visualisation_science_techniques","16":"15_web_applications_development_application","17":"16_game_games_engine_design","18":"17_functional_programming_type_languages","19":"18_big_data_cloud_processing"},"Representation":{"0":["data","science","techniques","module","programming","systems","students","analysis","applications","learning"],"1":["project","software","research","students","skills","work","science","development","professional","year"],"2":["systems","operating","computer","networks","network","memory","architecture","hardware","networking","understanding"],"3":["security","quantum","cryptography","cyber","secure","attacks","cryptographic","students","authentication","privacy"],"4":["programming","language","languages","objectoriented","programs","java","object","using","design","code"],"5":["algorithms","complexity","structures","problems","logic","computation","abstract","theory","mathematical","data"],"6":["interaction","mobile","user","design","hci","humancomputer","interactive","systems","ubiquitous","evaluation"],"7":["description","games","game","3d","module","2d","students","skills","digital","animation"],"8":["ai","learning","intelligence","artificial","search","intelligent","agents","reinforcement","planning","problems"],"9":["database","databases","relational","sql","data","query","systems","design","management","information"],"10":["description","module","purpose","development","develop","systems","design","students","software","modern"],"11":["vision","image","computer","3d","rendering","graphics","geometry","module","processing","techniques"],"12":["learning","machine","neural","data","methods","regression","deep","algorithms","ml","networks"],"13":["text","retrieval","language","processing","information","recommender","models","course","natural","nlp"],"14":["data","calculus","linear","mathematics","probability","methods","statistical","mathematical","algebra","statistics"],"15":["data","visualisation","science","techniques","visualisations","analysis","information","tools","visualization","using"],"16":["web","applications","development","application","technologies","distributed","css","design","serverside","create"],"17":["game","games","engine","design","development","industry","creation","skills","multiplayer","environments"],"18":["functional","programming","type","languages","types","lambda","semantics","haskell","advanced","calculus"],"19":["big","data","cloud","processing","nbspnbspnbsp","distributed","systems","computing","scale","datasets"]},"Representative_Docs":{"0":["Foundations in Software Development  \n \nThis teaching block aims to introduce the basics of software development aimed at a learner who has little or no previous experience. It will show learners the basic principles of coding and will give the technical skills for them to break down simple problems and produce solutions to them using software. The focus will be on software that processes data and applies mathematical and data science techniques.\n \n   \n \n Indicative content:  Creating a basic program from writing it to compiling and running it Reading \/ Writing data to \/ from a file Storing and manipulating variables Using fundamental control structures Decomposing problems and using functions and libraries Basic testing and debugging Handling strings and basic text mining \n \n  Can use appropriate tools to write simple programs which solve a problem, especially a data science problem. &nbsp;Understands and can use basic procedural control structures and programming operators to implement simple algorithms. &nbsp;Can store and manipulate different types of data (for example numerical, textual, lists, sets, maps). &nbsp;Can produce simple visualisations of data using simple programming constructs. &nbsp;Understands the need for software testing and can demonstrate basic software testing principles in practice. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;","Introduction to Software Development for Data Science  \n \n\u2981 To introduce the principles, techniques and applications of a range of data analysis and modelling techniques.\u202f\u2981 To enable the\u202fapprentices\u202fto appreciate some of the most widely used data analysis and modelling techniques and to know which one to choose for their applications.\u202fTo enable the\u202fapprentices\u202fto understand and be able to put into practice computer-based data analysis and modelling techniques\n \n   \n \n This module builds on learners understanding of the basic principles of programming and algorithms and&nbsp;addresses some of the key concepts required for data management, and data analytics.&nbsp;  Learners will acquire a practical understanding of how to access, query and manage data, using traditional relational databases and contemporary NoSQL approaches. Using real-world datasets, standard software packages and data\u202fvisualisation\u202ftechniques,\u202fapprentices\u202flearn how to\u202forganise\u202fand\u202fanalyse\u202fdata to answer questions about the world, as well as developing an appreciation of user needs surrounding data systems.\u202f&nbsp;  Indicative topics covered\u202finclude: data ingress; data modelling; data pre-processing methods including data imputation; forecasting methods; clustering and classification. \n \n  Understand and logically evaluate program requirements and specifications.&nbsp; &nbsp;Understand the complex ideas of programming solutions and relate them to&nbsp;particular problems.&nbsp;&nbsp; &nbsp;Design and&nbsp;analyse&nbsp;simple algorithms and data structures.&nbsp;&nbsp;Read, clean and analyse different kinds of data from different sources to produce data science solutions. &nbsp;Apply appropriate software development methods and tools.&nbsp; &nbsp; KSBs K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 1.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 2.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 3.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions. B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;","AI and Machine Learning  \n \nTo give an understanding of contemporary artificial intelligence (AI) and machine learning (ML) methods.To develop skills in the practical implementation of AI and ML methods.To learn how to choose which methods to apply to a specific problem, and how the methods can be applied to solve practical problems in data science.To enable apprentices to apply data mining techniques on real data sets, some of which can be described as big data sets. Apprentices will also learn to appreciate both the potential and limitations of big data.\n \n   \n \n This module gives brief introductions to a range of Artificial Intelligence and Machine Learning techniques.&nbsp; The module will cover the history of AI and techniques such as local search techniques, evolutionary algorithms, neural networks and deep learning.  It will prepare learners for further independent work on selecting appropriate techniques and developing their understanding and application of AI and ML techniques in practice. \n \n  Understand key concepts of artificial intelligence and machine learning.Be able to apply a range of artificial intelligence and machine learning techniques to data science problems.Independently and systematically design, develop and test software as part of non-trivial data science problem.Be able to implement AI techniques using languages and systems used in the contemporary workplace. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; Data processing and storage, including on-premise and cloud technologies. \t Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. \t Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: Statistical and mathematical models and methods. &nbsp; \t Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t Applications such as computer vision and Natural Language Processing. \t An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;"],"1":["MSci Group Programming Project  \n \nTo allow students to get an in-depth understanding of a chosen area of Computer Science along with practical experience from developing a challenging piece of software in a group in that area.To allow students to develop their team working skills.To prepare students for future academic or industrial careers around software development.To develop students' research, planning, organisation, presentation and scientific writing skills.\n \n   \n \n Students undertake a programming project for an External Client in self-formed groups of two to four students under the supervision of an academic member of staff. The client, which can be a company, charity, research group etc., provides a problem that requires a sufficiently challenging piece of software to be developed.  The client and project idea could be provided by the students or the supervisor. However, projects must have aspects that are relevant to each student's programme of study; e.g., there needs to be an Artificial Intelligence (AI) aspect if any AI students are involved.  Each project must ultimately be agreed with the concerned Supervisor and Course Director. The main assessed outputs are the developed software, including any end-user documentation, along with a 15,000 word document that outlines the development, design and implementation of the software, highlighting the most interesting aspects. The software must be developed in a professional and systematic manner appropriate for the problem domain.  The assessment is informed by a statement from the External Client (if there is any) on how well the developed software addresses the problem. Additionally, the report should explain each student's individual contributions, reflections and giving a critical appraisal of how the project went, including group dynamics. \n \n   Knowledge and Understanding : Programming projects may arise from any area of the curriculum and so may address any of the knowledge and understanding outcomes. Intellectual Skills:  Clear and logical thinking. Understanding complex ideas and relate them to specific problems or questions. Acquiring and systematically analysing substantial quantities of information. Thinking independently while giving due weight to the arguments of others. Depending on the specific project, other intellectual skills may also be addressed. Professional Skills  Development skills approaching professional standards, including coding, testing, debugging and use of appropriate tools such as version management systems. Work effectively and ethically with others. Programming projects may arise from any area of the curriculum and so may address further professional skills outcomes. Transferable Skills:  Analytical and problem-solving ability. Obtaining and critically analysing information from scientific literature, including system and library documentation. Devising and carrying out a complex project to meet specific objectives as a team. Time management, including scheduling tasks and meeting deadlines. Work productively in a collaborative environment. Communicating complex ideas and information in writing and orally. Confidence in public speaking. Reflect upon and assess own performance as well as that of others.&nbsp;","Work-Based Project (Assessment)  \n \n\n \n   \n \n This is the capstone project of the Data Science degree.&nbsp; It is a requirement that this is a work-based project which must be completed prior to the Gateway Review.&nbsp; The project will not include a dissertation, as a separate project report must be delivered by the learner as part of the End Point Assessment.&nbsp; Instead, the assessment will be based on a portfolio of project related artifacts.&nbsp; Learners should consult the relevant project brief each academic year, but an indicative set of deliverables is:   Outline Project Agreement  \u2013 An agreement between the learner, the university and employer which i) identifies clear organisational needs, ii) scopes the project and ensures that learner has access to necessary system, data, tools and computer services to complete the project and allows achievement of the necessary KSBs.&nbsp; &nbsp;   Ethical and Legal Assessment  \u2013 Following initial agreement for the project, undertake a review of any legal and ethical considerations, including consideration of local company regulations, and university ethics guidelines.   Initial Project Plan  \u2013 A suitable plan such as a Gantt Chart, or set of User Stories for delivery of the project.   Software Deliverable  \u2013 Evidence of a software that has been designed and delivered, with evidence of progress shown in a suitable software repository.   Reflective Log  \u2013 A weekly, electronic log documenting the progress of the project including design decisions made, problems encountered, reviews against plan and agreed changes to the scope.   Presentation  \u2013 A demonstration of the data science solution, and delivery of findings from the data analysed that meet organisational needs.   KSB Review  \u2013 An evaluation to clarify which KSBs have been met through the project completion.  There is an explicit requirement for learners to undertake a project within the workplace as part of their role (on-the-job and off-the-job) \n \n  Be able to plan and manage a significant work-based, data science project.Can identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data.Can apply knowledge of legal and ethical issues in relation to a data science problem including understanding the limitations of any techniques used.Can communicate effectively through written work and through effective presentation of results.Demonstrate a comprehensive understanding of current and developing data science approaches and apply them where appropriate. KSBs  Knowledge A Data Scientist must understand:K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems.K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.)K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data.  Skills A Data Scientist is able to:S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. Behaviours  &nbsp;A Data Scientist demonstrates:S1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.S2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.S3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.S4. Consideration of problems in the context of organisation goals.S5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.S6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.","Project Support  \n \nThis teaching block will enable apprentices to successfully undertake a critical exploration of what skills are required to complete a successful data science project. It introduces the concepts of project planning, writing and communication supported through online workshops and individual supervision tutorials.\n \n   \n \n This teaching block provides apprentices with an opportunity to develop independent planning and research abilities synthesising and further developing their project planning and writing skills previously gained in the programme. &nbsp;  It will allow apprentices to critically analyse and understand the nature of project planning using appropriate tools and methods. It will also allow apprentices to critically analyse research\/business problems and propose appropriate research strategies\/methods for successfully completing a data science project. Content will be supported through online workshops and individual supervision tutorials. Group online sessions will provide opportunities for formative assessment of progress and sharing of ideas within a team environment. \n \n  Teaching Goal 1Be able to plan and manage a significant work-based, data science project.Teaching Goal 2Can demonstrate independent research skills, identify suitable questions and hypotheses which will be addressed by a data science solution, and can link these to improving organisation outcomes.Teaching Goal 3Demonstrate communicate skills through a formal technical report\/poster\/oral presentation.Teaching Goal 4Can communicate effectively through written work and through effective presentation of results. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B4. Consideration of problems in the context of organisation goals.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner."],"2":["Networks and Operating Systems Essentials 2 COMPSCI2024   The co  urse will introduce students to essential topics in computer networks and operating systems. It has a focus on the underlying concepts, design, and operation of the Internet, and on the   role,   basic features  ,  &nbsp;and principles of computer operating system  s  .  &nbsp;     To introduce students to essential topics in computer networks and operating systems.   &nbsp;   The course   aims to give  &nbsp;an overview of how the Internet works, and the difference between the Internet and the World-Wide Web. It introduces the basic principles of networked systems, the concept of a protocol, and the importance of layering in the design of the network. It discusses how systems are connected together to form a network; how networks are connected together to form an internet; and how data is reliably delivered across the Internet. The web protocols, and HTTP, are briefly introduced, as an example of the type of application that can run on the Internet.    &nbsp;   In addition, the course aims to present the abstractions that underlie traditional operating systems, and to sketch basic implementations for key components including process scheduling, memory management and file systems. Students should gain an awareness of implementation trade-offs and corresponding impacts on system behaviour.     By the end of this course students will be able to:    \u25a0&nbsp;  Understand the principles underlying networked systems, such as the Internet, including the importance of layering in protocol design  ;    \u25a0&nbsp;  Describe the key features of a local-area network technology, such as Ethernet  ;    \u25a0&nbsp;  Explain the concept of internetworking, and how the Internet is built as a network of networks; describe key features of the network layer  ;    \u25a0&nbsp;  Describe what is meant by a best-effort service, and explain why the Internet offers such a service; discuss how the transport layer can enable reliable connections on this substrate  ;    \u25a0&nbsp;  Understand the difference between the Web and the Internet, and be able to describe, in outline, the operation of HTTP  ;    \u25a0&nbsp;  Be familiar with issues around privacy and security of Internet traffic  ;    \u25a0&nbsp;  Use appropriate terminology in correctly explaining the functions of an operating system  ;    \u25a0&nbsp;  Contrast the low-level hardware facilities (e.g., physical memory frames) with the higher-level abstractions provided by an operating system (e.g., virtual memory pages).  ;    \u25a0&nbsp;  Evaluate the relative merits of a range of simple resource allocation algorithms (e.g., for process scheduling)  ;    \u25a0&nbsp;  Implement simple operating system components and basic algorithms (  e.g.,  &nbsp;scheduling, free space management)  ;    \u25a0&nbsp;  Knowledge and understanding of privacy and security issues of Internet traffic  ;    \u25a0&nbsp;  Recognise risk\/safety for safe operation of computing systems at the operating system level  .  ","Operating Systems and Hardware To gain a knowledge and understanding of&nbsp;how various software and hardware components interact to produce working computer systems.  \n To gain an understanding of the fundamentals of networking\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n Computer architecture \n State machines \n Basic computing mathematics - binary and hexadecimal number systems; simple uses of binary\/hexadecimal; basic probability and random numbers \n Computer systems components, data representation, fetch-execute cycle, logic gates and Boolean algebra, how computer systems work, interrupts and Input\/Output \n Levels and types of software, memory and secondary storage, operating systems (local and network), user interfaces, process management, memory management, file management \n Computer performance, modern computer systems and concepts \n Foundations of networking (Routing,&nbsp;IP Addressing, Network topologies, OSI model, TCP\/IP) \n Network traffic, packets, headers, encapsulation \n Virtual Private Networks \n  On completion of this module, the student will be able to:  \n \n Describe the various software and hardware components that make up a stand-alone computer. \n Demonstrate an understanding of computer file management, interrupts handling, operating systems, computer performance and modern computer systems. \n Demonstrate an understanding of how hardware and software components interact to provide a working computer system (Stand-alone). \n Correctly use basic computing mathematics. \n Describe the fundamental components of a network \n ","CS106 - Computer Systems &amp; Organisation  Semester 1:  to enable the student to develop an understanding and appreciation of a computer system\u2019s functional components \u2013 both hardware and software, their characteristics, their interactions, and their fundamental role in the manipulation of data. Semester 2:  to further the student\u2019s knowledge of the design parameters of a typical computer system and the impact these have on the functionality, and implementation, of the hardware and software components.  Semester 1:  Machines and Computation: Brief history of computers and the nature of computation, e.g. how arithmetic expressions are evaluated.  Introduction to Operating Systems: brief history, role and purpose, basic functionality and operation, the tradeoffs in operating systems design, the influences of different computer systems and environments, security and open source software on operating system design.  Introduction to Net-centric computing: brief history and the development of the Internet, the range of specialisations within net-centric computing, emerging technologies and their capabilities, limitations and near-term potential.  Introduction to a simple computer: CPU basics and organisation (registers, the ALU, the Control Unit and datapath); the bus; clocks; I\/O; memory; interrupts).  Basic Functional (Hardware) Components of Computer Systems: for example, CPU, memory, I\/O, networks.  Basic Functional (Software) Components of Computer Systems: for example, assemblers, compilers, and operating systems.  Elementary assembly language programming: simple computations involving loops, counters, and accumulation; awareness of bugs.  Representation of numeric data: unsigned binary, signed magnitude, and twos complement, floating point; twos complement arithmetic; range, precision, and errors in floating point arithmetic.  Representation of text, audio, and images; issues associated with compression and communication, e.g. how JPEG works and when it doesn\u2019t; Huffman coding.  Function of logic gates; sum of products expressions, Boolean algebra, combinatorial and sequential logic circuits, for example those for multiplexers, adders, registers, shift registers, counters, overflow detection; PLAs.  Semester 2:  Introduction to instruction set architecture, micro-architecture and system architecture.  Processor instruction set architecture: instruction types and formats, register sets, addressing modes.  Processor structures: memory-to-register architectures; load\/store architectures; overview of Flynn\u2019s classification of computer architectures.  The relationship between low-level and high-level programming languages.  Instruction sequencing, flow-of-control, subroutine call and return mechanisms.  Low-level architectural support for high-level languages.  Low-level architectural support for operating systems.  Low-level architectural support for concurrency.  Memory: types of memory, overview of the memory hierarchy.  Input\/Output: types of I\/O; overview of common I\/O devices and interfaces.  Networks: types of network; overview of common network standards, protocols, and interfaces.  Current and future trends in computer systems: an overview of the current trends in state-of-the-art computer systems and an extrapolation of these (in an attempt) to predict future developments.  On completion of the first half of the class, a student should have developed an understanding of: The function and basic operation of the fundamental hardware components of computer systems.  The function and basic operation of the fundamental software components of computer systems.  The hierarchy of, and the interaction between, the components of a typical computer system.  The concept of a logical layer and the benefits of building abstract layers in hierarchical fashion.  The need for APIs and middleware and how computing resources are used by application software and managed by system software.  The evolution of early networks and the Internet and the structure of a typical, current, network architecture.  The concept of an instruction set architecture (ISA), and the nature of a machine-level instruction in terms of its functionality and use of resources (registers and memory).  The various classes of instruction: data movement, arithmetic, logical, and flow control; their use and abuse in simple programs.  The typical types of data\/number\/information representations and the implications of these for calculations and transformations.  Boolean functions and logic expressions and their implementation in digital logic gates, and combinational and sequential circuits. On completion of the second half of the class, a student should be able to: Demonstrate their knowledge of data\/number\/information representations and the limitations of such representations.  Appreciate how a CPU may be constructed from combinational and sequential logic circuits.  Understand the relationship between instruction set architecture, micro-architecture, and system architecture and their roles in the development of the computer.  Understand the differences between the two main types of instruction set architecture and be aware of the major strengths and weaknesses of the alternative types of ISA.  Appreciate how conditional operations are implemented at the machine level.  Understand the way in which subroutines are invoked, how their parameters are passed and how their local workspace is created and accessed, and how they return to the point of invocation.  Appreciate how an ISA has an impact on high-level languages and the design of compilers.  Understand the basic principles of operation of the memory, I\/O and network subsystems of a typical computer.  Appreciate how future developments in computer systems may be influenced by current trends and technologies. "],"3":["Undergraduate Course: Computer Security (INFR10067) Computer Security is concerned with the protection of computer systems and their data from threats which may compromise integrity, availability, or confidentiality; the focus is on threats of a malicious nature rather than accidental. This course aims to give a broad understanding of computer security. Topics include security risks, attacks, prevention and defence methods; techniques for writing secure programs; an overview of the foundations for cryptography, security protocols and access control models. \n \n ***This course replaces INFR10058 Computer Security (10 credits).*** The goal of this course is to introduce students to fundamental security concepts and offer them working knowledge of threats and counter-measures. \n \nThe topics covered in the course are: \n-  Introduction:   fundamental  concepts,  access  control  models,  threat modelling.  \n-  Network security: basic networking concepts, DoS, Transport layer security, Link layer security, DNS attacks, Firewalls, Intrusion detection. \n-  Usable  security:  basic  human  factors,  warning  design,  phishing,  authentication, device authentication. \n-  Cryptography:   symmetric  ciphers,  asymmetric  ciphers,  MACs  and hash functions, digital signatures. \n-  Cryptographic protocols:  identification, authentication and key agreement, SSL\/TLS, anonymity protocols, TOR. \n-  OS security:  OS concepts, memory and file system, access control, file permissions, memory safety, stack-based buffer overflows. \n-  Malware:  viruses, trojan horses, worms, rootkits. \n-  Web security: WWW basics, client-side attacks, session hijacking XSS, CSRF, defences, server-side attacks, SQL injection, RFI, LFI. On completion of this course, the student will be able to:\n     \n         describe common security threats against computer systems, and identify appropriate mechanisms to address them.  explain techniques and design principles that underlie the common mechanisms for protecting the security, privacy, and trust of computer systems and networks.  complete a basic security analysis of computer systems or networks.  independently collect, filter out, and contextualise information about security vulnerabilities and their mitigations. \n     ","Security (COMP0141)   Aims:  \n\n The module aims at giving students a foundation in computer security, cryptography and human aspects of security. After taking the module students should be able to identify risks and security sensitive aspects of systems, where a system can range from a small and simple solution for a specific task to a full organisation including IT infrastructure and users. They will be taught this from the experience of how systems have failed in the past and by analysing systems from an adversarial viewpoint. \n\n Students should also know core defensive techniques to prevent or mitigate attacks. They should be able to formulate a threat model for a system and reason about whether it is secure or insecure, Students should be able to deliver effective security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand how to formulate a threat model including the assets to be protected, the capabilities of the adversary, and reason about whether the probability the adversary may succeed. \n\t Know core cryptographic methods to protect communication such as message authentication codes, digital signatures, encryption, and key exchange. Understand the security guarantees cryptographic tools provide and conversely how inappropriate use lead to vulnerabilities. \n\t Understand key principles and concepts related to computer and systems security. Understand the complexities of building flexile and correct access control and authentication systems, from a technical and HCI perspective. Recognize and exploit common security vulnerabilities on hosts and networks. \n\t Know that security involves people, processes and technology. Understand how security needs to fit with business goals and organisational processes to work effectively&nbsp;rather than disrupt, create friction, and drain resources. \n\t Know the basics of how to influence and manage security behaviours of a range of organisational stakeholders, employees, managers, developers, security specialists. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n The module gives students a foundation in computer security, cryptography and human aspects of security. Students will study attacks against system and analyse systems from an attacker\u2019s perspective. The module will also cover core defensive techniques and develop threat models that can be used to analyse the security of a system. The module studies specific cryptographic systems, core computer security, and security for real-world environments: how to design and manage security in organisations to effectively protect them. \n\n  Requisites:  \n\n To be eligible to select this module as an optional or elective, a student must be registered on a programme and year of study for which it is a formally available.   ","Cyber Security  \n \nTo develop an understanding of the nature and scope of the cyber security and its relevance in protecting data confidentiality, integrity and availability across a range of devices, systems and networks. To understand the nature of attacks and vulnerabilities in principle and in existing systems. To develop core skills to select, apply and implement security controls necessary for the security of a system. To recognise and evaluate the organisational and human impacts of cyber security, and the related impacts of technology choices and decisions in these contexts.\n \n   \n \n Cyber security is an essential consideration for the protection of IT-based devices, systems, networks and data, providing safeguard and reassurance to the organisations and individuals that rely on them. We provide coverage of both technical and human\/organisational perspectives. Students gain an understanding the principles of cyber security, including attacks, vulnerabilities and secure designs. You will gain knowledge and practical experience across a range of key cyber security topics, including foundational concepts and principles, access control, device and system security, authentication, cryptographic mechanisms and applications, network and Internet security, security management, risk assessment, cyber-attacks and threat intelligence, intrusion detection and incident response, and human aspects. You will learn about the challenges and attacks that need to be considered when designing and implementing secure systems, along with associated approaches to ensure that security is addressed appropriately.&nbsp; \n \n  Knowledge and Understanding:Knowledge and understanding of the important security properties (Confidentiality, Integrity, Availability, Authenticity, Accountability, Non-Repudiation). Knowledge of security controls and protocols. Knowledge of practical attacks on real systems and an understanding of classes of attacks on generic systems. Knowing and understanding secure practices on a technical, human and organisational level.Intellectual Skills:To understand security controls and protocols on a fundamental level, and an ability to analyse novel controls and protocols. To identify the existence of attacks on insecure systems, and to propose the appropriate security controls to improve the security of the system. To analyse and reflect upon the effectiveness of security and protection decisions in practical contexts.&nbsp;Professional Skills:To design and implement cyber security solutions, taking appropriate account of the context and constraints. To recognise the professional issues involved in the design, development and deployment of cyber security solutions. &nbsp;Transferable Skills:To think independently while giving due weight to the arguments of others. To understand complex ideas and relate them to specific problems or questions. To communicate ideas effectively in writing to specific problems or questions. To communicate ideas effectively in writing.&nbsp;"],"4":["Advanced Programming (M) COMPSCI5002   The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.     The course is intended to extend the student's knowledge to encompass a number of important programming techniques necessary for building a modern computing application.  The course content will include techniques in Java to deal with a range of issues drawn from the following:  program design using an object oriented programming model; modelling data using programming language type systems; event and exception programming; thread programming; persistence; and distributed programming.  It will also cover in brief the underlying Java run time system and techniques found in other languages.     By the end of the course students will be able to:    1.   Use the programming language concepts covered in the earlier Programming course: type checking, scoping, abstraction, data hiding and encapsulation; in an effective way;    2.   &nbsp;Describe the core concepts and issues involved in programming with polymorphic constructs, multiple threads of execution, and networking mechanisms in a general   way;    3.   Use these concepts in Java programs.  ","Principles of Programming Languages module (CS42001) Programming paradigms form the fundamental principles of programming languages. They refer to a specific style or approach to writing computer programs, such as procedural or functional programming.You will already be familiar with procedural and object-oriented programming. While these are powerful paradigms suitable for many software development contexts, other paradigms might be better suited to more specialist applications.Logic programming languages, such as Prolog, are popular in fields such as theorem proving, pattern matching, and natural language processing. Functional programming languages, like Haskell, are preferred when code optimisation and correctness are of high importance.A strong understanding of programming principles and paradigms will enable you to understand the capabilities and limits of specific programming languages. This will allow you to make educated decisions on which programming language to use for certain problems and help you write more optimised solutions.   study basic abstraction mechanisms in programming languages, such as variables, expressions, recursion, and macros \n explore procedural programming using C \n explore lambda calculus and functional programming using Haskell \n explore logic programming using Prolog \n explore concurrent and parallel programming using Erlang \n study the fundamentals of type theory \n look at formal reasoning about programs  understand the differences between various programming paradigms and their representative languages \n understand principles of formal reasoning about properties of programs \n explain the common building blocks of programming languages \n demonstrate an understanding of basic type theory \n apply the fundamentals of parallel programming to write simple parallel programs \n relate the theoretical ideas around programming languages to practical problems in computing ","Principles of Programming (COMP0002)   Aims:  \n\n This module provides an introduction to computer programming using two different programming styles, imperative and functional programming. Its primary aim is to develop core design, programming, and problem-solving skills, with a secondary aim of building confidence in the ability to take on and learn new programming languages within a short space of time. In order to achieve these aims the module has a substantial practical element in the form of compulsory lab classes where students work through sets of programming exercises to apply the programming concepts introduced during the module lectures.   Learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Design, implement, and debug small programs using two different programming paradigms, given straightforward specifications. \n\t Develop straightforward algorithms to solve a range of common programming problems. \n\t Compare and contrast the different paradigms, understanding the relative advantages and disadvantages of each. \n\t Use common programming tools such as compilers, editors and debuggers. \n\t Gain a basic understanding of how programs use computer memory, memory management, and the binary representation of data values. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n Core Programming Concepts: \n\n  What is programming? \n\t Programming languages. \n\t Programs and algorithms. \n\t Compilers and tools. \n\t Running and debugging programs. \n  Introduction to Imperative Programming: \n\n  Core imperative programming ideas: sequence, selection, iteration, recursion, assignment and variables. \n\t Types and type checking. \n\t Functions, parameters, scope and lifetime. \n\t Arrays and files. \n\t Pointers, memory allocation, and memory management. \n  Introduction to Functional Programming: \n\n  Core functional programming ideas. \n\t Recursion and recursive data structures such as lists. \n\t Lazy evaluation. \n\t Role of types. \n\t Higher order functions. \n\t List comprehension. \n\t Recursive functions. \n  Program design in the small: \n\n  Designing and implementing small programs. \n\t Implementing and using basic algorithms and data structures. \n\t Good programming and design practice. \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is formally available.   "],"5":["Algorithms (COMP0005)   Aims:  \n\n The aim of this module is to provide students with an introduction to data structures and algorithms that are fundamental to programming and to understand computation. We will apply these techniques to computational problems, with the aim to develop problem-solving skills, to develop the ability to analyse the efficiency of algorithms, and to encourage a thoughtful approach to the analysis and design of computational problems.   Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to: \n\n  Understand a variety of fundamental data structures and be able to use them effectively in the design and implementation of algorithms. \n\t Understand a variety of fundamental algorithmic problems and algorithms for solving them. \n\t Analyse the space and time efficiency of algorithms and understand how to design efficient algorithms. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Analysis of algorithms \n\t Abstract Data Types \n\t Sorting Algorithms \n\t Searching Algorithms \n\t Graphs Algorithms \n\t String-processing Algorithms \n   Requisites:  \n\n To be eligible to select this module as optional or elective, a student must be registered on a programme and year of study for which it is a formally available. \n\n Students are expected to have basic experience of programming in Python. Resources for self-study and Programming Tutor support will be provided in advance of the module.   ","Undergraduate Course: Informatics 2 - Introduction to Algorithms and Data Structures (INFR08026) This course provides a formal and practical introduction to the algorithms and data structures that underlie all areas of computation. It aims to provide students with a toolbox of standard algorithms and data structures, as well as the skills to analyse both the theoretical complexity of algorithms and their practical behaviour. Both written and programming exercises will be used, with examples from all areas of Informatics. This course is an important foundation for all areas of Informatics.  \n \nIt runs for the full year (10 credits in each semester), with approximately 15 lectures per semester. A mixture of tutorials and labs will be used to reinforce both mathematical and practical knowledge of algorithms and data structures, including differences between theoretical and empirical analysis.  \n \nStudents' ability to implement and empirically analyse algorithms will be assessed via practical coursework, with an exam to assess other aspects of the course (knowledge and choice of existing algorithms and data structures, theoretical analysis, algorithmic strategies, and applications). \n \nThe following is an indicative list of topics covered: \nAsymptotic notation and algorithmic analysis \nSequential data structures (lists, stacks, queues) \nBasic and more advanced sorting algorithms \nTree data structures, heaps and priority queues \nHashing and dictionaries \nGraphs and graph algorithms \nDynamic programming \nThe classes P and NP \n \nThroughout, different specific algorithms and algorithmic strategies (such as divide-and-conquer, greedy, recursive backtracking, dynamic programming) will be introduced using real-world examples. On completion of this course, the student will be able to:\n     \n         explain both formally and informally the difference between \"best\", \"expected\", and \"worst\" case behaviour of an algorithm, and use asymptotic notation to analyse the time and space complexity of algorithms. Use recurrence relations to determine the time complexity of recursively defined algorithms  describe the properties, typical implementations, and example application use cases of abstract data types (e.g., stacks, queues, sets, dictionaries, priority queues) and discuss the costs and benefits of dynamic and static data structure implementations; use the above knowledge to justify the selection of appropriate data types in a range of settings  work with a range of data structures to implement basic algorithms given pseudocode or a task specification; perform empirical studies to compare the performance of different implementations of the same algorithm or data type on various input (or different algorithms for the same problem) and explain what can be learned from empirical analysis that cannot be learned from asymptotic analysis (and vice versa)  describe various algorithmic strategies (e.g., brute-force, greedy, divide-and-conquer, recursive backtracking, dynamic programming) and give examples of each from a range of application areas including language processing and information retrieval. Hand-simulate a range of algorithms, including algorithms for searching, sorting, hashing, solving graph problems, and examples of dynamic programming. Give example applications that would use each algorithm and choose appropriate algorithms to use for example problems  define informally the classes P and NP and give examples of problems in NP. Explain the halting problem and its significance \n     ","CS208 - Logic &amp; Algorithms To equip students with the tools to model and measure computation. To build on CS103 Machines, Languages and Computation and develop further understanding of the mathematical foundations of computation. To foster an analytical and empirical appreciation of the behaviour of algorithms and the use of abstract data types. First Semester: Propositional Logic revisited: natural deduction systems; translation between real and formal domains; inference, proofs, axioms; equivalence of systems  Formal Systems and Interpreted Formal Systems: language, inference and interpretation, syntax and semantics, satisfaction, soundness, completeness  Predicate Logic: predicates, universal and existential quantification; generalisation, specialisation by symbolic substitution; awareness of free variables, bound variables, and alpha-equivalence  Relations: relations as predicates, relations as graphs; equivalence relations, preorders, partial orders; functions and partial functions as special cases of relations; simple logic (Prolog) programming as proof search  Models of Computation: simple abstract machines, Turing machines, expression evaluation, lambda-calculus reduction, imperative execution, correspondence between models of equivalent strength, the Church-Turing thesis Second Semester: Algorithms: algorithms and processes; iteration and recursion, studied comparatively; preconditions, postconditions, and invariants; specification as relation between inputs and outputs  Introduction to Algorithmic Complexity: basic algorithmic classification, with examples; the order notation (Big-oh); elementary complexity and estimation of run times; the tyranny of growth  Searching and Sorting: the complexity of a range of techniques, including the divide and conquer approach; the relative complexity of searching and sorting algorithms; the sorting algorithms covered will include bubble sort, insertion sort, merge sort and quick sort; searching, including sequential search and the binary chop; hashing  Binary Trees revisited: implementations by array and by nodes with pointers; expression trees; binary tree implementation of sorted list; algorithms covered include traversal, searching, balancing and deletion; awareness of ordering and balancing invariants and their implications for correctness and complexity  Graphs revisited: directed and undirected graphs; representations of graphs; basic graph algorithms; topological sorting; applications of graphs to real world problems (for example telecommunications, transportation systems, dependencies between objects)  Complexity Implications of ADT Implementation: e.g. for priority queues, graphs; access times  Fundamental Techniques: divide and conquer, greedy algorithms, dynamic programming, backtracking search  Additional Problems, Algorithms and Techniques: as selected by class lecturers  Practical Work: Further exploration of algorithms and abstract data types, empirical evaluation of performance, one or two larger scale exercises.  On completion of the class, a student should be able: to understand a mathematical basis for a simple natural deduction system and perform rigorous proof construction given a well-defined framework  to work confidently with propositional logic in a natural deduction setting and develop an understanding of predicate logic  to understand the concept of an interpreted formal system, along with the concepts of soundness and completeness in this context  to have a good understanding of the Church-Turing thesis and the general concept of computation, making correlations between different models of computation, e.g., lambda calculus, Turing machines, Hoare\u2019s IMP  to appreciate the concepts of logical invariant, precondition and postcondition, with respect to data structures and algorithms  to study a number of fundamental algorithms, including in particular the fundamental algorithms of searching and sorting, identifying the invariants on which they rely  to make a critical assessment of different implementations of algorithms and abstract data types  to carry out a number of empirical studies of the performance of algorithms and abstract data types  to appreciate a number of fundamental computational problems, and be aware of real world instances of those problems "],"6":["Mobile Human-Computer Interaction for MSc COMPSCI5112   Mobile Human-Computer Interaction for MSc gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods  &nbsp;and evaluation techniques  .    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (M) COMPSCI5015   Mobile Human-Computer Interaction (H) gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  ","Mobile Human-Computer Interaction (H) COMPSCI4068   Mobile Human-Computer Interaction   (H)   gives students an overview of the interaction challenges and opportunities associated with mobile and ubiquitous computing.     This course aims to introduce the challenges of developing interactive systems for mobile computing devices, e.g., mobile phones and wearable computers. Students will learn about challenging aspects of mobile interaction contexts, e.g., device movement, situational impairments, social acceptability. This course will introduce interaction design concepts like prototyping and evaluation through user studies. This is not intended as a mobile application development course but will briefly introduce core concepts and   methods  &nbsp;  for  &nbsp;prototyping novel interactions.     By the end of this course students will be able to:    1.   Explain problems associated with human-computer interaction in mobile and ubiquitous usage contexts.    2.   Critically analyse a proposed mobile interactive system considering its intended usage context.    3.   Design usable mobile interactive systems for a given problem or application area.    4.   Develop and evaluate prototypes of mobile interactive systems using a variety of prototyping methods and evaluation techniques.    5.   Discuss cutting edge developments in mobile human-computer interaction, such as context-aware systems, sensor-based interaction, location-based interaction, and mixed reality.  "],"7":["CSY1081 \u2013 Programming for Game Engines  Description:  The purpose of this module is for students to explore 2D game engine functionality and develop skills to manage and work with 2D objects, worlds and spaces. Students will engage with the important technical skills required for programming 2D computer games within a game engine.  ","CSY1091 \u2013 3D Game Asset Production  Description:  This module introduces students to the technical 3D modelling skills and creative processes required to produce 3D digital assets within creative industry projects. The module will also introduce students to the study of professional developers and their product standards, to contextualise and understand current market trends and platform limitations.  ","CSY1090 \u2013 2D Game Asset Production  Description:  The purpose of this module is to introduce students to the principles and technical skills used to create 2D digital graphics for video games and other creative industries, and to explore the creative processes required to produce their own digital assets to professional standards.  "],"8":["CS453 - Introduction to Artificial Intelligence The aim of the class is to give learners a basic introduction to modern AI. Participants will develop a practical understanding of AI algorithms which enable autonomous systems to make rational decisions, AI systems which encompass a variety of such algorithms to achieve an overall goal, and the implementation of these in a suitable high-level programming language.  What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.&nbsp;  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).&nbsp;  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.&nbsp;  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.&nbsp;  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing, Monte Carlo Tree Search.&nbsp;  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches., PDDL (Planning Domain Definition Language).  After completing this class participants will be able to:&nbsp; Understand and define the problem of AI as it relates to autonomous systems.&nbsp;  Implement key AI algorithms and build AI systems.&nbsp;  Apply search techniques to enable autonomous systems to choose actions that are appropriate to their goals.&nbsp;  Apply key techniques to adversarial problems, such as Mini-Max and Monte Carlo Tree search.&nbsp;  Define problems as planning problems using PDDL and solve them using a planner. ","CS310 - Foundations of Artificial Intelligence To help the student to a broad appreciation of the scale and nature of the problems within Artificial Intelligence and to a detailed understanding of some of the fundamental techniques used to address those problems. The class will cover the first 12 chapters of the 3rd edition of AI: A Modern Approach by Russell and Norvig. The topics to be covered will include: Introduction: What is AI? Foundations, history and related disciplines. The state of the art in modern AI including notable applications and successes.  Intelligent agents: agents and environments, the concept of rationality, the structure of agents, different types of intelligent agent (reactive, deliberative, learning).  Solving problems by searching: formulating problems as a search for a solution, uninformed search algorithms, informed (heuristic) search algorithms, formulating heuristic functions.  Beyond classical search: optimisation problems, local search algorithms, genetic algorithms, local search in continuous spaces, searching under non-determinism and partial observability, online search agents and unknown environments.  Adversarial search: optimal decisions in games, the minimax algorithm, alpha-beta pruning, imperfect real-time decisions, stochastic games, partially observable games, the state of the art in games playing.  Constraint satisfaction problems: defining CSPs, constraint propagation, backtracking search in CSPs, local search in CSPs, exploiting problem structure.  Logical agents: propositional logic for agent behaviour, propositional theorem proving, propositional model checking and SAT solving, agents based on propositional logic.  First-order logic: syntax and semantics, knowledge engineering in first-order logic.  Inference in first-order logic: unification and lifting, forward chaining, backward chaining, resolution.  Classical planning: definition of classical planning, algorithms for planning as state-space search, planning graphs, other approaches.  Planning and acting in the real world: time, schedules and resources, hierarchical planning, planning and acting in non-deterministic domains, multi-agent planning.  Knowledge representation: ontological engineering, events, mental events and objects, reasoning with default information, an example application. The class will focus on the practicalities of using these techniques to build intelligent agents. Practical work will be set, including the programming of an intelligent agent for a specified task. On completion of the class, a student should be able: to understand the modern view of AI as the study of agents that receive percepts from the environment and perform actions  to demonstrate awareness of the major challenges facing AI and the complexity of typical problems within the field  to exhibit strong familiarity with a number of important AI techniques, including in particular search, knowledge representation, planning and constraint management  to assess critically the techniques presented and to apply them to real world problems ","CS6053 - Artificial Intelligence and Machine Learning (2023\/24)  \nThis module surveys essential principles, methods, and techniques in AI and machine learning. It covers a broad range of AI topics such as problem solving, knowledge representation, logical and probabilistic inference, and machine learning using methods of automata theory, logics, probability theory and statistics. It discusses examples of intelligent systems and studies how to develop applications that can learn from experience such as expert systems, automatic classifiers and autonomous systems planning their actions and communicating in natural language. Students will be offered lectures, which introduce key concepts, explain main principles and techniques in AI, and demonstrate how to apply them in areas such as image recognition and price forecasting. \n \nThe workshop will provide practical sessions to help students understand the content of the lectures and build the necessary skills to develop AI-applications using suitable problem descriptions and datasets.   \nThe main topics of the study will include: \n \n1. Introduction to Artificial Intelligence and Machine Learning. Rational reasoning and intelligent behaviour. Human and Artificial Intelligence. Examples of AI systems. (LO1) \n \n2. Rational Agents. Conceptual model of rational agents. Environment types and agents classification. (LO2, LO3) \n \n3. Problem Solving in State Space. Uninformed search and Heuristic Search. Comparison of the search algorithms. (LO2, LO3) \n \n4. Knowledge Representation and logics. Facts, heuristics, assumptions, conditions, and conclusions. Logical modelling and logical inference. Logical theories and ontologies. (LO2, LO3) \n \n5. Actions and Knowledge-based Planning. Linear, hierarchical and non-linear planning. Continuous planning and replanning. (LO2, LO3) \n \n6. Uncertainty and Probabilistic Reasoning. Decision making under uncertainty. Probabilistic space and degree of truth. Probabilistic distributions. Conditional, prior and posterior probability. Bayes Rule. (LO2, LO3) \n \n7. Learning Agents. Conceptual model. Supervised and unsupervised learning. Learning from observations. Decision tees, space of hypotheses and performance measurement. (LO2, LO3) \n \n8. Statistical Learning. Classification, approximation and prediction. Probabilistic inference. Parameters learning using Bayes nets. Linear regression. (LO2, LO3) \n \n9. Neural Networks. Computation in the brain and artificial neuron models. Linear neural networks, multi-layer networks. Backpropagation. Application to image processing. (LO2, LO3) \n \n10. Natural Language Processing. Communication and language. Language structure and linguistic data. Parsing and syntactic processing of written texts. Problems. (LO2, LO3) \n \n11. Legal, Social, Ethical and Professional Issues in AI. AI and explanation. AI and law. Ethics of AI and impact of AI on society. (LO4)   \nOn completing the module, the student will: \n \n- LO1: Understand the principles of rational reasoning and intelligent behaviour, the similarities and the differences between natural and human intelligence. \n \n- LO2: Know the most popular models, methods and algorithms for building and operation of rational and learning agents and processing information. \n \n- LO3: Be able to develop basic AI programs which demonstrate intelligent behaviour and rational thinking in typical environment using available data sets. \n \n- LO4: Understand the Legal, Ethical &amp; Professional Issues brought by AI and the impact of AI on individuals, organisations and the society as a whole. "],"9":["Databases I To increase awareness of different models of database management systems, and of their potential uses.  \n To make the student aware of the need for rigorous methods for the design of database systems. \n To give the student further opportunities to gain practical skills in the design and implementation of database systems.\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   \n SQL \n CRUD Operations \n Queries \n Normalisation \n Database design \n Data types \n Relational databases \n Keys \n Entity relationship diagrams \n Distributed DBMS \n Database Administration \n  On completion of this module the student will be able to:  \n \n Demonstrate a systematic understanding of database management systems, and deploy established techniques to develop systems appropriate to specific needs \n Demonstrate a thorough knowledge of database interrogation and manipulation using SQL \n Apply recognised industry standard methods to design relational database systems. \n ","Databases, Interfaces and Software Design Principles  \n \nTo provide students with a general introduction to the theory and practice of database systems. To enable students to gain experience with a modern (relational) database system through the use of the SQL language. To give an understanding of the structure and workings of relational database systems and provide some insight into recent developments. To enable students to gain experience with design and implementation of database driven web interfaces. To give an understanding of the principles of software engineering design through determining user needs and requirements capture.\n \n   \n \n Databases are everywhere. Via a multitude of different user interfaces, we interact with many different databases every day, whether using the web, electronic calendars, diaries or timetables, searching for contact details, or looking for directions using a mobile phone. As such databases need to be both easy to use and fast. This module focusses on both the theory and practice of databases and interfaces to them. We examine the fundamentals of the relational database model, as well as implementations of the model in database management systems (DBMS) and languages to interact with them such as Structured Query Language (SQL). We explore relevant software design principles such as understanding user needs, requirements and software specifications and how this relates to database design and implementation. And because databases do not exist in isolation, we also examine how to design and build ways to interact with them, specifically via web development for which database access is key. \n \n  Knowledge and Understanding:An understanding of the relational models of database systems. Ability to understand and use SQL. Understanding of the principles of web development and software engineering design.Intellectual Skills:Basic knowledge of the theory underlying relational database systems. Ability to design and implement database systems. Ability to design user interfaces for a database.&nbsp;Professional Skills:The use of SQL for database specification and manipulation. The use of web technologies for database front-end development.&nbsp;Transferable&nbsp;Skills:Understanding the use and applications of database systems. Understanding the use of web technologies and user interfaces. Understanding the user needs when designing software \/ database prototypes.&nbsp;","Database Systems module (CS22001) Data drives the modern world, with the amount of information in our databases growing exponentially each year. Whether you want to develop cutting-edge applications, extract valuable information from large datasets, or optimise business processes - a good understanding of database systems is key.This module will provide you with a solid foundation in the design and implementation of relational databases. The relational database model is one of the most prevalent database architectures in the industry.You will further study Structured Query Language (SQL), which is used to interact with and modify the data in your databases.   study the concepts of relational database models and their importance today \n learn how to design relational database solutions using ER diagrams \n learn about transaction management and how to write queries in SQL \n study how to evaluate a database solution \n investigate the concepts of data warehousing and data mining, and how to design and implement database solutions for them \n explore alternative database models, such as hypermedia or real-time databases \n investigate the legal and professional issues relating to databases \n use these skills to design and implement your own database solution  specify, design, and implement a professional database solution \n evaluate and address qualitative aspects of database solutions \n compare and contrast different database models \n demonstrate your understanding of legal and professional issues relation to databases, such as data protection legislation \n apply these skills to real-world scenarios "],"10":["CSY3046 \u2013 Mobile Application Development 2  Description:  The purpose of this module is to understand modern mobile computing in terms of its hardware and software and the networks that support mobile devices as well as to implement software to run in a mobile computing context.  ","CSY2061 \u2013 Mobile Application Development 1  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  ","CSY2091 \u2013 Mobile Application Development  Description:  This module is designed to give an understanding of the technologies (hardware\/software) and how these are utilised in a modern networks. This understanding is then use to develop the necessary skills to design and implement (programming) software to be deployed within modern networks.  "],"11":["COMP4107: \nADVANCED COMPUTER VISION  To enable students to critically evaluate the development of contemporary computer vision systems utilising both existing and emerging technologies.  \n\t\t\t To enable students to study and research a number of topic themes across relevant computer vision application areas, focusing on case studies, and undertake research within these topic themes.   Themes will be chosen from contemporary areas of computer vision including the following: \n\t\t\t Advanced fundamental topics: segmentation, superpixels, saliency, optic flow and image registration in 2D\/3D.  \n\t\t\t Computer vision for advanced visual semantic models, attribute learning, zero-shot learning, visual question and answering.  \n\t\t\t Computer vision for advanced object and scene understanding.  \n\t\t\t Computer vision for behaviour understanding.  \n\t\t\t Computer vision for security and biometrics.  \n\t\t\t Computer vision for image manipulation and augmentation.    On completion of this module, students will be able to demonstrate a systematic understanding of the contemporary computer vision topics presented and a\n\t\t\t\t\tcritical awareness of how they are applicable to both current and emerging needs within the associated industrial and research environment.   ","Computer Vision Methods and Applications (H) COMPSCI4066     The Computer Vision Methods and Applications (CVMA) course is intended to equip students with the necessary theoretical and practical understanding of image processing and computer vision techniques to enable them to meet the challenges of  &nbsp;  building advanced image-based applications. Examples of potential vision-based applications include:   image understanding in   mobile devices (cameras, phones, tablet computers etc.), robot vision systems, autonomous vehicle guidance and road monitoring, driver attention monitoring, image database query systems, creative media production  &nbsp;tools  , interactive gaming, augmented reality and visual biometrics  , forensic image analysis, security and surveillance,   and medical imaging.   The course will focus on the application of recent advances in Computer Vision techniques that underpin a wide variety of systems and products based on methods such as:  &nbsp;face detection,  &nbsp;object recognition, tracking, segmentation and 3D imaging.     \u25a0&nbsp;  To provide a theoretical and practical understanding of 2D and 3D visual perception based on current image analysis techniques and currently available vision software libraries.    \u25a0&nbsp;  To equip the student with the ability to tackle the practical aspects of developing algorithms for vision-based applications as listed above  &nbsp;(section 13)  . Therefore, CVMA will provide the student with the basic tools to undertake Level 4 and Masters projects that require vision to be applied within in these related disciplines.     \u25a0&nbsp;  To prepare the student for a career in Industry as a Computer Vision specialist in areas such as Research &amp; Development, Technical Marketing and Intellectual Property Management; or for an Academic career, e.g. PhD research or Research Assistantship.     By the end of the course students   will   be able to:     1.   Analyse  &nbsp;critically computer vision algorithms and applications based on knowledge of image representation, image formation and basic processing techniques;    2.   Implement feature extraction and object recognition algorithms;    3.   Critically evaluate the basic geometric concepts in 3D computer vision and employed in recovery of 3D   surfaces from stereo-pair images, or motion fields from image sequences;    4.   Demonstrate the ability to apply the rudiments of information theory and basic image compression   &nbsp;                                     techniques to the design of image coding\/decoding algorithms;    5.   Demonstrate competence in the use of the   programming languages for vision-based applications prototyping.  Demonstrate competence in the application of the key current image analysis libraries.  ","Computer Vision  \n \nTo provide a grounding in existing techniques and current research in computer vision.To give experience in implementing computer vision solutions to real world problems.\n \n   \n \n You'll examine current techniques for the extraction of useful information about a physical situation from individual and sets of images. You'll learn a range of methods and applications, with particular emphasis being placed on the detection and identification of objects, image segmentation, pose estimation, recovery of three-dimensional shape and analysis of motion. These problems will be approached with both traditional and modern Computer Vision approaches including Deep Learning. You will spend 5 hours per week in lectures, tutorials, and computer classes for this module. \n \n   Knowledge and Understanding  Understanding of current techniques in image analysis and computer vision and an awareness of their limitations. \t An appreciation of the underlying mathematical principles of computer vision. \t &nbsp;Experience in designing and implementing computer vision systems.  Intellectual Skills  Apply knowledge of computer vision techniques to particular tasks. \t Evaluate and compare competing approaches to vision tasks. \t Evaluate vision systems.  Professional Skills  Develop a working knowledge of computer vision\/image analysis algorithms and evaluate the applicability of various algorithms and operations to particular tasks.  Transferable Skills  Apply knowledge of the methods and approaches presented to different problem domains using the available resources (libraries, internet, etc.)&nbsp; "],"12":["Machine Learning (M) COMPSCI5014   A practical introduction to the foundations of machine learning.     To present students with an introduction to the   general   theory  &nbsp;of learning from data and to  &nbsp;a number of   popular   Machine Learning methods  .  &nbsp;   To present students with the practical application of Machine Learning techniques in a variety of domains, including Human Computer Interaction, Information Retrieval, Bioinformatics and Computer Vision and Graphics.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Contrast  &nbsp;the strengths and weaknesses of   different  &nbsp;algorithms  &nbsp;for different tasks and datasets  ;    6.   Analyse the benefits and drawbacks of  &nbsp;some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ","Machine Learning (H) COMPSCI4061   A practical introduction to the foundations of machine learning.     To present students with an introduction to the general theory of learning from data and to a number of popular Machine Learning methods.     By the end of the course students will be able to:    1.   Demonstrate knowledge of the major machine learning application areas in, for example Information Retrieval, Human Computer Interaction, Bioinformatics and Computer Vision &amp; Graphics;    2.   Explain the principle of learning from data;    3.   Implement and use machine learning algorithms in   Python  ;    4.   Apply the main machine learning methods: regression, classification, clustering, probability density estimation and dimensionality reduction;    5.   Explain the   typical   strengths and weaknesses of a selection of common algorithms    6.   Appreciate some   advanced  &nbsp;machine learning approaches  , e.g.  &nbsp;non-parametric methods  ,  &nbsp;sampling techniques  &nbsp;and neural networks  .  ","Undergraduate Course: Machine Learning and Pattern Recognition (INFR11130) Machine learning is a field devoted to developing algorithms that adapt their behaviour to data, providing useful representations of the data and\/or predictions. This course covers some fundamental theoretical concepts in machine learning, and common patterns for implementing methods in practice. The intended audience are those wanting the background required to begin research and development of machine learning methods. \n \nThis is an advanced course. Students should not choose this class without the required background (see \"Other Requirements\" box); students without this background are strongly advised to take a more practical-based course, such as Applied Machine Learning (INFR11211). The precise set of methods and algorithms used to illustrate and explore the main concepts will change slightly from year to year. However, the main topic headings are expected to be fairly stable. \n \n- Classification and Regression: \n                  Linear Regression, logistic regression, Bayes classifiers \n- Expanded feature representations:  \n                  Basis functions, neural networks, kernel methods \n- Generalization, regularization and inference:  \n                  Penalised cost functions, Bayesian prediction, learning theory \n- Model selection, pruning and combination:  \n                 Cross-validation, Bayesian methods, sparsifying regularizers, ensemble methods. \n- Representation and metric learning:  \n                  Dimensionality reduction, clustering, feature learning \n \nTo support these topics we will also cover: \n- Optimization and Inference algorithms:  \n                  Stochastic gradient descent, simple Monte Carlo ideas, and more specialised methods as required. \n- Practical issues:  \n                   Formulating problems as machine learning, adapting methods to fit problems.  \n                   Numerical and programming issues important for machine learning. \n                   Ethical issues, such as responsible application of methods and privacy concerns. On completion of this course, the student will be able to:\n     \n         frame an applied problem as a machine learning task, identifying appropriate methods  critically compare and contrast alternative machine learning methods for a given task  derive and motivate novel variants of machine learning methods  create accessible and useful explanations of the workings and failure modes of machine learning methods  check and refine implementations of learning algorithms, while applying them in practice \n     "],"13":["Text as Data - An Introduction to Document Analytics (H) COMPSCI4074   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches.  &nbsp;  The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. Weka\/Spark Mlib).     This course aims to introduce students to   language modelling, geometric interpretations of documents, information theory, network models and in general the use of   stochastic thinking (including building on the probability theory learned during the   Data Fundamentals  &nbsp;c  ourse). This is  &nbsp;illustrated through   a number of  &nbsp;supervised and unsupervised text processing and analytics approaches  &nbsp;as well as their applications such as bibliometric analysis, web link analysis, and social media analytics  .   &nbsp;  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing (e.g. Weka\/Spark   Mlib  ).     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the vector space, network graphs, language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for regression, classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.  ","Text as Data - An Introduction to Document Analytics (M) COMPSCI5096   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze   and critique   recent   developments   in  &nbsp;  natural language and   text processing   academic  &nbsp;literature  .     8.   Evaluate and explain the appropriate application of   recent   research   developments   to real-world problems.  ","Text as Data for MSc COMPSCI5106   This course will introduce stochastic notions necessary for analysing text\/documents, in both unsupervised and supervised approaches. The course is designed to be applied in nature, using various text analytics examples, and introducing students to various toolkits for document processing (e.g. scikit-learn, spaCy).     This course aims to introduce students to language modelling, representations of documents, natural language processing, information theory, network models and in general the use of stochastic thinking (including building on the probability theory learned during the IDSS\/Data Fundamentals course). This is illustrated through a number of supervised and unsupervised text processing and analytics approaches as well as their applications such as information extraction, question answering, summarization, and dialogue systems.  The course is designed to be applied in nature, using text analytics as an example, and introducing students to various toolkits for document processing.     By the end of this course students will be able to:    1.   Describe classical models  &nbsp;for textual representations  &nbsp;such as the   one-hot encoding  ,   bag-of-words models  ,   and sequences with   language modelling.    2.   Identify potential applications of text analytics in practice.      3.   Describe various common techniques for  &nbsp;  classification, clustering and topic modelling, and select the appropriate machine learning task for a potential document processing application.    4.   Represent data as features to serve as input to machine learning models.     5.   Assess machine learning model quality in terms  &nbsp;of relevant error metrics for  &nbsp;document processing tasks, in an appropriate experimental design.    6.   Deploy unsupervised and machine learned approaches for document\/text analytics tasks.    7.   Critically analyze and critique recent   developments   in  &nbsp;  natural language and   text processing   academic literature.     8.   Evaluate and explain the appropriate application of recent research developments to real-world problems.  "],"14":["Foundations in Maths for Data Science  \n \nTo provide a foundation of mathematical skills to equip apprentices with both confidence and competence in a range of fundamental elementary mathematical techniques and basis for advanced mathematical methods used in the study and analysis of data science problems.\n \n   \n \n This course provides a basic course in algebra and calculus, introducing key elements of definition, manipulation, graphical representation of functions, as well as quadratic equations, simultaneous linear equations, differentiation and integration. \n \n  Demonstrate algebraic facility with algebraic topics including linear, quadratic, exponential, logarithmic and trigonometric functions.Produce and interpret graphs of basic functions of these typesDemonstrate the skill of computation with real sequences and seriesCompute limits, derivatives and definite and indefinite integrals of basic functions of these typesUnderstand and be able to apply the basics of vector algebra KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp; 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp; K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp; 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp;&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing.&nbsp; 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp; &nbsp; S1. Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp; S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp; S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp; S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp; S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp; &nbsp; B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;","Probability Models and Time Series  \n \nThe purpose of this module is to provide a thorough grounding in a broad range of techniques required in the analysis of probabilistic and statistical models, and to provide an introduction to stochastic processes by studying techniques and concepts common in the analysis of discrete time Markov Chains. It will also deepen and broaden the students\u2019 knowledge and experience of statistics by studying the theory and methods used in time series and forecasting.\n \n   \n \n In this teaching block the ideas of probability introduced in the first year are extended to continuous random variables. It will provide an introduction to stochastic processes, (i.e. random processes that evolve with time) and time series analysis (i.e. series of observations evolving in time and observed at discrete points in time). There will be a particular focus on discrete-time Markov chains and forecasting methods which are fundamental to the wider study of techniques required in the analysis of probabilistic and statistical models.&nbsp; &nbsp; \n \n  Demonstrate and apply a deeper understanding of continuous random variables and their applications in the field of data science. &nbsp;Identify and formulate problems in terms of probability and solve them to build up a simple stochastic model. &nbsp;Understand and apply basic properties of discrete-time Markov chains. &nbsp;Carry out initial data analysis of time-series data and be able to identify and remove simple trend and seasonality. &nbsp; KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 4.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 5.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 6.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 7.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 8.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: 9.&nbsp;&nbsp; &nbsp;Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. 10.&nbsp;&nbsp; &nbsp;Data formats, structures and data delivery methods including \u201cunstructured\u201d data. 11.&nbsp;&nbsp; &nbsp;Common patterns in real-world data.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. &nbsp;","CS259 - Quantitative Methods in Computer Science The class will teach the quantitative and numerical methods needed through practical examples. Teaching these methods through practical examples will both show the relevance of the methods being taught and strengthen the programming skills of the students in this important area.To teach the quantitative and numerical methods that underpin modern Computer Science, such as (but not restricted to) Artificial Intelligence and Data Analytics. The class will also provide students with the numerical methods needed to perform quantitative evaluations of algorithms and software.L Obj 1 : to understand and use linear algebra techniques as used in modern AI and data analytics: scalars, vectors, matrices, tensorsL Obj 2 : to understand multivariate calculus techniques as used in modern AI and data analytics: derivatives, gradients, integrals, convex optimisationL Obj 3 : to understand and apply probability theory as used in modern AI and data analytics: randomness, probability distributions, variance and expectation, expected valueL Obj 4 : understand and apply statistical techniques as used modern AI, data analytics and quantitative evaluation of software and algorithms: basic data analysis, significance tests, basic Bayesian statistics 1. Linear algebra notation is used in Machine Learning to describe the parameters and structure of different machine learning algorithms. This makes linear algebra a necessity to understand how neural networks are put together and how they are operating. This part of the course will cover: Scalars, Vectors, Matrices, Tensors  Matrix Norms  Special Matrices and Vectors  Eigenvalues and Eigenvectors 2. Multivariate calculus is used to supplement the learning part of machine learning. It is what is used to learn from examples, update the parameters of different models and improve the performance. This part of the course will cover: Derivatives  Integrals  Gradients  Differential Operators  Convex Optimization 3. Probability: probability used to make assumptions about the underlying data when we are designing these deep learning or AI algorithms. It is important for us to understand the key probability distributions, and we will cover it in depth in this course. This part of the course will cover: Elements of Probability  Random Variables  Distributions  Variance and Expectation  Special Random Variables 4. Statistics: statistical methods are used in AI to analyse data and quantify the performance of agents.&nbsp; &nbsp; Statistical concepts: mean, standard deviation, variance, confidence intervals.&nbsp; &nbsp; Statistical methods for data analytics&nbsp; &nbsp; Use of statistics in performance measurement&nbsp; &nbsp; Introduction to Bayesian methods L Out 1 : ability to apply basic data analysis to a range of problems in Computer Science and Software Engineering.L Out 2:L Out 3:L Out 4:"],"15":["Data Integration and Visualisation   Summary module description:   \n  This module focuses on key aspects of data integration and data visualisation, covering concepts, principles, techniques and tools for the effective analysis of data. Students will learn techniques for processing various types of data for information visualisation. The students will be encouraged to test their technical abilities for data integration and develop their creative skills in visualising data to support data-driven decision making.  \n     Outline content:   \n   \n Context: Importance of data visualisation and its historical account.  \n Nature of data and data sources diversity  \n Data integration methods and technologies, e.g. ETL (extraction, transformation and load)  \n Data warehousing strategy, architecture and design (star schemas, temporal dimensions, cubes, etc.)  \n Critical analysis using multidimensional datasets  \n Types of data visualisation methods (e.g., distribution correlation, ranking) and charts  \n Data visualization design techniques and effective presentation (e.g., understanding data statistics)  \n Interactive Dashboards  \n Impact of designs on the presented statistics Type of tools (e.g., Tableau)  \n Real-world application domains and requirements (e.g., financial trends, genetics, regression)  \n  \n     Assessable learning outcomes:  \n  On successful completion of the module, students will be able to:  \n \n  \n Critically choose and then apply appropriate methods to conduct data integration and data visualisation;  \n Have a sound understanding of the essential concepts and principles of data integration and data visualisation techniques;  \n Develop data-driven approaches for information discovery and processing in a domain context through data integration and data visualisation;  \n Design and implement a data integration and visualisation tool which can perform a set of functions, such as ETL, multidimensional datasets, data warehouse, and interactive dashboards;  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n Be aware of trends of data integration and data visualisation in relation to data analysis and its value to people\u2019s work and life.  \n  \n  ","Introduction to Data Science  \n \nTo provide learners with a high-level view of what data science is and where it came from. The teaching block will help learners to understand the goal of data science to provide answers and insight in relation to questions that impact on organisational goals. It will present the basic mathematical and computer science underpinnings and the concept of a data pipeline as a methodology to sourcing different types of data, processing it in appropriate ways and presenting it appropriately to different audiences. This will be done within context of a professional framework which must pervade all data scientist activity to ensure that legal, ethical and security concerns are continuously addressed.\n \n   \n \n Indicative content:&nbsp;  \t Attitude to learning&nbsp; \t Professionalism and Ethics&nbsp; \t The history and context of Data Science&nbsp; \t Data Processing Pipeline&nbsp; \t Introduction to Data&nbsp;  \n \n  Understanding of the context and history of data scienceUnderstanding of the purpose of data science and the professional data scientistAn understanding of the natre of data and the different types of dataA high-level understanding of ethics and proffesionalism especially with respect to the use of dataCan assess and make progress towards achieving the data scientist apprenticeship KSBs KSBs: K1. The context of Data Science and the Data Science community in relation to computer science, statistics and software engineering. How differing schools of thought in these disciplines have driven new approaches to data systems. K2. How Data Science operates within the context of data governance, data security, and communications. How Data Science can be applied to improve an organisation\u2019s processes, operations and outputs. How data and analysis may exhibit biases and prejudice. How ethics and compliance affect Data Science work, and the impact of international regulations (including the General Data Protection Regulation.) K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp; 1.&nbsp;&nbsp; &nbsp;Data processing and storage, including on-premise and cloud technologies. 2.&nbsp;&nbsp; &nbsp;Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp; 3.&nbsp;&nbsp; &nbsp;Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: 1.&nbsp;&nbsp; &nbsp;Statistical and mathematical models and methods.&nbsp; 2.&nbsp;&nbsp; &nbsp;Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp; 3.&nbsp;&nbsp; &nbsp;Applications such as computer vision and Natural Language Processing. 4.&nbsp;&nbsp; &nbsp;An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. 5.&nbsp;&nbsp; &nbsp;Development standards, including programming practice, testing, source control.S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements. S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data. S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control. S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem. S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals. S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development. S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work. B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios. B4. Consideration of problems in the context of organisation goals. B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner. B6. A commitment to keeping up to date with current thinking and maintaining personal development. Including collaborating with the data science community.","Visualisation Techniques  \n \nUnderstand how human perception and cognition influences the design of visual representation of data.Visually represent data with the aim to summarise, understand, extract hidden patternsGain practical skills using commercially available software to create dashboards and apply visualisation techniques to real world data science problems.This module will highlight how visualisation plays a key role in data driven decision making.\n \n   \n \n Data Visualisation is the process of extracting knowledge from complex data, and presenting it to a user in a manner that this appropriate to their needs to make it easier to pull insights from. This module provides an understanding of data visualisation concepts, terminology, methods, and its importance in data processing. You will learn about using a range of visual elements and software to see and understand trends outliers and patterns in data. &nbsp;You will also learn a productive way to convey stories form your data highlighting useful information.  This module enhances human perception and cognition to make sense of data in a way to effectively communicate conclusions drawn for the data to a wider audience. You will also learn about the challenges associated with visualising large or ambiguous or time-based datasets. You will also learn about psychological theories that help explain how humans process information and consider their relevance to the design of effective visualisations. Using example images, we will critique them, building up knowledge about what works, and what doesn't.  We will also explore visualisation techniques linked to textual analysis.  Learners will be encouraged to use visualisation tools used within their organisation to present findings in their role. \n \n  Understand the key concepts of data visualisation. &nbsp;Can use appropriate visualisation tools and techniques to present data of different types appropriately to different audiences.Effectively communicate and ideas relating to the software process and data science solutions. &nbsp; KSBs     K3.&nbsp;How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including:&nbsp;&nbsp;          Data processing and storage, including&nbsp;on-premise&nbsp;and cloud technologies.&nbsp;            Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach.&nbsp;&nbsp;            Data-driven decision making and the good use of evidence and analytics in making choices and decisions.&nbsp;          K4.&nbsp;How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using:&nbsp;          Statistical and mathematical models and methods.&nbsp;&nbsp;            Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation.&nbsp;&nbsp;            Applications such as computer vision and Natural Language Processing.&nbsp;            An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools.&nbsp;            Development standards, including programming practice, testing, source control.&nbsp;          K5.&nbsp;The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets:&nbsp;          Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media.&nbsp;            Data formats, structures and data delivery methods including \u201cunstructured\u201d data.&nbsp;            Common patterns in real-world data.&nbsp;          S1.&nbsp;Identify and clarify problems an organisation&nbsp;faces, and&nbsp;reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.&nbsp;        S2.&nbsp;Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.&nbsp;        S3.&nbsp;Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.&nbsp;        S4.&nbsp;Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.&nbsp;        S5.&nbsp;Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs.&nbsp;on-premise&nbsp;deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.&nbsp;        S6. Find, present, communicate and disseminate outputs effectively and with high impact through creative storytelling, tailoring the message for the audience. Use the best medium for each audience, such as technical writing, reporting and dashboards. Visualise data to tell compelling and actionable narratives. Make recommendations to decision makers to contribute towards the achievement of organisation goals.    &nbsp;    B3.&nbsp;Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.&nbsp;      B5.&nbsp;An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner.&nbsp;  "],"16":["Web Development  \n To provide the student with a firm foundation for continuing study in the area of the web and Internet. \n To make students aware of the range of tools available for developing Website content. \n To put the Website\/Web application development process in context within the infrastructure of the Internet. \n To enable students to develop static web sites in line with web standards \n   \n Internet and web terminology, protocols and infrastructure \n Web document structure and content (e.g. HTML) \n Web aesthetics (e.g. CSS) \n Web scripting (e.g. JavaScript) \n Web requests (e.g. use of HTTP verbs) \n Using Internet and Web tools (e.g. IDEs, FTP clients) \n   \n Use standard web languages such as HTML and CSS in the production of web content \n Use, effectively, a range of tools for working with and developing content for the Internet and the World Wide Web. \n Design and implement a good user interface for a web-based application. \n ","Internet Technology (M) COMPSCI5012   The aim of this course is to provide students with a comprehensive overview of web application development.  It will provide students with the skills to design and develop distributed web applications in a disciplined manner, using a range of tools and technologies. It will also strengthen their understanding of the context and rationale of distributed systems.     The aims of this course are:  &nbsp;     To provide an overview of the ongoing developments in web application development  ;     To promote the disciplined design and development of distributed web applications  ;      To strengthen   students  &nbsp;understanding of the context and rationale of distributed systems  ;      To   explain  &nbsp;the messaging and protocols used as a communication mechanisms in web applications  ;     To develop the ability to implement and deploy distributed web applications  .     By the end of the course students will be able to:    1.   Illustrate and describe the n-tier client-server architecture of web applications;    2.   Explain the role of messaging and protocols within the design of web applications;    3.   Explain the opportunities and challenges relating to developing web applications in a distributed environment;    4.   Identify and critically analyse the requirements of a web application;    5.   Design and specify the architecture of a web application;    6.   Evaluate and assess specifications and designs of web applications;    7.   Construct, build and deploy a web application.  ","Web Application Development 2 COMPSCI2021   The aim of this course is to provide students with a comprehensive overview of web application development.  It will provide students with the skills to design and develop distributed web applications in a disciplined manner, using a range of tools and technologies. It will also strengthen their understanding of the context and rationale of distributed systems.  &nbsp;     To provide an overview of the tools and technologies used in web development;    To promote the disciplined design and development of web applications;    To develop an understanding of the complexity of building distributed applications;    To develop the ability to implement and deploy a web application.     By the end of this course students will be able to:    1.   Describe and understand the opportunities  &nbsp;and   challenges   involved in developing web applications and working in a distributed environment  ;    2.   Use a variety of development tools and web technologies;    3.   Explain and describe the different high level system architectures common to the web;    4.   Explain the role of messaging and protocols within the design of web applications;    5.   Understand and interpret the design and specifications of a web application;    6.   Construct, build and deploy a web application.  "],"17":["Further Games Theory and Implementation To further develop awareness of some of the key professional issues within a games development team To equip students with the knowledge and skills to design, build and evaluate multiplayer games To develop skills in design and planning documentation for games development  \n Professional issues in the games development industry\n \n Comparing industry standard game engines \n Recommending a game engine based on a given scenario   \n \n \n The principles of effective game and level design\n \n Multiplayer game design theory \n Balancing multiplayer games for cooperation and competition \n Potential issues and design of networked games \n Multiplayer level design concepts such as wayfinding, visualisation, and level flow \n The level design workflow and processes \n \n \n  \n Applied knowledge of multiplayer game development\n \n Utilising an industry standard game engine to implement a multiplayer game \n Supporting two or more players simultaneously \n Supporting different input methods, such as game controllers and a keyboard\/mouse. \n Further development of programming and game engine implementation skills   \n \n \n Design, testing and planning documentation\n \n Creating game design documents that focus on multiplayer games \n An introduction to games testing and processes \n Creating and utilising test plans \n Meeting milestones and deadlines \n \n \n  &nbsp; 1. Outline and explain more of the key professional issues in the computer games industry &nbsp; 2. Demonstrate an awareness of a variety of games platforms and related development issues  &nbsp; 3. Demonstrate proficiency in wayfinding and visualisation techniques within game environments &nbsp; 4. Provide evidence of applied knowledge in multiplayer game development &nbsp; 5. Understand the importance of games testing processes &nbsp; 6. Demonstrate proficiency in the development of design and planning documentation for games","Adv. Games Theory and Implementation To further develop understanding of key professional issues within the games industry To equip students with the knowledge and skills to design, build and evaluate single-player game levels To further develop skills and knowledge in the testing and iteration processes as part of the games development pipeline To equip students with the knowledge and skills to design and develop games for non-PC platforms. E.g. mobile, console and VR.  \n Further professional issues in the games development industry\n \n The free-to-play game business model \n The mobile game market and its nuances \n Different funding options for game studios \n Marketing techniques for traditional and mobile games   \n \n \n Further single player game design theory and development\n \n Mobile game design and its differences \n General mobile games design theory \n Free-to-play mobile game design techniques \n Identifying and selecting appropriate control methods for mobile games \n Developing games suitable for mobile devices in an industry standard game engine \n Further development of programming and game engine implementation skills \n Optimisations required for games running on mobile devices \n \n \n  \n Audio production for interactive digital environments\n \n Implementing audio in an industry standard game engine \n Optimising audio for mobile devices \n Acquiring and licensing audio for games. \n \n \n  \n Design and planning documentation\n \n Understanding pitch documents and their uses \n Creating a pitch document for a mobile single player game \n Pitching mobile game designs ideas to others for feedback \n \n \n  &nbsp; 1. Develop an understanding of, and critically evaluate, the key professional issues in the computer games industry &nbsp; 2. Critically review the key skills required to produce, source and implement audio for games &nbsp; 3. Provide evidence of applied knowledge in single-player game development &nbsp; 4. Analyse and evaluate a game utilising recognised games industry techniques &nbsp; 5. Demonstrate proficiency in the development of design and planning documentation for games","Introduction to Games Theory and Implementation  \n To introduce&nbsp;students to game design concepts and theories that&nbsp;enable them to design effective computer games \n To provide students with knolwedge of&nbsp;the tools and practical skills needed to implement and develop&nbsp;computer games in a game engine \n To equip students with the knowledge and skills to design and build interactive environments for computer games \n To give students an understanding of the various professional issues and conventions required as part of a games development team \n To enable students to develop research and communication skills \n To ensure the students understand the process of developing their skills both inside and outside formal workshops, and tackle formative work as well as assignments&nbsp;to develop a game portfolio piece. \n  1. Introduction to the games development industry  \n \n How games are funded, developed, distributed and sold to consumers \n How game studios and game development teams are structured&nbsp; \n Job roles that are available and found in the games industry \n Different game platforms and how they impact game design choices \n \n 2. Introduction to the principles of effective game design and documentation. \n \n Components and design choices that make up a computer game \n An introduction&nbsp;to common&nbsp;game design theories and techniques \n Balancing difficulty and progression in games \n The importance of the user experience and methods used to improve the players' experience \n Developing and maintaining industry standard documentation. E.g. Game design documents, level design documents, etc. \n \n 3. Introduction to digital interactive storytelling and world design \n \n Level design theory for single player games \n Designing and authoring digital environments and worlds \n Storytelling techniques that can be applied to interactive products \n \n 4. Introduction to game engines and development environments \n \n Developing a game using a&nbsp;modern game development engine \n Creating&nbsp;a game using a modern game programming language. \n How to structure a game development project \n Combining&nbsp;assets from multiple&nbsp;development environments into a single project \n \n 5. Evaluating and utilising information sources \n \n Researching topics through advanced google searches and journal databases \n How to search and utilise game engine documentation to aid game development \n Searching for solutions to problems and&nbsp;adapting information to meet the needs of a&nbsp;project \n   \n Examine game mechanics and principles applied to effective computer game&nbsp;design and development \n Demonstrate an understanding of the skills required to develop interactive environments and storytelling components \n Explain&nbsp;the differences&nbsp;of varying games development platforms and their impact on game design choices \n Demonstrate a range of practical skills using&nbsp;a modern game engine to develop a computer game \n Outline and explain the key professional issues in the computer games industry \n Describe the professional roles and teams involved in the games development industry \n "],"18":["LH Advanced Functional Programming   This module exposes students to state of the art functional programming languages and their mathematical foundations in the lambda calculus and type theory. Students can expect to develop advanced functional programming skills and awareness of experimental programming languages.","Functional Programming (H) COMPSCI4021   Functional programming is introduced using Haskell.  The standard programming techniques, as well as some advanced topics, are covered and applied to realistic programming problems.     Functional programming languages are one of the central focuses of modern research in programming languages, and they are also of immense practical utility.  This course presents the concepts of functional programming using Haskell, which is one of the most widely used functional languages.  The emphasis is on developing practical programming skills,   applying  &nbsp;advanced techniques such as monads, parallelism, metaprogramming, and formal methods.    The aims are to understand the principles of functional programming, including functions, expressions, types, type inference, equational reasoning, and monads, and to develop the ability to solve substantial programming problems using Haskell.     By the end of the course students will be able to:    1.   Write simple programs involving elementary Haskell techniques, including pure function definitions;     2.   Define new algebraic data types and use recursion to define functions that traverse recursive types,   and use common higher-order functions such as map, fold, and filter;    3.   Demonstrate understanding of how to express data structures and function interfaces using types, and how to infer types;    4.   Understand parametric polymorphism, and ad-hoc polymorphism through   typeclasses  ;    5.   Demonstrate understanding of the differences between strict and lazy evaluation, and the   tradeoffs  &nbsp;of the two approaches;    6.   Demonstrate understanding of how to structure programs using monads, how to use the most common standard monads (including IO, Maybe, and State), and how to use a monad transformer;    7.   Understand and use common functional abstractions such as functors and applicative functors;    8.   Develop substantial functional software applications including external libraries;    9.   Use formal methods   and property-based testing  &nbsp;to reason about the correctness of functional programs;    10.   Construct, adapt, and analyse   code using standard Haskell   tools   such as Stack and   HUnit  ","Functional Programming (COMP0020)   Aims:  \n\n This module explores the functional programming paradigm and the implementation technology for functional programming languages. It aims to develop a broad understanding of the functional programming style and recursive programming techniques using the language Miranda, together with an understanding of implementation issues that are relevant not only to functional languages but also to other systems that require automatic dynamic memory management. \n\n The module explores the underlying mechanics of strict and lazy functional languages; it does not use Haskell or F# or OOCAML and does not aim to provide training in such languages, though an introduction to Miranda is provided and students are expected to improve their functional programming skills through independent study. In the second half of the module students are expected to use independent study to read extensively about implementation issues which are then discussed in the lectures. \n\n  Intended learning outcomes:  \n\n On successful completion of the module, a student will be able to (at a level commensurate with FHEQ level 6): \n\n  Understand the basics of the lambda calculus and combinators and how they are used in the implementation of functional languages. \n\t Understand the main features of a lazy functional language. \n\t Understand type checking, type-inference and the operation of the Miranda (Hindley-Milner) type system. \n\t Write and understand non-trivial functional programs in Miranda. \n\t Understand the computation and memory management issues affecting the sequential implementation of lazy functional languages. \n\t Solve problems relating to any aspect of the module's syllabus, under examination conditions. \n   Indicative content:  \n\n The following are indicative of the topics the module will typically cover: \n\n  Classification of programming languages:\n\t  Distinctive features of Functional Programming Languages. \n\t  \n\t The Lambda Calculus and Combinators:\n\t  Versions of the Lambda Calculus. \n\t\t Syntax and semantics. \n\t\t Reduction orders, strong normalisation. \n\t\t Combinators and computationally complete sets. \n\t  \n\t Introduction to Miranda:\n\t  Programming environment. \n\t\t Types and simple polymorphic types. \n\t\t Recursion. \n\t\t Pattern-matching. \n\t\t Lists. \n\t\t Higher-Order functions. \n\t\t User-defined types. \n\t  \n\t Type polymorphism and type systems. \n\t Recursive programming techniques. \n\t Introduction to implementation techniques:\n\t  Strict evaluation and lazy evaluation. \n\t\t The need for automatic memory management. \n\t  \n\t Automatic memory management:\n\t  Garbage collection techniques. \n\t  \n   Requisites:  \n\n To be eligible to select the module delivery for Undergraduate (FHEQ Level 6) as optional or elective, a student must be registered on a programme and year of study for which it is formally available. \n\n To be eligible to select the module delivery for Postgraduate (FHEQ Level 7) as optional or elective, a student must both: (1) be registered on a programme of study for which it is formally available; and (2) have either taken all Term 1 modules of the MSc Computer Science programme at UCL or have studied the following at FHEQ level 6 or higher: \n\n  Programming in one high-level programming language and one assembly language. \n\t Formal systems of logic such as Boolean algebra, propositional logic or predicate calculus. \n\t Virtual machines, virtual memory and memory paging. \n\t Compilers, including lexical analysis, parsing and code generation. \n\t Dynamic data structures and abstract data types. \n\t Models of storage in computer systems. \n\t Algorithmic complexity. \n  Students must be proficient in the English language to UCL's Level 4 standard or better.   "],"19":["Big Data: Systems, Programming, and Management (H) COMPSCI4064   Big Da  ta is nowadays manifested in a   very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.     The course aims to endow students with:    An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.    Exposure to a number of different cloud   data stores  &nbsp;and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.    Familiarity with   modern   programming paradigm  s (e.g., MapReduce, RDDs, etc.)  , so to enable them to write programs which can execute in massively parallel infrastructures in the cloud.    The ability to understand the internals of   (  NoSQL  )  &nbsp;cloud   data   storage systems and the ability to enrich these systems with additional functionality.     By the end of this course students will be able to:    1.   Design  ,  &nbsp;employ   and evaluate   programs to access big data repositories in a massively parallel manner  ;    2.   D  escribe and   contrast  &nbsp;the internals of the design and implementation  &nbsp;of current cloud   data storage   and processing   systems;     3.   Identify and discuss   issues related to the scalability and efficiency challenges when processing complex queries  \/algorithms  &nbsp;against big data systems  , and propose ways of addressing said challenges;    4.   D  emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.  ","Big Data: Systems, Programming, and Management (M) COMPSCI5088   Big Da  ta is nowadays manifested in a   very large number of environments and application fields pertaining to our education, entertainment, health, public governance, enterprising, etc. The course will endow students with the understanding of the new challenges big data introduces and the currently available solutions. These include (i) challenges pertaining to the modelling, accessing, and storing of big data, (ii) an understanding of the fundamentals of systems designed to store and access big data, and (iii) programming paradigms for efficient scalable access to big data.     The course aims to endow students with:    An understanding of the new challenges posed by the advent for big data, as they refer to its modelling, storage, and access, paying particular emphasis on the impact of the desiderata of scalability and efficiency in big data infrastructures.    Exposure to a number of different cloud data stores and their design and implementation details, showing how they can achieve efficiency and scalability, while also addressing design trade-offs and their impacts.    Familiarity with modern programming paradigms (e.g., MapReduce, RDDs, etc.), so to enable them to design and develop programs which can execute in massively parallel infrastructures in the cloud.    The ability to discuss and appraise the internals of (NoSQL) cloud data storage systems, and the ability to enrich these systems with additional functionality.    A deep knowledge of the latest evolutions in the field of big data systems.     By the end of this course students will be able to:    1.   Design, develop and evaluate   programs to access big data repositories in a massively parallel manner  ;    2.   Discuss  &nbsp;and   contrast  &nbsp;the internals of the design and implementation  &nbsp;of current cloud data storage and processing systems;     3.   Identify and   analyse  &nbsp;  issues related to the scalability and efficiency challenges   of  &nbsp;processing complex queries  \/algorithms  &nbsp;against big data systems  , and develop and assess ways of addressing said challenges;    4.   Explain and appraise state-of-the-art research in the field of big data systems.    5.   D  emonstrate that they have mastered the required background knowledge to pursue graduate studies in the fields of cloud systems and big data.  ","Scaling up Data Science  \n \nThis block aims to introduce the concepts required to deliver data science projects at scale, tackling problems which cannot be solved on a single computer. Learners will understand how to do this from a practical point of view as well as understanding the limitations of such approaches.\n \n   \n \n \u201cBig Data\u201d involves data whose volume, diversity and complexity requires new technologies, algorithms and analyses to extract valuable knowledge, which go beyond the normal processing capabilities of a single computer. The field of Big Data has many different faces such as databases, security and privacy, visualisation, computational infrastructure or data analytics\/mining some of which you will already have learned.&nbsp; This teaching block is about scaling that up, and making use of multiple machines, possibly in the cloud, to produce data science solutions.  This module will provide the following concepts:  1.&nbsp; Introduction to Big data: introducing the main principles behind distributed\/parallel systems with data intensive applications, identifying key challenges: capture, store, search, analyse and visualise the data.  2. Big Data frameworks and how to deal with big data: this includes the MapReduce programming model, as well as an overview of recent technologies (Hadoop ecosystem, and Apache Spark). Then, you will learn how to interact with the latest APIs of Apache Spark (RDDs, DataFrames and Datasets) to create distributed programs capable of dealing with big datasets (using Python and\/or Scala) &nbsp;  3. Finally, we will dive into the data mining and machine learning part of the course, including data preprocessing approaches (to obtain quality data), distributed machine learning algorithms and data stream algorithms. To do so, you will use the Machine learning library of Apache Spark (MLlib) to understand how some machine learning algorithms (e.g. Decision Trees, Random Forests, k-means) can be deployed at a scale.  Learners should consider whether there are relevant problems in their workplace that require the use of high performance computing and techniques to address Big Data problems (joining up with the on-the-job acctivity). \n \n  Teaching Goal 1Understand the principles that allow the processing of big data sets.Teaching Goal 2Understand the limitations of big data technologies for distributed processing.Teaching Goal 3Demonstrate practical skills required to implement big-data solutions using modern large-scale data and compute infrastructures.Teaching Goal 4Able to design and implement a data science software system that is efficient (in terms of cost and time), using appropriate techniques, tools and computational resources for processing the type and nature of data. KSBs K3. How data can be used systematically, through an awareness of key platforms for data and analysis in an organisation, including: &nbsp; &nbsp;&nbsp;&nbsp; Data processing and storage, including on-premise and cloud technologies. \t &nbsp;&nbsp;&nbsp; Database systems including relational, data warehousing &amp; online analytical processing, \u201cNoSQL\u201d and real-time approaches; the pros and cons of each approach. &nbsp; \t &nbsp;&nbsp;&nbsp; Data-driven decision making and the good use of evidence and analytics in making choices and decisions. K4. How to design, implement and optimise analytical algorithms \u2013 as prototypes and at production scale\u2013 using: &nbsp;&nbsp;&nbsp; Statistical and mathematical models and methods. &nbsp; \t &nbsp;&nbsp;&nbsp; Advanced and predictive analytics, machine learning and artificial intelligence techniques, simulations, optimisation, and automation. &nbsp; \t &nbsp;&nbsp;&nbsp; Applications such as computer vision and Natural Language Processing. \t &nbsp;&nbsp;&nbsp; An awareness of the computing and organisational resource constraints and trade-offs involved in selecting models, algorithms and tools. \t &nbsp;&nbsp;&nbsp; Development standards, including programming practice, testing, source control. K5. The data landscape: how to critically analyse, interpret and evaluate complex information from diverse datasets: &nbsp;&nbsp;&nbsp; Sources of data including but not exclusive to les, operational systems, databases, web services, open data, government data, news and social media. \t &nbsp;&nbsp;&nbsp; Data formats, structures and data delivery methods including \u201cunstructured\u201d data. \t &nbsp;&nbsp;&nbsp; Common patterns in real-world data. &nbsp; &nbsp;S1. Identify and clarify problems an organisation faces, and reformulate them into Data Science problems. Devise solutions and make decisions in context by seeking feedback from stakeholders. Apply scientific methods through experiment design, measurement, hypothesis testing and delivery of results. Collaborate with colleagues to gather requirements.S2. Perform data engineering: create and handle datasets for analysis. Use tools and techniques to source, access, explore, prole, pipeline, combine, transform and store data, and apply governance (quality control, security, privacy) to data.S3. Identify and use an appropriate range of programming languages and tools for data manipulation, analysis, visualisation, and system integration. Select appropriate data structures and algorithms for the problem. Develop reproducible analysis and robust code, working in accordance with software development standards, including security, accessibility, code quality and version control.S4. Use analysis and models to inform and improve organisational outcomes, building models and validating results with statistical testing: perform statistical analysis, correlation vs causation, feature selection and engineering, machine learning, optimisation, and simulations, using the appropriate techniques for the problem.S5. Implement data solutions, using relevant software engineering architectures and design patterns. Evaluate Cloud vs. on-premise deployment. Determine the implicit and explicit value of data. Assess value for money and Return on Investment. Scale a system up\/out. Evaluate emerging trends and new approaches. Compare the pros and cons of software applications and techniques.S7. Develop and maintain collaborative relationships at strategic and operational levels, using methods of organisational empathy (human, organisation and technical) and build relationships through active listening and trust development.S8. Use project delivery techniques and tools appropriate to their Data Science project and organisation. Plan, organise and manage resources to successfully run a small Data Science project, achieve organisational goals and enable effective change. &nbsp;&nbsp;B1. An inquisitive approach: the curiosity to explore new questions, opportunities, data, and techniques; tenacity to improve methods and maximise insights; and relentless creativity in their approach to solutions.B2. Empathy and positive engagement to enable working and collaborating in multi-disciplinary teams, championing and highlighting ethics and diversity in data work.B3. Adaptability and dynamism when responding to varied tasks and organisational timescales, and pragmatism in the face of real-world scenarios.B5. An impartial, scientific, hypothesis-driven approach to work, rigorous data analysis methods, and integrity in presenting data and conclusions in a truthful and appropriate manner."]}}